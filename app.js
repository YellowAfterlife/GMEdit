// Generated by Haxe 4.3.0
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		do {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) if(f(x.next())) {
		return true;
	}
	return false;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.getArgs = function() {
	var out = Object.create(null);
	var search = document.location.search;
	if(search != "") {
		var _g = 0;
		var _g1 = search.substring(1).split("&");
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			var eq = pair.indexOf("=");
			if(eq >= 0) {
				var s = pair.substring(eq + 1);
				var val = decodeURIComponent(s.split("+").join(" "));
				out[pair.substring(0,eq)] = val;
			} else {
				out[pair] = "";
			}
		}
	}
	return out;
};
Main.main = function() {
	Main.moduleArgs = Main.getArgs();
	haxe_Log.trace = function(v,infos) {
		var out = [v];
		if(infos != null) {
			out.unshift(infos.fileName + ":" + infos.lineNumber);
			if(infos.customParams != null) {
				var _g = 0;
				var _g1 = infos.customParams;
				while(_g < _g1.length) {
					var v = _g1[_g];
					++_g;
					out.push(v);
				}
			}
		}
		var console1 = window.console;
		$bind(console1,console1.log).apply(console1,out);
	};
	if(window.require != null) {
		var val = require("electron");
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_API");
		}
		window.Electron_API = val;
		var ver = window.parseInt(window.process.versions.electron);
		if(ver >= 14) {
			Electron_API.remote = require("@electron/remote");
		}
		var val = require("fs");
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_FS");
		}
		window.Electron_FS = val;
		var val = Electron_API.remote.dialog;
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_Dialog");
		}
		window.Electron_Dialog = val;
		electron_Dialog.initWorkarounds();
		var val = Electron_API.ipcRenderer;
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_IPC");
		}
		window.Electron_IPC = val;
		var val = Electron_API.shell;
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_Shell");
		}
		window.Electron_Shell = val;
		var val = Electron_API.remote.Menu;
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_Menu");
		}
		window.Electron_Menu = val;
		var val = Electron_API.remote.MenuItem;
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_MenuItem");
		}
		window.Electron_MenuItem = val;
		var val = Electron_API.remote.app;
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_App");
		}
		window.Electron_App = val;
		var val = Electron_API.remote.BrowserWindow;
		if(val == null) {
			throw haxe_Exception.thrown("Couldn't find Electron_BrowserWindow");
		}
		window.Electron_BrowserWindow = val;
		try {
			var val = require("./native/font-scanner/index.js");
			window.libFontScanner = val;
		} catch( _g ) {
			var x = haxe_Exception.caught(_g).unwrap();
			console.warn("font-scanner failed to load: ",x);
			var val = electron_FontScannerFallback;
			window.libFontScanner = val;
		}
		var ensure = function(dir) {
			if(!Electron_FS.existsSync(dir)) {
				Electron_FS.mkdirSync(dir);
			}
		};
		var path = Electron_App.getPath("userData") + "/GMEdit";
		electron_FileWrap.userPath = path;
		ensure(path);
		ensure(path + "/session");
		ensure(path + "/snippets");
		ensure(path + "/config");
		ensure(path + "/themes");
		ensure(path + "/plugins");
		ensure(path + "/api");
		ensure(path + "/api/v1");
		ensure(path + "/api/v2");
		ensure(path + "/api/live");
	} else {
		var val = null;
		window.Electron_API = val;
		var val = electron_FileSystemBrowser;
		window.Electron_FS = val;
		var val = null;
		window.Electron_IPC = val;
		var val = null;
		window.Electron_Shell = val;
		var val = electron_MenuFallback;
		window.Electron_Menu = val;
		var val = electron_MenuItemFallback;
		window.Electron_MenuItem = val;
		var val = null;
		window.Electron_App = val;
		var val = electron_FontScannerFallback;
		window.libFontScanner = val;
	}
	yy_YyJsonPrinter.init();
	if(Electron_API == null) {
		document.querySelector("#app").classList.add("app-browser");
	}
	Main.modulePath = window.__dirname;
	if(Main.modulePath == null) {
		Main.modulePath = ".";
		window.__dirname = ".";
	}
	ui_Preferences.init();
	file_FileKind.initStatic();
	file_kind_KGml.initSyntaxExtensions();
	gml_GmlVersion.init();
	gml_GmlAPI.init();
	shaders_ShaderAPI.init();
	parsers_GmlEvent.init();
	window.ace_mode_gml_0();
	ace_AceGmlHighlight.init();
	ace_AceMdHighlight.init();
	ace_AceHxHighlight.init();
	shaders_ShaderHighlight.init();
	window.ace_mode_gml_1();
	editors_Editor.init();
	ace_AceSnippets.init();
	ace_AceWrap.init();
	ui_CommandPalette.init();
	Main.aceEditor = ace_AceWrap._new(document.querySelector("#source"),{ isPrimary : true, dispatchEvent : false});
	window.aceEditor = Main.aceEditor;
	ace_AceCtxMenu.initMac(Main.aceEditor);
	editors_EditCode.currentNew = new gml_file_GmlFile("",null,file_kind_misc_KPlain.inst,"").editor;
	ui_KeyboardShortcuts.initGlobal();
	ui_ColorPicker.init();
	ui_GlobalSearch.init();
	ui_GlobalLookup.init();
	ui_TagEditor.init();
	ui_Sidebar.init();
	ui_MainMenu.init();
	var this1 = Main.aceEditor;
	var q = ui_WelcomePage.init(Main.aceEditor);
	this1.setSession(q);
	window.ace_mode_gml_2();
	ace_AceSessionData.init();
	ui_treeview_TreeView.init();
	ui_treeview_TreeViewMenus.init();
	ui_ProjectStyle.init();
	ui_FileDrag.init();
	ui_ChromeTabs.init();
	gml_Project.init();
	Main.aceEditor.statusBar.update();
	gml_Project.nameNode.innerText = "Loading plugins...";
	plugins_PluginManager.init(function() {
		gml_Project.nameNode.innerText = "Loading project...";
		gml_Project.openInitialProject();
		plugins_PluginManager.dispatchInitCallbacks();
	});
	console.log("hello!");
	tools_StartupTests.main();
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	do {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		return new haxe_iterators_ArrayIterator(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var ace_AceCommands = $hx_exports["AceCommands"] = function() { };
$hxClasses["ace.AceCommands"] = ace_AceCommands;
ace_AceCommands.__name__ = "ace.AceCommands";
ace_AceCommands.add = function(command) {
	Main.aceEditor.commands.addCommand(command);
};
ace_AceCommands.getKeybindString = function(editor,cmdName,kb) {
	var cmd = editor.commands.commands[cmdName];
	if(cmd == null) {
		return null;
	}
	var key = null;
	if(kb == null) {
		kb = cmd.bindKey;
	}
	if(kb == null) {
		kb = ace_extern__$AceHashHandler_AceHashHandlerHelper.getKeybindingsForCommand(editor.commands,cmdName)[0];
	}
	if(kb != null) {
		if(typeof(kb) == "string") {
			key = kb;
		} else if(electron_FileWrap.isMac) {
			key = kb.mac;
		} else {
			key = kb.win;
		}
	}
	if(key != null) {
		var p = key.indexOf("|");
		if(p >= 0) {
			key = key.substring(0,p);
		}
		var what = new RegExp("(?:^|\\b)(\\w)","g");
		key = key.replace(what,function(_,c) {
			return c.toUpperCase();
		});
	}
	return key;
};
ace_AceCommands.addToPalette = function(cmd) {
	var cmdName = cmd.exec;
	var editor = Main.aceEditor;
	if(typeof(cmdName) != "string") {
		throw haxe_Exception.thrown("Expected cmd.exec to be command name");
	}
	if(cmd.key == null) {
		cmd.key = ace_AceCommands.getKeybindString(editor,cmdName);
	}
	cmd.exec = function() {
		editor.execCommand(cmdName);
	};
	ui_CommandPalette.add(cmd);
};
ace_AceCommands.remove = function(command) {
	Main.aceEditor.commands.removeCommand(command);
};
ace_AceCommands.removeFromPalette = function(cmd) {
	ui_CommandPalette.remove(cmd);
};
ace_AceCommands.init = function(editor,isPrimary) {
	var commands = editor.commands;
	var show = function(cmdName,text,kb) {
		if(!isPrimary) {
			return;
		}
		var cmd = editor.commands.commands[cmdName];
		if(cmd == null) {
			console.warn("Command " + cmdName + " is amiss");
		}
		var key = ace_AceCommands.getKeybindString(editor,cmdName,kb);
		ui_CommandPalette.add({ name : text, exec : function() {
			editor.execCommand(cmdName);
		}, key : key});
	};
	var add = function(cmd,showAs) {
		commands.addCommand(cmd);
		if(showAs != null) {
			show(cmd.name,showAs);
		}
	};
	var bind = function(key,cmd,showAs) {
		commands.bindKey(key,cmd);
		if(showAs != null) {
			show(cmd,showAs,key);
		}
	};
	add({ name : "openDeclaration", bindKey : "F1|F12", exec : function(editor) {
		var pos = editor.getCursorPosition();
		var line = editor.getSession().getLine(pos.row);
		var col = pos.column;
		if(tools_CharCode.isIdent1_ni(line.charCodeAt(col)) && !tools_CharCode.isIdent1_ni(line.charCodeAt(col - 1))) {
			pos.column++;
		}
		var tk = editor.getSession().getTokenAt(pos.row,pos.column);
		ui_OpenDeclaration.proc(editor.getSession(),pos,tk);
	}});
	add({ name : "findReferences", bindKey : "Shift-F1|Shift-F12", exec : function(editor) {
		var pos = editor.getCursorPosition();
		var line = editor.getSession().getLine(pos.row);
		var col = pos.column;
		if(tools_CharCode.isIdent1_ni(line.charCodeAt(col)) && !tools_CharCode.isIdent1_ni(line.charCodeAt(col - 1))) {
			pos.column++;
		}
		var tk = editor.getSession().getTokenAt(pos.row,pos.column);
		if(tk != null) {
			ui_GlobalSearch.findReferences(tk.value);
		}
	}});
	add({ name : "saveFile", bindKey : { win : "Ctrl-S", mac : "Command-S"}, exec : function(editor) {
		var file = editor.getSession().gmlFile;
		if(file == null) {
			return;
		}
		file.save();
	}});
	add({ name : "startAutocomplete", exec : function(editor) {
		if(editor.completer != null) {
			editor.completer.showPopup(editor);
		}
	}, bindKey : "Ctrl-Space|Ctrl-Shift-Space|Alt-Space"});
	add({ name : "showKeyboardShortcuts", bindKey : { win : "Ctrl-Alt-h", mac : "Command-Alt-h"}, exec : function(editor) {
		ace.config.loadModule("ace/ext/keybinding_menu",function(module) {
			module.init(editor);
			editor.showKeyboardShortcuts();
		});
	}},"Show keyboard mappings");
	bind({ win : "Ctrl-Enter", mac : "Command-Enter"},"toggleFoldWidget");
	var rxFoldRegion = new RegExp("^\\s*(?://)?#region\\b");
	var foldSubRegions = null;
	foldSubRegions = function(session,startRow,endRow,depth) {
		if(depth == null) {
			depth = 0;
		}
		var foldWidgets = session.foldWidgets;
		var row = startRow - 1;
		while(++row < endRow) {
			if(foldWidgets[row] == null) {
				foldWidgets[row] = session.getFoldWidget(row);
			}
			if(foldWidgets[row] != "start") {
				continue;
			}
			if(!rxFoldRegion.test(session.getLine(row))) {
				continue;
			}
			var range = session.getFoldWidgetRange(row);
			if(range != null && range.isMultiLine() && range.end.row <= endRow && range.start.row >= startRow) {
				row = range.end.row;
				if(depth < 128) {
					foldSubRegions(session,range.start.row + 1,range.end.row,depth + 1);
				}
				try {
					session.addFold("...",range);
				} catch( _g ) {
				}
			}
		}
	};
	add({ name : "foldallregions", bindKey : { win : "Ctrl-Shift-M", mac : "Command-Shift-M"}, exec : function(editor) {
		var session = editor.getSession();
		var foldWidgets = session.foldWidgets;
		if(foldWidgets == null) {
			return;
		}
		var startRow = 0;
		var endRow = session.getLength();
		foldSubRegions(session,startRow,endRow);
	}},"Fold Regions");
	bind({ win : "Ctrl-M", mac : "Command-M"},"foldall","Fold All");
	bind({ win : "Ctrl-U", mac : "Command-U"},"unfoldall","Unfold All");
	bind({ win : "Ctrl-Alt-Up", mac : "Command-Alt-Up"},"movelinesup");
	bind({ win : "Ctrl-Alt-Down", mac : "Command-Alt-Down"},"movelinesdown");
	bind({ win : "Alt-Shift-Up", mac : "Alt-Shift-Up"},"addCursorAbove");
	bind({ win : "Alt-Shift-Down", mac : "Alt-Shift-Down"},"addCursorBelow");
	bind({ win : "Ctrl-K", mac : "Command-K"},"togglecomment");
	bind({ win : "Ctrl-D", mac : "Command-D"},"duplicateSelection");
	bind({ win : "Ctrl-Shift-D", mac : "Command-Shift-D"},"removeline");
	var findRxs = "^#define\\b|^#event\\b|^#moment\\b|^#section\\b";
	var findRx0 = new RegExp("(?:" + findRxs + "|#region\\b|//{|//#region\\b|//#mark\\b)");
	var findFoldImpl = function(editor,fwd,select) {
		var session = editor.getSession();
		var row = editor.selection.lead.row;
		var steps = fwd ? session.getLength() - 1 - row : row;
		var delta = fwd ? 1 : -1;
		var rx = findRx0;
		while(--steps >= 0) {
			row += delta;
			if(session.getFoldAt(row,0) != null) {
				continue;
			}
			if(!rx.test(session.getLine(row))) {
				continue;
			}
			var col = session.getLine(row).length;
			if(select) {
				editor.selection.selectTo(row,0);
			} else {
				editor.gotoLine(row + 1,col);
			}
			break;
		}
	};
	add({ name : "gotoNextFoldRegion", bindKey : { win : "Ctrl-Down", mac : "Command-Down"}, exec : function(editor) {
		findFoldImpl(editor,true,false);
	}},"Next fold region");
	add({ name : "gotoPreviousFoldRegion", bindKey : { win : "Ctrl-Up", mac : "Command-Up"}, exec : function(editor) {
		findFoldImpl(editor,false,false);
	}},"Previous fold region");
	add({ name : "selectNextFoldRegion", bindKey : { win : "Ctrl-Shift-Down", mac : "Command-Shift-Down"}, exec : function(editor) {
		findFoldImpl(editor,true,true);
	}});
	add({ name : "selectPreviousFoldRegion", bindKey : { win : "Ctrl-Shift-Up", mac : "Command-Shift-Up"}, exec : function(editor) {
		findFoldImpl(editor,false,true);
	}});
	commands.removeCommand("gotoline");
	add({ name : "gotoline", bindKey : { win : "Ctrl-G", mac : "Command-G"}, exec : function(editor) {
		ace.config.loadModule("ace/ext/searchbox",function(e) {
			ace_AceGotoLine.run(editor);
		});
	}},"Go to line...");
	var _g = 0;
	while(_g < 9) {
		var i = [_g++];
		var d = (i[0] + 1) % 10;
		var add1 = add;
		var tmp = "gotoBookmark" + i[0];
		var tmp1 = (function(i) {
			return function(editor) {
				ui_ext_Bookmarks.open(editor,i[0]);
			};
		})(i);
		add1({ name : tmp, bindKey : { win : "Alt-" + d, mac : "Ctrl-" + d}, exec : tmp1},"Go to bookmark " + (i[0] + 1));
		var add2 = add;
		var tmp2 = "toggleBookmark" + i[0];
		var tmp3 = (function(i) {
			return function(editor) {
				ui_ext_Bookmarks.toggle(editor,i[0]);
			};
		})(i);
		add2({ name : tmp2, bindKey : { win : "Alt-Shift-" + d, mac : "Ctrl-Shift-" + d}, exec : tmp3},"Toggle bookmark " + (i[0] + 1));
	}
	show("showSettingsMenu","Code editor preferences");
};
var ace_AceCtxMenu = function() {
	this.menu = new Electron_Menu();
};
$hxClasses["ace.AceCtxMenu"] = ace_AceCtxMenu;
ace_AceCtxMenu.__name__ = "ace.AceCtxMenu";
ace_AceCtxMenu.initMac = function(editor) {
	if(Electron_API == null || !electron_FileWrap.isMac) {
		return;
	}
	var menu = new Electron_Menu();
	electron_MenuFallback.appendOpt(menu,{ id : "sub-edit", label : "Edit", submenu : editor.contextMenu.menu});
	Electron_Menu.setApplicationMenu(menu);
};
ace_AceCtxMenu.prototype = {
	bind: function(editor) {
		var _gthis = this;
		this.editor = editor;
		editor.contextMenu = this;
		var pos = null;
		var tk = null;
		var commandAccels = Object.create(null);
		var _g = 0;
		var _g1 = Reflect.fields(editor.commands.commandKeyBinding);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			k = k.charAt(0).toUpperCase() + k.substring(1);
			var what = /-(\w)/g;
			k = k.replace(what,function(_,c) {
				return "+" + c.toUpperCase();
			});
			var _g2 = 0;
			var _g3 = ace_extern__$AceHashHandler_AceHashHandlerHelper.getCommandNamesForKeybinding(editor.commands,k);
			while(_g2 < _g3.length) commandAccels[_g3[_g2++]] = k;
		}
		var cmdItem = function(cmd,label,silkIcon) {
			var item = new Electron_MenuItem({ id : cmd, accelerator : commandAccels[cmd], label : label, icon : silkIcon != null ? Main.modulePath + ("/icons/silk/" + silkIcon + ".png") : null, click : function() {
				editor.execCommand(cmd);
			}});
			item.aceCommand = cmd;
			return item;
		};
		var edit = this.editMenu = new Electron_Menu();
		edit.append(cmdItem("duplicateSelection","Duplicate selection"));
		electron_MenuFallback.appendOpt(this.menu,{ id : "sub-edit", type : "submenu", label : "Edit", submenu : edit});
		var search = this.searchMenu = new Electron_Menu();
		search.append(cmdItem("find","Quick find","page_white_find"));
		search.append(cmdItem("replace","Find and replace...","magnifier"));
		electron_MenuFallback.appendOpt(search,{ id : "global-search", label : "Global find and replace...", icon : Main.modulePath + ("/icons/silk/" + "folder_explore" + ".png"), accelerator : "CommandOrControl+Shift+F", click : function() {
			ui_GlobalSearch.toggle();
		}});
		search.append(cmdItem("gotoline","Goto line...","arrow_right"));
		search.append(cmdItem("gotoPreviousFoldRegion","Goto previous fold","arrow_up"));
		search.append(cmdItem("gotoNextFoldRegion","Goto next fold","arrow_down"));
		electron_MenuFallback.appendOpt(this.menu,{ id : "sub-search", type : "submenu", label : "Search", submenu : search});
		electron_MenuFallback.appendSep(this.menu,"sep-definition");
		var autofixToken = function() {
			if(tk == null) {
				return;
			}
			if(tk.value.trim() != "") {
				return;
			}
			pos.column++;
			tk = editor.getSession().getTokenAt(pos.row,pos.column);
			if(tk.value.trim() == "") {
				tk = null;
			}
		};
		var opt = { id : "open-definition", label : "Open definition", icon : Main.modulePath + ("/icons/silk/" + "brick_go" + ".png"), accelerator : "F1", click : function() {
			autofixToken();
			if(tk != null) {
				ui_OpenDeclaration.proc(editor.getSession(),pos,tk);
			}
		}};
		electron_MenuFallback.appendOpt(this.menu,opt);
		var opt = { id : "find-references", label : "Find references", icon : Main.modulePath + ("/icons/silk/" + "find_references" + ".png"), accelerator : "Shift+F1", click : function() {
			autofixToken();
			if(tk != null) {
				ui_GlobalSearch.findReferences(tk.value);
			}
		}};
		electron_MenuFallback.appendOpt(this.menu,opt);
		electron_MenuFallback.appendSep(this.menu,"sep-history");
		var undo = cmdItem("undo","Undo","arrow_undo");
		this.menu.append(undo);
		var redo = cmdItem("redo","Redo","arrow_redo");
		this.menu.append(redo);
		if(Electron_API != null) {
			electron_MenuFallback.appendSep(this.menu,"sep-clipboard");
			var opt = { id : "cut", label : "Cut", role : "cut", icon : Main.modulePath + ("/icons/silk/" + "cut" + ".png"), accelerator : "CommandOrControl+X", click : function() {
				if(!editor.selection.isEmpty()) {
					Electron_API.clipboard.writeText(editor.getSelectedText());
				}
				editor.execCommand("cut");
			}};
			electron_MenuFallback.appendOpt(this.menu,opt);
			var opt = { id : "copy", label : "Copy", role : "copy", icon : Main.modulePath + ("/icons/silk/" + "page_copy" + ".png"), accelerator : "CommandOrControl+C", click : function() {
				if(!editor.selection.isEmpty()) {
					Electron_API.clipboard.writeText(editor.getSelectedText());
				}
				editor.execCommand("copy");
			}};
			electron_MenuFallback.appendOpt(this.menu,opt);
			var opt = { id : "paste", label : "Paste", role : "paste", icon : Main.modulePath + ("/icons/silk/" + "page_paste" + ".png"), accelerator : "CommandOrControl+V", click : function() {
				editor.execCommand("paste",Electron_API.clipboard.readText());
			}};
			electron_MenuFallback.appendOpt(this.menu,opt);
		}
		electron_MenuFallback.appendSep(this.menu,"sep-select");
		this.menu.append(cmdItem("selectall","Select all"));
		editor.container.addEventListener("contextmenu",function(ev) {
			ev.preventDefault();
			pos = editor.getCursorPosition();
			tk = editor.getSession().getTokenAt(pos.row,pos.column);
			var um = editor.getSession().getUndoManager();
			undo.enabled = um.hasUndo();
			redo.enabled = um.hasRedo();
			var _this = _gthis.menu;
			electron_MenuFallback.contextEvent = ev;
			_this.popup({ async : true, callback : null});
			return false;
		});
	}
	,__class__: ace_AceCtxMenu
};
var ace_AceGmlContextResolver = function() { };
$hxClasses["ace.AceGmlContextResolver"] = ace_AceGmlContextResolver;
ace_AceGmlContextResolver.__name__ = "ace.AceGmlContextResolver";
ace_AceGmlContextResolver.run = function(session,pos,selfOnly) {
	var tillRow = pos.row;
	var tillCol = pos.column;
	var editor = session.gmlEditor;
	var scope = session.gmlScopes.get(tillRow);
	var startRow = tillRow;
	while(startRow > 0) if(session.gmlScopes.get(startRow - 1) == scope) {
		--startRow;
	} else {
		break;
	}
	var iter = new AceTokenIterator(session,tillRow,tillCol);
	var iter_tk;
	var brackets = [];
	var lt = null;
	var ltReader = null;
	while(true) {
		iter_tk = iter.stepBackward();
		if(!(iter_tk != null)) {
			break;
		}
		var iter_row = iter.getCurrentTokenRow();
		if(iter_row < startRow) {
			break;
		}
		switch(iter_tk.type) {
		case "curly.paren.lparen":
			brackets.push({ delta : -1, col : iter.getCurrentTokenColumn(), row : iter_row});
			break;
		case "curly.paren.rparen":
			brackets.push({ delta : 1, col : iter.getCurrentTokenColumn(), row : iter_row});
			break;
		case "keyword":
			if(iter_tk.value == "with") {
				var iter_col = iter.getCurrentTokenColumn();
				if(lt == null) {
					lt = new parsers_linter_GmlLinter();
					lt.runPre("",editor,gml_GmlAPI.version);
					ltReader = lt.reader;
					ltReader.onEOF = function(r) {
						var nrow = r.row + 1;
						if(nrow > tillRow) {
							return null;
						}
						if(nrow == tillRow) {
							return session.getLine(tillRow).substring(0,tillCol);
						} else {
							return session.getLine(nrow);
						}
					};
					lt.seqStart.onEOF = function(r) {
						var nrow = r.row + 1;
						if(nrow > tillRow) {
							return null;
						}
						if(nrow == tillRow) {
							return session.getLine(tillRow).substring(0,tillCol);
						} else {
							return session.getLine(nrow);
						}
					};
					lt.__peekReader.onEOF = function(r) {
						var nrow = r.row + 1;
						if(nrow > tillRow) {
							return null;
						}
						if(nrow == tillRow) {
							return session.getLine(tillRow).substring(0,tillCol);
						} else {
							return session.getLine(nrow);
						}
					};
				}
				lt.set_context(scope);
				ltReader.source = session.getLine(iter_row);
				ltReader.length = ltReader.source.length;
				ltReader.pos = iter_col + iter_tk.value.length;
				ltReader.row = iter_row;
				ltReader.rowStart = 0;
				lt.expr.read(0,0,null,null);
				var type = lt.expr.currType;
				if(!lt.readLoopStat(0)) {
					continue;
				}
				if(ltReader.get_loop()) {
					return { self : null, other : null};
				}
				return { self : type, other : selfOnly ? null : ace_AceGmlContextResolver.run(session,iter.getCurrentTokenPosition(),true).self};
			}
			break;
		}
	}
	var gmlFile = session.gmlFile;
	var tmp;
	if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
		tmp = gml_type_GmlTypeDef.simple(gmlFile.name);
	} else {
		var scopeDoc = gml_GmlAPI.gmlDoc[((scope) || (gmlFile.name))];
		tmp = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(scope) : scopeDoc.selfType : null;
	}
	return { self : tmp, other : StringTools.startsWith(scope,"collision:") ? gml_type_GmlTypeDef.object(scope.substring("collision:".length)) : null};
};
var ace_extern_AceHighlight = function() {
	this.editor = editors_EditCode.currentNew;
};
$hxClasses["ace.extern.AceHighlight"] = ace_extern_AceHighlight;
ace_extern_AceHighlight.__name__ = "ace.extern.AceHighlight";
ace_extern_AceHighlight.__super__ = AceHighlightImpl;
ace_extern_AceHighlight.prototype = $extend(AceHighlightImpl.prototype,{
	__class__: ace_extern_AceHighlight
});
var ace_AceGmlHighlight = $hx_exports["AceGmlHighlight"] = function() {
	ace_extern_AceHighlight.call(this);
	this.$rules = ace_AceGmlHighlight.makeRules(editors_EditCode.currentNew);
	this.normalizeRules();
};
$hxClasses["ace.AceGmlHighlight"] = ace_AceGmlHighlight;
ace_AceGmlHighlight.__name__ = "ace.AceGmlHighlight";
ace_AceGmlHighlight.makeRules = function(editor,version) {
	if(version == null) {
		version = gml_GmlAPI.version;
	}
	var rules = null;
	var fakeMultiline = false;
	var fieldDef = "localfield";
	if(((editor.kind) instanceof file_kind_gml_KGmlSearchResults)) {
		fakeMultiline = true;
	}
	if(((editor.kind) instanceof file_kind_misc_KMarkdown)) {
		fieldDef = "md-pre-gml";
	}
	var rwnext = function(ruleToCopy,newNext) {
		return { token : ruleToCopy.token, regex : ruleToCopy.regex, next : newNext};
	};
	var rIdentLocal = ace_gml_AceGmlHighlightIdents.genIdent(editor,false,fieldDef);
	var rIdentLocalMFunc = ace_gml_AceGmlHighlightIdents.genIdent(editor,true,fieldDef);
	var rIdentPair = ace_gml_AceGmlHighlightIdents.genIdentPair(editor,false,fieldDef);
	var rIdentPairMFunc = ace_gml_AceGmlHighlightIdents.genIdentPair(editor,true,fieldDef);
	var mtEventHead = function(def,_,name,col,kind,label) {
		var kindToken;
		if(kind != null) {
			var kc = kind.charCodeAt(0);
			if(kc >= 48 && kc <= 57) {
				kindToken = "numeric";
			} else {
				kindToken = ((((gml_GmlAPI.gmlKind[kind] || gml_GmlAPI.extKind[kind]) || gml_GmlAPI.stdKind[kind]) || synext_GmlExtCoroutines.keywordMap[kind]) || "identifier");
			}
		} else {
			kindToken = "identifier";
		}
		return ["preproc.event","text","eventname","punctuation.operator",kindToken,"eventtext"];
	};
	var mtField = function(_,_1,field) {
		return ["punctuation.operator","text",((((gml_GmlAPI.gmlKind[field] || gml_GmlAPI.extKind[field]) || gml_GmlAPI.stdKind[field]) || synext_GmlExtCoroutines.keywordMap[field]) || "field")];
	};
	var mtIdent = function(ident) {
		return ((((gml_GmlAPI.gmlKind[ident] || gml_GmlAPI.extKind[ident]) || gml_GmlAPI.stdKind[ident]) || synext_GmlExtCoroutines.keywordMap[ident]) || fieldDef);
	};
	var rPragma_call = { regex : "(gml_pragma)(\\s*)(\\()(\\s*)" + "(\"global\"|'global')(\\s*)(,)(\\s*)(@?)(\"|')", onMatch : function(value,state,stack,line,row) {
		var values = this.splitRegex.exec(value);
		stack.push(state);
		var rPragma_call = values[10] == "\"" ? "gml.pragma.dq" : "gml.pragma.sq";
		this.nextState = rPragma_call;
		return [tools_HighlightTools.rtk("function",values[1]),tools_HighlightTools.rtk("text",values[2]),tools_HighlightTools.rtk("paren.lparen",values[3]),tools_HighlightTools.rtk("text",values[4]),tools_HighlightTools.rtk("string",values[5]),tools_HighlightTools.rtk("text",values[6]),tools_HighlightTools.rtk("punctuation.operator",values[7]),tools_HighlightTools.rtk("text",values[8]),tools_HighlightTools.rtk("punctuation.operator",values[9]),tools_HighlightTools.rtk("string",values[10])];
	}, next : function(current,stack) {
		if(current != "start" || stack.length > 0) {
			stack.unshift(current);
			stack.unshift(this.nextState);
		}
		return this.nextState;
	}};
	var rDocHint = { regex : /(\/\/\/\s*)(@hint\b)(\s*)(.*)/, onMatch : ace_gml_AceGmlDocHint.match};
	var rDefine = tools_HighlightTools.rule(["preproc.define","scriptname"],"^(#define[ \t]+)(\\w+)",null);
	var rTarget = tools_HighlightTools.rule(["preproc.target"],"^(#target[ \t]+)",null);
	var rPragma = tools_HighlightTools.rule(["preproc.pragma","keyword","string"],"^(#pragma\\b[ \t]*)(\\w*[ \t]*)(.*)",null);
	var rAction = tools_HighlightTools.rule(["preproc.action","actionname"],"^(#action\\b[ \t]*)(\\w*)",null);
	var rKeyEvent = tools_HighlightTools.rulePairs(["^#event","preproc.event","[ \\t]+","text","keyboard|keypress|keyrelease","eventname","\\s*:\\s*","eventsep.punctuation.operator","\\w*","eventkeyname",".*","eventtext"]);
	var rEvent = tools_HighlightTools.rule(mtEventHead,"^(#event)([ \t]+)(\\w+)(?:(:)(\\w+)?)?((?:\\b.+)?)",null);
	var rMoment = tools_HighlightTools.rule(["preproc.moment","momenttime","momentname"],"^(#moment[ \t]+)(\\d+)(.*)",null);
	var rSection = tools_HighlightTools.rule(["preproc.section","sectionname"],"^(#section[ \t]*)(.*)",null);
	var commentDocLineType = "comment.doc.line";
	var rGmlComment = fakeMultiline ? tools_HighlightTools.rule(["comment","comment.preproc","comment"],"(/\\*(?://)?\\s*)(#gml)(.*?(?:\\*/|$))",null) : tools_HighlightTools.rpush(["comment","comment.preproc"],"(/\\*(?://)?\\s*)(#gml)","gml.comment.gml");
	var rBase = tools_HighlightTools.rpush(function(s) {
		commentDocLineType = "comment.doc.line.startswith_" + s;
		return commentDocLineType;
	},"///([^\\s@]+)","gml.comment.doc.line");
	var rBase1 = tools_HighlightTools.rpush(function(_) {
		commentDocLineType = "comment.doc.line";
		return "comment.doc.line";
	},"///","gml.comment.doc.line");
	var rBase2 = [tools_HighlightTools.rule(["comment","comment.preproc.region","comment.regionname"],"(//)(#(?:region|endregion|mark)\\b)(.*)$",null),tools_HighlightTools.rule("comment.doc.line","///$",null),rDocHint,tools_HighlightTools.rule(function(s) {
		return "comment.doc.line.startswith_" + s;
	},"///([^\\s@]+)(?:(?!@\\[).)*$",null),rBase,rBase1,tools_HighlightTools.rule("comment.line","//$",null),tools_HighlightTools.rpush("comment.line","//","gml.comment.line"),rGmlComment,tools_HighlightTools.rule("comment.doc","/\\*\\*/",null),fakeMultiline ? tools_HighlightTools.rule("comment.doc","/\\*\\*.*?(?:\\*/|$)",null) : tools_HighlightTools.rpush("comment.doc","/\\*\\*","gml.comment.doc"),fakeMultiline ? tools_HighlightTools.rule("comment","/\\*.*?(?:\\*/|$)",null) : tools_HighlightTools.rpush("comment","/\\*","gml.comment"),rDefine,rAction,rKeyEvent,rEvent,tools_HighlightTools.rule(["preproc.event","eventname"],"^(#event)([ \t]*)",null),rMoment,rTarget].concat(version.config.hasPragma ? [rPragma] : []).concat([tools_HighlightTools.rpushPairs(["#macro","preproc.macro","\\s+","text","\\w+","configname","\\s*","text",":","punctuation.operator","\\s*","text","\\w+","macroname"],"gml.mfunc"),tools_HighlightTools.rpushPairs(["#macro","preproc.macro","\\s+","text","\\w+","macroname"],"gml.mfunc"),tools_HighlightTools.rule("preproc.macro","#macro\\b",null),tools_HighlightTools.rpushPairs(["#mfunc","preproc.mfunc","\\s+","text","\\w+","macroname","\\s*","text","\\(","paren.lparen"],"gml.mfunc.decl"),tools_HighlightTools.rule(["preproc.mfunc","text","macroname"],"(#mfunc)(\\s+)(\\w+)",null),tools_HighlightTools.rule("preproc.mfunc","#mfunc\\b",null),tools_HighlightTools.rulePairs(["#import\\s+","preproc.import","\"[^\"]*\"|'[^']*'","string.importpath"]),tools_HighlightTools.rpush("preproc.import","#import\\b","gml.import"),tools_HighlightTools.rule("preproc.args","#args\\b",null),tools_HighlightTools.rule(["preproc.hyper","comment.hyper"],"(#hyper\\b)(.*)",null),tools_HighlightTools.rule(["preproc.lambda","text","scriptname"],"(#(?:lambda|lamdef)\\b)([ \t]*)(\\w*)",null),tools_HighlightTools.rule("preproc.gmcr","#gmcr\\b",null)]);
	if(version.config.hasRegions) {
		rBase2.push(tools_HighlightTools.rule(["preproc.region","regionname"],"(#region[ \t]*)(.*)",null));
		rBase2.push(tools_HighlightTools.rule(["preproc.region","regionname"],"(#endregion[ \t]*)(.*)",null));
	}
	rBase2.push(rSection);
	if(version.hasStringEscapeCharacters()) {
		rBase2.push(tools_HighlightTools.rpush("string","\"","gml.string.esc"));
	} else {
		rBase2.push(tools_HighlightTools.rpush("string","\"","gml.string.dq"));
	}
	if(version.hasSingleQuoteStrings()) {
		rBase2.push(tools_HighlightTools.rpush("string","'","gml.string.sq"));
	}
	if(version.hasLiteralStrings()) {
		rBase2.push(tools_HighlightTools.rpush("string","@\"","gml.string.dq"));
		rBase2.push(tools_HighlightTools.rpush("string","@'","gml.string.sq"));
	}
	if(version.hasTemplateStrings()) {
		rBase2.push(tools_HighlightTools.rpush("string","`","gml.string.tpl"));
	}
	if(version.hasQuoteTemplateStrings()) {
		rBase2.push(tools_HighlightTools.rpush("string","\\$\"","gml.string.tpl.dq"));
	}
	var rCurlyOpen = { regex : "\\{", onMatch : function(value,state,stack,line,row) {
		if(ace_AceGmlHighlight.useBracketDepth) {
			return "curly.paren.lparen.depth" + ace_gml_AceGmlState.getDepth(state);
		}
		return "curly.paren.lparen";
	}, next : function(current,stack) {
		if(ace_AceGmlHighlight.useBracketDepth) {
			return ace_gml_AceGmlState.adjustDepth(current,1);
		}
		return current;
	}};
	var rCurlyClose = { regex : "\\}", onMatch : function(value,state,stack,line,row) {
		if(ace_AceGmlHighlight.useBracketDepth) {
			return "curly.paren.rparen.depth" + (ace_gml_AceGmlState.getDepth(state) - 1);
		}
		return "curly.paren.rparen";
	}, next : function(current,stack) {
		if(ace_AceGmlHighlight.useBracketDepth) {
			return ace_gml_AceGmlState.adjustDepth(current,-1);
		}
		return current;
	}};
	if(ui_Preferences.current.hashColorLiterals) {
		rBase2 = rBase2.concat([tools_HighlightTools.rule(["square.paren.lparen","text"],"(\\[)(#)",null),tools_HighlightTools.rule("numeric","#[0-9a-fA-F]{6,6}\\b",null)]);
	}
	var rBase = tools_HighlightTools.rule(function(goto,_,label) {
		if(synext_GmlExtCoroutines.enabled) {
			return ["keyword","text","flowlabel"];
		} else {
			return [mtIdent(goto),"text",mtIdent(label)];
		}
	},"(goto|label)(\\s+)(\\w+)",null);
	var rBase1 = tools_HighlightTools.rmatch(function(value,state,stack,line,row) {
		var mt = this.splitRegex.exec(value);
		var idt = ace_gml_AceGmlHighlightIdents.matchIdent(editor,row,mt[3],fieldDef,false);
		return [tools_HighlightTools.rtk("punctuation.operator",mt[1]),tools_HighlightTools.rtk("text",mt[2]),tools_HighlightTools.rtk(idt,mt[3]),tools_HighlightTools.rtk("text",mt[4]),tools_HighlightTools.rtk("punctuation.operator",mt[5])];
	},"(\\?)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)",null);
	var rBase3 = tools_HighlightTools.rmatch(function(value,state,stack,line,row) {
		var mt = this.splitRegex.exec(value);
		var idt = ace_gml_AceGmlHighlightIdents.matchIdent(editor,row,mt[3],fieldDef,false);
		return [tools_HighlightTools.rtk("keyword",mt[1]),tools_HighlightTools.rtk("text",mt[2]),tools_HighlightTools.rtk(idt,mt[3]),tools_HighlightTools.rtk("text",mt[4]),tools_HighlightTools.rtk("punctuation.operator",mt[5])];
	},"(case)(\\s+)([a-zA-Z_]\\w*)(\\s*)(:)",null);
	var rBase4 = tools_HighlightTools.rmatch(function(value,state,stack,line,row) {
		var mt = this.splitRegex.exec(value);
		var idt = ace_gml_AceGmlHighlightIdents.matchIdent(editor,row,mt[1],fieldDef,false);
		if(idt == "typeerror") {
			idt = fieldDef;
		}
		return [tools_HighlightTools.rtk(idt,mt[1]),tools_HighlightTools.rtk("text",mt[2]),tools_HighlightTools.rtk("punctuation.operator",mt[3])];
	},"([a-zA-Z_]\\w*)(\\s*)(:)",null);
	var rParOpen = tools_HighlightTools.rule("paren.lparen","\\(",null);
	rBase2 = rBase2.concat([tools_HighlightTools.rule("numeric","\\$[_0-9a-fA-F]+",null),tools_HighlightTools.rule("numeric","0x[_0-9a-fA-F]*",null),tools_HighlightTools.rule("numeric","0b[_01]*",null),tools_HighlightTools.rule("numeric","\\d[\\d_]*(?:\\.[\\d_]*)?",null),tools_HighlightTools.rule("constant.boolean","(?:true|false)\\b",null),tools_HighlightTools.rpush(["keyword","text","enum"],"(enum)(\\s+)(\\w+)","gml.enum"),rBase,rPragma_call,rBase1,rBase3,rBase4,rIdentPair,rIdentLocal,tools_HighlightTools.rule(mtField,"(\\.)(\\s*)([a-zA-Z_][a-zA-Z0-9_]*)",null),tools_HighlightTools.rule(mtIdent,"[a-zA-Z_][a-zA-Z0-9_]*\\b",null),tools_HighlightTools.rule("operator","==",null),tools_HighlightTools.rule("set.operator","=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=",null),tools_HighlightTools.rule("operator","!|%|&|@|\\*|\\-\\-|\\-|\\+\\+|\\+|~|!=|<=|>=|<>|<|>|!|&&|\\|\\|",null),tools_HighlightTools.rule("punctuation.operator","\\?|:|,|;|\\.",null),rCurlyOpen,rCurlyClose,tools_HighlightTools.rule("square.paren.lparen","\\[",null),tools_HighlightTools.rule("square.paren.rparen","\\]",null),rParOpen,tools_HighlightTools.rule("paren.rparen","\\)",null),tools_HighlightTools.rdef("text")]);
	if(gml_GmlAPI.stdKind["new"] == "keyword") {
		tools_NativeArray.insertBefore(rBase2,tools_HighlightTools.rule(["paren.rparen","text","keyword"],"(\\))(\\s*)(constructor)",null),rParOpen);
	}
	var rEnum = [tools_HighlightTools.rpush(["enumfield","text","set.operator"],"(\\w+)(\\s*)(=)","gml.enumvalue"),tools_HighlightTools.rule(["enumfield","text","punctuation.operator"],"(\\w+)(\\s*)(,)",null),tools_HighlightTools.rule(["enumfield","text"],"(\\w+)(\\s*)$",null),tools_HighlightTools.rule(["enumfield","text","curly.paren.rparen"],"(\\w+)(\\s*)(\\})","pop"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(rBase2);
	if(fakeMultiline) {
		rEnum.unshift(tools_HighlightTools.rule("text","$","pop"));
	}
	var rEnumValue = tools_HighlightTools.rule("curly.paren.rparen","\\}",function(currentState,stack) {
		stack.shift();
		stack.shift();
		if(stack.length > 0) {
			return stack.shift();
		} else {
			return ace_gml_AceGmlState.changeState(currentState,"start");
		}
	});
	var rEnumValue1 = [tools_HighlightTools.rule("punctuation.operator",",","pop"),rEnumValue].concat(rBase2);
	var rCommentPop = [rwnext(rDefine,"pop"),rwnext(rAction,"pop"),rwnext(rSection,"pop"),rwnext(rMoment,"pop"),rwnext(rKeyEvent,"pop"),rwnext(rEvent,"pop"),rwnext(rTarget,"pop")];
	var rComment = [tools_HighlightTools.rule("comment.link","@\\[" + "[^\\[]*" + "\\]"),tools_HighlightTools.rule("comment.link.url","https?://(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)",null)];
	var getNamespaceType = function(name) {
		var ns = gml_GmlAPI.gmlNamespaces[name];
		return ((((((ns) && ((ns.isObject ? "asset.object" : "namespace")))) || (gml_GmlAPI.gmlKind[name]))) || ("text"));
	};
	var rPragma_sq = [tools_HighlightTools.rule("string","'","pop")].concat(rBase2);
	var rPragma_dq = [tools_HighlightTools.rule("string","\"","pop")].concat(rBase2);
	var rString_sq = [tools_HighlightTools.rule("string",".*?[']","pop"),tools_HighlightTools.rule("string",".+",null)];
	var rString_dq = [tools_HighlightTools.rule("string",".*?[\"]","pop"),tools_HighlightTools.rule("string",".+",null)];
	var rString_esc = [tools_HighlightTools.rule("string.escape","\\\\(?:" + "x[0-9a-fA-F]{2}|" + "u[0-9a-fA-F]{4}|" + ".)"),{ token : "string", regex : "\\\\$", consumeLineEnd : true},tools_HighlightTools.rule("string","\"|$","pop"),tools_HighlightTools.rdef("string")];
	var rString_tpl_id = { regex : "(\\$)([a-zA-Z_]\\w*)", onMatch : function(value,state,stack,line,row) {
		value = value.substring(1);
		var type = ace_gml_AceGmlHighlightIdents.getLocalType(editor,row,value,true);
		if(type == null) {
			type = ((((gml_GmlAPI.gmlKind[value] || gml_GmlAPI.extKind[value]) || gml_GmlAPI.stdKind[value]) || synext_GmlExtCoroutines.keywordMap[value]) || fieldDef);
		}
		return [tools_HighlightTools.rtk("string","$"),tools_HighlightTools.rtk(type,value)];
	}};
	var rString_tpl = [tools_HighlightTools.rpush(["string","curly.paren.lparen"],"(\\$)(\\{)","gml.tpl"),rString_tpl_id,tools_HighlightTools.rule("string","[`]","pop"),tools_HighlightTools.rdef("string")];
	var rString_tpl_dq = [tools_HighlightTools.rpush(["curly.paren.lparen"],"(\\{)","gml.tpl")].concat(rString_esc);
	if(fakeMultiline) {
		var eol = tools_HighlightTools.rule("string",".*?$","pop");
		rPragma_sq.unshift(eol);
		rPragma_dq.unshift(eol);
		rString_sq.splice(1,0,eol);
		rString_dq.splice(1,0,eol);
		rString_tpl.splice(1,0,eol);
		rString_tpl_dq.splice(1,0,eol);
	}
	var rMFunc_decl = tools_HighlightTools.rule("identifier","(?:[a-zA-Z_]\\w*|\\.\\.\\.)",null);
	var rMFunc_decl1 = tools_HighlightTools.rule("punctuation.operator",",",null);
	var rMFunc_decl2 = tools_HighlightTools.rule("text","$","pop");
	var rMFunc_decl3 = tools_HighlightTools.rulePairs(["\\)","paren.rparen","\\s*","text","as\\b","keyword"],"gml.mfunc");
	var rMFunc_decl4 = [rMFunc_decl,rMFunc_decl1,rMFunc_decl2,{ regex : "(\\))(\\s*)(as)(\\s+)(\"[^\"]*?(?:\"|$))", onMatch : function(value,curr,st,line,row) {
		var values = this.splitRegex.exec(value);
		var t = values[5];
		if(t.endsWith("\"")) {
			t = t.substring(1,t.length - 1);
		} else {
			t = t.substring(1,t.length);
		}
		return [tools_HighlightTools.rtk("paren.rparen",values[1]),tools_HighlightTools.rtk("text",values[2]),tools_HighlightTools.rtk("keyword",values[3]),tools_HighlightTools.rtk("text",values[4]),tools_HighlightTools.rtk(t,values[5])];
	}, next : "gml.mfunc"},rMFunc_decl3,tools_HighlightTools.rule("paren.rparen","\\)","gml.mfunc")];
	var rMFuncEOL_pop = function(current,stack) {
		stack.shift();
		return (stack.shift() || "start");
	};
	var rMFuncEOL = null;
	rMFuncEOL = { regex : "$", onMatch : function(value,currentState,stack,line,row) {
		var rMFuncEOL1 = line.endsWith("\\") ? null : rMFuncEOL_pop;
		rMFuncEOL.next = rMFuncEOL1;
		return "text";
	}};
	var rMFunc = [rMFuncEOL,tools_HighlightTools.rulePairs(["///.*","comment.line.doc","\\\\","string.escape"]),tools_HighlightTools.rulePairs(["//.*","comment.line","\\\\","string.escape"]),tools_HighlightTools.rule("comment.line.doc","///.*","pop"),tools_HighlightTools.rule("comment.line","//.*","pop"),tools_HighlightTools.rule(["operator","constant"],synext_GmlExtMFunc.magicRegex)].concat(rBase2);
	tools_NativeArray.replaceOne(rMFunc,rIdentLocal,rIdentLocalMFunc);
	tools_NativeArray.replaceOne(rMFunc,rIdentPair,rIdentPairMFunc);
	var pop2 = function(c,st) {
		st.shift();
		st.shift();
		st.shift();
		return ((st.shift()) || ("start"));
	};
	var rules1 = [tools_HighlightTools.rule("keyword","(in|as)\\b"),tools_HighlightTools.rule("impfield","@\\w+"),tools_HighlightTools.rule("text","[ \t]*$","pop")].concat(rBase2);
	var rules2 = [tools_HighlightTools.rpush("curly.paren.lparen","\\{","gml.tpl"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(rBase2);
	var rules3 = [tools_HighlightTools.rpush("operator","<","gml.type.params"),tools_HighlightTools.rule("operator",">","pop")].concat(rBase2);
	var rules4 = rComment.concat([tools_HighlightTools.rule("comment.line","$","pop"),tools_HighlightTools.rdef("comment.line")]);
	var rules5 = rComment.concat([tools_HighlightTools.rule(function(meta,_,type1,_1,keyword,_2,type2) {
		var t1 = getNamespaceType(type1);
		var t2 = getNamespaceType(type2);
		var dt = commentDocLineType;
		return ["comment.meta",dt,t1,dt,"keyword",dt,t2];
	},"(@hint)(\\s+)(\\w+)(\\s+)(extends|implements)(\\b\\s*)(\\w*)",null),tools_HighlightTools.rule(function(meta,_,prop,_1,val) {
		var dt = commentDocLineType;
		var valid = Object.prototype.hasOwnProperty.call(parsers_linter_misc_GmlLinterJSDocFlag.map,prop);
		var kt = valid ? "linterflag" : "linterflag.typeerror";
		var vt;
		switch(val) {
		case "default":
			vt = "keyword";
			break;
		case "false":case "true":
			vt = "constant.boolean";
			break;
		default:
			vt = "typeerror";
		}
		if(prop == "") {
			dt = "linterflag";
		}
		return ["comment.meta",dt,kt,dt,vt];
	},"(@lint)(\\s*)(\\w*)(\\s*)(\\w*)",null),tools_HighlightTools.rule("curly.paren.lparen","\\{$",null),tools_HighlightTools.rpush("curly.paren.lparen","\\{","gml.comment.doc.curly"),tools_HighlightTools.rule("comment.meta","@(?:\\w+|$)"),tools_HighlightTools.rule(function(_) {
		return commentDocLineType;
	},"$","pop"),tools_HighlightTools.rdef("comment.doc.line")]);
	var rules6 = [tools_HighlightTools.rule(function(id) {
		if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlNamespaces,id)) {
			return "namespace";
		}
		if(id == "function") {
			return "namespace";
		}
		if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlEnums,id)) {
			return "enum";
		}
		return ((gml_type_GmlTypeTools.kindMap[id]) || ("identifier"));
	},"\\w+",null),tools_HighlightTools.rule("punctuation.operator","[,?]",null),tools_HighlightTools.rule("operator","[<>]",null),tools_HighlightTools.rule("square.paren.lparen","\\[",null),tools_HighlightTools.rule("square.paren.rparen","\\]",null),tools_HighlightTools.rule("paren.lparen","\\(",null),tools_HighlightTools.rule("paren.rparen","\\)",null),tools_HighlightTools.rule("curly.paren.rparen","\\}$",pop2),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop"),tools_HighlightTools.rule("text","$",pop2),tools_HighlightTools.rdef("text")];
	var rules7 = tools_HighlightTools.rule("comment",".*?\\*/","pop");
	var rules8 = tools_HighlightTools.rule("comment",".+",null);
	var rules9 = rComment.concat(rCommentPop).concat([rules7,rules8]);
	var rules7 = tools_HighlightTools.rule("comment.doc",".*?\\*/","pop");
	var rules8 = tools_HighlightTools.rule("comment.doc",".+",null);
	rules = { "start" : rBase2, "gml.enum" : rEnum, "gml.enumvalue" : rEnumValue1, "gml.pragma.sq" : rPragma_sq, "gml.pragma.dq" : rPragma_dq, "gml.import" : rules1, "gml.string.esc" : rString_esc, "gml.string.sq" : rString_sq, "gml.string.dq" : rString_dq, "gml.string.tpl" : rString_tpl, "gml.string.tpl.dq" : rString_tpl_dq, "gml.tpl" : rules2, "gml.type.params" : rules3, "gml.mfunc.decl" : rMFunc_decl4, "gml.mfunc" : rMFunc, "gml.comment.line" : rules4, "gml.comment.doc.line" : rules5, "gml.comment.doc.curly" : rules6, "gml.comment" : rules9, "gml.comment.doc" : rComment.concat(rCommentPop).concat([rules7,rules8]), "gml.comment.gml" : rCommentPop.concat([tools_HighlightTools.rule("comment",".*?\\*/","pop")]).concat(rBase2)};
	if(ui_Preferences.current.codeLiterals && (version.hasLiteralStrings() || version.hasSingleQuoteStrings())) {
		var addShaderBlock = function(substart,subset) {
			var start = subset["start"].slice(0);
			start.unshift(tools_HighlightTools.rule("string","'","pop"));
			var _g = 0;
			var _g1 = Reflect.fields(subset);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				if(key != "start") {
					rules[key] = subset[key];
				}
			}
			rules[substart] = start;
		};
		addShaderBlock("gml.string.hlsl",shaders_ShaderHighlight.makeRules(null,2));
		addShaderBlock("gml.string.glsl",shaders_ShaderHighlight.makeRules(null,1));
		var value = [tools_HighlightTools.rule("string","'","pop")].concat(rBase2);
		rules["gml.string.gml"] = value;
		var sfx = version.hasSingleQuoteStrings() ? "'" : "@'";
		tools_NativeArray.insertBefore(rBase2,tools_HighlightTools.rule(["comment","string"],"(/\\*" + "hlsl" + "\\*/)(" + sfx + ")","gml.string." + "hlsl"),rGmlComment);
		tools_NativeArray.insertBefore(rBase2,tools_HighlightTools.rule(["comment","string"],"(/\\*" + "glsl" + "\\*/)(" + sfx + ")","gml.string." + "glsl"),rGmlComment);
		tools_NativeArray.insertBefore(rBase2,tools_HighlightTools.rule(["comment","string"],"(/\\*" + "gml" + "\\*/)(" + sfx + ")","gml.string." + "gml"),rGmlComment);
	}
	return rules;
};
ace_AceGmlHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(ace_AceGmlHighlight,TextHighlightRules);
	exports.GmlHighlightRules = ace_AceGmlHighlight;
};
ace_AceGmlHighlight.init = function() {
	ace.define("ace/mode/gml_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],ace_AceGmlHighlight.define);
};
ace_AceGmlHighlight.__super__ = ace_extern_AceHighlight;
ace_AceGmlHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: ace_AceGmlHighlight
});
var ace_AceGmlTools = function() { };
$hxClasses["ace.AceGmlTools"] = ace_AceGmlTools;
ace_AceGmlTools.__name__ = "ace.AceGmlTools";
ace_AceGmlTools.isBlank = function(tokenType) {
	if(tokenType == "text") {
		return true;
	} else if(tokenType.indexOf("comment") != -1) {
		return true;
	} else {
		return false;
	}
};
ace_AceGmlTools.getContextKind = function(session,pos) {
	var it = new AceTokenIterator(session,pos.row,pos.column);
	var tk;
	while(true) {
		tk = it.stepBackward();
		if(!(tk != null)) {
			break;
		}
		var tt = tk.type;
		if(ace_AceGmlTools.isBlank(tt)) {
			continue;
		}
		switch(tt) {
		case "eventkeyname":case "eventname":
			return 1;
		case "keyword":
			return ((ace_AceGmlTools.keywordContextKind[tk.value]) || (0));
		default:
		}
		var tv = tk.value;
		switch(tv) {
		case "(":case ",":case "[":
			return 2;
		case ".":
			return 2;
		case ";":
			return 1;
		case "{":
			while(true) {
				tk = it.stepBackward();
				if(!(tk != null)) {
					break;
				}
				if(ace_AceGmlTools.isBlank(tk.type)) {
					continue;
				}
				tv = tk.value;
				if(tv == "(") {
					return 2;
				} else if(StringTools.endsWith(tv,"=")) {
					return 2;
				} else {
					return 1;
				}
			}
			return 1;
		case ")":case "]":case "}":
			return 3;
		default:
			if(tv.indexOf("=") != -1) {
				return 2;
			}
		}
		if(tt.indexOf("operator") != -1) {
			return 2;
		} else {
			return 0;
		}
	}
	return 1;
};
ace_AceGmlTools.getSelfType = function(ctx) {
	var gmlFile = ctx.session.gmlFile;
	var scope = ctx.scope;
	if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
		return gml_type_GmlTypeDef.simple(gmlFile.name);
	} else {
		var scopeDoc = gml_GmlAPI.gmlDoc[((scope) || (gmlFile.name))];
		if(scopeDoc != null) {
			if(scopeDoc.isConstructor) {
				return gml_type_GmlTypeDef.simple(scope);
			} else {
				return scopeDoc.selfType;
			}
		} else {
			return null;
		}
	}
};
ace_AceGmlTools.getSelfTypeForFile = function(gmlFile,scope) {
	if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
		return gml_type_GmlTypeDef.simple(gmlFile.name);
	} else {
		var scopeDoc = gml_GmlAPI.gmlDoc[((scope) || (gmlFile.name))];
		if(scopeDoc != null) {
			if(scopeDoc.isConstructor) {
				return gml_type_GmlTypeDef.simple(scope);
			} else {
				return scopeDoc.selfType;
			}
		} else {
			return null;
		}
	}
};
ace_AceGmlTools.getOtherType = function(ctx) {
	if(StringTools.startsWith(ctx.scope,"collision:")) {
		return gml_type_GmlTypeDef.object(ctx.scope.substring("collision:".length));
	} else {
		return null;
	}
};
ace_AceGmlTools.skipDotExprBackwards = function(session,pos) {
	while(true) {
		var iter = new AceTokenIterator(session,pos.row,pos.column);
		var tmpi = ace_extern_AceTokenIteratorTools.copy(iter);
		var depth = 0;
		var tk;
		if(!ace_extern_AceTokenIteratorTools.isEOL(iter)) {
			iter.stepForward();
		}
		_hx_loop2: while(true) {
			tk = ace_extern_AceTokenIteratorTools.stepBackwardSafe(iter);
			if(!(tk != null)) {
				break;
			}
			var tkType = tk.type;
			switch(tkType) {
			case "curly.paren.rparen":case "paren.rparen":case "square.paren.rparen":
				depth += tk.value.length;
				break;
			case "paren.lparen":case "square.paren.lparen":
				depth -= tk.value.length;
				if(tkType.charCodeAt(0) == 115) {
					ace_extern_AceTokenIteratorTools.setTo(tmpi,iter);
					tk = tmpi.stepBackward();
					if(((tk) && (tk.value)) == "?") {
						ace_extern_AceTokenIteratorTools.setTo(iter,tmpi);
					}
				}
				if(depth <= 0) {
					ace_extern_AceTokenIteratorTools.setTo(tmpi,iter);
					tk = ace_extern_AceTokenIteratorTools.stepBackwardNonText(tmpi);
					if(tk == null) {
						break _hx_loop2;
					}
					switch(tk.type) {
					case "curly.paren.rparen":case "paren.rparen":case "square.paren.rparen":
						break;
					case "keyword":
						break _hx_loop2;
					default:
						if(!ace_extern_AceToken.__isIdent.test(tk.value)) {
							break _hx_loop2;
						}
					}
				}
				break;
			case "text":
				break;
			default:
				if(StringTools.startsWith(tkType,"curly.paren.lparen")) {
					if(depth <= 0) {
						ace_extern_AceTokenIteratorTools.stepForwardNonText(iter);
						break _hx_loop2;
					}
					depth -= tk.value.length;
					if(depth <= 0) {
						break _hx_loop2;
					}
				} else if(ace_extern_AceToken.__isIdent.test(tk.value)) {
					if(depth == 0 && tkType == "keyword") {
						switch(tk.value) {
						case "as":case "cast":
							break _hx_loop2;
						case "global":case "other":case "self":
							break;
						default:
							ace_extern_AceTokenIteratorTools.stepForwardNonText(iter);
							break _hx_loop2;
						}
					}
					ace_extern_AceTokenIteratorTools.setTo(tmpi,iter);
					tk = ace_extern_AceTokenIteratorTools.stepBackwardNonText(tmpi);
					if(((tk) && (tk.value)) == ".") {
						ace_extern_AceTokenIteratorTools.setTo(iter,tmpi);
						tk = tmpi.stepBackward();
						if(((tk) && (tk.value)) == "?") {
							ace_extern_AceTokenIteratorTools.setTo(iter,tmpi);
						}
					} else if(depth == 0) {
						break _hx_loop2;
					}
				} else if(depth == 0) {
					break _hx_loop2;
				}
			}
		}
		ace_extern_AceTokenIteratorTools.setTo(tmpi,iter);
		tk = ace_extern_AceTokenIteratorTools.stepBackwardNonText(tmpi);
		if(((tk) && (tk.type)) == "keyword") {
			switch(tk.value) {
			case "as":
				tmpi.stepBackward();
				pos = tmpi.getCurrentTokenPosition();
				continue;
			case "cast":
				return tmpi.getCurrentTokenPosition();
			}
		}
		return iter.getCurrentTokenPosition();
	}
};
ace_AceGmlTools.findNamespace = function(name,imp,fn) {
	var step = imp != null ? -1 : 0;
	var result = null;
	while(++step < 2) {
		var ns = step > 0 ? gml_GmlAPI.gmlNamespaces[name] : imp.namespaces[name];
		if(ns == null) {
			continue;
		}
		result = fn(ns);
		if(result) {
			break;
		}
	}
	return result;
};
ace_AceGmlTools.findSelfCallDoc = function(type,imp) {
	if(type == null) {
		return null;
	}
	type = gml_type_GmlTypeTools.resolve(type);
	if(gml_type_GmlTypeTools.getKind(type) == 9) {
		var params = gml_type_GmlTypeTools.unwrapParams(type);
		var args = [];
		var n = params.length - 1;
		var rest = false;
		var _g = 0;
		while(_g < n) {
			var param = params[_g++];
			var arg;
			var pres = gml_type_GmlTypeTools.resolve(param);
			if(gml_type_GmlTypeTools.getKind(pres) == 10) {
				rest = true;
				arg = "..." + gml_type_GmlTypeTools.toString(gml_type_GmlTypeTools.unwrapParam(pres));
			} else {
				arg = gml_type_GmlTypeTools.toString(param);
			}
			args.push(arg);
		}
		var doc = new gml_GmlFuncDoc("function","function(",")➜" + gml_type_GmlTypeTools.toString(params[n]),args,rest);
		var _this = params.slice(0,n);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var t = _this[i];
			result[i] = gml_type_GmlTypeTools.getKind(gml_type_GmlTypeTools.resolve(t)) == 10 ? gml_type_GmlTypeTools.unwrapParam(t) : t;
		}
		doc.argTypes = result;
		return doc;
	}
	var ns = gml_type_GmlTypeTools.getNamespace(type);
	if(ns == null) {
		return null;
	}
	var step = imp != null ? -1 : 0;
	var result = null;
	while(++step < 2) {
		var ns1 = step > 0 ? gml_GmlAPI.gmlNamespaces[ns] : imp.namespaces[ns];
		if(ns1 == null) {
			continue;
		}
		result = ns1.docInstMap[""];
		if(result) {
			break;
		}
	}
	return result;
};
ace_AceGmlTools.findGlobalFuncDoc = function(name) {
	return ((((gml_GmlAPI.gmlDoc[name]) || (gml_GmlAPI.extDoc[name]))) || (gml_GmlAPI.stdDoc[name]));
};
var ace_AceGotoLine = function(editor) {
	this.autoCompletionItems = null;
	var _gthis = this;
	this.editor = editor;
	var div = document.createElement("div");
	div.innerHTML = "<div class=\"ace_search ace_goto right\">\r\n<span action=\"hide\" class=\"ace_searchbtn_close\"></span>\r\n<div class=\"ace_search_form\">\r\n\t<input class=\"ace_search_field\" placeholder=\"Go to line, place, or place:line\" spellcheck=\"false\"></input>\r\n</div>\r\n<select class=\"ace_goto_comp\" size=\"5\"></select>";
	this.element = div.firstElementChild;
	this.input = this.element.querySelector(".ace_search_field");
	this.select = this.element.querySelector(".ace_goto_comp");
	var restoreAndHide = function() {
		if(_gthis.element.style.display != "") {
			return;
		}
		var session = editor.getSession();
		if(session.gmlGotoOrigState != null) {
			ace_AceSessionData.set(session.gmlEditor,session.gmlGotoOrigState);
			session.gmlGotoOrigState = null;
		}
		window.setTimeout(function() {
			_gthis.hide();
		});
	};
	this.input.addEventListener("keydown",function(e) {
		if(e.keyCode == 27) {
			restoreAndHide();
			return;
		}
		if(e.keyCode == 38 || e.keyCode == 40) {
			if(_gthis.filteredItems == null) {
				return;
			}
			var delta = 0;
			if(e.keyCode == 38) {
				delta = -1;
			}
			if(e.keyCode == 40) {
				++delta;
			}
			var index = _gthis.filteredItems.indexOf(_gthis.selectedItem);
			if(index >= 0) {
				index = (index + delta) % _gthis.filteredItems.length;
				if(index < 0) {
					index += _gthis.filteredItems.length;
				}
			} else {
				index = 0;
			}
			_gthis.select.selectedIndex = index;
			_gthis.selectedItem = _gthis.filteredItems[index];
			e.preventDefault();
			return;
		}
	});
	this.input.addEventListener("keyup",function(e) {
		var ret = e.keyCode == 13;
		var session = editor.getSession();
		if(!ret && session.gmlGotoOrigState == null) {
			session.gmlGotoOrigState = ace_AceSessionData.get(session.gmlEditor);
		}
		var val = _gthis.input.value.trim();
		if(val != "") {
			_gthis.apply(val);
		}
		if(ret) {
			_gthis.hide();
		}
	});
	this.input.addEventListener("blur",function(e) {
		window.setTimeout(function() {
			if(document.activeElement == _gthis.input) {
				return;
			}
			restoreAndHide();
		});
	});
	this.select.addEventListener("mousedown",function(_) {
		window.setTimeout(function() {
			if(_gthis.filteredItems == null) {
				return;
			}
			_gthis.selectedItem = _gthis.filteredItems[_gthis.select.selectedIndex];
			if(_gthis.selectedItem != null) {
				editor.gotoLine(Std.parseInt(_gthis.selectedItem.value) + 1,0);
				_gthis.hide();
			}
		});
	});
	this.closeButton = this.element.querySelector(".ace_searchbtn_close");
	editor.renderer.scroller.appendChild(this.element);
	var event = ace.require("ace/lib/event");
	event.addListener(this.element,"mousedown",function(e) {
		window.setTimeout(function() {
			_gthis.input.focus();
		});
		e.stopPropagation();
	});
	event.addListener(this.element,"click",function(e) {
		if(e.target == _gthis.closeButton) {
			_gthis.hide();
		}
		e.stopPropagation();
	});
	var keyUtil = ace.require("ace/lib/keys");
	event.addCommandKeyListener(this.element,function(e,hashId,keyCode) {
		var keyString = keyUtil.keyCodeToString(keyCode);
		var command = _gthis.keyHandler.findKeyCommand(hashId,keyString);
		if(command != null && command.exec != null) {
			command.exec(_gthis);
			event.stopEvent(e);
		}
	});
	ace_AceGotoLine.HashHandler = ace.require("ace/keyboard/hash_handler").HashHandler;
	this.keyHandler = new ace_AceGotoLine.HashHandler();
	this.keyHandler.bindKeys({ "Esc" : function(q) {
	}, "Return" : function(q) {
	}});
};
$hxClasses["ace.AceGotoLine"] = ace_AceGotoLine;
ace_AceGotoLine.__name__ = "ace.AceGotoLine";
ace_AceGotoLine.run = function(editor) {
	if(ace_AceGotoLine.inst == null) {
		ace_AceGotoLine.inst = new ace_AceGotoLine(editor);
	}
	ace_AceGotoLine.inst.show();
};
ace_AceGotoLine.prototype = {
	apply: function(val) {
		if(val == "") {
			this.selectedItem = null;
			this.filteredItems = null;
			tools_HtmlTools.clearInner(this.select);
			return;
		}
		var row = Std.parseInt(val);
		var valColon = val.indexOf(":");
		if(row == null || valColon >= 0) {
			if(this.autoCompletionItems != null) {
				this.filteredItems = this.filteredList.filterCompletions(this.autoCompletionItems,val);
				if(this.filteredItems.indexOf(this.selectedItem) < 0) {
					this.selectedItem = this.filteredItems[0];
				}
				tools_HtmlTools.clearInner(this.select);
				var _g = 0;
				var _g1 = this.filteredItems;
				while(_g < _g1.length) {
					var item = _g1[_g];
					++_g;
					var option = document.createElement("option");
					option.dataset.meta = item.meta;
					tools_HtmlTools.setInnerText(option,item.caption);
					if(this.selectedItem == item) {
						option.selected = true;
					}
					this.select.appendChild(option);
				}
				if(this.selectedItem != null) {
					this.editor.gotoLine(Std.parseInt(this.selectedItem.value) + 1,0);
				}
			} else {
				tools_HtmlTools.clearInner(this.select);
				var nav;
				if(valColon >= 0) {
					nav = { };
					var def = val.substring(0,valColon);
					if(def != "") {
						nav.def = def;
					}
					var ctx = val.substring(valColon + 1);
					row = Std.parseInt(ctx);
					if(row != null) {
						nav.pos = { row : row - 1, column : 0};
					} else {
						valColon = ctx.indexOf(":");
						if(valColon >= 0) {
							nav.ctx = ctx.substring(0,valColon);
							row = Std.parseInt(ctx.substring(valColon + 1));
							if(row != null) {
								nav.pos = { row : row - 1, column : 0};
							}
						} else {
							nav.ctx = ctx;
						}
					}
				} else {
					nav = { def : val};
				}
				if(!gml_file_GmlFile.current.navigate(nav)) {
					return;
				}
			}
		} else {
			this.selectedItem = null;
			this.filteredItems = null;
			tools_HtmlTools.clearInner(this.select);
			--row;
			if(window.gmlResetOnDefine) {
				var rxReset = new RegExp("^(?:#define|#event|#section|#moment|#target)\\b");
				var ctr = this.editor.selection.lead.row;
				while(ctr >= 0) {
					if(rxReset.test(this.editor.getSession().getLine(ctr))) {
						break;
					}
					--ctr;
				}
				if(ctr >= 0) {
					row += ctr + 1;
				}
			}
			this.editor.gotoLine(row + 1,0);
		}
	}
	,hide: function() {
		this.element.style.display = "none";
		this.editor.keyBinding.removeKeyboardHandler(this.keyHandler);
		this.editor.focus();
	}
	,show: function() {
		var editCode = this.editor.getSession().gmlEditor;
		this.autoCompletionItems = editCode.kind.gatherGotoTargets(editCode);
		var hasAC = this.autoCompletionItems != null;
		this.filteredList = hasAC ? new AceFilteredList(this.autoCompletionItems) : null;
		if(hasAC) {
			this.filteredList.gmlMatchMode = 2;
		}
		tools_HtmlTools.setDisplayFlag(this.select,hasAC);
		tools_HtmlTools.clearInner(this.select);
		this.selectedItem = null;
		tools_HtmlTools.setDisplayFlag(this.element,true);
		this.input.value = "";
		this.input.focus();
		this.input.select();
		this.editor.keyBinding.addKeyboardHandler(this.keyHandler);
	}
	,__class__: ace_AceGotoLine
};
var ace_AceHxHighlight = $hx_exports["AceHxHighlight"] = function() {
	ace_extern_AceHighlight.call(this);
	this.$rules = ace_AceHxHighlight.makeRules(this);
	this.normalizeRules();
};
$hxClasses["ace.AceHxHighlight"] = ace_AceHxHighlight;
ace_AceHxHighlight.__name__ = "ace.AceHxHighlight";
ace_AceHxHighlight.makeRules = function(hl) {
	var kwmapper = hl.createKeywordMapper({ "keyword" : "package|import|using" + "|class|enum|abstract|typedef|interface|extends|implements" + "|inline|extern|override|private|public|static" + "|function|var|new|super|this|trace" + "|if|else|for|in|while|do|switch|case|default|break|continue" + "|return|try|throw|catch|cast|untyped", "constant.boolean" : "true|false", "constant" : "null"},"identifier");
	var base = [tools_HighlightTools.rule("comment.line.doc","///.*$",null),tools_HighlightTools.rule("comment.line","//.*$",null),tools_HighlightTools.rpush("comment.doc","/\\*\\*","hx.comment.doc"),tools_HighlightTools.rpush("comment","/\\*","hx.comment"),tools_HighlightTools.rule("numeric","0[xX][0-9a-fA-F]+\\b",null),tools_HighlightTools.rule("numeric","[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b",null),tools_HighlightTools.rule("string.regexp","[/](?:(?:\\[(?:\\\\]|[^\\]])+\\])|(?:\\\\/|[^\\]/]))*[/]\\w*\\s*(?=[).,;]|$)"),tools_HighlightTools.rule("string","[\"](?:(?:\\\\.)|(?:[^\"\\\\]))*?(?:[\"]|$)"),tools_HighlightTools.rule(kwmapper,"\\w+",null),tools_HighlightTools.rpush("string","'","hx.string"),tools_HighlightTools.rule("set.operator","=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=",null),tools_HighlightTools.rule("operator","!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|==|!=|<=|>=|<|>|!|&&|\\|\\|",null),tools_HighlightTools.rule("punctuation.operator","\\?|:|,|;|\\.",null),tools_HighlightTools.rule("curly.paren.lparen","\\{",null),tools_HighlightTools.rule("curly.paren.rparen","\\}",null),tools_HighlightTools.rule("square.paren.lparen","\\[",null),tools_HighlightTools.rule("square.paren.rparen","\\]",null),tools_HighlightTools.rule("paren.lparen","\\(",null),tools_HighlightTools.rule("paren.rparen","\\)",null),tools_HighlightTools.rule("text","\\s+",null)];
	return { "start" : base, "hx.comment.doc" : [tools_HighlightTools.rule("comment.meta","@(?:" + "author|param|return|throws|see|link|since" + ")"),tools_HighlightTools.rule("comment.doc","\\*/","pop"),tools_HighlightTools.rdef("comment.doc")], "hx.comment" : [tools_HighlightTools.rule("comment","\\*/","pop"),tools_HighlightTools.rdef("comment")], "hx.string" : [tools_HighlightTools.rpush(["string","curly.paren.lparen"],"(\\$)(\\{)","hx.string.code"),tools_HighlightTools.rule("string.escape","\\\\(?:" + "x[0-9a-fA-F]{2}|" + "u[0-9a-fA-F]{4}|" + ".)"),tools_HighlightTools.rule("string","'","pop"),tools_HighlightTools.rdef("string")], "hx.string.code" : [tools_HighlightTools.rpush("curly.paren.lparen","\\{","hx.string.code"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(base)};
};
ace_AceHxHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(ace_AceHxHighlight,TextHighlightRules);
	exports.HaxeHighlightRules = ace_AceHxHighlight;
};
ace_AceHxHighlight.init = function() {
	ace.define("ace/mode/haxe_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],ace_AceHxHighlight.define);
};
ace_AceHxHighlight.__super__ = ace_extern_AceHighlight;
ace_AceHxHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: ace_AceHxHighlight
});
var ace_AceMdHighlight = $hx_exports["AceMdHighlight"] = function() {
	var _gthis = this;
	ace_extern_AceHighlight.call(this);
	var editor = editors_EditCode.currentNew;
	var dmd = ((editor.kind) instanceof file_kind_misc_KMarkdown) && editor.kind.isDocMd;
	var rEsc = tools_HighlightTools.rule("md-escape","\\\\(?:.|$)",null);
	var rBase = [];
	var rText = tools_HighlightTools.rule("text","\\s+",null);
	if(dmd) {
		rBase.push(tools_HighlightTools.rpush(["text","md-section-start"],"^(\\s*)(#+\\[)","md.section"));
		rBase.push(tools_HighlightTools.rpush("md-section-start","#+\\[","md.section"));
		rBase.push(tools_HighlightTools.rpush("md-italic","\\b_\\B","md.italic"));
		rBase.push(tools_HighlightTools.rpush("md-bold","\\*","md.bold"));
	} else {
		rBase.push(tools_HighlightTools.rpush("md-italic","\\b(?:__|\\*\\*)\\B","md.italic"));
		rBase.push(tools_HighlightTools.rpush("md-bold","\\b(?:_|\\*)\\B","md.bold"));
	}
	rBase.push(tools_HighlightTools.rulePairs(["^\\s*#+\\s*","md-section-prefix",".*$","md-section"]));
	rBase.push(tools_HighlightTools.rpush("md-url-start","\\[","md.url"));
	if(dmd) {
		var tmp = tools_HighlightTools.rpush(function(_) {
			if(gml_GmlAPI.version == gml_GmlVersion.none) {
				gml_GmlAPI.set_version(gml_GmlVersion.v2);
				gml_GmlAPI.init();
			}
			return "md-pre-start";
		},"```(?:\\B|gml\\b)","md.gml");
		rBase.push(tmp);
		rBase.push(tools_HighlightTools.rpush(["md-pre-start","md-url"],"(```\\w*md\\b\\s*)(\\w*)","md.md"));
		rBase.push(tools_HighlightTools.rpush(["md-expr-start","curly.paren.lparen"],"(\\$)(\\{)","md.expr"));
	} else {
		rBase.push(tools_HighlightTools.rpush("md-pre-start","```gml\\b","md.gml"));
	}
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```(?:haxe\\b|exec\\b)","md.hx"));
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```glsl\\b","md.glsl"));
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```hlsl\\b","md.hlsl"));
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```","md.pre"));
	rBase.push(tools_HighlightTools.rpush("md-tt","`","md.tt"));
	rBase.push(tools_HighlightTools.rpush("comment","<!--","md.comment"));
	var rcct = function(r,d) {
		r = r.concat(rBase);
		r.push(d);
		r.unshift(rEsc);
		return r;
	};
	this.$rules = { };
	this.$rules["start"] = rcct([],rText);
	if(dmd) {
		this.$rules["md.section"] = [tools_HighlightTools.rpush("md-section-start","\\[","md.section"),tools_HighlightTools.rule(["md-section-end","md-href-start"],"(\\])(\\()","md.href"),tools_HighlightTools.rule("md-section-end","(?:\\]|$)","pop"),tools_HighlightTools.rdef("md-section")];
		this.$rules["md.italic"] = rcct([tools_HighlightTools.rule("md-italic","(?:\\B_\\b|$)","pop")],tools_HighlightTools.rdef("md-italic"));
		this.$rules["md.bold"] = rcct([rEsc,tools_HighlightTools.rule("md-bold","(?:\\*|$)","pop")],tools_HighlightTools.rdef("md-bold"));
	} else {
		this.$rules["md.italic"] = rcct([tools_HighlightTools.rule("md-italic","(?:__|\\*\\*)\\b","pop")],tools_HighlightTools.rdef("md-italic"));
		this.$rules["md.bold"] = rcct([rEsc,tools_HighlightTools.rule("md-bold","(?:_|\\*)\\b","pop")],tools_HighlightTools.rdef("md-bold"));
	}
	this.$rules["md.comment"] = [tools_HighlightTools.rule("comment","-->","pop"),tools_HighlightTools.rdef("comment")];
	this.$rules["md.url"] = [rEsc,tools_HighlightTools.rule(["md-url-end","md-href-start"],"(\\])(\\()","md.href"),tools_HighlightTools.rule("md-url-end","(?:\\]|$)","pop"),tools_HighlightTools.rdef("md-url")];
	this.$rules["md.href"] = [rEsc,tools_HighlightTools.rule("md-href-end","(?:\\)|$)","pop"),tools_HighlightTools.rdef("md-href")];
	this.$rules["md.tt"] = [rEsc,tools_HighlightTools.rule("md-tt","(?:`|$)","pop"),tools_HighlightTools.rdef("md-tt")];
	var addBlock = function(substart,def,subset) {
		var start = subset["start"].slice(0);
		start.unshift(tools_HighlightTools.rule("md-pre-end","```","pop"));
		start.pop();
		start.push(tools_HighlightTools.rdef(def));
		var _g = 0;
		var _g1 = Reflect.fields(subset);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != "start") {
				_gthis.$rules[key] = subset[key];
			}
		}
		_gthis.$rules[substart] = start;
	};
	var rHaxe = ace_AceHxHighlight.makeRules(this);
	addBlock("md.gml","md-pre-gml",ace_AceGmlHighlight.makeRules(editor));
	addBlock("md.hx","md-pre-hx",rHaxe);
	addBlock("md.glsl","md-pre-glsl",shaders_ShaderHighlight.makeRules(this,1));
	addBlock("md.hlsl","md-pre-hlsl",shaders_ShaderHighlight.makeRules(this,2));
	if(dmd) {
		this.$rules["md.expr"] = [tools_HighlightTools.rpush("curly.paren.lparen","\\{","md.expr"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(rHaxe["start"]).concat([rText]);
	}
	if(dmd) {
		this.$rules["md.md"] = rcct([tools_HighlightTools.rule("md-pre-end","```","pop")],rText);
	}
	this.$rules["md.pre"] = [rEsc,tools_HighlightTools.rule("md-pre-end","```","pop"),tools_HighlightTools.rdef("md-pre")];
	this.normalizeRules();
};
$hxClasses["ace.AceMdHighlight"] = ace_AceMdHighlight;
ace_AceMdHighlight.__name__ = "ace.AceMdHighlight";
ace_AceMdHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(ace_AceMdHighlight,TextHighlightRules);
	exports.MarkdownHighlightRules = ace_AceMdHighlight;
};
ace_AceMdHighlight.init = function() {
	ace.define("ace/mode/markdown_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],ace_AceMdHighlight.define);
};
ace_AceMdHighlight.__super__ = ace_extern_AceHighlight;
ace_AceMdHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: ace_AceMdHighlight
});
var ace_AceSessionData = function() { };
$hxClasses["ace.AceSessionData"] = ace_AceSessionData;
ace_AceSessionData.__name__ = "ace.AceSessionData";
ace_AceSessionData.get = function(edit) {
	var session = edit.session;
	var foldLines = [];
	var getFoldsRec = null;
	getFoldsRec = function(out,fold,ofs) {
		var row = ofs + fold.start.row;
		var children = fold.subFolds;
		var i = children.length;
		while(--i >= 0) getFoldsRec(out,children[i],row);
		out.push(row);
	};
	var _g = 0;
	var _g1 = session.getAllFolds();
	while(_g < _g1.length) getFoldsRec(foldLines,_g1[_g++],0);
	return { selection : session.selection.toJSON(), scrollLeft : session.getScrollLeft(), scrollTop : session.getScrollTop(), foldLines : foldLines};
};
ace_AceSessionData.set = function(edit,data) {
	var session = edit.session;
	session.selection.fromJSON(data.selection);
	var _g = 0;
	var _g1 = data.foldLines;
	while(_g < _g1.length) {
		var row = _g1[_g++];
		try {
			session.$toggleFoldWidget(row,{ });
		} catch( _g2 ) {
		}
	}
	session.setScrollLeft(data.scrollLeft);
	session.setScrollTop(data.scrollTop);
};
ace_AceSessionData.store = function(edit) {
	var data = ace_AceSessionData.get(edit);
	var file = edit.file;
	var t = new Date().getTime();
	if(Electron_FS.existsSync != null) {
		data.mtime = t;
		ace_AceSessionData.conf.sync();
		ace_AceSessionData.conf.data[file.path] = data;
		ace_AceSessionData.conf.flush();
	} else {
		window.localStorage.setItem("session:" + file.path,JSON.stringify(data));
		window.localStorage.setItem("@session:" + file.path,"" + t);
	}
};
ace_AceSessionData.restore = function(edit) {
	var data;
	if(Electron_FS.existsSync != null) {
		if(ace_AceSessionData.conf.sync()) {
			ace_AceSessionData.conf.data = { };
		}
		data = ace_AceSessionData.conf.data[edit.file.path];
	} else {
		var text = window.localStorage.getItem("session:" + edit.file.path);
		if(text == null) {
			return false;
		}
		try {
			data = JSON.parse(text);
		} catch( _g ) {
			return false;
		}
	}
	if(data == null) {
		return false;
	}
	ace_AceSessionData.set(edit,data);
	return true;
};
ace_AceSessionData.init = function() {
	var keepTime = 86400000 * ui_Preferences.current.fileSessionTime;
	var remTime = new Date().getTime() - keepTime;
	if(Electron_FS.existsSync != null) {
		ace_AceSessionData.conf = new electron_ConfigFile("session","ace-states");
		var changed;
		if(ace_AceSessionData.conf.sync(true)) {
			ace_AceSessionData.conf.data = { };
			changed = true;
		} else {
			var remList = [];
			var access = ace_AceSessionData.conf.data;
			var _g_keys = Reflect.fields(access);
			var _g_index = 0;
			while(_g_index < _g_keys.length) {
				var key = _g_keys[_g_index++];
				if(access[key].mtime < remTime) {
					remList.push(key);
				}
			}
			changed = remList.length > 0;
			var _g = 0;
			while(_g < remList.length) delete ace_AceSessionData.conf.data[remList[_g++]];
		}
		if(changed) {
			ace_AceSessionData.conf.flush();
		}
	} else {
		var ls = window.localStorage;
		var remList = [];
		var _g = 0;
		var _g1 = ls.length;
		while(_g < _g1) {
			var k = ls.key(_g++);
			if(k.startsWith("@session:")) {
				if(parseFloat(ls.getItem(k)) < remTime) {
					remList.push(k);
					remList.push(k.substring(1));
				}
			}
		}
		var _g = 0;
		while(_g < remList.length) ls.removeItem(remList[_g++]);
	}
};
var ace_AceSnippets = function() { };
$hxClasses["ace.AceSnippets"] = ace_AceSnippets;
ace_AceSnippets.__name__ = "ace.AceSnippets";
ace_AceSnippets.getText = function(mode) {
	if(Electron_FS.existsSync != null) {
		try {
			return Electron_FS.readFileSync(electron_FileWrap.userPath + "/snippets/" + mode + ".snippets","utf8");
		} catch( _g ) {
			return "";
		}
	}
	var r = window.localStorage.getItem("ace/snippets/" + mode);
	if(r != null) {
		return r;
	} else {
		return "";
	}
};
ace_AceSnippets.setText = function(mode,text) {
	if(Electron_FS.existsSync != null) {
		Electron_FS.writeFileSync(electron_FileWrap.userPath + "/snippets/" + mode + ".snippets",text);
	} else {
		window.localStorage.setItem("ace/snippets/" + mode,text);
	}
	ace_AceSnippets.reload(mode,text);
};
ace_AceSnippets.reload = function(mode,text) {
	var file = ace_AceSnippets.map[mode];
	if(file != null) {
		try {
			if(text == null) {
				text = ace_AceSnippets.getText(mode);
			}
			file.snippetText = text;
			file.snippets = ace_AceSnippets.manager.parseSnippetFile(text);
			Reflect.deleteField(ace_AceSnippets.manager.snippetMap,mode);
			Reflect.deleteField(ace_AceSnippets.manager.snippetNameMap,mode);
			ace_AceSnippets.manager.register(file.snippets,file.scope);
			return true;
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			console.error("Couldn't refresh snippets:",_g1);
		}
	}
	return false;
};
ace_AceSnippets.init = function() {
	ace_AceSnippets.langTools = ace.require("ace/ext/language_tools");
	ace_AceSnippets.manager = ace.require("ace/snippets").snippetManager;
	var mode = "text";
	ace.define("ace/snippets/" + mode,["require","exports","module"],function($require,exports,module) {
		var file = exports;
		ace_AceSnippets.map[mode] = file;
		file.snippetText = ace_AceSnippets.getText(mode);
		file.scope = mode;
	});
	var mode1 = "gml";
	ace.define("ace/snippets/" + mode1,["require","exports","module"],function($require,exports,module) {
		var file = exports;
		ace_AceSnippets.map[mode1] = file;
		file.snippetText = ace_AceSnippets.getText(mode1);
		file.scope = mode1;
	});
	var mode2 = "gml_search";
	ace.define("ace/snippets/" + mode2,["require","exports","module"],function($require,exports,module) {
		var file = exports;
		ace_AceSnippets.map[mode2] = file;
		file.snippetText = ace_AceSnippets.getText(mode2);
		file.scope = mode2;
	});
	var mode3 = "shader";
	ace.define("ace/snippets/" + mode3,["require","exports","module"],function($require,exports,module) {
		var file = exports;
		ace_AceSnippets.map[mode3] = file;
		file.snippetText = ace_AceSnippets.getText(mode3);
		file.scope = mode3;
	});
	ace_AceSnippets.completer = ace_AceSnippets.langTools.snippetCompleter;
};
var ace_extern_AceAutoCompleter = function() { };
$hxClasses["ace.extern.AceAutoCompleter"] = ace_extern_AceAutoCompleter;
ace_extern_AceAutoCompleter.__name__ = "ace.extern.AceAutoCompleter";
ace_extern_AceAutoCompleter.__isInterface__ = true;
ace_extern_AceAutoCompleter.prototype = {
	__class__: ace_extern_AceAutoCompleter
};
var ace_AceWrapCompleter = function(items,tokenFilterDictOrArray,not,modeFilterFunc) {
	this.sqbKind = 0;
	this.colKind = 0;
	this.dotKindMeta = null;
	this.dotKind = 0;
	this.minLength = -4;
	items.sort(function(a,b) {
		if(a.name < b.name) {
			return -1;
		} else {
			return 1;
		}
	});
	this.identifierRegexps = [new RegExp("[_" + "a-z" + "A-Z" + "0-9" + "\\u00A2-\\uFFFF]")];
	this.items = items;
	if(((tokenFilterDictOrArray) instanceof Array)) {
		this.tokenFilter = tools_Dictionary.fromKeys(tokenFilterDictOrArray,true);
	} else {
		this.tokenFilter = tokenFilterDictOrArray;
	}
	this.tokenFilterComment = this.tokenFilter["comment"];
	this.tokenFilterNot = not;
	this.modeFilter = modeFilterFunc;
};
$hxClasses["ace.AceWrapCompleter"] = ace_AceWrapCompleter;
ace_AceWrapCompleter.__name__ = "ace.AceWrapCompleter";
ace_AceWrapCompleter.__interfaces__ = [ace_extern_AceAutoCompleter];
ace_AceWrapCompleter.checkColon = function(iter) {
	var token = ace_extern_AceTokenIteratorTools.stepBackwardNonText(iter);
	if(token == null) {
		return false;
	}
	switch(token.type) {
	case "eventname":
		if(token.value.startsWith("key")) {
			return true;
		} else {
			return false;
		}
		break;
	case "local":case "localfield":case "sublocal":
		break;
	default:
		return false;
	}
	token = ace_extern_AceTokenIteratorTools.stepBackwardNonText(iter);
	if(token == null) {
		return false;
	}
	switch(token.value) {
	case "#args":case ",":case "var":
		break;
	case "(":
		token = iter.stepBackward();
		if(token != null && token.type == "text") {
			token = iter.stepBackward();
		}
		if(token == null) {
			return false;
		}
		switch(token.type) {
		case "asset.script":
			token = ace_extern_AceTokenIteratorTools.stepBackwardNonText(iter);
			if(((token) && (token.type)) != "keyword" || token.value != "function") {
				return false;
			}
			break;
		case "keyword":
			if(token.value != "function") {
				return false;
			}
			break;
		case "preproc.lambda":case "scriptname":
			break;
		default:
			return false;
		}
		break;
	default:
		return false;
	}
	return true;
};
ace_AceWrapCompleter.prototype = {
	procMinLength: function() {
		if(this.minLength == -4) {
			if(ui_Preferences.current.compMatchMode == 3) {
				return 1;
			} else {
				return 2;
			}
		} else {
			return this.minLength;
		}
	}
	,getCompletions: function(editor,session,pos,prefix,callback) {
		if(prefix.length < (this.minLength == -4 ? ui_Preferences.current.compMatchMode == 3 ? 1 : 2 : this.minLength) || !this.modeFilter(session)) {
			callback(null,ace_AceWrapCompleter.noItems);
			return;
		}
		if(editor.completer != null) {
			editor.completer.exactMatch = ui_Preferences.current.compExactMatch;
		}
		var tk = session.getTokenAt(pos.row,pos.column);
		if(this.colKind != 0) {
			if(tk != null && tk.type == "punctuation.operator" && tk.value.includes(":")) {
				_hx_loop1: while(true) {
					if(ace_AceWrapCompleter.checkColon(new AceTokenIterator(session,pos.row,pos.column))) {
						switch(this.colKind) {
						case 1:
							var scope = session.gmlScopes.get(pos.row);
							if(scope == null) {
								break _hx_loop1;
							}
							if(this.dotKindMeta) {
								callback(null,gml_GmlAPI.gmlNamespaceComp.array);
							} else {
								var imp = session.gmlEditor.imports[scope];
								if(imp == null) {
									break _hx_loop1;
								}
								callback(null,imp.namespaceComp);
							}
							break;
						case 2:
							callback(null,gml_GmlAPI.gmlEnumTypeComp);
							break;
						default:
							break _hx_loop1;
						}
					}
					return;
				}
			}
			callback(null,ace_AceWrapCompleter.noItems);
			return;
		} else if(this.dotKind != 0) {
			this.getCompletions_dotKind(editor,session,pos,prefix,callback,tk);
			return;
		} else if(this.sqbKind != 0) {
			this.getCompletions_sqbKind(editor,session,pos,prefix,callback,tk);
			return;
		}
		var this1 = this.tokenFilter;
		var k = ((tk) && (tk.type));
		var tkf = Object.prototype.hasOwnProperty.call(this1,k);
		if(!tkf && this.tokenFilterComment && tk.type.startsWith("comment")) {
			tkf = true;
		}
		callback(null,tkf != this.tokenFilterNot ? this.items : ace_AceWrapCompleter.noItems);
	}
	,getCompletions_dotKind: function(editor,session,pos,prefix,callback,tk) {
		_hx_loop1: while(tk != null) {
			var iter = null;
			if(tk.type != "punctuation.operator" || !tk.value.includes(".")) {
				if(this.dotKind == 3) {
					if(tk.type == "enumerror") {
						iter = new AceTokenIterator(session,pos.row,pos.column);
						tk = iter.stepBackward();
					}
				} else if(this.dotKind == 1) {
					if(tk.type == "globalfield") {
						iter = new AceTokenIterator(session,pos.row,pos.column);
						tk = iter.stepBackward();
					}
				}
			}
			if(tk.type != "punctuation.operator" || !tk.value.includes(".")) {
				break;
			}
			var dotPos;
			if(this.dotKind == 5) {
				if(iter == null) {
					iter = new AceTokenIterator(session,pos.row,pos.column);
				}
				dotPos = iter.getCurrentTokenPosition();
			} else {
				dotPos = null;
			}
			if(editor.completer.eraseSelfDot) {
				tk = { type : "keyword", value : "self"};
			} else {
				if(iter == null) {
					iter = new AceTokenIterator(session,pos.row,pos.column);
				}
				tk = iter.stepBackward();
			}
			switch(this.dotKind) {
			case 1:
				callback(null,tk.value == "global" ? this.items : ace_AceWrapCompleter.noItems);
				break;
			case 2:
				if(tk.type != "namespace") {
					break _hx_loop1;
				}
				var scope = session.gmlScopes.get(pos.row);
				if(scope == null) {
					break _hx_loop1;
				}
				var imp = session.gmlEditor.imports[scope];
				var ns;
				if(this.dotKindMeta) {
					ns = gml_GmlAPI.gmlNamespaces[tk.value];
				} else {
					if(imp == null) {
						break _hx_loop1;
					}
					ns = imp.namespaces[tk.value];
				}
				if(ns == null) {
					break _hx_loop1;
				}
				callback(null,ns.compStatic.array);
				return;
			case 3:
				if(tk.type != "enum") {
					break _hx_loop1;
				}
				var name = tk.value;
				var scope1 = session.gmlScopes.get(pos.row);
				if(scope1 != null) {
					var imp1 = session.gmlEditor.imports[scope1];
					if(imp1 != null) {
						var s = imp1.longenEnum[name];
						if(s != null) {
							name = s;
						}
					}
				}
				var en = gml_GmlAPI.gmlEnums[name];
				if(en != null) {
					callback(null,en.fieldComp);
					return;
				}
				break;
			case 5:
				var scope2 = session.gmlScopes.get(pos.row);
				if(scope2 == null) {
					break _hx_loop1;
				}
				var isGlobal = this.dotKindMeta;
				var type;
				if(!isGlobal) {
					var isNamespace = false;
					var snip = null;
					switch(tk.type) {
					case "asset.object":case "enum":case "local":case "sublocal":
						snip = tk.value;
						break;
					case "keyword":
						if(tk.value == "self" || tk.value == "other") {
							snip = tk.value;
						}
						break;
					case "namespace":
						snip = tk.value;
						isNamespace = true;
						break;
					default:
					}
					if(snip != null) {
						var btk = ace_extern_AceTokenIteratorTools.peekBackwardNonText(iter);
						if(btk != null && ((btk) && (btk.type)) == "keyword") {
							switch(btk.value) {
							case "as":case "cast":
								snip = null;
								isNamespace = false;
								break;
							}
						}
					}
					if(snip == null) {
						snip = session.getTextRange(ace_extern_AceRange.fromPair(ace_AceGmlTools.skipDotExprBackwards(session,dotPos),dotPos));
					}
					if(isNamespace) {
						type = gml_type_GmlType.TInst("type",[gml_type_GmlTypeDef.simple(snip)],4);
					} else {
						type = parsers_linter_GmlLinter.getType(snip,session.gmlEditor,scope2,dotPos).type;
					}
					ace_AceWrapCompleter.dkSmart_type = type;
					var ctr = editor.completer.getPopup().container;
					if(type != null) {
						ctr.setAttribute("data-self-type",gml_type_GmlTypeTools.toString(type));
					}
				} else {
					type = ace_AceWrapCompleter.dkSmart_type;
				}
				if(type == null) {
					break _hx_loop1;
				}
				var isStatic = gml_type_GmlTypeTools.getKind(type) == 4;
				if(isStatic) {
					type = gml_type_GmlTypeTools.unwrapParam(type);
				}
				var imp2;
				if(!isGlobal) {
					imp2 = session.gmlEditor.imports[scope2];
					if(imp2 == null) {
						break _hx_loop1;
					}
				} else {
					imp2 = null;
				}
				var tn = gml_type_GmlTypeTools.getNamespace(type);
				var ns1 = this.dotKindMeta ? gml_GmlAPI.gmlNamespaces[tn] : imp2.namespaces[tn];
				if(ns1 != null) {
					callback(null,isStatic ? ns1.compStatic.array : ns1.getInstComp());
					return;
				} else if(!isGlobal) {
					var en1 = gml_GmlAPI.gmlEnums[tn];
					if(en1 == null) {
						break _hx_loop1;
					}
					callback(null,isStatic ? en1.compList : en1.fieldComp);
					return;
				}
				break;
			default:
			}
			break;
		}
		callback(null,ace_AceWrapCompleter.noItems);
	}
	,getCompletions_sqbKind: function(editor,session,pos,prefix,callback,tk) {
		_hx_loop1: while(tk != null) {
			if(tk.type != "square.paren.lparen") {
				break;
			}
			if(tk.value != "[") {
				break;
			}
			var scope = session.gmlScopes.get(pos.row);
			if(scope == null) {
				break;
			}
			var end = { column : pos.column + (-1), row : pos.row};
			var snip = session.getTextRange(ace_extern_AceRange.fromPair(ace_AceGmlTools.skipDotExprBackwards(session,end),end));
			var origType = parsers_linter_GmlLinter.getType(snip,session.gmlEditor,scope,pos).type;
			var ctr = editor.completer.getPopup().container;
			if(origType != null) {
				ctr.setAttribute("data-self-type",gml_type_GmlTypeTools.toString(origType));
			}
			var type = gml_type_GmlTypeTools.resolve(origType);
			var comps = [];
			if(type == null) {
				break;
			} else {
				switch(type._hx_index) {
				case 0:
					if(type.kind == 41) {
						var _this = gml_type_GmlTypeTools.unwrapParams(type);
						var _g_current = 0;
						while(_g_current < _this.length) {
							var _g_value = _this[_g_current++];
							var name = "" + (_g_current - 1);
							comps.push({ name : name, value : name, score : 0, meta : "index", doc : gml_type_GmlTypeTools.toString(_g_value)});
						}
					} else {
						break _hx_loop1;
					}
					break;
				case 5:
					var _g = 0;
					var _g1 = type.meta.fieldList;
					while(_g < _g1.length) {
						var mapField = _g1[_g];
						++_g;
						var snip1 = "?\"" + mapField.name + "\"";
						var comp = { name : snip1, value : snip1, score : 0, meta : "key", doc : gml_type_GmlTypeTools.toString(mapField.type)};
						comp.caption = mapField.name;
						comps.push(comp);
					}
					break;
				case 6:
					var gmlEnum = gml_GmlAPI.gmlEnums[type.enumName];
					if(gmlEnum == null) {
						break _hx_loop1;
					}
					var _g2 = 0;
					var _g3 = gmlEnum.compList;
					while(_g2 < _g3.length) comps.push(_g3[_g2++]);
					break;
				default:
					break _hx_loop1;
				}
			}
			callback(null,comps);
			return;
		}
		callback(null,ace_AceWrapCompleter.noItems);
	}
	,getDocTooltip: function(item) {
		return item.doc;
	}
	,__class__: ace_AceWrapCompleter
};
var ace_AceSnippetCompleterProxy = function(completer,tokenFilterDictOrArray,not,modeFilter) {
	this.completer = completer;
	ace_AceWrapCompleter.call(this,[],tokenFilterDictOrArray,not,modeFilter);
};
$hxClasses["ace.AceSnippetCompleterProxy"] = ace_AceSnippetCompleterProxy;
ace_AceSnippetCompleterProxy.__name__ = "ace.AceSnippetCompleterProxy";
ace_AceSnippetCompleterProxy.__super__ = ace_AceWrapCompleter;
ace_AceSnippetCompleterProxy.prototype = $extend(ace_AceWrapCompleter.prototype,{
	getCompletions: function(editor,session,pos,prefix,callback) {
		if(!ui_Preferences.current.compFilterSnippets || !this.modeFilter(session)) {
			this.completer.getCompletions(editor,session,pos,prefix,callback);
			return;
		}
		if(prefix.length < (this.minLength == -4 ? ui_Preferences.current.compMatchMode == 3 ? 1 : 2 : this.minLength) || !this.modeFilter(session)) {
			callback(null,ace_AceWrapCompleter.noItems);
			return;
		}
		var tk = session.getTokenAt(pos.row,pos.column);
		var this1 = this.tokenFilter;
		var k = ((tk) && (tk.type));
		var tkf = Object.prototype.hasOwnProperty.call(this1,k);
		if(!tkf && this.tokenFilterComment && tk.type.startsWith("comment")) {
			tkf = true;
		}
		if(tkf != this.tokenFilterNot) {
			this.completer.getCompletions(editor,session,pos,prefix,callback);
		} else {
			callback(null,ace_AceWrapCompleter.noItems);
		}
	}
	,__class__: ace_AceSnippetCompleterProxy
});
var ace_statusbar_AceStatusBarResolver = function() { };
$hxClasses["ace.statusbar.AceStatusBarResolver"] = ace_statusbar_AceStatusBarResolver;
ace_statusbar_AceStatusBarResolver.__name__ = "ace.statusbar.AceStatusBarResolver";
ace_statusbar_AceStatusBarResolver.initCanDocData = function() {
	var d = Object.create(null);
	d["asset.script"] = d["macro.function"] = function(c) {
		var d = gml_GmlAPI.gmlDoc;
		c.docs = d;
		return d != null;
	};
	d["function"] = function(c) {
		var d = gml_GmlAPI.stdDoc;
		c.docs = d;
		return d != null;
	};
	d["glsl.function"] = function(c) {
		var d = shaders_ShaderAPI.glslDoc;
		c.docs = d;
		return d != null;
	};
	d["hlsl.function"] = function(c) {
		var d = shaders_ShaderAPI.hlslDoc;
		c.docs = d;
		return d != null;
	};
	d["lambda.function"] = function(c) {
		var d = c.lambdas.docs;
		c.docs = d;
		return d != null;
	};
	d["extfunction"] = function(c) {
		var d = gml_GmlAPI.extDoc;
		c.docs = d;
		return d != null;
	};
	d["namespace"] = function(ctx) {
		if(ctx.imports != null) {
			while(true) {
				var ns = ctx.imports.namespaces[ctx.tk.value];
				if(ns == null) {
					break;
				}
				var doc = ns.docStaticMap["create"];
				if(doc == null) {
					break;
				}
				var tk = ace_extern_AceTokenIteratorTools.stepBackwardNonText(ace_extern_AceTokenIteratorTools.copy(ctx.iter));
				if(tk == null || tk.value != "new") {
					break;
				}
				ctx.doc = doc;
				ctx.tk = tk;
				return true;
			}
		}
		var d = gml_GmlAPI.gmlDoc;
		ctx.docs = d;
		return d != null;
	};
	d["local"] = d["sublocal"] = function(ctx) {
		var imp = ctx.imports;
		if(imp == null) {
			return false;
		}
		var localType = imp.localTypes[ctx.tk.value];
		if(localType == null) {
			return false;
		}
		ctx.type = localType;
		var doc = ace_AceGmlTools.findSelfCallDoc(localType,imp);
		if(doc != null) {
			ctx.doc = doc;
			return true;
		} else {
			return false;
		}
	};
	d["field"] = function(ctx) {
		ctx.docs = { };
		return true;
	};
	d["localfield"] = function(ctx) {
		var ctx_scope = ctx.scope;
		var gmlFile = ctx.session.gmlFile;
		var tmp;
		if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
			tmp = gml_type_GmlTypeDef.simple(gmlFile.name);
		} else {
			var scopeDoc = gml_GmlAPI.gmlDoc[((ctx_scope) || (gmlFile.name))];
			tmp = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(ctx_scope) : scopeDoc.selfType : null;
		}
		if(tmp != null) {
			ctx.docs = { };
			return true;
		} else {
			return false;
		}
	};
	d["macro"] = function(ctx) {
		var m = gml_GmlAPI.gmlMacros[ctx.tk.value];
		if(m != null) {
			var mx = m.expr;
			var doc = ((((gml_GmlAPI.gmlDoc[mx]) || (gml_GmlAPI.extDoc[mx]))) || (gml_GmlAPI.stdDoc[mx]));
			if(doc != null) {
				ctx.doc = doc;
				return true;
			}
		}
		return false;
	};
	return d;
};
var tools_ArrayMap = function() {
	this.map = Object.create(null);
	this.array = [];
};
$hxClasses["tools.ArrayMap"] = tools_ArrayMap;
tools_ArrayMap.__name__ = "tools.ArrayMap";
tools_ArrayMap.prototype = {
	clear: function() {
		this.array.length = 0;
		var this1 = this.map;
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in this1) {
		if(has.call(this1,fd)) {
			delete this1[fd];
		}
		}
	}
	,get: function(key) {
		return this.map[key];
	}
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.map,key);
	}
	,set: function(key,val) {
		if(Object.prototype.hasOwnProperty.call(this.map,key)) {
			HxOverrides.remove(this.array,this.map[key]);
		}
		this.map[key] = val;
		this.array.push(val);
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.map,key)) {
			HxOverrides.remove(this.array,this.map[key]);
			delete this.map[key];
			return true;
		} else {
			return false;
		}
	}
	,addn: function(val) {
		var name = val.name;
		if(name == null) {
			console.error("Trying to assign a value into a null-field",this,val);
		} else {
			this.set(name,val);
		}
	}
	,addnArray: function(items) {
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			this.set(item.name,item);
		}
	}
	,nameSort: function() {
		this.array.sort(function(a,b) {
			if(a.name < b.name) {
				return -1;
			} else {
				return 1;
			}
		});
	}
	,forEach: function(fn) {
		var this1 = this.map;
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in this1) {
		if(has.call(this1,fd)) {
			fn(fd,this1[fd]);
		}
		}
	}
	,__class__: tools_ArrayMap
};
var tools_Dictionary = {};
tools_Dictionary.fromKeys = function(keys,val) {
	var out = Object.create(null);
	var _g = 0;
	while(_g < keys.length) out[keys[_g++]] = val;
	return out;
};
tools_Dictionary.move = function(this1,k1,k2) {
	if(Object.prototype.hasOwnProperty.call(this1,k2)) {
		return false;
	}
	if(Object.prototype.hasOwnProperty.call(this1,k1)) {
		var val = this1[k1];
		delete this1[k1];
		this1[k2] = val;
		return true;
	} else {
		return false;
	}
};
tools_Dictionary.defget = function(this1,k,def) {
	if(Object.prototype.hasOwnProperty.call(this1,k)) {
		return this1[k];
	} else {
		return def;
	}
};
var gml_GmlVersion = function(name,dir,isCustom) {
	this.isReady = false;
	this.name = name;
	this.dir = dir;
	this.isCustom = isCustom;
};
$hxClasses["gml.GmlVersion"] = gml_GmlVersion;
gml_GmlVersion.__name__ = "gml.GmlVersion";
gml_GmlVersion.init_1 = function() {
	var _g = 0;
	var _g1 = gml_GmlVersion.list;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		gml_GmlVersion.map[v.name] = v;
	}
	var loadVer = null;
	loadVer = function(v) {
		v.isReady = true;
		var selfConf = v.config;
		var parentName = selfConf.parent;
		var parentConf;
		if(parentName == null) {
			parentConf = null;
		} else {
			switch(parentName) {
			case "gml1":
				parentConf = gml_GmlVersionConfigDefaults.get(false);
				break;
			case "gml2":
				parentConf = gml_GmlVersionConfigDefaults.get(true);
				break;
			default:
				var parentVer = gml_GmlVersion.map[parentName];
				if(parentVer != null) {
					if(!parentVer.isReady) {
						loadVer(parentVer);
					}
					parentConf = parentVer.config;
				} else {
					console.error("Parent `" + parentName + "` for `" + v.name + "` is missing");
					parentConf = null;
				}
			}
		}
		if(parentConf != null) {
			var q = parentConf;
			var fd = null;
			var has = Object.prototype.hasOwnProperty;
			for (fd in q) {
			if(has.call(q,fd)) {
				switch(fd) {
				case "name":case "parent":
					break;
				default:
					if(!Object.prototype.hasOwnProperty.call(selfConf,fd)) {
						selfConf[fd] = Reflect.field(parentConf,fd);
					}
				}
			}
			}
		}
		var rs = selfConf.projectRegex;
		if(rs != null) {
			try {
				selfConf.projectRegexCached = new RegExp(rs,"i");
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				console.error("Regexp `" + rs + "` from `" + v.name + "` is invalid:",_g1);
			}
		}
		if(selfConf.additionalKeywords == null) {
			selfConf.additionalKeywords = [];
		}
		selfConf.additionalKeywordsMap = Object.create(null);
		var _g = 0;
		var _g1 = selfConf.additionalKeywords;
		while(_g < _g1.length) selfConf.additionalKeywordsMap[_g1[_g++]] = true;
		var loadVer1;
		switch(selfConf.projectMode) {
		case "gmk-splitter":
			loadVer1 = -81;
			break;
		case "gms1":
			loadVer1 = 1;
			break;
		case "gms2":
			loadVer1 = 2;
			break;
		default:
			loadVer1 = 0;
		}
		selfConf.projectModeId = loadVer1;
		v.label = selfConf.name;
		if(v.label == null) {
			v.label = v.name;
		}
	};
	var _g = 0;
	var _g1 = gml_GmlVersion.list;
	while(_g < _g1.length) loadVer(_g1[_g++]);
	gml_GmlVersion.v1 = gml_GmlVersion.map["v1"];
	gml_GmlVersion.v2 = gml_GmlVersion.map["v2"];
};
gml_GmlVersion.init = function() {
	if(Electron_API != null) {
		var found = Object.create(null);
		var procDir = function(dir,isCustom) {
			var _g = 0;
			var _g1 = Electron_FS.readdirSync(dir);
			while(_g < _g1.length) {
				var id = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(found,id)) {
					continue;
				}
				var full = dir + "/" + id;
				if(!Electron_FS.existsSync(full + "/config.json")) {
					continue;
				}
				found[id] = true;
				var v;
				if(id == "v23") {
					v = new gml_GmlVersionV23(id,full,isCustom);
				} else {
					v = new gml_GmlVersion(id,full,isCustom);
				}
				v.load();
				gml_GmlVersion.list.push(v);
			}
		};
		procDir(electron_FileWrap.userPath + "/api",true);
		procDir(haxe_io_Path.join([Main.modulePath,"api"]),false);
		var l1 = [];
		var _g = 0;
		var _g1 = gml_GmlVersion.list;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.isCustom == false) {
				l1.push(v);
			}
		}
		var _g = 0;
		var _g1 = gml_GmlVersion.list;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.isCustom == true) {
				l1.push(v);
			}
		}
		gml_GmlVersion.list = l1;
		gml_GmlVersion.init_1();
	} else {
		var ids = ["v1","v2","v23"];
		var left = ids.length;
		var _g = 0;
		while(_g < ids.length) {
			var id = ids[_g];
			++_g;
			var path = haxe_io_Path.join([Main.modulePath,"api/" + id]);
			var v;
			if(id == "v23") {
				v = new gml_GmlVersionV23(id,path,false);
			} else {
				v = new gml_GmlVersion(id,path,false);
			}
			v.load(function(e,v) {
				if((left -= 1) == 0) {
					gml_GmlVersion.init_1();
				}
			});
			gml_GmlVersion.list.push(v);
		}
		gml_GmlVersion.init_1();
	}
};
gml_GmlVersion.detect = function(gml) {
	return gml_GmlVersionDetect.run(gml);
};
gml_GmlVersion.prototype = {
	load: function(callback) {
		var _gthis = this;
		if(this.dir == "api/none") {
			this.config = gml_GmlVersionConfigDefaults.get(true);
			if(callback != null) {
				tools_JsTools.setImmediate(callback,null,this);
			}
		} else {
			var path = this.dir + "/config.json";
			if(Electron_API != null) {
				try {
					this.config = JSON.parse(Electron_FS.readFileSync(path,"utf8"));
					if(callback != null) {
						tools_JsTools.setImmediate(callback,null,this);
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					this.config = gml_GmlVersionConfigDefaults.get(true);
					switch(electron_Dialog.showMessageBox({ type : "error", message : ["Failed to load config.json for API `" + this.name + "` from `" + path + "`!","Consider fixing or removing it.",Std.string(_g1)].join("\n"), buttons : ["Show in directory","Rename to disable","Do nothing"]})) {
					case 0:
						electron_FileWrap.showItemInFolder(path);
						break;
					case 1:
						try {
							Electron_FS.renameSync(path,haxe_io_Path.withExtension(path,"json.disabled"));
						} catch( _g2 ) {
							electron_Dialog.showError("Failed to rename!");
						}
						break;
					}
					if(callback != null) {
						tools_JsTools.setImmediate(callback,_g1,this);
					}
				}
			} else {
				this.config = gml_GmlVersionConfigDefaults.get(this.name == "v2");
				var callback1 = function(e,c) {
					if(e == null) {
						_gthis.config = c;
						console.log("Loaded config for " + _gthis.name);
					} else {
						console.error("Failed to load config for " + _gthis.name + ":",e);
					}
					if(callback != null) {
						callback(e,_gthis);
					}
				};
				Electron_FS.readFile(path,"utf8",function(e,d) {
					if(d != null) {
						try {
							d = JSON.parse(d);
						} catch( _g ) {
							d = null;
							e = haxe_Exception.caught(_g).unwrap();
						}
					}
					callback1(e,d);
				});
			}
		}
	}
	,hasTernaryOperator: function() {
		return this.config.hasTernaryOperator;
	}
	,hasStringEscapeCharacters: function() {
		return this.config.hasStringEscapeCharacters;
	}
	,hasLiteralStrings: function() {
		return this.config.hasLiteralStrings;
	}
	,hasSingleQuoteStrings: function() {
		return this.config.hasSingleQuotedStrings;
	}
	,hasTemplateStrings: function() {
		if(!this.config.hasTemplateStrings) {
			return gml_GmlAPI.forceTemplateStrings;
		} else {
			return true;
		}
	}
	,hasQuoteTemplateStrings: function() {
		return this.config.hasQuoteTemplateStrings;
	}
	,hasFunctionLiterals: function() {
		if(this.config.additionalKeywords != null) {
			return this.config.additionalKeywords.indexOf("function") != -1;
		} else {
			return false;
		}
	}
	,hasJSDoc: function() {
		return this.config.hasJSDoc;
	}
	,hasScriptArgs: function() {
		return this.config.hasDefineArgs;
	}
	,hasScriptDotStatic: function() {
		return this.config.hasScriptDotStatic;
	}
	,resetOnDefine: function() {
		return this.config.resetLineCounterOnDefine;
	}
	,getName: function() {
		return this.name;
	}
	,hasColorLiterals: function() {
		return this.config.hasColorLiterals;
	}
	,__class__: gml_GmlVersion
};
var gml_GmlAPI = $hx_exports["GmlAPI"] = function() { };
$hxClasses["gml.GmlAPI"] = gml_GmlAPI;
gml_GmlAPI.__name__ = "gml.GmlAPI";
gml_GmlAPI.set_version = function(v) {
	if(gml_GmlAPI.version != v) {
		gml_GmlAPI.version = v;
		gml_GmlAPI.init();
	}
	return v;
};
gml_GmlAPI.stdClear = function() {
	gml_GmlAPI.stdDoc = Object.create(null);
	gml_GmlAPI.stdTypes = Object.create(null);
	gml_GmlAPI.stdTypeExists = Object.create(null);
	gml_GmlAPI.featherAliases = Object.create(null);
	gml_GmlAPI.stdComp.length = 0;
	gml_GmlAPI.stdInstComp.length = 0;
	gml_GmlAPI.stdInstCompMap = Object.create(null);
	gml_GmlAPI.stdInstKind = Object.create(null);
	gml_GmlAPI.stdInstType = Object.create(null);
	gml_GmlAPI.stdTypedefs = Object.create(null);
	gml_GmlAPI.stdNamespaceDefs.length = 0;
	gml_GmlAPI.stdFieldHints.length = 0;
	var sk = Object.create(null);
	var _g = 0;
	var _g1 = gml_GmlAPI.kwList;
	while(_g < _g1.length) sk[_g1[_g++]] = "keyword";
	var kw2 = gml_GmlAPI.version.config.additionalKeywords;
	if(kw2 != null) {
		var _g = 0;
		while(_g < kw2.length) sk[kw2[_g++]] = "keyword";
	}
	if(ui_Preferences.current.importMagic) {
		sk["new"] = "keyword";
	}
	if(ui_Preferences.current.castOperators) {
		sk["cast"] = "keyword";
		sk["as"] = "keyword";
	}
	sk["true"] = "constant.boolean";
	sk["false"] = "constant.boolean";
	var _g = 0;
	var _g1 = gml_type_GmlTypeTools.builtinTypes;
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		if(gml_type_GmlTypeTools.simplenameMap[k]) {
			continue;
		}
		sk[k] = "namespace";
	}
	gml_GmlAPI.stdKind = sk;
};
gml_GmlAPI.extCompAdd = function(comp) {
	if(!Object.prototype.hasOwnProperty.call(gml_GmlAPI.extCompMap,comp.name)) {
		gml_GmlAPI.extCompMap[comp.name] = comp;
		gml_GmlAPI.extComp.push(comp);
	}
};
gml_GmlAPI.extClear = function() {
	gml_GmlAPI.extDoc = Object.create(null);
	gml_GmlAPI.extKind = Object.create(null);
	gml_GmlAPI.extComp.length = 0;
	gml_GmlAPI.extCompMap = Object.create(null);
	gml_GmlAPI.extArgc = Object.create(null);
};
gml_GmlAPI.ensureNamespace = function(name,opt) {
	var ns = gml_GmlAPI.gmlNamespaces[name];
	if(ns == null) {
		ns = new gml_GmlNamespace(name);
		gml_GmlAPI.gmlNamespaces[name] = ns;
		gml_GmlAPI.gmlNamespaceComp.set(name,{ name : name, value : name, score : 0, meta : "namespace", doc : null});
		if(!Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlKind,name) && !Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdKind,name) && (opt != null ? opt.setKind : null) != false) {
			gml_GmlAPI.gmlKind[name] = "namespace";
		}
		if(name == "instance" || name == "object") {
			ns.isObject = true;
		}
	}
	return ns;
};
gml_GmlAPI.gmlClear = function() {
	gml_GmlAPI.gmlDoc = Object.create(null);
	gml_GmlAPI.gmlKind = Object.create(null);
	gml_GmlAPI.gmlTypes = Object.create(null);
	gml_GmlAPI.gmlTypedefs = Object.create(null);
	gml_GmlAPI.gmlComp.length = 0;
	gml_GmlAPI.gmlEnums = Object.create(null);
	gml_GmlAPI.gmlEnumTypeComp.length = 0;
	gml_GmlAPI.gmlMacros = Object.create(null);
	gml_GmlAPI.gmlMFuncs = Object.create(null);
	gml_GmlAPI.gmlAssetIDs = Object.create(null);
	gml_GmlAPI.gmlAssetComp = Object.create(null);
	gml_GmlAPI.gmlGlobalFieldMap = Object.create(null);
	gml_GmlAPI.gmlGlobalFieldComp.length = 0;
	gml_GmlAPI.gmlGlobalFullMap = Object.create(null);
	gml_GmlAPI.gmlGlobalTypes = Object.create(null);
	gml_GmlAPI.gmlGlobalFullComp.length = 0;
	gml_GmlAPI.gmlInstFieldMap = Object.create(null);
	gml_GmlAPI.gmlInstFieldComp.length = 0;
	gml_GmlAPI.gmlLookup = Object.create(null);
	gml_GmlAPI.gmlLookupItems.length = 0;
	gml_GmlAPI.gmlNamespaces = Object.create(null);
	gml_GmlAPI.gmlNamespaceComp.clear();
	var _g = 0;
	var _g1 = gmx_GmxLoader.assetTypes;
	while(_g < _g1.length) gml_GmlAPI.gmlAssetIDs[_g1[_g++]] = Object.create(null);
	var _g = 0;
	var _g1 = gml_type_GmlTypeTools.builtinTypes;
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var ns = gml_GmlAPI.ensureNamespace(k,{ setKind : !gml_type_GmlTypeTools.simplenameMap[k]});
		ns.canCastToStruct = ns.name == "struct";
		ns.noTypeRef = true;
	}
	var _g = 0;
	var _g1 = gml_GmlAPI.stdFieldHints;
	while(_g < _g1.length) {
		var hint = _g1[_g];
		++_g;
		var ns = gml_GmlAPI.ensureNamespace(hint.namespace);
		ns.noTypeRef = true;
		ns.addFieldHint(hint.field,hint.isInst,hint.comp,hint.doc,hint.type);
	}
	var _g = 0;
	var _g1 = gml_GmlAPI.stdNamespaceDefs;
	while(_g < _g1.length) {
		var pair = _g1[_g];
		++_g;
		var name = pair.name;
		var ns = gml_GmlAPI.gmlNamespaces[name];
		if(ns == null) {
			ns = new gml_GmlNamespace(name);
			gml_GmlAPI.gmlNamespaces[name] = ns;
			gml_GmlAPI.gmlNamespaceComp.set(name,{ name : name, value : name, score : 0, meta : "namespace", doc : null});
			if(name == "instance" || name == "object") {
				ns.isObject = true;
			}
		}
		ns.canCastToStruct = false;
		ns.noTypeRef = true;
		var _g2 = 0;
		var _g3 = pair.parents;
		while(_g2 < _g3.length) {
			var parent = _g3[_g2];
			++_g2;
			if(ns.procSpecialInterfaces(parent,true)) {
				continue;
			}
			if(ns.parent != null) {
				console.warn("Re-assigning parent for " + pair.name);
			}
			ns.parent = gml_GmlAPI.gmlNamespaces[parent];
			if(ns.parent != null) {
				ns.canCastToStruct = ns.parent.canCastToStruct;
			} else {
				console.warn("Parent " + parent + " is missing for " + pair.name);
			}
		}
		if(!ns.avoidHighlight) {
			gml_GmlAPI.stdKind[name] = "namespace";
		}
	}
	gml_type_GmlTypeParser.clear();
};
gml_GmlAPI.init = function() {
	gml_GmlAPILoader.init();
};
var shaders_ShaderAPI = function() { };
$hxClasses["shaders.ShaderAPI"] = shaders_ShaderAPI;
shaders_ShaderAPI.__name__ = "shaders.ShaderAPI";
shaders_ShaderAPI.init = function() {
	var name = "glsl";
	var kind = Object.create(null);
	var doc = Object.create(null);
	var comp = [];
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/" + name + "_names"]),"utf8",function(e,defs) {
		parsers_GmlParseAPI.loadStd(defs,{ kind : kind, doc : doc, comp : comp, kindPrefix : name});
		Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/keywords_" + name + ".txt"]),"utf8",function(e,d) {
			tools_ERegTools.each(new EReg("(\\w+)","gm"),d,function(rx) {
				var k = rx.matched(1);
				kind[k] = "keyword";
			});
		});
	});
	shaders_ShaderAPI.glslKind = kind;
	shaders_ShaderAPI.glslComp = comp;
	shaders_ShaderAPI.glslDoc = doc;
	var name1 = "hlsl";
	var kind1 = Object.create(null);
	var doc1 = Object.create(null);
	var comp1 = [];
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/" + name1 + "_names"]),"utf8",function(e,defs) {
		parsers_GmlParseAPI.loadStd(defs,{ kind : kind1, doc : doc1, comp : comp1, kindPrefix : name1});
		Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/keywords_" + name1 + ".txt"]),"utf8",function(e,d) {
			tools_ERegTools.each(new EReg("(\\w+)","gm"),d,function(rx) {
				var k = rx.matched(1);
				kind1[k] = "keyword";
			});
		});
	});
	shaders_ShaderAPI.hlslKind = kind1;
	shaders_ShaderAPI.hlslComp = comp1;
	shaders_ShaderAPI.hlslDoc = doc1;
};
var ace_extern_AceTokenIteratorTools = function() { };
$hxClasses["ace.extern.AceTokenIteratorTools"] = ace_extern_AceTokenIteratorTools;
ace_extern_AceTokenIteratorTools.__name__ = "ace.extern.AceTokenIteratorTools";
ace_extern_AceTokenIteratorTools.copy = function(it) {
	var ci = new AceTokenIterator(it.$session,it.$row,0);
	ci.$tokenIndex = it.$tokenIndex;
	return ci;
};
ace_extern_AceTokenIteratorTools.isEOL = function(it) {
	return it.$tokenIndex >= it.$rowTokens.length;
};
ace_extern_AceTokenIteratorTools.stepBackwardSafe = function(it) {
	if(it.$row > 0 || it.$tokenIndex > 0) {
		return it.stepBackward();
	} else {
		return null;
	}
};
ace_extern_AceTokenIteratorTools.stepForwardSafe = function(it) {
	if(it.$row < it.$session.getLength() || it.$tokenIndex < it.$rowTokens.length - 1) {
		return it.stepForward();
	} else {
		return null;
	}
};
ace_extern_AceTokenIteratorTools.stepBackwardNonText = function(it) {
	var tk;
	do tk = ace_extern_AceTokenIteratorTools.stepBackwardSafe(it); while(tk != null && tk.type == "text");
	return tk;
};
ace_extern_AceTokenIteratorTools.stepForwardNonText = function(it) {
	var tk;
	do tk = ace_extern_AceTokenIteratorTools.stepForwardSafe(it); while(tk != null && tk.type == "text");
	return tk;
};
ace_extern_AceTokenIteratorTools.peekBackwardNonText = function(it) {
	var row = it.$row;
	var rowTokens = it.$rowTokens;
	var tokenIndex = it.$tokenIndex;
	var tk = ace_extern_AceTokenIteratorTools.stepBackwardNonText(it);
	it.$row = row;
	it.$rowTokens = rowTokens;
	it.$tokenIndex = tokenIndex;
	return tk;
};
ace_extern_AceTokenIteratorTools.setTo = function(it,to) {
	it.$session = to.$session;
	it.$row = to.$row;
	it.$rowTokens = to.$rowTokens;
	it.$tokenIndex = to.$tokenIndex;
};
var gml_type_GmlTypeTools = function() { };
$hxClasses["gml.type.GmlTypeTools"] = gml_type_GmlTypeTools;
gml_type_GmlTypeTools.__name__ = "gml.type.GmlTypeTools";
gml_type_GmlTypeTools.getNamespace = function(t) {
	if(t == null) {
		return null;
	} else if(t._hx_index == 0) {
		return t.name;
	} else {
		return null;
	}
};
gml_type_GmlTypeTools.getKind = function(t) {
	if(t == null) {
		return null;
	} else if(t._hx_index == 0) {
		return t.kind;
	} else {
		return null;
	}
};
gml_type_GmlTypeTools.isNullable = function(t) {
	return gml_type_GmlTypeTools.getKind(t) == 3;
};
gml_type_GmlTypeTools.isType = function(t) {
	return gml_type_GmlTypeTools.getKind(t) == 4;
};
gml_type_GmlTypeTools.isArray = function(t) {
	return gml_type_GmlTypeTools.getKind(t) == 32;
};
gml_type_GmlTypeTools.isAny = function(t) {
	if(t == null) {
		return true;
	} else if(t._hx_index == 0) {
		if(t.kind == 1) {
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
gml_type_GmlTypeTools.unwrapParam = function(t,ind) {
	if(ind == null) {
		ind = 0;
	}
	if(t == null) {
		return null;
	} else if(t._hx_index == 0) {
		return t.params[ind];
	} else {
		return null;
	}
};
gml_type_GmlTypeTools.unwrapParams = function(t) {
	if(t == null) {
		return null;
	} else if(t._hx_index == 0) {
		return t.params;
	} else {
		return null;
	}
};
gml_type_GmlTypeTools.mapArray = function(arr,f) {
	var out = null;
	var _g_current = 0;
	var _g_array = arr;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var t2 = f(_g_value);
		if(t2 != _g_value) {
			if(out == null) {
				out = arr.slice(0,_g_key);
			}
			out.push(t2);
		} else if(out != null) {
			out.push(_g_value);
		}
	}
	if(out != null) {
		return out;
	} else {
		return arr;
	}
};
gml_type_GmlTypeTools.map = function(t,f) {
	switch(t._hx_index) {
	case 0:
		var _g = t.params;
		var tp2 = gml_type_GmlTypeTools.mapArray(_g,f);
		if(tp2 != _g) {
			return gml_type_GmlType.TInst(t.name,tp2,t.kind);
		} else {
			return t;
		}
		break;
	case 1:
		var _g = t.types;
		var et2 = gml_type_GmlTypeTools.mapArray(_g,f);
		if(et2 != _g) {
			return gml_type_GmlType.TEither(et2);
		} else {
			return t;
		}
		break;
	case 4:
		var _g = t.type;
		var t2 = f(_g);
		if(t2 != _g) {
			return gml_type_GmlType.THint(t.hint,t2);
		} else {
			return t;
		}
		break;
	default:
		return t;
	}
};
gml_type_GmlTypeTools.mapTemplateTypes = function(t,templateTypes) {
	if(templateTypes == null) {
		return t;
	}
	var depth = 0;
	var f = null;
	f = function(t) {
		if(t == null) {
			return null;
		} else if(t._hx_index == 3) {
			var r = templateTypes[t.ind];
			if(r != null) {
				return r;
			} else {
				return t.constraint;
			}
		} else {
			if((depth += 1) >= 200) {
				throw haxe_Exception.thrown("map stack overflow");
			}
			depth -= 1;
			return gml_type_GmlTypeTools.map(t,f);
		}
	};
	return f(t);
};
gml_type_GmlTypeTools.resolve = function(self,depth) {
	if(depth == null) {
		depth = 0;
	}
	while(true) {
		if(++depth >= 128) {
			return null;
		}
		if(self == null) {
			return null;
		} else {
			switch(self._hx_index) {
			case 0:
				var _g = self.name;
				if(self.kind == 2) {
					var td = ((gml_GmlAPI.gmlTypedefs[_g]) || (gml_GmlAPI.stdTypedefs[_g]));
					if(td != null) {
						return gml_type_GmlTypeTools.mapTemplateTypes(td,self.params);
					}
					if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlEnums,_g)) {
						return gml_type_GmlType.TEnumTuple(_g);
					}
				}
				break;
			case 4:
				self = self.type;
				continue;
			default:
			}
		}
		return self;
	}
};
gml_type_GmlTypeTools.resolveRec = function(self,depth) {
	if(depth == null) {
		depth = 0;
	}
	if(++depth >= 128) {
		return null;
	}
	if(self == null) {
		return null;
	} else {
		switch(self._hx_index) {
		case 0:
			var _g = self.name;
			var _g1 = self.params;
			var _g2 = self.kind;
			var td = _g2 == 2 ? gml_GmlAPI.gmlTypedefs[_g] : null;
			if(td != null) {
				var result = new Array(_g1.length);
				var _g3 = 0;
				var _g4 = _g1.length;
				while(_g3 < _g4) {
					var i = _g3++;
					result[i] = gml_type_GmlTypeTools.resolve(_g1[i],depth);
				}
				return gml_type_GmlTypeTools.mapTemplateTypes(td,result);
			}
			var newParams = null;
			var _g_current = 0;
			var _g_array = _g1;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				var p1 = gml_type_GmlTypeTools.resolve(_g_value,depth);
				if(p1 != _g_value) {
					if(newParams == null) {
						newParams = _g1.slice();
					}
					newParams[_g_key] = p1;
				}
			}
			if(newParams != null) {
				return gml_type_GmlType.TInst(_g,newParams,_g2);
			} else {
				return self;
			}
			break;
		case 1:
			var _g = self.types;
			var newTypes = null;
			var _g_current = 0;
			var _g_array = _g;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				var p1 = gml_type_GmlTypeTools.resolve(_g_value,depth);
				if(p1 != _g_value) {
					if(newTypes == null) {
						newTypes = _g.slice();
					}
					newTypes[_g_key] = p1;
				}
			}
			if(newTypes != null) {
				return gml_type_GmlType.TEither(newTypes);
			} else {
				return self;
			}
			break;
		case 4:
			return gml_type_GmlTypeTools.resolve(self.type,depth);
		default:
			return self;
		}
	}
};
gml_type_GmlTypeTools.equals = function(a,b,tpl,depth) {
	if(depth == null) {
		depth = 0;
	}
	while(true) {
		if(++depth > 128) {
			console.warn("equals stack overflow");
			return false;
		}
		if(a == b) {
			return true;
		}
		a = gml_type_GmlTypeTools.resolve(a);
		b = gml_type_GmlTypeTools.resolve(b);
		if(b != null) {
			switch(b._hx_index) {
			case 0:
				var _g = b.params;
				if(b.kind == 7) {
					if(a == null) {
						return true;
					} else if(a._hx_index == 0) {
						var _g1 = a.params;
						var _g2 = 0;
						var _g3 = _g.length;
						while(_g2 < _g3) {
							var i = _g2++;
							gml_type_GmlTypeTools.equals(_g1[i],_g[i],tpl,depth);
						}
						return true;
					} else {
						return false;
					}
				}
				break;
			case 3:
				var _g4 = b.ind;
				var _g5 = b.constraint;
				if(tpl == null) {
					return true;
				}
				if(tpl[_g4] != null) {
					b = tpl[_g4];
					tpl = null;
					continue;
				} else {
					if(a != null) {
						if(_g5 == null || gml_type_GmlTypeCanCastTo.canCastTo(a,_g5,tpl,null)) {
							tpl[_g4] = a;
						} else {
							return false;
						}
					}
					return true;
				}
				break;
			case 4:
				b = b.type;
				continue;
			default:
			}
		}
		if(a == null) {
			if(b == null) {
				return true;
			} else if(b._hx_index == 0) {
				if(b.kind == 1) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else {
			switch(a._hx_index) {
			case 0:
				var _g6 = a.kind;
				if(_g6 == 1) {
					if(b == null) {
						return true;
					} else if(b._hx_index == 0) {
						if(b.kind == 1) {
							return true;
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else if(b == null) {
					return false;
				} else if(b._hx_index == 0) {
					var _g7 = b.params;
					if(_g6 != b.kind) {
						return false;
					}
					if(_g6 == 2 && a.name != b.name) {
						return false;
					}
					var _g_current = 0;
					var _g_array = a.params;
					while(_g_current < _g_array.length) if(!gml_type_GmlTypeTools.equals(_g_array[_g_current++],_g7[_g_current - 1],tpl,depth)) {
						return false;
					}
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				var _g8 = a.types;
				var et2;
				if(b == null) {
					return false;
				} else if(b._hx_index == 1) {
					et2 = b.types;
				} else {
					return false;
				}
				var en = _g8.length;
				if(en != et2.length) {
					return false;
				}
				var ei1 = -1;
				while(++ei1 < en) {
					var et = _g8[ei1];
					var ei2 = -1;
					while(++ei2 < en) if(gml_type_GmlTypeTools.equals(et,et2[ei2],tpl,depth)) {
						break;
					}
					if(ei2 >= en) {
						return false;
					}
				}
				return true;
			case 2:
				var fm2;
				if(b == null) {
					return false;
				} else if(b._hx_index == 2) {
					fm2 = b.inf;
				} else {
					return false;
				}
				var n1 = 0;
				var access = a.inf.fields;
				var _g_keys = Reflect.fields(access);
				var _g_index = 0;
				while(_g_index < _g_keys.length) {
					var key = _g_keys[_g_index++];
					++n1;
					var fd2 = fm2.fields[key];
					if(fd2 == null) {
						return false;
					}
					if(!gml_type_GmlTypeTools.equals(access[key].type,fd2.type,tpl,depth)) {
						return false;
					}
				}
				return n1 == tools_NativeObject.countFields(fm2.fields);
			case 3:
				return false;
			case 4:
				a = a.type;
				continue;
			case 5:
				var _g9 = a.meta;
				var m2;
				if(b == null) {
					return false;
				} else if(b._hx_index == 5) {
					m2 = b.meta;
				} else {
					return false;
				}
				if(_g9.fieldList.length != m2.fieldList.length) {
					return false;
				}
				var _g10 = 0;
				var _g11 = _g9.fieldList;
				while(_g10 < _g11.length) {
					var f1 = _g11[_g10];
					++_g10;
					var f2 = m2.fieldMap[f1.name];
					if(f2 == null) {
						return false;
					}
					if(!gml_type_GmlTypeTools.equals(f1.type,f2.type,tpl,depth)) {
						return false;
					}
				}
				a = _g9.defaultType;
				b = m2.defaultType;
				continue;
			case 6:
				if(b == null) {
					return false;
				} else if(b._hx_index == 6) {
					return a.enumName == b.enumName;
				} else {
					return false;
				}
				break;
			}
		}
	}
};
gml_type_GmlTypeTools.canCastTo = function(from,to,tpl,imp) {
	return gml_type_GmlTypeCanCastTo.canCastTo(from,to,tpl,imp);
};
gml_type_GmlTypeTools.toString = function(type,tpl) {
	while(true) {
		var _gtpl = [tpl];
		if(type == null) {
			return "?";
		} else {
			switch(type._hx_index) {
			case 0:
				var _g = type.name;
				var _g1 = type.params;
				var _g2 = type.kind;
				if(_g1.length == 1) {
					var _g3 = _g1[0];
					switch(_g2) {
					case 3:
						return gml_type_GmlTypeTools.toString(_g3,_gtpl[0]) + "?";
					case 6:
						if(_g1.length < 3) {
							type = _g1[0];
							tpl = null;
							continue;
						} else {
							return "(" + gml_type_GmlTypeTools.toString(_g1[0]) + ":" + gml_type_GmlTypeTools.toString(_g1[2]) + ")";
						}
						break;
					case 9:
						var n = _g1.length - 1;
						if(n < 0) {
							return "function";
						}
						var s = "function(";
						var i = -1;
						while(++i < n) {
							if(i > 0) {
								s += ", ";
							}
							s += ":" + gml_type_GmlTypeTools.toString(_g1[i],_gtpl[0]);
						}
						return s + ")➜" + gml_type_GmlTypeTools.toString(_g1[n],_gtpl[0]);
					default:
						var s1 = _g;
						if(_g1.length > 0) {
							s1 = _g + "<";
							var _g_current = 0;
							var _g_array = _g1;
							while(_g_current < _g_array.length) {
								var _g_value = _g_array[_g_current++];
								if(_g_current - 1 > 0) {
									s1 += ", ";
								}
								s1 += gml_type_GmlTypeTools.toString(_g_value,_gtpl[0]);
							}
							s1 += ">";
						}
						return s1;
					}
				} else {
					switch(_g2) {
					case 6:
						if(_g1.length < 3) {
							type = _g1[0];
							tpl = null;
							continue;
						} else {
							return "(" + gml_type_GmlTypeTools.toString(_g1[0]) + ":" + gml_type_GmlTypeTools.toString(_g1[2]) + ")";
						}
						break;
					case 9:
						var n1 = _g1.length - 1;
						if(n1 < 0) {
							return "function";
						}
						var s2 = "function(";
						var i1 = -1;
						while(++i1 < n1) {
							if(i1 > 0) {
								s2 += ", ";
							}
							s2 += ":" + gml_type_GmlTypeTools.toString(_g1[i1],_gtpl[0]);
						}
						return s2 + ")➜" + gml_type_GmlTypeTools.toString(_g1[n1],_gtpl[0]);
					default:
						var s3 = _g;
						if(_g1.length > 0) {
							s3 = _g + "<";
							var _g_current1 = 0;
							var _g_array1 = _g1;
							while(_g_current1 < _g_array1.length) {
								var _g_value1 = _g_array1[_g_current1++];
								if(_g_current1 - 1 > 0) {
									s3 += ", ";
								}
								s3 += gml_type_GmlTypeTools.toString(_g_value1,_gtpl[0]);
							}
							s3 += ">";
						}
						return s3;
					}
				}
				break;
			case 1:
				var s4 = "(";
				var _g_current2 = 0;
				var _g_array2 = type.types;
				while(_g_current2 < _g_array2.length) {
					var _g_value2 = _g_array2[_g_current2++];
					if(_g_current2 - 1 > 0) {
						s4 += "|";
					}
					s4 += gml_type_GmlTypeTools.toString(_g_value2,_gtpl[0]);
				}
				return s4 + ")";
			case 2:
				var s5 = ["{ "];
				var sep = [false];
				var this1 = type.inf.fields;
				var fn = (function(_gtpl,sep,s) {
					return function(k,fd) {
						if(sep[0]) {
							s[0] += ", ";
						} else {
							sep[0] = true;
						}
						s[0] += k + ": " + gml_type_GmlTypeTools.toString(fd.type,_gtpl[0]);
					};
				})(_gtpl,sep,s5);
				var fd = null;
				var has = Object.prototype.hasOwnProperty;
				for (fd in this1) {
				if(has.call(this1,fd)) {
					fn(fd,this1[fd]);
				}
				}
				if(sep[0]) {
					s5[0] += " ";
				}
				return s5[0] + "}";
			case 3:
				var _g4 = type.name;
				var _g5 = type.constraint;
				var tt = ((_gtpl[0]) && (_gtpl[0][type.ind]));
				if(tt != null) {
					type = tt;
					tpl = null;
					continue;
				}
				var s6 = _g4;
				if(_g5 != null) {
					s6 = "(" + _g4 + ":" + gml_type_GmlTypeTools.toString(_g5) + ")";
				}
				return s6;
			case 4:
				return type.hint + ":" + gml_type_GmlTypeTools.toString(type.type,_gtpl[0]);
			case 5:
				var _g6 = type.meta;
				var s7 = "specified_map<";
				var sep1 = false;
				var _this = _g6.fieldList;
				var _g_current3 = 0;
				while(_g_current3 < _this.length) {
					var _g_value3 = _this[_g_current3];
					++_g_current3;
					if(sep1) {
						s7 += ", ";
					} else {
						sep1 = true;
					}
					s7 += _g_value3.name + ":" + gml_type_GmlTypeTools.toString(_g_value3.type);
				}
				if(sep1) {
					s7 += ", ";
				}
				s7 += gml_type_GmlTypeTools.toString(_g6.defaultType);
				return s7 + ">";
			case 6:
				return "enum_tuple<" + type.enumName + ">";
			}
		}
	}
};
gml_type_GmlTypeTools.patchTemplateItems = function(s,templateItems) {
	if(s == null || templateItems == null) {
		return s;
	}
	var _g_current = 0;
	while(_g_current < templateItems.length) {
		var tn = [templateItems[_g_current++]];
		s = s.replace(tn[0].regex,(function(tn,i) {
			return function() {
				if(tn[0].constraint != null) {
					return "TemplateItem" + "<" + tn[0].name + ";_" + i[0] + ";" + tn[0].constraint + ">";
				} else {
					return "TemplateItem" + "<" + tn[0].name + ";_" + i[0] + ">";
				}
			};
		})(tn,[_g_current - 1]));
	}
	return s;
};
gml_type_GmlTypeTools.getSelfCallDoc = function(self,imp) {
	return ((self) && (ace_AceGmlTools.findSelfCallDoc(self,imp)));
};
var gml_type_GmlType = $hxEnums["gml.type.GmlType"] = { __ename__:true,__constructs__:null
	,TInst: ($_=function(name,params,kind) { return {_hx_index:0,name:name,params:params,kind:kind,__enum__:"gml.type.GmlType",toString:$estr}; },$_._hx_name="TInst",$_.__params__ = ["name","params","kind"],$_)
	,TEither: ($_=function(types) { return {_hx_index:1,types:types,__enum__:"gml.type.GmlType",toString:$estr}; },$_._hx_name="TEither",$_.__params__ = ["types"],$_)
	,TAnon: ($_=function(inf) { return {_hx_index:2,inf:inf,__enum__:"gml.type.GmlType",toString:$estr}; },$_._hx_name="TAnon",$_.__params__ = ["inf"],$_)
	,TTemplate: ($_=function(name,ind,constraint) { return {_hx_index:3,name:name,ind:ind,constraint:constraint,__enum__:"gml.type.GmlType",toString:$estr}; },$_._hx_name="TTemplate",$_.__params__ = ["name","ind","constraint"],$_)
	,THint: ($_=function(hint,type) { return {_hx_index:4,hint:hint,type:type,__enum__:"gml.type.GmlType",toString:$estr}; },$_._hx_name="THint",$_.__params__ = ["hint","type"],$_)
	,TSpecifiedMap: ($_=function(meta) { return {_hx_index:5,meta:meta,__enum__:"gml.type.GmlType",toString:$estr}; },$_._hx_name="TSpecifiedMap",$_.__params__ = ["meta"],$_)
	,TEnumTuple: ($_=function(enumName) { return {_hx_index:6,enumName:enumName,__enum__:"gml.type.GmlType",toString:$estr}; },$_._hx_name="TEnumTuple",$_.__params__ = ["enumName"],$_)
};
gml_type_GmlType.__constructs__ = [gml_type_GmlType.TInst,gml_type_GmlType.TEither,gml_type_GmlType.TAnon,gml_type_GmlType.TTemplate,gml_type_GmlType.THint,gml_type_GmlType.TSpecifiedMap,gml_type_GmlType.TEnumTuple];
var tools_RegExpCache = function(flags) {
	this.pattern = null;
	this.regex = null;
	this.flags = flags;
};
$hxClasses["tools.RegExpCache"] = tools_RegExpCache;
tools_RegExpCache.__name__ = "tools.RegExpCache";
tools_RegExpCache.prototype = {
	update: function(pt,defPattern) {
		if(pt == null) {
			pt = defPattern;
		}
		if(this.pattern == pt) {
			return this.regex;
		}
		this.pattern = pt;
		if(pt != null) {
			try {
				this.regex = new RegExp(pt,this.flags);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				console.error("Error compiling a regular expression from pattern `" + pt + "`:",_g1);
				this.regex = null;
			}
		} else {
			this.regex = null;
		}
		return this.regex;
	}
	,__class__: tools_RegExpCache
};
var gml_GmlFuncDoc = function(name,pre,post,args,rest) {
	this.templateSelf = null;
	this.templateItems = null;
	this.minArgsCache = null;
	this.selfType = null;
	this.parentName = null;
	this.isConstructor = false;
	this.hasReturn = null;
	this.argTypes = null;
	this.name = name;
	this.pre = pre;
	this.post = post;
	this.args = args;
	this.rest = rest;
};
$hxClasses["gml.GmlFuncDoc"] = gml_GmlFuncDoc;
gml_GmlFuncDoc.__name__ = "gml.GmlFuncDoc";
gml_GmlFuncDoc.create = function(name,args,rest) {
	if(args == null) {
		args = [];
		if(rest == null) {
			rest = false;
		}
	} else if(rest == null) {
		rest = false;
		var _g = 0;
		while(_g < args.length) if(args[_g++].includes("...")) {
			rest = true;
		}
	}
	return new gml_GmlFuncDoc(name,name + "(",")",args,rest);
};
gml_GmlFuncDoc.createRest = function(name) {
	return new gml_GmlFuncDoc(name,name + "(",")",["..."],true);
};
gml_GmlFuncDoc.prototype = {
	get_minArgs: function() {
		if(this.minArgsCache != null) {
			return this.minArgsCache;
		}
		var argi = this.args.length;
		while(argi > 0) {
			var arg = this.args[argi - 1];
			if(arg == null || gml_GmlFuncDoc.rxIsOpt.test(arg) || arg.endsWith("*") || arg.includes("=") || arg.includes("optional")) {
				--argi;
			} else if(arg.includes("]") && !arg.includes("[")) {
				var argk = argi;
				while(--argk >= 0) if(this.args[argk].includes("[")) {
					break;
				}
				if(argk < 0) {
					break;
				} else {
					argi = argk;
				}
			} else {
				break;
			}
		}
		this.minArgsCache = argi;
		return this.minArgsCache;
	}
	,get_returnType: function() {
		if(this.post == this.__returnType_cache_post) {
			return this.__returnType_cache_type;
		}
		var mt = gml_GmlFuncDoc.__returnType_rx.exec(this.post);
		var str = ((mt) && (mt[1]));
		var type;
		if(str != null) {
			if(this.templateItems != null) {
				str = gml_type_GmlTypeTools.patchTemplateItems(str,this.templateItems);
			}
			type = gml_type_GmlTypeParser.parse(str,this.name);
		} else {
			type = null;
		}
		this.__returnType_cache_post = this.post;
		this.__returnType_cache_type = type;
		return type;
	}
	,get_returnTypeString: function() {
		var mt = gml_GmlFuncDoc.__returnType_rx.exec(this.post);
		return ((mt) && (mt[1]));
	}
	,set_returnTypeString: function(typeStr) {
		this.post = this.post.replace(gml_GmlFuncDoc.__returnType_rx,function(_) {
			if(typeStr == null) {
				return ")";
			}
			if(typeStr == "") {
				return ")➜";
			}
			var what = /\s+/;
			return ")➜" + typeStr.replace(what,"");
		});
		this.hasReturn = typeStr != null && typeStr != "void";
		return typeStr;
	}
	,get_maxArgs: function() {
		if(this.rest) {
			return 2147483647;
		} else {
			return this.args.length;
		}
	}
	,clear: function() {
		this.post = ")";
		this.args.length = 0;
		this.rest = false;
		this.minArgsCache = null;
	}
	,getAcText: function() {
		return this.pre + this.args.join(", ") + this.post;
	}
	,getNamelessAcText: function() {
		return "(" + this.args.join(", ") + this.post;
	}
	,getConstructorType: function() {
		return this.name + gml_type_GmlTypeTemplateItem.joinTemplateString(this.templateItems,false);
	}
	,getFunctionType: function() {
		if((this.hasReturn ? this.get_returnType() : null) == null && this.argTypes == null && this.hasReturn == null) {
			return gml_type_GmlTypeDef.anyFunction;
		}
		var params = [];
		if(this.argTypes != null) {
			var _g = 0;
			var _g1 = this.argTypes;
			while(_g < _g1.length) params.push(_g1[_g++]);
		} else {
			var _g = 0;
			var _g1 = this.args;
			while(_g < _g1.length) {
				++_g;
				params.push(null);
			}
		}
		if(this.rest && params.length > 0) {
			params.push(gml_type_GmlTypeDef.rest([params.pop()]));
		}
		if(this.hasReturn) {
			params.push(this.get_returnType());
		} else {
			params.push(gml_type_GmlTypeDef.void);
		}
		return gml_type_GmlType.TInst("function",params,9);
	}
	,trimArgs: function() {
		var ntrx = gml_GmlFuncDoc.nameTrimRegex.update(gml_Project.current.properties.argNameRegex);
		if(ntrx == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.args.length;
		while(_g < _g1) {
			var i = _g++;
			var mt = ntrx.exec(this.args[i]);
			if(mt != null && mt[1] != null) {
				this.args[i] = mt[1];
			}
		}
	}
	,__class__: gml_GmlFuncDoc
};
var file_FileKind = function() {
	this.checkSelfForChanges = true;
};
$hxClasses["file.FileKind"] = file_FileKind;
file_FileKind.__name__ = "file.FileKind";
file_FileKind.register = function(fileExt,file) {
	var arr = file_FileKind.map[fileExt];
	if(arr == null) {
		arr = [];
		file_FileKind.map[fileExt] = arr;
	}
	arr.unshift(file);
};
file_FileKind.registerTabStateLoader = function(tabStateKind,fn) {
	var arr = file_FileKind.tabStateLoaders[tabStateKind];
	if(arr == null) {
		arr = [];
		file_FileKind.tabStateLoaders[tabStateKind] = arr;
	}
	arr.unshift(fn);
};
file_FileKind.initStatic = function() {
	file_FileKind.register("gml",file_kind_gml_KGmlScript.inst);
	file_FileKind.register("txt",file_kind_misc_KPlain.inst);
	file_FileKind.register("shader",file_kind_misc_KGLSL.inst);
	file_FileKind.register("vsh",file_kind_misc_KGLSL.inst);
	file_FileKind.register("fsh",file_kind_misc_KGLSL.inst);
	file_FileKind.register("gmx",file_kind_KGmx.inst);
	file_kind_KGmx.register("object",file_kind_gmx_KGmxEvents.inst);
	file_kind_KGmx.register("timeline",file_kind_gmx_KGmxMoments.inst);
	file_kind_KGmx.register("project",new file_kind_gmx_KGmxMacros(false));
	file_kind_KGmx.register("config",new file_kind_gmx_KGmxMacros(true));
	file_kind_KGmx.register("sprite",file_kind_gmx_KGmxSprite.inst);
	file_FileKind.register("yy",file_kind_KYy.inst);
	file_kind_KYy.register("GMObject",file_kind_yy_KYyEvents.inst);
	file_kind_KYy.register("GMShader",file_kind_yy_KYyShader.inst);
	file_kind_KYy.register("GMTimeline",file_kind_yy_KYyMoments.inst);
	file_kind_KYy.register("GMScript",file_kind_gml_KGmlScript.inst);
	file_kind_KYy.register("GMSprite",file_kind_yy_KYySprite.inst);
	file_kind_KYy.register("GMExtension",file_kind_yy_KYyExtension.inst);
	file_kind_KYy.register("GMFont",file_kind_yy_KYyFont.inst);
	file_kind_KYy.register("GMSound",file_kind_yy_KYySound.inst);
	file_FileKind.register("md",new file_kind_misc_KMarkdown(false));
	file_FileKind.register("dmd",new file_kind_misc_KMarkdown(true));
	file_FileKind.register("js",file_kind_misc_KJavaScript.inst);
	file_FileKind.register("json",file_kind_misc_KJavaScript.inst);
	file_FileKind.registerTabStateLoader("user-preferences",file_kind_misc_KPreferences.loadTabState);
	file_FileKind.registerTabStateLoader("project-properties",file_kind_misc_KProjectProperties.loadTabState);
};
file_FileKind.prototype = {
	getName: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,getTabContext: function(file,data) {
		if(file.path != null) {
			return file.path;
		}
		return file.name;
	}
	,saveTabState: function(tab) {
		var path = tab.gmlFile.path;
		if(path == null) {
			return null;
		}
		var rel = gml_Project.current.relPath(path);
		var ts = { };
		if(rel != path) {
			ts.relPath = rel;
		} else {
			ts.fullPath = path;
		}
		return ts;
	}
	,create: function(name,path,data,nav) {
		var file = new gml_file_GmlFile(name,path,this,data);
		gml_file_GmlFile.openTab(file);
		if(file.codeEditor != null) {
			window.setTimeout(function() {
				Main.aceEditor.focus();
				if(nav != null) {
					file.navigate(nav);
				}
			});
		}
		return file;
	}
	,init: function(file,data) {
	}
	,detect: function(path,data) {
		return { kind : this, data : data};
	}
	,checkForChanges: function(editor) {
		var file = editor.file;
		var path = file.path;
		if(this.checkSelfForChanges) {
			if(path == null || !haxe_io_Path.isAbsolute(path)) {
				return 0;
			}
			if(!Electron_FS.existsSync(path)) {
				return -1;
			}
		}
		var changed = false;
		if(this.checkSelfForChanges) {
			try {
				var time1 = Electron_FS.statSync(path).mtimeMs;
				if(time1 > file.time) {
					file.time = time1;
					changed = true;
				}
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				console.error("Error checking " + path + ": ",_g1);
			}
		}
		var _g = 0;
		var _g1 = file.extraFiles;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			try {
				var ppath = pair.path;
				if(!haxe_io_Path.isAbsolute(ppath) || !Electron_FS.existsSync(ppath)) {
					continue;
				}
				var time1 = Electron_FS.statSync(ppath).mtimeMs;
				if(time1 > pair.time) {
					pair.time = time1;
					changed = true;
				}
			} catch( _g2 ) {
				var _g3 = haxe_Exception.caught(_g2).unwrap();
				console.error("Error checking " + pair.path + ": ",_g3);
			}
		}
		if(changed) {
			return 1;
		} else {
			return 0;
		}
	}
	,index: function(path,content,main,sync) {
		return true;
	}
	,navigate: function(editor,nav) {
		return false;
	}
	,__class__: file_FileKind
};
var file_kind_KCode = function() {
	this.setChangedOnEdits = true;
	this.indexOnSave = false;
	this.modePath = "ace/mode/text";
	file_FileKind.call(this);
};
$hxClasses["file.kind.KCode"] = file_kind_KCode;
file_kind_KCode.__name__ = "file.kind.KCode";
file_kind_KCode.__super__ = file_FileKind;
file_kind_KCode.prototype = $extend(file_FileKind.prototype,{
	init: function(file,data) {
		file.codeEditor = new editors_EditCode(file,this.modePath);
		file.editor = file.codeEditor;
	}
	,loadCode: function(editor,data) {
		if(data != null) {
			return data;
		} else {
			return editor.file.readContent();
		}
	}
	,saveCode: function(editor,code) {
		if(editor.file.path == null) {
			return false;
		}
		return editor.file.writeContent(code);
	}
	,preproc: function(editor,code) {
		return code;
	}
	,postproc: function(editor,code) {
		return code;
	}
	,gatherGotoTargets: function(editor) {
		return null;
	}
	,__class__: file_kind_KCode
});
var file_kind_KGml = function() {
	this.canSyntaxCheck = true;
	this.canDefineComp = false;
	this.canMFunc = true;
	this.canNullCoalescingOperator = true;
	this.canNullCoalescingAssignment = true;
	this.canTemplateString = true;
	this.canHyper = true;
	this.canLambda = true;
	this.canImport = true;
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/gml";
	this.indexOnSave = true;
};
$hxClasses["file.kind.KGml"] = file_kind_KGml;
file_kind_KGml.__name__ = "file.kind.KGml";
file_kind_KGml.initSyntaxExtensions = function() {
	file_kind_KGml.syntaxExtensions = [synext_GmlExtLambda.inst,synext_GmlExtMFunc.inst,synext_GmlExtImport.inst,synext_GmlNullCoalescingOperator.inst,synext_GmlNullCoalescingAssignment.inst,synext_GmlExtArrowFunctions.inst,synext_GmlExtTemplateStrings.inst,synext_GmlExtCast.inst,synext_GmlExtHashColorLiterals.inst,synext_GmlExtHyper.inst];
};
file_kind_KGml.__super__ = file_kind_KCode;
file_kind_KGml.prototype = $extend(file_kind_KCode.prototype,{
	preproc: function(editor,code) {
		code = synext_SyntaxExtension.preprocArray(editor,code,file_kind_KGml.syntaxExtensions);
		if(code != null) {
			return code;
		} else {
			return "";
		}
	}
	,postproc: function(editor,code) {
		this.saveSessionChanged = false;
		code = synext_SyntaxExtension.postprocArray(editor,code,file_kind_KGml.syntaxExtensions);
		return code;
	}
	,navigate: function(editor,nav) {
		var session = editor.session;
		var len = session.getLength();
		var found = false;
		var row = 0;
		var col = 0;
		var i;
		var s;
		if(nav.def != null) {
			var rxDef = new RegExp("^(#define|#event|#moment|#target|function)[ \t]+" + nav.def.replace(tools_NativeString.escapeRx_1,"\\$1") + "\\b");
			i = 0;
			while(i < len) {
				s = session.getLine(i);
				if(rxDef.test(s)) {
					row = i;
					col = s.length;
					found = true;
					break;
				} else {
					++i;
				}
			}
		}
		var ctx = nav.ctx;
		if(ctx != null) {
			var rxCtx = new RegExp(ctx.replace(tools_NativeString.escapeRx_1,"\\$1"));
			var rxEof = new RegExp("^(#define|#event|#moment|#target)");
			i = row;
			if(nav.ctxAfter && nav.pos != null) {
				i += nav.pos.row;
			}
			var start = found ? i : -1;
			while(i < len) {
				s = session.getLine(i);
				if(i != start && rxEof.test(s)) {
					break;
				}
				var vals = rxCtx.exec(s);
				if(vals != null) {
					row = i;
					col = vals.index;
					found = true;
					break;
				} else {
					++i;
				}
			}
		}
		var pos = nav.pos;
		if(pos != null) {
			if(ctx == null && nav.def != null) {
				col = 0;
				++row;
			}
			if(!found || !nav.ctxAfter) {
				row += pos.row;
				col += pos.column;
				found = true;
			}
		}
		if(found) {
			if(nav.showAtTop) {
				Main.aceEditor.scrollToLine(row);
				var f = ($_=Main.aceEditor,$bind($_,$_.scrollToLine));
				var z = Main.aceEditor.hasOwnProperty("scrollToLine");
				Main.aceEditor.scrollToLine = function() {
				};
				Main.aceEditor.gotoLine(row + 1,col);
				if(z) {
					Main.aceEditor.scrollToLine = f;
				} else {
					delete Main.aceEditor.scrollToLine;
				}
			} else {
				Main.aceEditor.gotoLine(row + 1,col);
			}
		}
		return found;
	}
	,index: function(path,content,main,sync) {
		var content_noCoroutines = content;
		content = synext_GmlExtCoroutines.pre(content);
		var out = new parsers_GmlSeekData(this);
		out.hasCoroutines = content != content_noCoroutines;
		out.main = main;
		var locals = new gml_GmlLocals();
		out.locals[""] = locals;
		parsers_GmlSeeker.runSyncImpl(path,content,main,out,locals,this);
		parsers_GmlSeeker.finish(path,out);
		return true;
	}
	,gatherGotoTargets: function(editor) {
		var items = [];
		var code = editor.session.getValue();
		var q = new parsers_GmlReader(code);
		var curlyDepth = 0;
		var lineNumber = 0;
		var version = gml_Project.current.version;
		var add = function(name,meta) {
			items.push({ value : "" + lineNumber, caption : name, meta : meta});
		};
		while(q.get_loop()) {
			var at = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 10:
				lineNumber += 1;
				break;
			case 35:
				if(q.skipIfIdentEquals("region")) {
					at = q.pos;
					q.skipLine();
					var txt = q.source.substring(at,q.pos).trim();
					if(txt != "") {
						add(txt,"region");
					}
				} else if(q.skipIfIdentEquals("endregion")) {
					q.skipLine();
				} else if(at == 0 || q.source.charCodeAt(at - 1) == 10) {
					var newCtx = q.readContextName(null);
					if(newCtx != null) {
						var meta;
						switch(q.source.charCodeAt(at + 1)) {
						case 100:
							meta = "function";
							break;
						case 101:
							meta = "event";
							break;
						case 109:
							meta = "moment";
							break;
						default:
							meta = null;
						}
						add(newCtx,meta);
					}
				}
				break;
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
					var lineNumber1 = lineNumber;
					q.pos += 1;
					lineNumber = lineNumber1 + q.skipStringTemplate(version,true);
				} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					if(c == 102 && curlyDepth == 0 && q.pos - at == 8 && q.source.charCodeAt(q.pos - 1) == 110 && q.source.substring(at,q.pos) == "function") {
						lineNumber += q.skipSpaces1();
						var fname = q.readIdent();
						if(fname != null) {
							add(fname,"function");
						}
					}
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					lineNumber += q.skipComment();
					break;
				case 47:
					q.pos += 1;
					if(q.skipIfEquals(35)) {
						var kind = q.skipIfIdentEquals("region") ? "region" : q.skipIfIdentEquals("mark") ? "mark" : null;
						if(kind != null) {
							at = q.pos;
							q.skipLine();
							var txt1 = q.source.substring(at,q.pos).trim();
							if(txt1 != "") {
								add(txt1,kind);
							}
						}
					}
					q.skipLine();
					break;
				}
				break;
			case 34:case 39:case 64:case 96:
				lineNumber += q.skipStringAuto(c,version);
				break;
			case 123:
				++curlyDepth;
				break;
			case 125:
				--curlyDepth;
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					if(c == 102 && curlyDepth == 0 && q.pos - at == 8 && q.source.charCodeAt(q.pos - 1) == 110 && q.source.substring(at,q.pos) == "function") {
						lineNumber += q.skipSpaces1();
						var fname1 = q.readIdent();
						if(fname1 != null) {
							add(fname1,"function");
						}
					}
				}
			}
		}
		return items;
	}
	,__class__: file_kind_KGml
});
var file_kind_gml_KGmlEvents = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.gml.KGmlEvents"] = file_kind_gml_KGmlEvents;
file_kind_gml_KGmlEvents.__name__ = "file.kind.gml.KGmlEvents";
file_kind_gml_KGmlEvents.__super__ = file_kind_KGml;
file_kind_gml_KGmlEvents.prototype = $extend(file_kind_KGml.prototype,{
	__class__: file_kind_gml_KGmlEvents
});
var gml_type_GmlTypeDef = function() { };
$hxClasses["gml.type.GmlTypeDef"] = gml_type_GmlTypeDef;
gml_type_GmlTypeDef.__name__ = "gml.type.GmlTypeDef";
gml_type_GmlTypeDef.arrayOf = function(itemType) {
	return gml_type_GmlType.TInst("array",[itemType],32);
};
gml_type_GmlTypeDef.listOf = function(itemType) {
	return gml_type_GmlType.TInst("ds_list",[itemType],33);
};
gml_type_GmlTypeDef.gridOf = function(itemType) {
	return gml_type_GmlType.TInst("ds_grid",[itemType],35);
};
gml_type_GmlTypeDef.mapOf = function(keyType,valType) {
	return gml_type_GmlType.TInst("ds_map",[keyType,valType],34);
};
gml_type_GmlTypeDef.type = function(name) {
	return gml_type_GmlType.TInst("type",[gml_type_GmlType.TInst(name,[],2)],4);
};
gml_type_GmlTypeDef.simple = function(name) {
	if(name == null) {
		return null;
	}
	var t = gml_type_GmlTypeParser.cache[name];
	if(t == null) {
		var kind = ((gml_type_GmlTypeParser.kindMeta[name]) || (2));
		t = gml_type_GmlType.TInst(name,[],kind);
		gml_type_GmlTypeParser.cache[name] = t;
	}
	return t;
};
gml_type_GmlTypeDef.object = function(name) {
	if(name == null) {
		return null;
	}
	var t = gml_type_GmlTypeParser.cache[name];
	if(t == null) {
		var kind = ((gml_type_GmlTypeParser.kindMeta[name]) || (2));
		t = gml_type_GmlType.TInst(name,[],kind);
		gml_type_GmlTypeParser.cache[name] = t;
	}
	return t;
};
gml_type_GmlTypeDef.nullable = function(type) {
	return gml_type_GmlType.TInst("Nullable",[type],3);
};
gml_type_GmlTypeDef.rest = function(params) {
	return gml_type_GmlType.TInst("rest",params,10);
};
gml_type_GmlTypeDef.parse = function(typeString,ctx) {
	return gml_type_GmlTypeParser.parse(typeString,ctx);
};
var gml_type_GmlTypeParser = function() { };
$hxClasses["gml.type.GmlTypeParser"] = gml_type_GmlTypeParser;
gml_type_GmlTypeParser.__name__ = "gml.type.GmlTypeParser";
gml_type_GmlTypeParser.parseError = function(s,q,ctx,pos) {
	if(pos == null) {
		pos = q.pos - 1;
	}
	console.warn("Type parse error in `" + tools_NativeString.insert(q.source,pos,"¦") + ("` (`" + ctx + "`): ") + s);
	return null;
};
gml_type_GmlTypeParser.parseRec_skip = function(q) {
	while(q.pos < q.length) {
		switch(q.source.charCodeAt(q.pos)) {
		case 9:case 10:case 13:case 32:
			q.pos += 1;
			continue;
		case 47:
			switch(q.source.charCodeAt(q.pos + 1)) {
			case 42:
				q.pos += 2;
				q.skipComment();
				continue;
			case 47:
				q.skipLine();
				continue;
			}
			break;
		}
		break;
	}
};
gml_type_GmlTypeParser.parseRec = function(q,ctx,flags) {
	if(flags == null) {
		flags = 0;
	}
	gml_type_GmlTypeParser.parseRec_skip(q);
	var start = q.pos;
	var c = q.source.charCodeAt(q.pos++);
	var result;
	switch(c) {
	case 40:
		result = gml_type_GmlTypeParser.parseRec(q,ctx,2);
		if(result == null) {
			return null;
		}
		gml_type_GmlTypeParser.parseRec_skip(q);
		if(q.source.charCodeAt(q.pos++) != 41) {
			return gml_type_GmlTypeParser.parseError("Unclosed ()",q,ctx,start);
		}
		break;
	case 91:
		var params = [];
		_hx_loop1: while(q.get_loop()) {
			var t = gml_type_GmlTypeParser.parseRec(q,ctx,2);
			if(t == null) {
				return null;
			}
			params.push(t);
			gml_type_GmlTypeParser.parseRec_skip(q);
			c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 44:case 59:
				break;
			case 93:
				break _hx_loop1;
			default:
				return gml_type_GmlTypeParser.parseError("Expected a `,`/`;` or a `]` in `[]`",q,ctx,null);
			}
		}
		result = gml_type_GmlType.TInst("tuple",params,41);
		break;
	case 123:
		var ani = new gml_type_GmlTypeAnon();
		_hx_loop2: while(q.get_loop()) {
			gml_type_GmlTypeParser.parseRec_skip(q);
			var field = q.readIdent();
			if(field == null) {
				return gml_type_GmlTypeParser.parseError("Expected field name in {}",q,ctx,null);
			}
			gml_type_GmlTypeParser.parseRec_skip(q);
			if(q.source.charCodeAt(q.pos++) != 58) {
				return gml_type_GmlTypeParser.parseError("Expected a `:` after field in {}",q,ctx,null);
			}
			var t = gml_type_GmlTypeParser.parseRec(q,ctx,2);
			if(t == null) {
				return null;
			}
			ani.fields[field] = new gml_type_GmlTypeAnonField(t,null);
			switch(q.source.charCodeAt(q.pos++)) {
			case 44:case 59:
				break;
			case 125:
				break _hx_loop2;
			default:
				return gml_type_GmlTypeParser.parseError("Expected a `,`/`;` or a `}` in `{}`",q,ctx,null);
			}
		}
		result = gml_type_GmlType.TAnon(ani);
		break;
	default:
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			q.skipDotIdent1();
			var name = q.source.substring(start,q.pos);
			gml_type_GmlTypeParser.parseRec_skip(q);
			if((flags & 2) != 0 && q.source.charCodeAt(q.pos) == 58) {
				q.pos += 1;
				return gml_type_GmlType.THint(name,gml_type_GmlTypeParser.parseRec(q,ctx,flags));
			}
			if(name.includes(".")) {
				var alt = gml_GmlAPI.featherAliases[name.toLowerCase()];
				if(alt != null) {
					name = alt;
				}
			}
			var kind = ((gml_type_GmlTypeParser.kindMeta[name]) || (2));
			var params = [];
			var typeWarn = gml_type_GmlTypeParser.warnAboutMissing;
			var isTIN = name == "TemplateItem";
			if(q.source.charCodeAt(q.pos) == 60) {
				q.pos += 1;
				_hx_loop3: while(q.get_loop()) {
					gml_type_GmlTypeParser.warnAboutMissing = isTIN && params.length < 2 ? null : typeWarn;
					var t = gml_type_GmlTypeParser.parseRec(q,ctx,2);
					if(t == null) {
						return null;
					}
					params.push(t);
					gml_type_GmlTypeParser.parseRec_skip(q);
					c = q.source.charCodeAt(q.pos++);
					switch(c) {
					case 44:case 59:
						break;
					case 62:
						break _hx_loop3;
					default:
						return gml_type_GmlTypeParser.parseError("Expected a `,`/`;` or a `>` in `<>`",q,ctx,null);
					}
				}
				if(isTIN) {
					gml_type_GmlTypeParser.warnAboutMissing = typeWarn;
				}
			}
			if(name == "either") {
				result = gml_type_GmlType.TEither(params);
			} else if(name == "enum_tuple") {
				var ename = gml_type_GmlTypeTools.getNamespace(params[0]);
				if(ename != null) {
					result = gml_type_GmlType.TEnumTuple(ename);
				} else {
					result = gml_type_GmlType.TInst(name,params,kind);
				}
			} else if(name == "specified_map") {
				var fieldList = [];
				var fieldMap = Object.create(null);
				var defaultType = null;
				var _g = 0;
				while(_g < params.length) {
					var param = params[_g];
					++_g;
					if(param._hx_index == 4) {
						var _g1 = param.hint;
						if(Object.prototype.hasOwnProperty.call(fieldMap,_g1)) {
							return gml_type_GmlTypeParser.parseError("Redefinition of field " + _g1,q,ctx,null);
						} else {
							var field = new gml_type_GmlTypeMapField(_g1,param.type);
							fieldList.push(field);
							fieldMap[_g1] = field;
						}
					} else if(defaultType != null) {
						return gml_type_GmlTypeParser.parseError("Redefinition of default type",q,ctx,null);
					} else {
						defaultType = param;
					}
				}
				result = gml_type_GmlType.TSpecifiedMap(new gml_type_GmlTypeMap(fieldMap,fieldList,defaultType));
			} else if(kind == 6) {
				if(params.length < 2) {
					return gml_type_GmlTypeParser.parseError("Malformed parameters for " + "TemplateItem",q,ctx,null);
				}
				var _g = params[0];
				var tn = _g == null ? "?" : _g._hx_index == 0 ? _g.params.length == 0 ? _g.kind == 2 ? _g.name : "?" : "?" : "?";
				var ti;
				var _g = params[1];
				if(_g == null) {
					ti = null;
				} else if(_g._hx_index == 0) {
					var _g1 = _g.name;
					ti = _g.params.length == 0 ? _g.kind == 2 ? _g1.charCodeAt(0) == 95 ? Std.parseInt(HxOverrides.substr(_g1,1,null)) : null : null : null;
				} else {
					ti = null;
				}
				if(ti == null) {
					return gml_type_GmlTypeParser.parseError("Malformed index for " + "TemplateItem",q,ctx,null);
				}
				result = gml_type_GmlType.TTemplate(tn,ti,params[2]);
			} else {
				if(typeWarn != null && !Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdKind,name) && !Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdTypeExists,name) && !Object.prototype.hasOwnProperty.call(gml_type_GmlTypeTools.kindMap,name) && !Object.prototype.hasOwnProperty.call(gml_type_GmlTypeParser.kindMeta,name)) {
					typeWarn.push(name);
				}
				result = gml_type_GmlType.TInst(name,params,kind);
			}
		} else {
			return gml_type_GmlTypeParser.parseError("Expected a type name",q,ctx,null);
		}
	}
	_hx_loop5: while(q.get_loop()) {
		gml_type_GmlTypeParser.parseRec_skip(q);
		switch(q.source.charCodeAt(q.pos)) {
		case 63:
			q.pos += 1;
			if(gml_type_GmlTypeTools.getKind(result) != 3) {
				result = gml_type_GmlTypeDef.nullable(result);
			}
			break;
		case 91:
			q.pos += 1;
			if(q.source.charCodeAt(q.pos++) != 93) {
				return gml_type_GmlTypeParser.parseError("Expected a `]` in `[]`",q,ctx,null);
			}
			result = gml_type_GmlType.TInst("Array",[result],32);
			break;
		case 124:
			if((flags & 1) != 0) {
				break _hx_loop5;
			}
			q.pos += 1;
			var et = [result];
			while(q.get_loop()) {
				var t = gml_type_GmlTypeParser.parseRec(q,ctx,1);
				if(t == null) {
					return null;
				}
				et.push(t);
				gml_type_GmlTypeParser.parseRec_skip(q);
				if(q.source.charCodeAt(q.pos) == 124) {
					q.pos += 1;
				} else {
					break;
				}
			}
			result = gml_type_GmlType.TEither(et);
			break;
		default:
			break _hx_loop5;
		}
	}
	return result;
};
gml_type_GmlTypeParser.readNameForLinter = function(self) {
	var reader = self.reader;
	var seqStart = self.seqStart;
	var typeStr;
	switch(parsers_linter_GmlLinterParser.next(self,self.reader)) {
	case 38:
		seqStart.setTo(reader);
		var t = gml_type_GmlTypeParser.readNameForLinter(self);
		if(t == null) {
			return null;
		}
		if(parsers_linter_GmlLinterParser.next(self,self.reader) != 39) {
			self.readSeqStartError("Unclosed type ()");
			return null;
		}
		typeStr = "(" + t + ")";
		break;
	case 40:
		typeStr = "{";
		var depth = 1;
		seqStart.setTo(reader);
		_hx_loop1: while(reader.get_loop()) switch(parsers_linter_GmlLinterParser.next(self,self.reader)) {
		case 40:
			typeStr += "{";
			++depth;
			break;
		case 41:
			typeStr += "}";
			--depth;
			if(depth <= 0) {
				break _hx_loop1;
			}
			break;
		default:
			typeStr += self.get_nextVal();
		}
		if(depth > 0) {
			self.readSeqStartError("Unclosed tuple parameters");
			return null;
		}
		break;
	case 42:
		typeStr = "[";
		var depth = 1;
		seqStart.setTo(reader);
		_hx_loop2: while(reader.get_loop()) switch(parsers_linter_GmlLinterParser.next(self,self.reader)) {
		case 42:
			typeStr += "[";
			++depth;
			break;
		case 43:
			typeStr += "]";
			--depth;
			if(depth <= 0) {
				break _hx_loop2;
			}
			break;
		default:
			typeStr += self.get_nextVal();
		}
		if(depth > 0) {
			self.readSeqStartError("Unclosed tuple parameters");
			return null;
		}
		break;
	case 3:case 4:case 76:
		typeStr = self.get_nextVal();
		while(self.skipIfPeek(50)) {
			typeStr += ".";
			if(self.skipIfPeek(4)) {
				typeStr += self.get_nextVal();
			} else {
				break;
			}
		}
		if(self.skipIfPeek(16)) {
			var depth = 1;
			typeStr += "<";
			seqStart.setTo(reader);
			_hx_loop4: while(reader.get_loop()) switch(parsers_linter_GmlLinterParser.next(self,self.reader)) {
			case 16:
				typeStr += "<";
				++depth;
				break;
			case 18:
				typeStr += ">";
				--depth;
				if(depth <= 0) {
					break _hx_loop4;
				}
				break;
			case 34:
				if(depth == 1) {
					reader.pos--;
					typeStr += ">";
					depth = 0;
					break _hx_loop4;
				} else {
					typeStr += ">>";
					depth -= 2;
					if(depth <= 0) {
						break _hx_loop4;
					}
				}
				break;
			default:
				typeStr += self.get_nextVal();
			}
			if(depth > 0) {
				self.readSeqStartError("Unclosed type parameters");
				return null;
			}
		}
		break;
	default:
		self.readExpect("a type name");
		return null;
	}
	_hx_loop5: while(reader.get_loop()) switch(self.peek()) {
	case 31:
		self.skip();
		var t = gml_type_GmlTypeParser.readNameForLinter(self);
		if(t == null) {
			return null;
		}
		typeStr += "|" + t;
		break;
	case 42:
		self.skip();
		if(self.readCheckSkip(43,"a closing `]`")) {
			return null;
		}
		typeStr += "[]";
		break;
	case 53:
		self.skip();
		typeStr += "?";
		break;
	default:
		break _hx_loop5;
	}
	return typeStr;
};
gml_type_GmlTypeParser.skipTypeName = function(q,till) {
	if(till == null) {
		till = q.length;
	}
	var start = q.pos;
	q.skipSpaces1x(till);
	var c = q.source.charCodeAt(q.pos++);
	switch(c) {
	case 40:
		if(!gml_type_GmlTypeParser.skipTypeName(q,till)) {
			q.pos = start;
			return false;
		}
		q.skipSpaces1x(till);
		if(q.source.charCodeAt(q.pos++) != 41) {
			q.pos = start;
			return false;
		}
		break;
	case 91:
		q.pos += 1;
		if(!q.skipTypeParams(till,91,93)) {
			q.pos = start;
			return false;
		}
		break;
	case 123:
		q.pos += 1;
		if(!q.skipTypeParams(till,123,125)) {
			q.pos = start;
			return false;
		}
		break;
	default:
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			q.skipDotIdent1();
			start = q.pos;
			q.skipSpaces1x(till);
			if(q.source.charCodeAt(q.pos) == 60) {
				q.pos += 1;
				if(!q.skipTypeParams(till)) {
					q.pos = start;
					return false;
				}
			} else {
				q.pos = start;
			}
		} else {
			q.pos = start;
			return false;
		}
	}
	start = q.pos;
	_hx_loop1: while(q.get_loop()) {
		q.skipSpaces1x(till);
		switch(q.source.charCodeAt(q.pos)) {
		case 63:
			q.pos += 1;
			break;
		case 91:
			if(q.source.charCodeAt(q.pos + 1) == 93) {
				q.pos += 2;
			} else {
				break _hx_loop1;
			}
			break;
		case 124:
			q.pos += 1;
			if(!gml_type_GmlTypeParser.skipTypeName(q,till)) {
				q.pos = start;
				return false;
			}
			break;
		default:
			break _hx_loop1;
		}
		start = q.pos;
	}
	q.pos = start;
	return true;
};
gml_type_GmlTypeParser.parse = function(s,ctx) {
	if(s == null) {
		return null;
	}
	var t = gml_type_GmlTypeParser.cache[s];
	if(t != null) {
		return t;
	}
	var q = new parsers_GmlReader(s);
	t = gml_type_GmlTypeParser.parseRec(q,ctx);
	q.skipSpaces0();
	if(q.pos < q.length) {
		console.warn("Type parse warning in `" + tools_NativeString.insert(s,q.pos,"¦") + ("` (`" + ctx + "`): Trailing data"));
	}
	gml_type_GmlTypeParser.cache[s] = t;
	return t;
};
gml_type_GmlTypeParser.clear = function() {
	gml_type_GmlTypeParser.cache = Object.create(null);
};
var ace_AceStatusBar = function() {
	this.delayTime = 50;
	this.ignoreUntil = window.performance.now();
	this.contextName = null;
	this.contextRow = 0;
	this.statusBar = document.createElement("div");
	this.statusBar.className = "ace_status-bar";
	this.statusSpan = document.createElement("span");
	this.statusSpan.className = "ace_status-hint";
	this.statusSpan.innerHTML = "<span class=\"status\" style=\"display:none\">?</span>\r\n<span class=\"recording\" style=\"display:none\">REC</span>\r\n<span class=\"select\" style=\"display:none\">(:)</span>\r\n<span class=\"row-label\">Ln:</span>\r\n<span class=\"row\">1</span>\r\n<span class=\"col-label\">Col:</span>\r\n<span class=\"col\">1</span>\r\n<span class=\"ranges\" style=\"display:none\"></span>\r\n<span class=\"context-pre\" style=\"display:none\"></span>\r\n<span class=\"context\" style=\"display:none\"><span class=\"context-txt\"></span></span>";
	this.statusBar.appendChild(this.statusSpan);
	this.statusHint = document.createElement("span");
	this.statusHint.className = "ace_status-comp";
	this.statusBar.appendChild(this.statusHint);
};
$hxClasses["ace.AceStatusBar"] = ace_AceStatusBar;
ace_AceStatusBar.__name__ = "ace.AceStatusBar";
ace_AceStatusBar.getDocData = function(ctx) {
	var f = ace_AceStatusBar.canDocData[ctx.tk.type];
	if(f != null) {
		return f(ctx);
	} else if(((ctx.session.gmlFile.kind) instanceof file_kind_KGml)) {
		ctx.docs = { };
		return true;
	} else {
		return false;
	}
};
ace_AceStatusBar.procDocImport = function(ctx) {
	return ace_statusbar_AceStatusBarImports.procDocImport(ctx);
};
ace_AceStatusBar.prototype = {
	bind: function(editor) {
		var _gthis = this;
		this.editor = editor;
		editor.statusBar = this;
		var lang = ace.require("ace/lib/lang");
		var dc = lang.delayedCall($bind(this,this.update));
		var dcUpdate = function() {
			dc.delay(_gthis.delayTime);
		};
		editor.on("changeStatus",dcUpdate);
		editor.on("changeSelection",dcUpdate);
		editor.on("keyboardActivity",dcUpdate);
		editor.container.parentElement.appendChild(this.statusBar);
	}
	,updateComp: function(editor,row,col,imports,lambdas,scope) {
		this.statusHint.innerHTML = "";
		var session = editor.getSession();
		var iter = new AceTokenIterator(session,row,col);
		var sctx = { session : editor.getSession(), scope : scope, iter : iter, imports : imports, lambdas : lambdas, docs : null, doc : null, tk : null, funcEnd : null};
		var ctk = iter.getCurrentToken();
		var parEmpty = false;
		var minDepth = 0;
		var depth = 0;
		var fkw = gml_GmlAPI.kwFlow;
		if(ctk != null && ctk.type == "paren.lparen") {
			ctk = iter.stepForward();
			if(ctk != null) {
				switch(ctk.type) {
				case "curly.paren.lparen":case "curly.paren.rparen":
					ctk = iter.stepBackward();
					break;
				case "keyword":
					if(fkw[ctk.value]) {
						ctk = iter.stepBackward();
					}
					break;
				case "paren.rparen":
					depth = 0 - ctk.value.length;
					parEmpty = true;
					break;
				case "preproc.macro":
					ctk = iter.stepBackward();
					break;
				case "punctuation.operator":
					if(ctk.value == ";") {
						ctk = iter.stepBackward();
					}
					break;
				}
			} else {
				ctk = ace_AceStatusBar.emptyToken;
			}
		}
		var tk = ctk;
		var docs = null;
		var doc = null;
		_hx_loop1: while(tk != null) {
			switch(tk.type) {
			case "curly.paren.lparen":
				break _hx_loop1;
			case "curly.paren.rparen":
				break _hx_loop1;
			case "keyword":
				if(fkw[tk.value]) {
					break _hx_loop1;
				}
				break;
			case "macroname":
				break _hx_loop1;
			case "paren.lparen":
				depth -= tk.value.length;
				if(depth < minDepth) {
					minDepth = depth;
					var pos = iter.getCurrentTokenPosition();
					tk = iter.stepBackward();
					if(tk != null) {
						sctx.tk = tk;
						if(ace_AceStatusBar.getDocData(sctx)) {
							sctx.funcEnd = pos;
							tk = sctx.tk;
							docs = sctx.docs;
							doc = sctx.doc;
							break _hx_loop1;
						} else {
							tk = sctx.tk;
						}
					}
				}
				break;
			case "paren.rparen":
				depth += tk.value.length;
				break;
			case "preproc.macro":
				break _hx_loop1;
			case "punctuation.operator":
				if(tk.value == ";") {
					break _hx_loop1;
				}
				break;
			case "set.operator":
				break _hx_loop1;
			}
			tk = iter.stepBackward();
		}
		if(docs == null && doc == null) {
			return;
		}
		var argStart = 0;
		if(doc == null) {
			sctx.tk = tk;
			argStart = ace_statusbar_AceStatusBarImports.procDocImport(sctx);
			doc = sctx.doc;
			tk = sctx.tk;
		}
		depth = -1;
		var argCurr = 0;
		tk = iter.stepForward();
		while(tk != null) {
			switch(tk.type) {
			case "curly.paren.lparen":case "paren.lparen":case "square.paren.lparen":
				depth += tk.value.length;
				break;
			case "curly.paren.rparen":case "paren.rparen":case "square.paren.rparen":
				depth -= tk.value.length;
				break;
			case "punctuation.operator":
				if(tk.value.includes(",") && depth == 0) {
					++argCurr;
				}
				break;
			}
			if(tk == ctk) {
				break;
			}
			tk = iter.stepForward();
		}
		argCurr += argStart;
		if((tk == null ? ctk != ace_AceStatusBar.emptyToken : tk != ctk) || depth < 0 && !parEmpty) {
			return;
		}
		if(doc != null) {
			var args = doc.args;
			var argc = args.length;
			var out = document.createElement("span");
			out.className = "hint";
			out.appendChild(document.createTextNode(doc.pre));
			var currArg = null;
			var _g = 0;
			while(_g < argc) {
				var i = _g++;
				if(i > 0) {
					out.appendChild(document.createTextNode(", "));
				}
				var span = document.createElement("span");
				span.classList.add("argument");
				if(i == argCurr || i == argc - 1 && argCurr >= i) {
					span.classList.add("current");
					currArg = span;
				}
				span.appendChild(document.createTextNode(args[i]));
				out.appendChild(span);
			}
			out.appendChild(document.createTextNode(doc.post));
			this.statusHint.appendChild(out);
			if(currArg != null) {
				this.statusHint.scrollLeft = currArg.offsetLeft + currArg.offsetWidth / 2 - this.statusHint.offsetWidth / 2 | 0;
			}
			this.statusHint.title = out.innerText;
			this.statusHint.classList.remove("active");
		} else {
			this.statusHint.title = "";
		}
		this.statusHint.onclick = null;
	}
	,setText: function(s) {
		this.statusHint.innerHTML = "";
		this.statusHint.appendChild(document.createTextNode(s));
		this.statusHint.title = s;
		this.statusHint.onclick = null;
		this.statusHint.classList.remove("active");
	}
	,update: function() {
		if(window.performance.now() < this.ignoreUntil) {
			return;
		}
		var file = this.editor.getSession().gmlFile;
		var codeEditor = file != null ? file.codeEditor : null;
		var sel = this.editor.selection;
		var pos = sel.lead;
		var showRow = pos.row;
		var isScript = ((file) && (((file.kind) instanceof file_kind_gml_KGmlScript)));
		var checkRx = isScript ? gml_GmlAPI.scopeResetRx : gml_GmlAPI.scopeResetRxNF;
		var startRow = showRow + 1;
		var session = this.editor.getSession();
		var resetOnDefine = window.gmlResetOnDefine;
		var scope = "";
		while(--startRow >= 0) {
			var checkResult = checkRx.exec(session.getLine(startRow));
			if(checkResult != null) {
				scope = checkResult[1];
				if(resetOnDefine) {
					showRow -= startRow + 1;
				}
				break;
			}
		}
		if(file != null && codeEditor != null && file != ui_WelcomePage.file && file.kind.setChangedOnEdits) {
			file.set_changed(!session.getUndoManager().isClean());
		}
		var ctr = this.statusSpan;
		var set = function(q,v) {
			var el = ctr.querySelector(q);
			if(v != null && v != "") {
				el.style.display = "";
				el.innerText = v;
			} else {
				el.style.display = "none";
			}
		};
		set(".status",this.editor.keyBinding.getStatusText(this.editor));
		set(".recording",this.editor.commands.recording ? "REC" : null);
		if(!sel.isEmpty()) {
			var r = this.editor.getSelectionRange();
			set(".select","(" + (r.end.row - r.start.row) + ":" + (r.end.column - r.start.column) + ")");
		} else {
			set(".select",null);
		}
		set(".row",showRow < 0 ? "#" : "" + (showRow + 1));
		set(".col","" + (pos.column + 1));
		set(".ranges",sel.rangeCount > 0 ? "[" + sel.rangeCount + "]" : null);
		var ctxCtr = ctr.querySelector(".context");
		var ctxPre = ctr.querySelector(".context-pre");
		if(scope != "") {
			ctxCtr.style.display = "";
			ctxPre.style.display = "";
			var ctxTxt = ctr.querySelector(".context-txt");
			ctxTxt.innerText = scope;
			ctxTxt.title = scope;
			this.contextRow = startRow;
			this.contextName = scope;
		} else {
			ctxCtr.style.display = "none";
			ctxPre.style.display = "none";
			this.contextRow = -1;
			this.contextName = null;
		}
		var locals = codeEditor != null ? codeEditor.locals[scope] : null;
		this.editor.gmlCompleters.localCompleter.items = locals != null ? locals.comp : ace_AceWrapCompleter.noItems;
		var imports = codeEditor != null ? codeEditor.imports[scope] : null;
		this.editor.gmlCompleters.importCompleter.items = imports != null ? imports.compList : ace_AceWrapCompleter.noItems;
		var lambdas = codeEditor != null ? codeEditor.lambdas[scope] : null;
		this.editor.gmlCompleters.lambdaCompleter.items = lambdas != null ? lambdas.comp : ace_AceWrapCompleter.noItems;
		this.updateComp(this.editor,pos.row,pos.column,imports,lambdas,scope);
	}
	,__class__: ace_AceStatusBar
};
var ace_AceTools = function() { };
$hxClasses["ace.AceTools"] = ace_AceTools;
ace_AceTools.__name__ = "ace.AceTools";
ace_AceTools.createEditor = function(element,options) {
	return ace_AceWrap._new(element,options);
};
ace_AceTools.createSession = function(context,mode) {
	var session = new AceEditSession(context,mode);
	session.gmlScopes = new gml_GmlScopes(session);
	session.setUndoManager(new AceUndoManager());
	var pj = gml_Project.current;
	var newLineMode = pj != null ? pj.properties.newLineMode : null;
	if(newLineMode == null) {
		newLineMode = electron_FileWrap.isUnix ? "unix" : "windows";
	}
	session.setOption("newLineMode",newLineMode);
	session.setOption("tabSize",ui_Preferences.current.tabSize);
	session.setOption("useSoftTabs",ui_Preferences.current.tabSpaces);
	session.setOption("wrap",Main.aceEditor.getOption("wrap"));
	return session;
};
ace_AceTools.bindSession = function(session,editor) {
	session.gmlEditor = editor;
	session.gmlFile = editor.file;
};
ace_AceTools.cloneSession = function(session) {
	var mode = session.$mode;
	var copy = ace_AceTools.createSession(session.doc,mode);
	copy.setOption("useSoftTabs",session.getOption("useSoftTabs"));
	ace_AceTools.bindSession(copy,session.gmlEditor);
	return copy;
};
var ace_AceTooltips = function(editor) {
	this.markerSession = null;
	this.marker = null;
	this.timeout = null;
	this.token = null;
	this.text = null;
	var _gthis = this;
	this.ttip = new AceTooltip(editor.container);
	var sync = function(pos,x,y) {
		var line = editor.getSession().getLine(pos.row);
		var tk = line == null || pos.column >= line.length ? null : editor.getSession().getTokenAt(pos.row,pos.column);
		if(tk != null) {
			if(tk != _gthis.token) {
				_gthis.token = tk;
				_gthis.update(editor.getSession(),pos,tk);
			}
			if(_gthis.text != null) {
				_gthis.ttip.setPosition(x,y + 16);
				_gthis.ttip.show();
			} else {
				_gthis.ttip.hide();
				if(_gthis.marker != null) {
					_gthis.markerSession.removeMarker(_gthis.marker);
					_gthis.markerSession = null;
					_gthis.marker = null;
					console.log("hid");
				}
			}
		} else {
			_gthis.ttip.hide();
			if(_gthis.marker != null) {
				_gthis.markerSession.removeMarker(_gthis.marker);
				_gthis.markerSession = null;
				_gthis.marker = null;
				console.log("hid");
			}
		}
	};
	editor.container.querySelector(".ace_content").addEventListener("mouseout",function(ev) {
		_gthis.ttip.hide();
		if(_gthis.marker != null) {
			_gthis.markerSession.removeMarker(_gthis.marker);
			_gthis.markerSession = null;
			_gthis.marker = null;
			console.log("hid");
		}
		if(_gthis.timeout != null) {
			window.clearTimeout(_gthis.timeout);
			_gthis.timeout = null;
		}
		_gthis.kbdc.cancel();
	});
	editor.on("mousedown",function(_) {
		_gthis.ttip.hide();
		if(_gthis.marker != null) {
			_gthis.markerSession.removeMarker(_gthis.marker);
			_gthis.markerSession = null;
			_gthis.marker = null;
			console.log("hid");
		}
	});
	editor.on("blur",function(_) {
		_gthis.ttip.hide();
		if(_gthis.marker != null) {
			_gthis.markerSession.removeMarker(_gthis.marker);
			_gthis.markerSession = null;
			_gthis.marker = null;
			console.log("hid");
		}
		if(_gthis.timeout != null) {
			window.clearTimeout(_gthis.timeout);
			_gthis.timeout = null;
		}
		_gthis.kbdc.cancel();
	});
	editor.on("mousemove",function(ev) {
		var pc = ui_Preferences.current;
		if(pc.tooltipKind == 0) {
			return;
		}
		var t = pc.tooltipDelay;
		var pos = ev.getDocumentPosition();
		pos.column++;
		if(t > 0) {
			if(_gthis.timeout != null) {
				window.clearTimeout(_gthis.timeout);
				_gthis.timeout = null;
			}
			_gthis.kbdc.cancel();
			_gthis.timeout = window.setTimeout(function() {
				_gthis.timeout = null;
				sync(pos,ev.x,ev.y);
			},t);
		} else {
			sync(pos,ev.x,ev.y);
		}
	});
	var lang = ace.require("ace/lib/lang");
	var updateKeyboard = function() {
		var session = editor.getSession();
		var selection = session.selection;
		if(!selection.isEmpty()) {
			return;
		}
		var pos = selection.lead;
		var tk = session.getTokenAt(pos.row,pos.column);
		if(tk != null) {
			if(tk != _gthis.token) {
				_gthis.token = tk;
				_gthis.update(editor.getSession(),pos,tk);
			}
			if(_gthis.text != null) {
				var pp = editor.renderer.textToScreenCoordinates(pos.row,pos.column);
				_gthis.ttip.setPosition(pp.pageX,pp.pageY + editor.renderer.lineHeight);
				_gthis.ttip.show();
			} else {
				_gthis.ttip.hide();
				if(_gthis.marker != null) {
					_gthis.markerSession.removeMarker(_gthis.marker);
					_gthis.markerSession = null;
					_gthis.marker = null;
					console.log("hid");
				}
			}
		}
	};
	this.kbdc = lang.delayedCall(updateKeyboard);
	editor.on("keyboardActivity",function() {
		var t = ui_Preferences.current.tooltipKeyboardDelay;
		if(t > 0) {
			_gthis.kbdc.schedule(t);
		}
	});
};
$hxClasses["ace.AceTooltips"] = ace_AceTooltips;
ace_AceTooltips.__name__ = "ace.AceTooltips";
ace_AceTooltips.resetCache = function() {
	ace_AceTooltips.spriteThumbs = Object.create(null);
};
ace_AceTooltips.bind = function(editor) {
	editor.tooltipManager = new ace_AceTooltips(editor);
};
ace_AceTooltips.prototype = {
	update: function(session,pos,token) {
		var t = token.type;
		var v = token.value;
		var r = null;
		var extra = null;
		var doc = null;
		if(Object.prototype.hasOwnProperty.call(ace_AceStatusBar.canDocData,t) || ((session.gmlFile.kind) instanceof file_kind_KGml)) {
			var scope = session.gmlScopes.get(pos.row);
			var codeEditor = session.gmlEditor;
			var iter = new AceTokenIterator(session,pos.row,pos.column);
			var feit = new AceTokenIterator(session,pos.row,pos.column);
			var funcEnd;
			if(feit.stepForward() == null) {
				funcEnd = ace_extern_AceSessionTools.getEOF(session);
			} else {
				funcEnd = feit.getCurrentTokenPosition();
			}
			var ctx = { session : session, scope : scope, imports : codeEditor.imports[scope], lambdas : codeEditor.lambdas[scope], tk : token, doc : null, docs : null, iter : iter, exprStart : iter.getCurrentTokenPosition(), funcEnd : funcEnd};
			if(ace_AceStatusBar.getDocData(ctx)) {
				doc = ctx.doc;
				if(doc == null) {
					ace_statusbar_AceStatusBarImports.procDocImport(ctx);
					doc = ctx.doc;
				}
			}
			if(ctx.typeText != null) {
				extra = tools_NativeString.nzcct(extra,"\n",ctx.typeText);
			} else if(ctx.type != null) {
				extra = tools_NativeString.nzcct(extra,"\n","type " + gml_type_GmlTypeTools.toString(ctx.type));
			}
		}
		r = tools_NativeString.nzcct(r,"\n",extra);
		if(doc == null) {
			switch(t) {
			case "asset.sprite":
				r = "sprite:" + v;
				if(this.text != r) {
					this.text = r;
					var th;
					if(Object.prototype.hasOwnProperty.call(ace_AceTooltips.spriteThumbs,v)) {
						th = ace_AceTooltips.spriteThumbs[v];
					} else {
						th = gml_Project.current.getSpriteURL(v);
						th = "<img src=\"" + th.replace(tools_NativeString.escapeProp_1,"\\$1") + "\" style=\"max-width:64px;max-height:64px\">";
						ace_AceTooltips.spriteThumbs[v] = th;
					}
					this.ttip.setHtml(th);
				}
				return;
			case "curly.paren.lparen":
				var iter = new AceTokenIterator(session,pos.row,pos.column);
				var depth = 1;
				var tk = iter.stepForward();
				_hx_loop1: while(tk != null) {
					switch(tk.type) {
					case "curly.paren.lparen":
						++depth;
						break;
					case "curly.paren.rparen":
						if(--depth <= 0) {
							var row = iter.getCurrentTokenRow();
							var showRow = row;
							var startRow = row + 1;
							var file = session.gmlFile;
							var isScript = ((file) && (((file.kind) instanceof file_kind_gml_KGmlScript)));
							var checkRx = isScript ? gml_GmlAPI.scopeResetRx : gml_GmlAPI.scopeResetRxNF;
							if(window.gmlResetOnDefine) {
								while(--startRow >= 0) if(checkRx.test(session.getLine(startRow))) {
									showRow -= startRow + 1;
									break;
								}
							}
							r = "Spans until line " + (showRow + 1);
							var rowText = session.getLine(row);
							var len = session.getLength();
							while(rowText != null && row < len && rowText.trim().length <= 1) rowText = session.getLine(++row);
							if(rowText != null) {
								r += ": " + rowText;
							}
							break _hx_loop1;
						}
						break;
					}
					tk = iter.stepForward();
				}
				break;
			case "curly.paren.rparen":
				var iter = new AceTokenIterator(session,pos.row,pos.column);
				var depth = 1;
				var tk = iter.stepBackward();
				_hx_loop4: while(tk != null) {
					switch(tk.type) {
					case "curly.paren.lparen":
						if(--depth <= 0) {
							var row = iter.getCurrentTokenRow();
							var showRow = row;
							var startRow = row + 1;
							var file = session.gmlFile;
							var isScript = ((file) && (((file.kind) instanceof file_kind_gml_KGmlScript)));
							var checkRx = isScript ? gml_GmlAPI.scopeResetRx : gml_GmlAPI.scopeResetRxNF;
							if(window.gmlResetOnDefine) {
								while(--startRow >= 0) if(checkRx.test(session.getLine(startRow))) {
									showRow -= startRow + 1;
									break;
								}
							}
							r = "Closes line " + (showRow + 1) + ": ";
							var rowText = session.getLine(row);
							while(row > 0 && rowText.trim().length <= 1) rowText = session.getLine(--row);
							r += rowText;
							break _hx_loop4;
						}
						break;
					case "curly.paren.rparen":
						++depth;
						break;
					}
					tk = iter.stepBackward();
				}
				break;
			case "enumfield":
				var iter = new AceTokenIterator(session,pos.row,pos.column);
				var et = null;
				var tk = iter.stepBackward();
				if(tk != null && tk.type == "text") {
					tk = iter.stepBackward();
				}
				if(tk != null && tk.value == ".") {
					tk = iter.stepBackward();
					if(tk != null && tk.type == "text") {
						tk = iter.stepBackward();
					}
					if(tk != null) {
						switch(tk.type) {
						case "enum":
							et = gml_GmlAPI.gmlEnums[tk.value];
							break;
						case "local":case "sublocal":
							break;
						}
					}
				} else {
					while(tk != null) {
						if(tk.type == "enum") {
							et = gml_GmlAPI.gmlEnums[tk.value];
							break;
						}
						tk = iter.stepBackward();
					}
				}
				if(et != null) {
					var ef = et.compMap[v];
					if(ef != null) {
						r = ef.doc;
					}
				}
				break;
			case "extmacro":
				var comp = gml_GmlAPI.extCompMap[v];
				if(comp != null) {
					r = comp.doc;
				}
				break;
			case "macro":
				var mc = gml_GmlAPI.gmlMacros[v];
				if(mc != null) {
					r = mc.expr;
				}
				break;
			case "numeric":
				var isRGB = false;
				var hex;
				switch(v.length) {
				case 7:
					if(HxOverrides.cca(v,0) == 36) {
						hex = v.substring(1);
					} else if(HxOverrides.cca(v,0) == 35) {
						isRGB = true;
						hex = v.substring(1);
					} else {
						hex = null;
					}
					break;
				case 8:
					hex = v.startsWith("0x") ? v.substring(2) : null;
					break;
				default:
					hex = null;
				}
				if(hex != null) {
					r = isRGB ? "color:#" + hex : "color:0x" + hex;
					if(this.text != r) {
						this.text = r;
						var int = Std.parseInt("0x" + hex);
						var rgbStr;
						if(isRGB) {
							rgbStr = (int >> 16 & 255) + ", " + (int >> 8 & 255) + ", " + (int & 255);
						} else {
							rgbStr = (int & 255) + ", " + (int >> 8 & 255) + ", " + (int >> 16 & 255);
						}
						this.ttip.setHtml("<span style=\"" + "display: inline-block;" + ("background-color: #" + (isRGB ? hex : HxOverrides.substr(hex,4,2) + HxOverrides.substr(hex,2,2) + HxOverrides.substr(hex,0,2)) + ";") + "vertical-align: middle;" + "width: 0.8em;" + "height: 0.8em;" + ("\"></span> RGB(" + rgbStr + ")"));
					}
				}
				break;
			default:
			}
		}
		if(doc != null) {
			r = doc.getAcText();
		}
		if(t == "globalvar") {
			r = r == null ? "[globalvar]" : "[globalvar] " + r;
		}
		if(r == "") {
			r = null;
		}
		if(this.text != r) {
			this.text = r;
			if(r != null) {
				this.ttip.setText(r);
			}
		}
	}
	,__class__: ace_AceTooltips
};
var ace_AceWrap = {};
ace_AceWrap._new = function(el,o) {
	var this1 = ace.edit(el);
	this1.container.aceEditor = this1;
	var self = this1;
	this1.on("focus",function() {
		window.setTimeout(function() {
			var _g = 0;
			var _g1 = document.querySelectorAll("pre.ace_editor");
			while(_g < _g1.length) {
				var el = _g1[_g];
				++_g;
				if(el.classList.contains("ace_focus")) {
					continue;
				}
				var _g2 = 0;
				var _g3 = el.querySelectorAll(".ace_cursor-layer");
				while(_g2 < _g3.length) {
					var cursor = _g3[_g2];
					++_g2;
					cursor.classList.remove("ace_animate-blinking");
				}
			}
		},1);
	});
	this1.$blockScrolling = Infinity;
	this1.getFontFamily = function() {
		return this1.getOption("fontFamily");
	};
	this1.setFontFamily = function(v) {
		this1.setOption("fontFamily",v);
	};
	if(o == null) {
		o = { };
	}
	if(o.statusBar != false) {
		new ace_AceStatusBar().bind(this1);
	}
	if(o.completers != false) {
		new ace_AceWrapCommonCompleters().bind(this1);
	}
	if(o.linter != false) {
		new ace_gml_AceGmlLinter().bind(this1);
	}
	if(o.commands != false) {
		ace_AceCommands.init(this1,o.isPrimary);
	}
	if(o.contextMenu != false) {
		new ace_AceCtxMenu().bind(this1);
	}
	if(o.inputHelpers != false) {
		ui_KeyboardShortcuts.initEditor(this1);
	}
	if(o.tooltips != false) {
		ace_AceTooltips.bind(this1);
	}
	if(o.preferences != false) {
		ui_Preferences.bindEditor(this1);
	}
	if(o.scrollMode != false) {
		new ui_ScrollMode().bind(this1);
	}
	if(o.dispatchEvent != false) {
		plugins_PluginAPI._signal("editorCreated",{ editor : this1, options : o});
	}
	editors_EditKeybindings.initEditor(this1);
	var setKeyboardHandler_base = ($_=this1.keyBinding,$bind($_,$_.setKeyboardHandler));
	var setKeyboardHandler_hook = function(kb) {
		if(Reflect.field(kb,"$id") == "ace/keyboard/vim" && !ace_AceWrap.vimReady) {
			var vim = ace.require("ace/keyboard/vim");
			if(vim != null) {
				vim.Vim.defineEx("write","w",function(cm,params) {
					var editor = cm.ace;
					var file = editor.getSession().gmlFile;
					if(file != null) {
						file.save();
					}
				});
				ace_AceWrap.vimReady = true;
			}
		}
		setKeyboardHandler_base.apply(this,arguments);
	};
	this1.keyBinding.setKeyboardHandler = setKeyboardHandler_hook;
	return this1;
};
ace_AceWrap.init = function() {
	var window1 = window;
	ace.editWrap = function(q) {
		return ace_AceWrap._new(q);
	};
	window1.AceEditSession = ace.require("ace/edit_session").EditSession;
	window1.AceUndoManager = ace.require("ace/undomanager").UndoManager;
	window1.AceUserAgent = ace.require("ace/lib/useragent");
	window1.AceHashHandler = ace.require("ace/keyboard/hash_handler").HashHandler;
	window1.AceKeys = ace.require("ace/lib/keys");
	window1.AceTokenIterator = ace.require("ace/token_iterator").TokenIterator;
	var ns_autocomplete = ace.require("ace/autocomplete");
	window1.AceAutocomplete = ns_autocomplete.Autocomplete;
	window1.AceFilteredList = ns_autocomplete.FilteredList;
	ace_extern__$AceFilteredList_AceFilteredListImpl.init(window1.AceFilteredList.prototype);
	window1.AceRange = ace.require("ace/range").Range;
	window1.AceTooltip = ace.require("ace/tooltip").Tooltip;
	window1.AceOOP = ace.require("ace/lib/oop");
	window1.BackgroundTokenizer_cmp = ace_gml_AceGmlState.tokenizerEquals;
};
var ace_AceWrapCommonCompleters = function() {
	this.completers = [];
	this.gmlModes = tools_Dictionary.fromKeys(["ace/mode/gml","ace/mode/gml_search"],true);
	this.excludeTokens = tools_Dictionary.fromKeys(["comment","comment.doc","comment.line","comment.doc.line","string","string.quasi","string.importpath","numeric","scriptname","eventname","eventkeyname","eventtext","sectionname","regionname","momenttime","momentname","macroname","namespace","globalfield","enumfield","enumerror"],true);
	this.completers.push(new ace_AceWrapCompleterCustom([],[],true,function(_) {
		return true;
	},function(cc,editor,session,pos,prefix,callback) {
		var popup = editor.completer.popup;
		if(popup != null) {
			popup.container.removeAttribute("data-self-type");
		}
		return false;
	}));
	this.initLocal();
	this.initKeywords();
	this.initHashtag();
	this.initAPI();
	this.initEvents();
	this.initVariables();
	this.initNamespace();
	this.initEnum();
	this.initShaders();
	this.initSnippets();
	this.tupleCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
	this.tupleCompleter.minLength = 0;
	this.tupleCompleter.sqbKind = 1;
	this.completers.push(this.tupleCompleter);
};
$hxClasses["ace.AceWrapCommonCompleters"] = ace_AceWrapCommonCompleters;
ace_AceWrapCommonCompleters.__name__ = "ace.AceWrapCommonCompleters";
ace_AceWrapCommonCompleters.prototype = {
	gmlOnly: function(session) {
		return this.gmlModes[(session.$modeId || session.getOption("mode"))];
	}
	,initLocal: function() {
		this.localCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.localCompleter);
		this.importCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.importCompleter);
		this.lambdaCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.lambdaCompleter);
	}
	,initKeywords: function() {
		var ctxKind = null;
		this.keywordCompleterGMS23_function = new ace_AceWrapCompleterCustom([{ name : "function", value : "function", score : 0, meta : "keyword", doc : null}],this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,editor,session,pos,prefix,callback) {
			if(!ui_Preferences.current.compKeywords) {
				return false;
			}
			ctxKind = ace_AceGmlTools.getContextKind(session,pos);
			if(!prefix.startsWith("fu")) {
				return false;
			}
			if(!gml_Project.current.isGMS23) {
				return false;
			}
			if(!(ctxKind == 2 || ctxKind == 1)) {
				return ctxKind == 3;
			} else {
				return true;
			}
		});
		this.completers.push(this.keywordCompleterGMS23_function);
		this.keywordCompleterExprStat = new ace_AceWrapCompleterCustom(gml_GmlAPI.kwCompExprStat,this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,editor,session,pos,prefix,callback) {
			if(!ui_Preferences.current.compKeywords) {
				return false;
			}
			if(!(ctxKind == 2 || ctxKind == 1)) {
				return ctxKind == 3;
			} else {
				return true;
			}
		});
		this.completers.push(this.keywordCompleterExprStat);
		this.keywordCompleterStat = new ace_AceWrapCompleterCustom(gml_GmlAPI.kwCompStat,this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,editor,session,pos,prefix,callback) {
			if(!ui_Preferences.current.compKeywords) {
				return false;
			}
			if(ctxKind != 1) {
				return ctxKind == 3;
			} else {
				return true;
			}
		});
		this.completers.push(this.keywordCompleterStat);
		var jsDocItems = [{ name : "param", value : "param", score : 0, meta : "keyword", doc : "@param [{Type}] name [description]\nMark a script argument"},{ name : "returns", value : "returns", score : 0, meta : "keyword", doc : "@returns {Type} [description]\nSets return type"},{ name : "self", value : "self", score : 0, meta : "keyword", doc : "@self {Type}\nSets the type of `self`"},{ name : "is", value : "is", score : 0, meta : "keyword", doc : "@is {Type}\nHint types of non-local variables"},{ name : "interface", value : "interface", score : 0, meta : "keyword", doc : "@interface [{Name}]\nMark a script as an interface"},{ name : "implements", value : "implements", score : 0, meta : "keyword", doc : "@implements [{Name}]\nImplement an interface"},{ name : "hint", value : "hint", score : 0, meta : "keyword", doc : "(see wiki)\nHint types/variables/methods"},{ name : "template", value : "template", score : 0, meta : "keyword", doc : "@template [{Constraint}] Type\nDeclare type parameters"},{ name : "typedef", value : "typedef", score : 0, meta : "keyword", doc : "@typedef {FullType} Alias\nDeclare a shorthand for a type"},{ name : "init", value : "init", score : 0, meta : "keyword", doc : "@init\nMarks a non-Create event as a variable/function source"},{ name : "static", value : "static", score : 0, meta : "keyword", doc : "@static\nMarks a static variable as intended for access via Constructor.varname"}];
		this.jsDocCompleter = new ace_AceWrapCompleter([],["comment.meta"],false,$bind(this,this.gmlOnly));
		var _g = 0;
		while(_g < jsDocItems.length) this.jsDocCompleter.items.push(jsDocItems[_g++]);
		this.jsDocCompleter.minLength = 0;
		this.completers.push(this.jsDocCompleter);
		this.jsDocLinterCompleter = new ace_AceWrapCompleter(parsers_linter_misc_GmlLinterJSDocFlag.comp,["linterflag","linterflag.typeerror"],false,$bind(this,this.gmlOnly));
		this.jsDocLinterCompleter.minLength = 0;
		this.completers.push(this.jsDocLinterCompleter);
	}
	,initHashtag: function() {
		this.hashtagCompleters = [];
		var hashLineStartsWith = function(session,pos,prefix,start) {
			if(pos.column != 1 + prefix.length) {
				return false;
			}
			return session.getLine(pos.row).startsWith(start);
		};
		var hashStartsWith = function(session,pos,prefix,start) {
			return session.getLine(pos.row).substr((pos.column - 1 - prefix.length),start.length) == start;
		};
		var start = "#" + "region".charAt(0);
		var htRegion = new ace_AceWrapCompleterCustom([{ name : "region", value : "region", score : 0, meta : "preproc", doc : null}],this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,ed,ssn,pos,prefix,cb) {
			if(!hashStartsWith(ssn,pos,prefix,start)) {
				return false;
			}
			return gml_Project.current.version.config.indexingMode != "gms1";
		});
		this.hashtagCompleters.push(htRegion);
		var start1 = "#" + "endregion".charAt(0);
		var htRegion = new ace_AceWrapCompleterCustom([{ name : "endregion", value : "endregion", score : 0, meta : "preproc", doc : null}],this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,ed,ssn,pos,prefix,cb) {
			if(!hashStartsWith(ssn,pos,prefix,start1)) {
				return false;
			}
			return gml_Project.current.version.config.indexingMode != "gms1";
		});
		this.hashtagCompleters.push(htRegion);
		var htMacro = new ace_AceWrapCompleterCustom([{ name : "macro", value : "macro", score : 0, meta : "preproc", doc : ["#macro name expr","#macro Config:name expr"].join("\n")}],this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,ed,ssn,pos,prefix,cb) {
			if(!hashLineStartsWith(ssn,pos,prefix,"#m")) {
				return false;
			}
			var file = ssn.gmlFile;
			if(gml_Project.current.version.config.indexingMode == "gms1") {
				if(file != null) {
					return ((file.kind) instanceof file_kind_gmx_KGmxMacros);
				} else {
					return false;
				}
			} else {
				return true;
			}
		});
		this.hashtagCompleters.push(htMacro);
		var htMFunc = new ace_AceWrapCompleterCustom([{ name : "mfunc", value : "mfunc", score : 0, meta : "preproc", doc : ["#mfunc name(args) expr","#mfunc name(args) as \"type\" expr","GMEdit-specific"].join("\n")}],this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,ed,ssn,pos,prefix,cb) {
			if(!ui_Preferences.current.mfuncMagic) {
				return false;
			}
			if(!hashLineStartsWith(ssn,pos,prefix,"#m")) {
				return false;
			}
			return gml_Project.current.version.config.indexingMode != "gms1";
		});
		this.hashtagCompleters.push(htMFunc);
		var htDefine = new ace_AceWrapCompleterCustom([{ name : "define", value : "define", score : 0, meta : "preproc", doc : null}],this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,ed,ssn,pos,prefix,cb) {
			if(!hashLineStartsWith(ssn,pos,prefix,"#d")) {
				return false;
			}
			var file = ssn.gmlFile;
			if(file == null) {
				return false;
			}
			var kind = file.kind;
			if(((kind) instanceof file_kind_gml_KGmlExtension) || ((kind) instanceof file_kind_gml_KGmlMultifile)) {
				return true;
			} else if(((kind) instanceof file_kind_gml_KGmlScript)) {
				if(kind.isScript) {
					return gml_Project.current.version.config.indexingMode != "gms2";
				} else {
					return false;
				}
			} else {
				return false;
			}
		});
		this.hashtagCompleters.push(htDefine);
		var htEvent = new ace_AceWrapCompleterCustom([{ name : "event", value : "event", score : 0, meta : "preproc", doc : null}],this.excludeTokens,true,$bind(this,this.gmlOnly),function(cc,ed,ssn,pos,prefix,cb) {
			if(!hashLineStartsWith(ssn,pos,prefix,"#e")) {
				return false;
			}
			var file = ssn.gmlFile;
			if(!((file.kind) instanceof file_kind_yy_KYyEvents)) {
				return ((file.kind) instanceof file_kind_gmx_KGmxEvents);
			} else {
				return true;
			}
		});
		this.hashtagCompleters.push(htEvent);
		var _g = 0;
		var _g1 = this.hashtagCompleters;
		while(_g < _g1.length) {
			var cc = _g1[_g];
			++_g;
			cc.minLength = 1;
			this.completers.push(cc);
		}
	}
	,initAPI: function() {
		this.stdCompleter = new ace_AceWrapCompleter(gml_GmlAPI.stdComp,this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.stdCompleter);
		this.extCompleter = new ace_AceWrapCompleter(gml_GmlAPI.extComp,this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.extCompleter);
		this.gmlCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlComp,this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.gmlCompleter);
	}
	,initEvents: function() {
		this.eventCompleter = new ace_AceWrapCompleter(parsers_GmlEvent.comp,["eventname"],false,$bind(this,this.gmlOnly));
		this.eventCompleter.minLength = 0;
		this.completers.push(this.eventCompleter);
		this.keynameCompleter = new ace_AceWrapCompleter(parsers_GmlKeycode.comp,["eventkeyname","eventsep.punctuation.operator"],false,$bind(this,this.gmlOnly));
		this.keynameCompleter.minLength = 0;
		this.completers.push(this.keynameCompleter);
	}
	,initVariables: function() {
		var _gthis = this;
		this.globalFullCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlGlobalFullComp,this.excludeTokens,true,function(q) {
			if(_gthis.gmlModes[(q.$modeId || q.getOption("mode"))]) {
				return ui_Preferences.current.compMatchMode == 3;
			} else {
				return false;
			}
		});
		this.completers.push(this.globalFullCompleter);
		this.globalCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlGlobalFieldComp,["globalfield"],false,$bind(this,this.gmlOnly));
		this.globalCompleter.minLength = 0;
		this.globalCompleter.dotKind = 1;
		this.completers.push(this.globalCompleter);
		this.instCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlInstFieldComp,this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.instCompleter);
	}
	,initNamespace: function() {
		this.namespaceTypeCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.namespaceTypeCompleter.minLength = 0;
		this.namespaceTypeCompleter.colKind = 1;
		this.completers.push(this.namespaceTypeCompleter);
		this.namespaceTypeAltCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.namespaceTypeAltCompleter.minLength = 0;
		this.namespaceTypeAltCompleter.colKind = 1;
		this.namespaceTypeAltCompleter.dotKindMeta = true;
		this.completers.push(this.namespaceTypeAltCompleter);
		this.enumTypeCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.enumTypeCompleter.minLength = 0;
		this.enumTypeCompleter.colKind = 2;
		this.completers.push(this.enumTypeCompleter);
		this.smartCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.smartCompleter.minLength = 0;
		this.smartCompleter.dotKind = 5;
		this.completers.push(this.smartCompleter);
		this.smartAltCompleter = new ace_AceWrapCompleter([],this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.smartAltCompleter.minLength = 0;
		this.smartAltCompleter.dotKind = 5;
		this.smartAltCompleter.dotKindMeta = true;
		this.completers.push(this.smartAltCompleter);
	}
	,initEnum: function() {
		this.enumCompleter = new ace_AceWrapCompleter([],["enumfield"],false,$bind(this,this.gmlOnly));
		this.enumCompleter.minLength = 0;
		this.enumCompleter.dotKind = 3;
		this.completers.push(this.enumCompleter);
	}
	,initShaders: function() {
		this.glslCompleter = new ace_AceWrapCompleter(shaders_ShaderAPI.glslComp,this.excludeTokens,true,function(q) {
			if((q.$modeId || q.getOption("mode")) == "ace/mode/shader" && q.gmlFile != null) {
				return ((q.gmlFile.kind) instanceof file_kind_misc_KGLSL);
			} else {
				return false;
			}
		});
		this.completers.push(this.glslCompleter);
		this.hlslCompleter = new ace_AceWrapCompleter(shaders_ShaderAPI.glslComp,this.excludeTokens,true,function(q) {
			if((q.$modeId || q.getOption("mode")) == "ace/mode/shader" && q.gmlFile != null) {
				return ((q.gmlFile.kind) instanceof file_kind_misc_KHLSL);
			} else {
				return false;
			}
		});
		this.completers.push(this.hlslCompleter);
	}
	,initSnippets: function() {
		this.snippetCompleter = new ace_AceSnippetCompleterProxy(ace_AceSnippets.completer,this.excludeTokens,true,$bind(this,this.gmlOnly));
		this.completers.push(this.snippetCompleter);
	}
	,openAC: function(editor,eraseSelfDot) {
		var ac = editor.completer;
		if(ac == null) {
			ac = new AceAutocomplete();
			editor.completer = ac;
		}
		ac.eraseSelfDot = eraseSelfDot;
		if(eraseSelfDot && ac.insertMatch_base == null) {
			ac.detach_base = ac.detach;
			var detach_hook = function() {
				var ac = this;
				if(!ac.isShowPopup) {
					ac.eraseSelfDot = false;
				}
				ac.detach_base.apply(ac,arguments);
			};
			ac.detach = detach_hook;
			ac.insertMatch_base = ac.insertMatch;
			var insertMatch_hook = function(data,options) {
				var ac = this;
				var rangesToRemove = [];
				if(data == null) {
					data = ac.popup.getData(ac.popup.getRow());
				}
				if(data != null && ac.eraseSelfDot) {
					var ranges = editor.selection.getAllRanges();
					var ft = ac.completions.filterText;
					var ftl = ft != null ? ft.length : 0;
					var _g = 0;
					while(_g < ranges.length) {
						var s = ranges[_g++].start;
						var line = editor.getSession().getLine(s.row);
						s.column -= ftl;
						if(HxOverrides.cca(line,s.column - 1) != 46) {
							continue;
						}
						rangesToRemove.push(ace_extern_AceRange._new(s.column - 1,s.row,s.column,s.row));
					}
				}
				var result = ac.insertMatch_base.apply(ac,arguments);
				var _g = 0;
				while(_g < rangesToRemove.length) {
					var range = rangesToRemove[_g++];
					editor.getSession().remove(range);
				}
				return result;
			};
			ac.insertMatch = insertMatch_hook;
		}
		editor.completer.autoInsert = false;
		var wasShowPopup = editor.completer.isShowPopup;
		editor.completer.isShowPopup = true;
		editor.completer.showPopup(editor);
		editor.completer.isShowPopup = wasShowPopup;
	}
	,onDot: function(editor,canEraseSelfDot) {
		if(canEraseSelfDot == null) {
			canEraseSelfDot = true;
		}
		var session = editor.getSession();
		if(!this.gmlOnly(editor.getSession())) {
			return;
		}
		var lead = session.selection.lead;
		var iter = new AceTokenIterator(session,lead.row,lead.column);
		var token = iter.stepBackward();
		if(token == null) {
			return;
		}
		var eraseSelfDot = false;
		var open;
		switch(token.type) {
		case "asset.object":
			open = true;
			break;
		case "enum":case "namespace":
			open = true;
			break;
		case "punctuation.operator":
			eraseSelfDot = token.value != ".";
			open = eraseSelfDot;
			break;
		case "local":case "sublocal":
			var scope = session.gmlScopes.get(lead.row);
			var imp = session.gmlEditor.imports[scope];
			open = imp != null && imp.localTypes[token.value] != null;
			break;
		case "set.operator":case "text":
			eraseSelfDot = true;
			open = true;
			break;
		default:
			switch(token.value) {
			case "(":case "[":case "{":
				eraseSelfDot = true;
				open = true;
				break;
			case ")":case "]":case "}":
				open = true;
				break;
			case "global":case "other":case "self":
				open = true;
				break;
			default:
				open = ace_extern_AceToken.__isIdent.test(token.value);
			}
		}
		if(!open && iter.getCurrentTokenRow() != lead.row) {
			open = true;
			eraseSelfDot = true;
		}
		if(open) {
			this.openAC(editor,canEraseSelfDot && eraseSelfDot);
		}
	}
	,onColon: function(editor) {
		var session = editor.getSession();
		var lead = session.selection.lead;
		if(ace_AceWrapCompleter.checkColon(new AceTokenIterator(session,lead.row,lead.column))) {
			this.openAC(editor);
		}
	}
	,onSpace: function(editor) {
		var session = editor.getSession();
		var lead = session.selection.lead;
		var iter = new AceTokenIterator(editor.getSession(),lead.row,lead.column);
		var token = iter.stepBackward();
		if(token == null) {
			return;
		}
		switch(token.type) {
		case "comment.meta":
			if(token.value == "@lint") {
				this.openAC(editor);
			}
			break;
		case "preproc.event":
			if(session.getLine(lead.row).startsWith("#event")) {
				this.openAC(editor);
			}
			break;
		}
	}
	,onAtSign: function(editor) {
		var session = editor.getSession();
		var lead = session.selection.lead;
		var token = session.getTokenAt(lead.row,lead.column);
		if(token == null) {
			return;
		}
		if(token.type == "comment.meta") {
			this.openAC(editor);
		}
	}
	,onAfterExec: function(e) {
		if(e.command.name == "insertstring") {
			switch(e.args) {
			case " ":
				this.onSpace(e.editor);
				break;
			case ".":
				this.onDot(e.editor);
				break;
			case ":":
				this.onColon(e.editor);
				break;
			case "@":
				this.onAtSign(e.editor);
				break;
			case "[":
				this.onDot(e.editor,false);
				break;
			}
		}
	}
	,bind: function(editor) {
		editor.gmlCompleters = this;
		editor.setOptions({ enableLiveAutocompletion : this.completers, enableSnippets : true});
		editor.commands.on("afterExec",$bind(this,this.onAfterExec));
	}
	,__class__: ace_AceWrapCommonCompleters
};
var ace_AceWrapCompleterCustom = function(items,tokenFilterDictOrArray,not,modeFilter,fn) {
	this.func = fn;
	ace_AceWrapCompleter.call(this,items,tokenFilterDictOrArray,not,modeFilter);
};
$hxClasses["ace.AceWrapCompleterCustom"] = ace_AceWrapCompleterCustom;
ace_AceWrapCompleterCustom.__name__ = "ace.AceWrapCompleterCustom";
ace_AceWrapCompleterCustom.__super__ = ace_AceWrapCompleter;
ace_AceWrapCompleterCustom.prototype = $extend(ace_AceWrapCompleter.prototype,{
	getCompletions: function(editor,session,pos,prefix,callback) {
		if(prefix.length < (this.minLength == -4 ? ui_Preferences.current.compMatchMode == 3 ? 1 : 2 : this.minLength) || !this.modeFilter(session)) {
			callback(null,ace_AceWrapCompleter.noItems);
			return;
		}
		var tk = session.getTokenAt(pos.row,pos.column);
		var tkf = Object.prototype.hasOwnProperty.call(this.tokenFilter,tk.type);
		if(!tkf && this.tokenFilterComment && tk.type.startsWith("comment")) {
			tkf = true;
		}
		if(tkf != this.tokenFilterNot) {
			var r = this.func(this,editor,session,pos,prefix,callback);
			if(r != null) {
				callback(null,r ? this.items : ace_AceWrapCompleter.noItems);
			}
		} else {
			callback(null,ace_AceWrapCompleter.noItems);
		}
	}
	,__class__: ace_AceWrapCompleterCustom
});
var ace_extern_AceAutoCompleteItem = {};
ace_extern_AceAutoCompleteItem.setDocTag = function(this1,key,val) {
	if(this1 == null) {
		return;
	}
	var doc = this1.doc;
	if(doc == null) {
		this1.doc = key + " " + val;
		return;
	}
	key += " ";
	var pos;
	if(doc.startsWith(key)) {
		pos = key.length;
	} else {
		pos = doc.indexOf("\n" + key);
		if(pos < 0) {
			this1.doc += "\n" + key + val;
			return;
		} else {
			pos += key.length + 1;
		}
	}
	var end = doc.indexOf("\n",pos);
	if(end >= 0) {
		this1.doc = doc.substring(0,pos) + val + doc.substring(end);
	} else {
		this1.doc = doc.substring(0,pos) + val;
	}
};
var ace_extern_AceCommandKey = {};
ace_extern_AceCommandKey.get_key = function(this1) {
	if(this1 == null || typeof(this1) == "string") {
		return this1;
	}
	if(AceUserAgent.isMac) {
		return this1.mac;
	} else {
		return this1.win;
	}
};
ace_extern_AceCommandKey.prettyprint = function(keybindString) {
	var what = /(^|-)(\w)/g;
	return keybindString.replace(what,function(_,dash,letter) {
		if(dash != "") {
			return "+" + letter.toUpperCase();
		} else {
			return letter.toUpperCase();
		}
	});
};
var ace_extern_AceCommandOrName = {};
ace_extern_AceCommandOrName.equals = function(this1,other) {
	if(typeof(this1) == "string") {
		if(typeof(other) == "string") {
			return this1 == other;
		} else {
			return this1 == other.name;
		}
	} else if(typeof(other) == "string") {
		return this1.name == other;
	} else {
		return this1 == other;
	}
};
var ace_extern__$AceFilteredList_AceFilteredListImpl = function() { };
$hxClasses["ace.extern._AceFilteredList.AceFilteredListImpl"] = ace_extern__$AceFilteredList_AceFilteredListImpl;
ace_extern__$AceFilteredList_AceFilteredListImpl.__name__ = "ace.extern._AceFilteredList.AceFilteredListImpl";
ace_extern__$AceFilteredList_AceFilteredListImpl.init = function(flProto) {
	var orig = flProto.filterCompletions;
	flProto.filterCompletions = function(items,needle) {
		var _this = this;
		var mode = _this.gmlMatchMode;
		if(mode == null) {
			mode = ui_Preferences.current.compMatchMode;
		}
		switch(mode) {
		case 1:
			var results = [];
			_this.shouldSort = true;
			var lower = needle.toLowerCase();
			var length = needle.length;
			var _g = 0;
			var _g1 = items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				var caption = ((item.caption || item.value) || item.snippet);
				if(caption == null) {
					continue;
				}
				var pos = caption.toLowerCase().indexOf(lower);
				if(pos < 0) {
					continue;
				}
				item.exactMatch = pos == 0;
				item.matchMask = (1 << length) - 1;
				var v = (item.score || 0) - pos;
				item["$score"] = v;
				results.push(item);
			}
			return results;
		case 0:case 2:
			_this.exactMatch = mode == 0;
			_this.shouldSort = mode == 2 && needle.length > 0;
			return orig.call(this,items,needle);
		case 3:
			var results = [];
			_this.shouldSort = false;
			var length = needle.length;
			var nc = needle.charCodeAt(0);
			var nu = nc < 97 || nc > 122;
			var _g = 0;
			var _g1 = items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				var caption = ((item.caption || item.value) || item.snippet);
				if(caption == null) {
					continue;
				}
				var c1 = -1;
				var c0;
				var np = 0;
				var c1u;
				var i = 0;
				_hx_loop3: while(i < caption.length) {
					c0 = c1;
					c1 = caption.charCodeAt(i);
					++i;
					var proc_SectionStart_break;
					switch(c0) {
					case -1:case 46:case 95:
						c1u = c1 >= 65 && c1 <= 90;
						nc = needle.charCodeAt(np);
						if(c1u) {
							if(nc >= 97 && nc <= 122) {
								nc += -32;
							}
						} else if(nc >= 65 && nc <= 90) {
							nc -= -32;
						}
						if(nc != c1 || ++np >= length) {
							proc_SectionStart_break = true;
						} else {
							proc_SectionStart_break = false;
							while(np < length) {
								nc = needle.charCodeAt(np);
								c1 = caption.charCodeAt(i);
								++i;
								if(nu) {
									if(nc < 97 || nc > 122) {
										break;
									}
									if(c1 >= 65 && c1 <= 90) {
										nc += -32;
									}
								} else {
									if(nc < 65 || nc > 90) {
										break;
									}
									if(c1 >= 97 && c1 <= 122) {
										nc += 32;
									}
								}
								if(c1 != nc) {
									proc_SectionStart_break = true;
									break;
								}
								++np;
							}
						}
						if(proc_SectionStart_break) {
							break _hx_loop3;
						}
						break;
					default:
						if(c0 >= 97 && c0 <= 122 && (c1 >= 65 && c1 <= 90)) {
							c1u = true;
							nc = needle.charCodeAt(np);
							if(nc >= 97 && nc <= 122) {
								nc += -32;
							}
							if(nc != c1 || ++np >= length) {
								proc_SectionStart_break = true;
							} else {
								proc_SectionStart_break = false;
								while(np < length) {
									nc = needle.charCodeAt(np);
									c1 = caption.charCodeAt(i);
									++i;
									if(nu) {
										if(nc < 97 || nc > 122) {
											break;
										}
										if(c1 >= 65 && c1 <= 90) {
											nc += -32;
										}
									} else {
										if(nc < 65 || nc > 90) {
											break;
										}
										if(c1 >= 97 && c1 <= 122) {
											nc += 32;
										}
									}
									if(c1 != nc) {
										proc_SectionStart_break = true;
										break;
									}
									++np;
								}
							}
							if(proc_SectionStart_break) {
								break _hx_loop3;
							}
						}
					}
				}
				if(np < length) {
					continue;
				}
				item.matchMask = (1 << length) - 1;
				item.exactMatch = false;
				var v = (item.score || 0);
				item["$score"] = v;
				results.push(item);
			}
			return results;
		}
	};
};
var ace_extern__$AceHashHandler_AceHashHandlerHelper = function() { };
$hxClasses["ace.extern._AceHashHandler.AceHashHandlerHelper"] = ace_extern__$AceHashHandler_AceHashHandlerHelper;
ace_extern__$AceHashHandler_AceHashHandlerHelper.__name__ = "ace.extern._AceHashHandler.AceHashHandlerHelper";
ace_extern__$AceHashHandler_AceHashHandlerHelper.getCommandNamesForKeybinding = function(hh,kb) {
	var either = hh.commandKeyBinding[kb];
	if(either == null) {
		return [];
	}
	var names = [];
	if(((either) instanceof Array)) {
		var _g = 0;
		var _g1 = either;
		while(_g < _g1.length) {
			var this1 = _g1[_g++];
			names.push(typeof(this1) == "string" ? this1 : this1.name);
		}
	} else {
		var this1 = either;
		names.push(typeof(this1) == "string" ? this1 : this1.name);
	}
	return names;
};
ace_extern__$AceHashHandler_AceHashHandlerHelper.getKeybindingsForCommand = function(hh,cmd) {
	var keybinds = [];
	var q = hh.commandKeyBinding;
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in q) {
	if(has.call(q,fd)) {
		var _g = 0;
		var this1 = hh.commandKeyBinding[fd];
		var _g1 = ((this1) instanceof Array) ? this1 : [this1];
		while(_g < _g1.length) if(ace_extern_AceCommandOrName.equals(_g1[_g++],cmd)) {
			keybinds.push(fd);
			break;
		}
	}
	}
	return keybinds;
};
ace_extern__$AceHashHandler_AceHashHandlerHelper.removeKeybindingsForCommand = function(hh,cmd) {
	var q = hh.commandKeyBinding;
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in q) {
	if(has.call(q,fd)) {
		var either = hh.commandKeyBinding[fd];
		if(((either) instanceof Array)) {
			var arr = either;
			var i = arr.length;
			while(--i >= 0) if(ace_extern_AceCommandOrName.equals(arr[i],cmd)) {
				arr.splice(i,1);
			}
			if(arr.length == 0) {
				delete hh.commandKeyBinding[fd];
			}
		} else if(ace_extern_AceCommandOrName.equals(either,cmd)) {
			delete hh.commandKeyBinding[fd];
		}
	}
	}
};
ace_extern__$AceHashHandler_AceHashHandlerHelper.getKeybindingsPerCommand = function(hh) {
	var out = Object.create(null);
	var this1 = hh.commandKeyBinding;
	var fn = function(key,either) {
		var this1 = either;
		if(((this1) instanceof Array)) {
			var _g = 0;
			var _g1 = this1;
			while(_g < _g1.length) {
				var this2 = _g1[_g++];
				var name = typeof(this2) == "string" ? this2 : this2.name;
				var arr = out[name];
				if(arr == null) {
					out[name] = [key];
				} else {
					arr.push(key);
				}
			}
		} else {
			var name = typeof(this1) == "string" ? this1 : this1.name;
			var arr = out[name];
			if(arr == null) {
				out[name] = [key];
			} else {
				arr.push(key);
			}
		}
	};
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in this1) {
	if(has.call(this1,fd)) {
		fn(fd,this1[fd]);
	}
	}
	return out;
};
var ace_extern_AceHashHandlerKeyContext = {};
ace_extern_AceHashHandlerKeyContext._new = function(editor) {
	var this1 = { editor : editor};
	this1["$keyChain"] = "";
	return this1;
};
var ace_extern_IAceMarker = function() { };
$hxClasses["ace.extern.IAceMarker"] = ace_extern_IAceMarker;
ace_extern_IAceMarker.__name__ = "ace.extern.IAceMarker";
ace_extern_IAceMarker.__isInterface__ = true;
var ace_extern_IAceDynamicMarker = function() { };
$hxClasses["ace.extern.IAceDynamicMarker"] = ace_extern_IAceDynamicMarker;
ace_extern_IAceDynamicMarker.__name__ = "ace.extern.IAceDynamicMarker";
ace_extern_IAceDynamicMarker.__isInterface__ = true;
ace_extern_IAceDynamicMarker.__interfaces__ = [ace_extern_IAceMarker];
var ace_extern_AceRange = {};
ace_extern_AceRange._new = function(col1,row1,col2,row2) {
	return new AceRange(row1,col1,row2,col2);
};
ace_extern_AceRange.fromPair = function(start,end) {
	return ace_extern_AceRange._new(start.column,start.row,end.column,end.row);
};
ace_extern_AceRange.fromPos = function(pos) {
	return ace_extern_AceRange._new(pos.column,pos.row,pos.column,pos.row);
};
ace_extern_AceRange.fromTokenPos = function(tk,pos) {
	return ace_extern_AceRange._new(pos.column,pos.row,pos.column + tk.value.length,pos.row);
};
var ace_extern_AceSessionTools = function() { };
$hxClasses["ace.extern.AceSessionTools"] = ace_extern_AceSessionTools;
ace_extern_AceSessionTools.__name__ = "ace.extern.AceSessionTools";
ace_extern_AceSessionTools.getEOF = function(s) {
	var n = s.getLength() - 1;
	if(n < 0) {
		return { column : 0, row : 0};
	}
	return { column : s.getLine(n).length, row : n};
};
var ace_extern_AceToken = {};
var ace_gml_AceGmlDocHint = function() { };
$hxClasses["ace.gml.AceGmlDocHint"] = ace_gml_AceGmlDocHint;
ace_gml_AceGmlDocHint.__name__ = "ace.gml.AceGmlDocHint";
ace_gml_AceGmlDocHint.match = function(value,state,stack,line,row) {
	var mt = this.splitRegex.exec(value);
	var arr = [tools_HighlightTools.rtk("comment.doc.line",mt[1]),tools_HighlightTools.rtk("comment.meta",mt[2]),tools_HighlightTools.rtk("comment.doc.line",mt[3])];
	var q = new parsers_GmlReader(mt[4],gml_GmlVersion.v2);
	var start = 0;
	var procSpaces = function() {
		q.skipSpaces0_local();
		if(q.pos > start) {
			arr.push(tools_HighlightTools.rtk("comment.doc.line",q.source.substring(start,q.pos)));
			start = q.pos;
		}
	};
	var finish = function() {
		var till = q.length;
		if(till > start) {
			arr.push(tools_HighlightTools.rtk("comment.doc.line",q.source.substring(start,till)));
		}
		return arr;
	};
	var c;
	var typeParams = Object.create(null);
	var getIdentType = function(name) {
		if(name == "function") {
			return "namespace";
		}
		if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlNamespaces,name)) {
			return "namespace";
		} else {
			return tools_Dictionary.defget(typeParams,name,"typeerror");
		}
	};
	var procType = null;
	procType = function() {
		procSpaces();
		var p = q.pos;
		c = q.source.charCodeAt(q.pos++);
		if(c == 40) {
			arr.push(tools_HighlightTools.rtk("paren.lparen","("));
			start = q.pos;
			if(procType()) {
				return true;
			}
			procSpaces();
			if(q.source.charCodeAt(q.pos++) == 40) {
				arr.push(tools_HighlightTools.rtk("paren.rparen",")"));
				start = q.pos;
			} else {
				return true;
			}
		} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			q.skipIdent1();
			var name = q.source.substring(p,q.pos);
			var t = getIdentType(name);
			arr.push(tools_HighlightTools.rtk(t,name));
			start = q.pos;
			procSpaces();
			if(q.skipIfEquals(60)) {
				arr.push(tools_HighlightTools.rtk("punctuation.operator","<"));
				start = q.pos;
				_hx_loop1: while(q.pos < q.length) {
					if(procType()) {
						return true;
					}
					procSpaces();
					switch(q.source.charCodeAt(q.pos)) {
					case 44:case 59:
						q.pos += 1;
						break;
					case 62:
						q.pos += 1;
						arr.push(tools_HighlightTools.rtk("punctuation.operator",">"));
						start = q.pos;
						procSpaces();
						break _hx_loop1;
					default:
						return true;
					}
				}
			}
			_hx_loop2: while(q.pos < q.length) {
				c = q.source.charCodeAt(q.pos);
				switch(c) {
				case 63:
					q.pos += 1;
					arr.push(tools_HighlightTools.rtk("punctuation.operator","?"));
					start = q.pos;
					procSpaces();
					break;
				case 91:
					q.pos += 1;
					arr.push(tools_HighlightTools.rtk("square.paren.lparen","["));
					start = q.pos;
					procSpaces();
					if(!q.skipIfEquals(93)) {
						return true;
					}
					arr.push(tools_HighlightTools.rtk("square.paren.rparen","]"));
					start = q.pos;
					procSpaces();
					break;
				default:
					break _hx_loop2;
				}
			}
		}
		return false;
	};
	var procTypeParams = function() {
		q.pos += 1;
		arr.push(tools_HighlightTools.rtk("punctuation.operator","<"));
		start = q.pos;
		while(q.pos < q.length) {
			procSpaces();
			var typeParam = q.readIdent();
			if(typeParam == null) {
				return true;
			}
			arr.push(tools_HighlightTools.rtk("variable",typeParam));
			start = q.pos;
			typeParams[typeParam] = "variable";
			procSpaces();
			if(q.source.charCodeAt(q.pos) == 58) {
				arr.push(tools_HighlightTools.rtk("punctuation.operator",":"));
				start = q.pos;
				if(procType()) {
					return true;
				}
				procSpaces();
			}
			switch(q.source.charCodeAt(q.pos)) {
			case 44:case 59:
				arr.push(tools_HighlightTools.rtk("punctuation.operator",q.source.charAt(q.pos++)));
				start = q.pos;
				break;
			case 62:
				q.pos += 1;
				arr.push(tools_HighlightTools.rtk("punctuation.operator",">"));
				start = q.pos;
				return false;
			}
		}
		return true;
	};
	c = q.source.charCodeAt(q.pos);
	var typeStart = 0;
	var typeEnd = 0;
	if(c == 123) {
		q.pos += 1;
		arr.push(tools_HighlightTools.rtk("punctuation.operator","{"));
		start = q.pos;
		typeStart = arr.length;
		if(procType()) {
			return finish();
		}
		typeEnd = arr.length;
		procSpaces();
		if(q.source.charCodeAt(q.pos++) == 125) {
			arr.push(tools_HighlightTools.rtk("punctuation.operator","}"));
			start = q.pos;
			procSpaces();
			c = q.source.charCodeAt(q.pos);
		} else {
			return finish();
		}
	}
	var hasNamespace = c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90;
	if(hasNamespace) {
		hasNamespace = true;
		var namespaceName = q.readIdent();
		if(namespaceName == "new") {
			arr.push(tools_HighlightTools.rtk("keyword","new"));
			start = q.pos;
			procSpaces();
			namespaceName = q.readIdent();
			if(namespaceName == null) {
				return finish();
			}
		}
		arr.push(tools_HighlightTools.rtk("namespace",namespaceName));
		start = q.pos;
		typeParams[namespaceName] = "namespace";
		procSpaces();
		if(q.source.charCodeAt(q.pos) == 60) {
			if(procTypeParams()) {
				return finish();
			}
			procSpaces();
		}
		c = q.source.charCodeAt(q.pos);
	}
	if(c == 101 && q.source.substr(q.pos,7) == "extends" && !tools_CharCode.isIdent1_ni(q.source.charCodeAt(q.pos + 7))) {
		q.pos += 7;
		arr.push(tools_HighlightTools.rtk("keyword","extends"));
		start = q.pos;
		procSpaces();
		procType();
		return finish();
	}
	if(c == 105 && q.source.substr(q.pos,10) == "implements" && !tools_CharCode.isIdent1_ni(q.source.charCodeAt(q.pos + 10))) {
		q.pos += 10;
		arr.push(tools_HighlightTools.rtk("keyword","implements"));
		start = q.pos;
		procSpaces();
		procType();
		return finish();
	}
	var hasField = c == 58 || c == 46;
	if(hasField) {
		arr.push(tools_HighlightTools.rtk("punctuation.operator",q.source.charAt(q.pos++)));
		start = q.pos;
		procSpaces();
		c = q.source.charCodeAt(q.pos);
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			var v = q.readIdent();
			arr.push(tools_HighlightTools.rtk("field",v));
			start = q.pos;
			procSpaces();
			c = q.source.charCodeAt(q.pos);
		}
		if(q.source.charCodeAt(q.pos) == 60) {
			if(procTypeParams()) {
				return finish();
			}
		}
		c = q.source.charCodeAt(q.pos);
	}
	if(!hasField && !hasNamespace) {
		return finish();
	}
	var i = typeStart;
	while(i < typeEnd) {
		var tk = arr[i];
		if(tk.type == "typeerror") {
			var t1 = typeParams[tk.value];
			if(t1 != null) {
				tk.type = t1;
			}
		}
		++i;
	}
	if(c == 40) {
		arr.push(tools_HighlightTools.rtk("paren.lparen",q.source.charAt(q.pos++)));
		start = q.pos;
		procSpaces();
		procSpaces();
		var foundArgs = q.source.charCodeAt(q.pos) == 41;
		if(foundArgs) {
			arr.push(tools_HighlightTools.rtk("paren.rparen",q.source.charAt(q.pos++)));
			start = q.pos;
		} else {
			while(q.pos < q.length) {
				procSpaces();
				c = q.source.charCodeAt(q.pos);
				if(c == 63) {
					arr.push(tools_HighlightTools.rtk("punctuation.operator",q.source.charAt(q.pos++)));
					start = q.pos;
					procSpaces();
					c = q.source.charCodeAt(q.pos);
				}
				if(c == 46 && q.source.substr(q.pos,3) == "...") {
					var v = q.readChars(3);
					arr.push(tools_HighlightTools.rtk("punctuation.operator",v));
					start = q.pos;
					procSpaces();
					c = q.source.charCodeAt(q.pos);
				}
				if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
					return finish();
				}
				var v1 = q.readIdent();
				arr.push(tools_HighlightTools.rtk("local",v1));
				start = q.pos;
				procSpaces();
				c = q.source.charCodeAt(q.pos);
				if(c == 58) {
					arr.push(tools_HighlightTools.rtk("punctuation.operator",q.source.charAt(q.pos++)));
					start = q.pos;
					if(procType()) {
						return finish();
					}
					procSpaces();
					c = q.source.charCodeAt(q.pos);
				}
				if(c == 41) {
					arr.push(tools_HighlightTools.rtk("paren.rparen",q.source.charAt(q.pos++)));
					start = q.pos;
					foundArgs = true;
					break;
				} else if(c == 44) {
					arr.push(tools_HighlightTools.rtk("punctuation.operator",q.source.charAt(q.pos++)));
					start = q.pos;
				} else {
					return finish();
				}
			}
		}
		if(!foundArgs) {
			return finish();
		}
		if(q.source.substr(q.pos,2) == "->") {
			var v = q.readChars(2);
			arr.push(tools_HighlightTools.rtk("punctuation.operator",v));
			start = q.pos;
			if(procType()) {
				return finish();
			}
		}
	}
	return finish();
};
var ace_gml_AceGmlHighlightIdents = function() { };
$hxClasses["ace.gml.AceGmlHighlightIdents"] = ace_gml_AceGmlHighlightIdents;
ace_gml_AceGmlHighlightIdents.__name__ = "ace.gml.AceGmlHighlightIdents";
ace_gml_AceGmlHighlightIdents.getLocalType_1 = function(editor,name,scope,canLocal) {
	var kind;
	var lambdas = editor.lambdas[scope];
	var tmp;
	if(lambdas != null) {
		kind = lambdas.kind[name];
		tmp = kind != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		return kind;
	}
	if(canLocal) {
		var locals = editor.locals[scope];
		var tmp;
		if(locals != null) {
			kind = locals.kind[name];
			tmp = kind != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			return kind;
		}
	}
	var imports = editor.imports[scope];
	var tmp;
	if(imports != null) {
		kind = imports.kind[name];
		tmp = kind != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		return kind;
	}
	return null;
};
ace_gml_AceGmlHighlightIdents.getLocalType = function(editor,row,name,canLocal) {
	if(row != null) {
		var scope = editor.session.gmlScopes.get(row);
		if(scope != null) {
			return ace_gml_AceGmlHighlightIdents.getLocalType_1(editor,name,scope,canLocal);
		} else {
			return null;
		}
	} else {
		return null;
	}
};
ace_gml_AceGmlHighlightIdents.genIdentPairFunc_getInstType = function(field,localTypeNS,ns,ns2) {
	var fdType;
	if(ns != null) {
		fdType = ns.getInstKind(field);
		if(fdType == null) {
			if(ns2 != null) {
				fdType = (ns2.getInstKind(field) || "typeerror");
			} else {
				fdType = "typeerror";
			}
		}
	} else if(ns2 != null) {
		fdType = (ns2.getInstKind(field) || "typeerror");
	} else {
		var en = gml_GmlAPI.gmlEnums[localTypeNS];
		if(en != null) {
			fdType = en.items[field] ? "enumfield" : "enumerror";
		} else {
			fdType = ((((gml_GmlAPI.gmlKind[field] || gml_GmlAPI.extKind[field]) || gml_GmlAPI.stdKind[field]) || synext_GmlExtCoroutines.keywordMap[field]) || "field");
		}
	}
	return fdType;
};
ace_gml_AceGmlHighlightIdents.matchIdent = function(editor,row,name,def,isMFunc) {
	var scope = row != null ? editor.session.gmlScopes.get(row) : null;
	var type = scope != null ? ace_gml_AceGmlHighlightIdents.getLocalType_1(editor,name,scope,!isMFunc) : null;
	if(type == null) {
		type = ((((gml_GmlAPI.gmlKind[name] || gml_GmlAPI.extKind[name]) || gml_GmlAPI.stdKind[name]) || synext_GmlExtCoroutines.keywordMap[name]) || null);
	}
	if(type == null) {
		do {
			var locals = editor.locals[scope];
			if(locals == null || locals.hasWith) {
				break;
			}
			var ctx_scope = scope;
			var gmlFile = editor.session.gmlFile;
			var localType;
			if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
				localType = gml_type_GmlTypeDef.simple(gmlFile.name);
			} else {
				var scopeDoc = gml_GmlAPI.gmlDoc[((ctx_scope) || (gmlFile.name))];
				localType = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(ctx_scope) : scopeDoc.selfType : null;
			}
			if(localType == null) {
				break;
			}
			var localTypeNS = gml_type_GmlTypeTools.getNamespace(localType);
			if(localTypeNS == null) {
				break;
			}
			var imports = editor.imports[scope];
			type = ace_gml_AceGmlHighlightIdents.genIdentPairFunc_getInstType(name,localTypeNS,((imports) && (imports.namespaces[localTypeNS])),gml_GmlAPI.gmlNamespaces[localTypeNS]);
			if(type == "field") {
				type = def;
			}
		} while(false);
	}
	if(type == null) {
		type = def;
	}
	return type;
};
ace_gml_AceGmlHighlightIdents.genIdent = function(editor,isMFunc,fieldDef) {
	var def = isMFunc ? "identifier" : fieldDef;
	return { regex : "[a-zA-Z_][a-zA-Z0-9_]*\\b", onMatch : function(value,state,stack,line,row) {
		return ace_gml_AceGmlHighlightIdents.matchIdent(editor,row,value,def,isMFunc);
	}};
};
ace_gml_AceGmlHighlightIdents.genIdentPairFunc = function(editor,isMFunc,fieldDef) {
	var def = isMFunc ? "identifier" : fieldDef;
	return function(value,state,stack,line,row) {
		var values = this.splitRegex.exec(value);
		var object = values[1];
		var field = values[5];
		var objType;
		var fdType;
		if(object == "global") {
			objType = "keyword";
			fdType = "globalfield";
		} else {
			objType = null;
			fdType = null;
			var en;
			var scope = (((row != null)) && (editor.session.gmlScopes.get(row)));
			var imp = null;
			var ns;
			var localType;
			var localTypeNS;
			var checkSelf = false;
			if(scope != null) {
				imp = editor.imports[scope];
				var checkStatics = false;
				if(object == "self") {
					objType = "keyword";
					var ctx = { session : editor.session, scope : scope};
					var gmlFile = ctx.session.gmlFile;
					var scope1 = ctx.scope;
					if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
						localType = gml_type_GmlTypeDef.simple(gmlFile.name);
					} else {
						var scopeDoc = gml_GmlAPI.gmlDoc[((scope1) || (gmlFile.name))];
						localType = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(scope1) : scopeDoc.selfType : null;
					}
				} else if(object == "other") {
					objType = "keyword";
					localType = null;
				} else if(gml_GmlAPI.gmlKind[object] == "asset.object") {
					objType = "asset.object";
					localType = gml_type_GmlTypeDef.object(object);
				} else {
					localType = null;
					checkStatics = true;
				}
				if(checkStatics) {
					var _g = imp != null ? 0 : 1;
					while(_g < 2) {
						var step = _g++;
						ns = step != 0 ? gml_GmlAPI.gmlNamespaces[object] : imp.namespaces[object];
						if(ns != null) {
							objType = ns.isObject ? "asset.object" : "namespace";
							fdType = ns.staticKind[field];
							if(fdType != null) {
								break;
							}
						}
						if(step == 0) {
							var e1 = imp.longenEnum[object];
							if(e1 != null) {
								en = gml_GmlAPI.gmlEnums[e1];
								if(en != null && en.items[field]) {
									fdType = "enumfield";
									break;
								}
							}
						}
					}
					if(objType != null && fdType == null) {
						fdType = "identifier";
					}
				}
				if(!checkStatics || objType == null) {
					if(objType == null) {
						objType = ace_gml_AceGmlHighlightIdents.getLocalType_1(editor,object,scope,!isMFunc);
						localType = ((imp) && (imp.localTypes[object]));
					}
					localTypeNS = ((localType) && (gml_type_GmlTypeTools.getNamespace(localType)));
					if(localTypeNS != null) {
						fdType = ace_gml_AceGmlHighlightIdents.genIdentPairFunc_getInstType(field,localTypeNS,((imp) && (imp.namespaces[localTypeNS])),gml_GmlAPI.gmlNamespaces[localTypeNS]);
					} else if(localType != null) {
						if(localType._hx_index == 2) {
							fdType = Object.prototype.hasOwnProperty.call(localType.inf.fields,field) ? "field" : "typeerror";
						}
					}
				}
				if(objType == null) {
					var locals = editor.locals[scope];
					checkSelf = locals != null && !locals.hasWith;
				}
			}
			if(objType == null) {
				en = gml_GmlAPI.gmlEnums[object];
				if(en != null) {
					objType = "enum";
					fdType = en.items[field] ? "enumfield" : "enumerror";
				} else {
					objType = ((((gml_GmlAPI.gmlKind[object] || gml_GmlAPI.extKind[object]) || gml_GmlAPI.stdKind[object]) || synext_GmlExtCoroutines.keywordMap[object]) || null);
					if(objType == null && checkSelf) {
						do {
							var ctx = { session : editor.session, scope : scope};
							var gmlFile = ctx.session.gmlFile;
							var scope1 = ctx.scope;
							if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
								localType = gml_type_GmlTypeDef.simple(gmlFile.name);
							} else {
								var scopeDoc = gml_GmlAPI.gmlDoc[((scope1) || (gmlFile.name))];
								localType = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(scope1) : scopeDoc.selfType : null;
							}
							if(localType == null) {
								break;
							}
							localTypeNS = gml_type_GmlTypeTools.getNamespace(localType);
							if(localTypeNS == null) {
								break;
							}
							ns = ((imp) && (imp.namespaces[localTypeNS]));
							objType = ace_gml_AceGmlHighlightIdents.genIdentPairFunc_getInstType(object,localTypeNS,((imp) && (imp.namespaces[localTypeNS])),gml_GmlAPI.gmlNamespaces[localTypeNS]);
							if(objType == "field") {
								objType = def;
							}
						} while(false);
					}
					if(objType == null) {
						objType = def;
					}
					fdType = ((((gml_GmlAPI.gmlKind[field] || gml_GmlAPI.extKind[field]) || gml_GmlAPI.stdKind[field]) || synext_GmlExtCoroutines.keywordMap[field]) || "field");
				}
			} else if(fdType == null) {
				fdType = ((((gml_GmlAPI.gmlKind[field] || gml_GmlAPI.extKind[field]) || gml_GmlAPI.stdKind[field]) || synext_GmlExtCoroutines.keywordMap[field]) || "field");
			}
		}
		var tokens = [tools_HighlightTools.rtk(objType,object)];
		if(values[2] != "") {
			tokens.push(tools_HighlightTools.rtk("text",values[2]));
		}
		tokens.push(tools_HighlightTools.rtk("punctuation.operator",values[3]));
		if(values[4] != "") {
			tokens.push(tools_HighlightTools.rtk("text",values[4]));
		}
		tokens.push(tools_HighlightTools.rtk(fdType,field));
		return tokens;
	};
};
ace_gml_AceGmlHighlightIdents.genIdentPair = function(editor,isMFunc,fieldDef) {
	return { regex : "([a-zA-Z_]\\w*)(\\s*)(\\.)(\\s*)([a-zA-Z_]\\w*|)", onMatch : ace_gml_AceGmlHighlightIdents.genIdentPairFunc(editor,isMFunc,fieldDef)};
};
var ace_gml_AceGmlLinter = function() {
	this.runLinter_time = 0;
};
$hxClasses["ace.gml.AceGmlLinter"] = ace_gml_AceGmlLinter;
ace_gml_AceGmlLinter.__name__ = "ace.gml.AceGmlLinter";
ace_gml_AceGmlLinter.prototype = {
	canRunLinterFor: function(session) {
		var kind = session.gmlFile.kind;
		if(((kind) instanceof file_kind_KGml)) {
			return kind.canSyntaxCheck;
		} else {
			return false;
		}
	}
	,runLinter: function(session,isDelay) {
		var maxLines = parsers_linter_GmlLinter.getOption(function(p) {
			if(isDelay) {
				return p.liveIdleMaxLines;
			} else {
				return p.liveMaxLines;
			}
		});
		if(session.getLength() > maxLines) {
			return;
		}
		var now = new Date().getTime();
		var minDelay = parsers_linter_GmlLinter.getOption(function(p) {
			return p.liveMinDelay;
		});
		if(now < this.runLinter_time + minDelay) {
			return;
		}
		this.runLinter_time = now;
		parsers_linter_GmlLinter.runFor(session.gmlEditor,{ editor : this.editor, session : session, setLocals : true, updateStatusBar : false});
		session.gmlLinterDirty = false;
		var um = session.getUndoManager();
		if(um != null) {
			session.gmlLinterRevision = um.getRevision();
		}
	}
	,onLinterDelay: function() {
		var session = this.editor.getSession();
		if(session != this.onLinterDelay_session) {
			return;
		}
		if(!this.canRunLinterFor(session)) {
			return;
		}
		this.runLinter(this.onLinterDelay_session,true);
	}
	,onAfterExec: function(e) {
		if(e.command.name != "insertstring") {
			return;
		}
		var session = e.editor.getSession();
		if(this.onLinterDelay_session != session) {
			return;
		}
		if(!this.canRunLinterFor(session)) {
			return;
		}
		switch(e.args) {
		case "\n":
			var lp = gml_Project.current.properties.linterPrefs;
			var r = null;
			var _g = 0;
			while(_g < 1) {
				++_g;
				if(lp != null) {
					r = lp.liveCheckOnEnter;
					if(r != null) {
						break;
					}
				}
				r = ui_Preferences.current.linterPrefs.liveCheckOnEnter;
				if(r != null) {
					break;
				}
				r = parsers_linter_GmlLinterPrefs.defValue.liveCheckOnEnter;
			}
			if(!r) {
				return;
			}
			break;
		case ";":
			var lp = gml_Project.current.properties.linterPrefs;
			var r = null;
			var _g = 0;
			while(_g < 1) {
				++_g;
				if(lp != null) {
					r = lp.liveCheckOnSemico;
					if(r != null) {
						break;
					}
				}
				r = ui_Preferences.current.linterPrefs.liveCheckOnSemico;
				if(r != null) {
					break;
				}
				r = parsers_linter_GmlLinterPrefs.defValue.liveCheckOnSemico;
			}
			if(!r) {
				return;
			}
			break;
		default:
			return;
		}
		this.runLinter(session,false);
	}
	,onKeyboardActivity: function(_) {
		var lp = gml_Project.current.properties.linterPrefs;
		var r = null;
		var _g = 0;
		while(_g < 1) {
			++_g;
			if(lp != null) {
				r = lp.liveIdleDelay;
				if(r != null) {
					break;
				}
			}
			r = ui_Preferences.current.linterPrefs.liveIdleDelay;
			if(r != null) {
				break;
			}
			r = parsers_linter_GmlLinterPrefs.defValue.liveIdleDelay;
		}
		var t = r;
		if(t <= 0) {
			return;
		}
		var session = this.editor.getSession();
		if(!session.gmlLinterDirty) {
			var u = session.getUndoManager();
			if(u == null) {
				return;
			}
			var rev = u.getRevision();
			if(rev != session.gmlLinterRevision) {
				session.gmlLinterRevision = rev;
				session.gmlLinterDirty = true;
			} else {
				return;
			}
		}
		this.onLinterDelay_session = session;
		this.onLinterDelay_call.delay(t);
	}
	,bind: function(editor) {
		var _gthis = this;
		this.editor = editor;
		editor.commands.on("afterExec",function(e) {
			_gthis.onAfterExec(e);
		});
		editor.on("keyboardActivity",function(e) {
			_gthis.onKeyboardActivity(e);
		});
		var lang = ace.require("ace/lib/lang");
		this.onLinterDelay_call = lang.delayedCall(function() {
			_gthis.onLinterDelay();
		});
	}
	,__class__: ace_gml_AceGmlLinter
};
var ace_gml_AceGmlState = function(state,depth) {
	this.state = state;
	this.depth = depth;
};
$hxClasses["ace.gml.AceGmlState"] = ace_gml_AceGmlState;
ace_gml_AceGmlState.__name__ = "ace.gml.AceGmlState";
ace_gml_AceGmlState.changeState = function(state,newState) {
	if(((state) instanceof ace_gml_AceGmlState)) {
		return new ace_gml_AceGmlState(newState,state.depth);
	} else {
		return newState;
	}
};
ace_gml_AceGmlState.adjustDepth = function(state,delta) {
	if(((state) instanceof ace_gml_AceGmlState)) {
		return new ace_gml_AceGmlState(state.state,state.depth + delta);
	} else {
		return new ace_gml_AceGmlState(state,delta);
	}
};
ace_gml_AceGmlState.getDepth = function(state) {
	if(((state) instanceof ace_gml_AceGmlState)) {
		return state.depth;
	} else {
		return 0;
	}
};
ace_gml_AceGmlState.getChangeState = function(newState) {
	return function(currentState,stack) {
		return ace_gml_AceGmlState.changeState(currentState,newState);
	};
};
ace_gml_AceGmlState.getPushState = function(newState) {
	return function(currentState,stack) {
		var nextState = ace_gml_AceGmlState.changeState(currentState,newState);
		if(currentState != "start" || stack.length > 0) {
			stack.unshift(currentState);
			stack.unshift(nextState);
		}
		return nextState;
	};
};
ace_gml_AceGmlState.tokenizerEquals = function(e0,e1) {
	if(((e0) instanceof Array)) {
		if(!((e1) instanceof Array)) {
			return false;
		}
		var a0 = e0;
		var a1 = e1;
		if(a0.length != a1.length) {
			return false;
		}
		var _g_current = 0;
		while(_g_current < a0.length) {
			var _g_value = a0[_g_current];
			var s1 = a1[_g_current++];
			if(!(((_g_value) instanceof ace_gml_AceGmlState) ? _g_value.equalsTo(s1) : ((s1) instanceof ace_gml_AceGmlState) ? s1.equalsTo(_g_value) : _g_value == s1)) {
				return false;
			}
		}
		return true;
	} else {
		if(e0 == null) {
			return e1 == null;
		}
		if(((e1) instanceof Array)) {
			return false;
		}
		if(((e0) instanceof ace_gml_AceGmlState)) {
			return e0.equalsTo(e1);
		} else if(((e1) instanceof ace_gml_AceGmlState)) {
			return e1.equalsTo(e0);
		} else {
			return e0 == e1;
		}
	}
};
ace_gml_AceGmlState.prototype = {
	equalsTo: function(q) {
		if(((q) instanceof ace_gml_AceGmlState)) {
			if(this.state == q.state) {
				return this.depth == q.depth;
			} else {
				return false;
			}
		} else if(this.state == q) {
			return this.depth == 0;
		} else {
			return false;
		}
	}
	,toString: function() {
		return this.state;
	}
	,__class__: ace_gml_AceGmlState
};
var ace_gml_AceGmlWarningMarker = function(session,row,clazz) {
	this.__row = row;
	this.__clazz = clazz;
	this.__line = session.getLine(row);
	this.__range = ace_extern_AceRange._new(0,row,this.__line.length,row);
};
$hxClasses["ace.gml.AceGmlWarningMarker"] = ace_gml_AceGmlWarningMarker;
ace_gml_AceGmlWarningMarker.__name__ = "ace.gml.AceGmlWarningMarker";
ace_gml_AceGmlWarningMarker.__interfaces__ = [ace_extern_IAceDynamicMarker];
ace_gml_AceGmlWarningMarker.prototype = {
	addTo: function(session) {
		session.addDynamicMarker(this);
		var dynSession = session;
		if(dynSession.__AceGmlWarningMarker == null) {
			dynSession.__AceGmlWarningMarker = true;
			dynSession.on("change",function(delta) {
				var startRow = delta.start.row;
				var endRow = delta.end.row;
				var rowCount = endRow - startRow;
				if(delta.action == "remove") {
					rowCount = -rowCount;
				}
				var toRemove = [];
				var _g = 0;
				var _g1 = session.gmlErrorMarkers;
				while(_g < _g1.length) {
					var id = _g1[_g];
					++_g;
					var m = session.$backMarkers[id];
					if(!((m) instanceof ace_gml_AceGmlWarningMarker)) {
						continue;
					}
					var mk = m;
					var mkRow = mk.__row;
					if(mkRow < startRow) {
						continue;
					}
					if(mkRow < endRow) {
						toRemove.push(id);
					} else {
						mk.__row += rowCount;
						mk.__range.start.row += rowCount;
						mk.__range.end.row += rowCount;
					}
				}
				var _g = 0;
				while(_g < toRemove.length) session.removeMarker(toRemove[_g++]);
			});
		}
		return this.id;
	}
	,update: function(html,markerLayer,session,config) {
		var range = this.__range.clipRows(config.firstRow,config.lastRow);
		if(range.isEmpty()) {
			return;
		}
		range = range.toScreenRange(session);
		markerLayer.drawFullLineMarker(html,range,this.__clazz,config,"position: absolute");
	}
	,__class__: ace_gml_AceGmlWarningMarker
};
var ace_statusbar_AceStatusBarImports = function() { };
$hxClasses["ace.statusbar.AceStatusBarImports"] = ace_statusbar_AceStatusBarImports;
ace_statusbar_AceStatusBarImports.__name__ = "ace.statusbar.AceStatusBarImports";
ace_statusbar_AceStatusBarImports.procDocImport = function(ctx) {
	var imports = ctx.imports;
	var hasGlobalNamespaces = tools_NativeObject.hasFields(gml_GmlAPI.gmlNamespaces);
	if(imports == null && !hasGlobalNamespaces) {
		return 0;
	}
	var tk = ctx.tk;
	var fnType = tk.type;
	var objType = null;
	var iter = ctx.iter;
	var name = tk.value;
	var doc = ctx.docs[name];
	var argStart = 0;
	var tk = iter.stepBackward();
	if(tk != null && tk.value == ".") {
		tk = iter.stepBackward();
		if(tk.type == "asset.object") {
			objType = gml_type_GmlTypeDef.object(tk.value);
		} else if(tk.value == "other") {
			var ctx_scope = ctx.scope;
			objType = StringTools.startsWith(ctx_scope,"collision:") ? gml_type_GmlTypeDef.object(ctx_scope.substring("collision:".length)) : null;
		} else if(tk.value == "self") {
			var ctx_scope = ctx.scope;
			var gmlFile = ctx.session.gmlFile;
			if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
				objType = gml_type_GmlTypeDef.simple(gmlFile.name);
			} else {
				var scopeDoc = gml_GmlAPI.gmlDoc[((ctx_scope) || (gmlFile.name))];
				objType = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(ctx_scope) : scopeDoc.selfType : null;
			}
		} else if(tk.type == "namespace") {
			var nsName = tk.value;
			var td = null;
			if(imports != null) {
				td = imports.docs[nsName + "." + name];
				if(td == null) {
					var nsLocal = imports.namespaces[nsName];
					if(nsLocal != null) {
						td = nsLocal.docStaticMap[name];
					}
				}
			}
			if(td == null && hasGlobalNamespaces) {
				var nsGlobal = gml_GmlAPI.gmlNamespaces[nsName];
				if(nsGlobal != null) {
					td = nsGlobal.docStaticMap[name];
				}
			}
			if(td != null) {
				doc = td;
			}
		} else if(imports != null && (tk.type == "local" || tk.type == "sublocal") && Object.prototype.hasOwnProperty.call(imports.localTypes,tk.value)) {
			objType = imports.localTypes[tk.value];
		} else {
			iter.stepForward();
			tk = iter.stepForward();
		}
		if(objType != null) {
			var btk = ace_extern_AceTokenIteratorTools.peekBackwardNonText(iter);
			if(btk != null && ((btk) && (btk.type)) == "keyword") {
				switch(btk.value) {
				case "as":case "cast":
					objType = null;
					break;
				}
			}
		}
	} else {
		if(fnType == "localfield") {
			var ctx_scope = ctx.scope;
			var gmlFile = ctx.session.gmlFile;
			if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
				objType = gml_type_GmlTypeDef.simple(gmlFile.name);
			} else {
				var scopeDoc = gml_GmlAPI.gmlDoc[((ctx_scope) || (gmlFile.name))];
				objType = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(ctx_scope) : scopeDoc.selfType : null;
			}
		}
		if(imports != null) {
			doc = (imports.docs[name] || doc);
		}
		tk = iter.stepForward();
	}
	if(objType != null) {
		var tn = gml_type_GmlTypeTools.getNamespace(objType);
		var fieldType = null;
		var fieldTypeText = null;
		if(tn != null) {
			var step = imports != null ? -1 : 0;
			while(++step < 2) {
				var ns = step > 0 ? gml_GmlAPI.gmlNamespaces[tn] : imports.namespaces[tn];
				if(ns == null) {
					continue;
				}
				if(doc == null) {
					doc = ns.getInstDoc(name);
					if(doc != null && ((ns) instanceof gml_GmlImportNamespace) && Object.prototype.hasOwnProperty.call(ns.longen,name)) {
						argStart = 1;
					}
				}
				if(fieldType == null) {
					fieldType = ns.getInstType(name);
				}
				if(fieldTypeText == null) {
					var comp = ns.getInstCompItem(name);
					if(comp != null) {
						fieldTypeText = comp.doc;
					} else {
						fieldTypeText = ns.getInstTypeText(name);
						if(fieldTypeText != null) {
							fieldTypeText += "\n" + "unlisted";
						}
					}
				}
			}
		}
		ctx.type = fieldType;
		ctx.typeText = fieldTypeText;
	} else {
		var from = ace_AceGmlTools.skipDotExprBackwards(ctx.session,ctx.funcEnd);
		ctx.exprStart = from;
		var snip = ctx.session.getTextRange(ace_extern_AceRange.fromPair(from,ctx.funcEnd));
		var inf = parsers_linter_GmlLinter.getType(snip,ctx.session.gmlEditor,ctx.scope,ctx.iter.getCurrentTokenPosition());
		doc = inf.doc;
		ctx.type = inf.type;
	}
	ctx.tk = tk;
	ctx.doc = doc;
	return argStart;
};
var editors_Editor = function(file) {
	this.file = file;
};
$hxClasses["editors.Editor"] = editors_Editor;
editors_Editor.__name__ = "editors.Editor";
editors_Editor.init = function() {
	editors_EditCode.container = document.getElementById("ace_container");
	editors_Editor.container = editors_EditCode.container.parentElement;
};
editors_Editor.prototype = {
	destroy: function() {
	}
	,ready: function() {
	}
	,stateSave: function() {
	}
	,stateLoad: function() {
	}
	,focusGain: function(prev) {
		if(prev.element != this.element) {
			editors_Editor.container.appendChild(this.element);
		}
	}
	,focusLost: function(next) {
		if(next.element != this.element) {
			editors_Editor.container.removeChild(this.element);
		}
	}
	,load: function(data) {
	}
	,save: function() {
		return false;
	}
	,checkChanges: function() {
	}
	,__class__: editors_Editor
};
var editors_EditCode = function(file,modePath) {
	this.lambdas = Object.create(null);
	this.lambdaMap = Object.create(null);
	this.lambdaList = [];
	this.imports = gml_GmlImports.defaultMap;
	this.locals = gml_GmlLocals.defaultMap;
	editors_Editor.call(this,file);
	this.kind = js_Boot.__cast(file.kind , file_kind_KCode);
	this.modePath = modePath;
	this.element = editors_EditCode.container;
};
$hxClasses["editors.EditCode"] = editors_EditCode;
editors_EditCode.__name__ = "editors.EditCode";
editors_EditCode.__super__ = editors_Editor;
editors_EditCode.prototype = $extend(editors_Editor.prototype,{
	ready: function() {
		if(gml_GmlAPI.version.config.indexingMode == "local") {
			parsers_GmlSeeker.runSync(this.file.path,this.file.code,null,this.file.kind);
		}
		var _prev = editors_EditCode.currentNew;
		editors_EditCode.currentNew = this;
		this.session = ace_AceTools.createSession(this.file.code,{ path : this.modePath, version : gml_GmlAPI.version});
		ace_AceTools.bindSession(this.session,this);
		if(gml_Project.current != null && gml_Project.current.properties.indentWithTabs != null) {
			this.session.setOption("useSoftTabs",!gml_Project.current.properties.indentWithTabs);
		} else if(ui_Preferences.current.detectTab) {
			if(this.file.code.includes("\n\t")) {
				this.session.setOption("useSoftTabs",false);
			} else if(this.file.code.includes("\n  ")) {
				this.session.setOption("useSoftTabs",true);
			} else {
				this.session.setOption("useSoftTabs",ui_Preferences.current.tabSpaces);
			}
		} else {
			this.session.setOption("useSoftTabs",ui_Preferences.current.tabSpaces);
		}
		if(gml_Project.current != null && gml_Project.current.properties.indentSize != null) {
			this.session.setOption("tabSize",gml_Project.current.properties.indentSize | 0);
		}
		ui_Preferences.hookSetOption(this.session);
		if(this.modePath == "ace/mode/javascript") {
			this.session.setOption("useWorker",false);
		}
		editors_EditCode.currentNew = _prev;
		var data = this.file.path != null ? parsers_GmlSeekData.map[this.file.path] : null;
		if(data != null) {
			this.locals = data.locals;
			if(data.imports != null) {
				this.imports = data.imports;
			}
		}
	}
	,stateLoad: function() {
		if(this.file.path != null) {
			ace_AceSessionData.restore(this);
		}
	}
	,stateSave: function() {
		ace_AceSessionData.store(this);
	}
	,focusGain: function(prev) {
		editors_Editor.prototype.focusGain.call(this,prev);
		Main.aceEditor.setSession(this.session);
	}
	,setLoadError: function(text) {
		this.file.code = text;
		this.file.path = null;
		this.file.kind = file_kind_misc_KExtern.inst;
		return text;
	}
	,load: function(data) {
		var src = this.kind.loadCode(this,data);
		src = this.kind.preproc(this,src);
		this.file.code = src;
		this.file.syncTime();
	}
	,postpImport: function(val) {
		var _gthis = this;
		var val_preImport = val;
		var path = this.file.path;
		val = synext_GmlExtImport.post(val,this);
		if(val == null) {
			electron_Dialog.showError(synext_GmlExtImport.errorText);
			return null;
		}
		var data = path != null ? parsers_GmlSeekData.map[path] : null;
		var sessionChanged = false;
		var hadImports = data != null && data.imports != null;
		if(hadImports || synext_GmlExtImport.post_numImports > 0) {
			var next = synext_GmlExtImport.pre(val,this);
			if(data != null && data.imports != null) {
				this.imports = data.imports;
			} else {
				this.imports = gml_GmlImports.defaultMap;
			}
			if(next != val_preImport) {
				var sd = ace_AceSessionData.get(this);
				var session = this.session;
				session.doc.setValue(next);
				ace_AceSessionData.set(this,sd);
				sessionChanged = true;
				window.setTimeout(function() {
					var undoManager = session.getUndoManager();
					if(!ui_Preferences.current.allowImportUndo) {
						session.setUndoManager(undoManager);
						undoManager.reset();
					}
					undoManager.markClean();
					_gthis.file.set_changed(false);
				});
			} else if(!hadImports) {
				val = synext_GmlExtImport.post(val_preImport,this);
				if(val == null) {
					window.alert(synext_GmlExtImport.errorText);
					return null;
				}
			}
		}
		return { val : val, sessionChanged : sessionChanged};
	}
	,setSaveError: function(text) {
		electron_Dialog.showError(text);
	}
	,save: function() {
		var code = this.session.getValue();
		gml_file_GmlFileBackup.save(this.file,code);
		code = this.kind.postproc(this,code);
		if(code == null) {
			return false;
		}
		if(!this.kind.saveCode(this,code)) {
			return false;
		}
		this.file.savePost(code);
		return true;
	}
	,checkChanges: function() {
		var _gthis = this;
		var act = ui_Preferences.current.fileChangeAction;
		if(act == 0) {
			return;
		}
		var status = this.kind.checkForChanges(this);
		if(status < 0) {
			if(electron_Dialog.showMessageBox({ title : "File missing: " + this.file.name, message : "The source file is no longer found on disk. " + "What would you like to do?", buttons : ["Keep editing","Close the file"], cancelId : 0}) == 1) {
				this.file.path = null;
				window.setTimeout(function() {
					_gthis.file.tabEl.querySelector(".chrome-tab-close").click();
				});
			} else {
				this.file.path = null;
			}
			return;
		}
		if(status > 0) {
			try {
				var prev = this.file.code;
				this.file.load();
				var rxr = new RegExp("\\r","g");
				var check_0 = prev.trimRight();
				check_0 = check_0.replace(rxr,"");
				var check_1 = this.file.code.trimRight();
				check_1 = check_1.replace(rxr,"");
				var finishChange = function() {
					_gthis.session.setValue(_gthis.file.code);
					plugins_PluginAPI._signal("fileReload",{ file : _gthis.file});
					var path = _gthis.file.path;
					if(path != null) {
						var data = parsers_GmlSeekData.map[path];
						if(data != null) {
							_gthis.kind.index(path,_gthis.file.readContent(),data.main,true);
							if(gml_GmlAPI.version.config.indexingMode == "local") {
								_gthis.file.liveApply();
							}
							_gthis.session.gmlScopes.updateOnSave();
							var next = parsers_GmlSeekData.map[path];
							if(_gthis.locals != _gthis.locals) {
								_gthis.locals = _gthis.locals;
								if(gml_file_GmlFile.current == _gthis.file) {
									_gthis.session.bgTokenizer.start(0);
								}
							}
						}
					}
					if(((_gthis.kind) instanceof file_kind_KGml) && _gthis.kind.canSyntaxCheck) {
						var lp = gml_Project.current.properties.linterPrefs;
						var r = null;
						var _g = 0;
						while(_g < 1) {
							var _ = _g++;
							if(lp != null) {
								r = lp.onLoad;
								if(r != null) {
									break;
								}
							}
							r = ui_Preferences.current.linterPrefs.onLoad;
							if(r != null) {
								break;
							}
							r = parsers_linter_GmlLinterPrefs.defValue.onLoad;
						}
						var check = r;
						if(check) {
							parsers_linter_GmlLinter.runFor(_gthis);
						}
					}
				};
				var dlg = 0;
				if(check_0 != check_1) {
					if(!this.file.__changed) {
						if(act != 1) {
							finishChange();
						} else {
							dlg = 1;
						}
					} else {
						dlg = 2;
					}
				}
				if(dlg != 0) {
					var printSize = function(b) {
						if(b < 10000) {
							return b + "B";
						}
						b /= 1024;
						if(b < 10000) {
							return b.toFixed(2) + "KB";
						}
						b /= 1024;
						if(b < 10000) {
							return b.toFixed(2) + "MB";
						}
						b /= 1024;
						return b.toFixed(2) + "GB";
					};
					var sz1 = printSize(this.file.code.length);
					var sz2 = printSize(this.session.getValue().length);
					var bt = electron_Dialog.showMessageBox({ title : "File conflict for " + this.file.name, message : "Source file changed (" + sz1 + ") " + (dlg == 2 ? "but you have unsaved changes (" + sz2 + ")" : "while the current version is " + sz2) + ". What would you like to do?", buttons : ["Reload file","Keep current","Open changes in a new tab"], cancelId : 1});
					switch(bt) {
					case 0:
						finishChange();
						break;
					case 1:
						break;
					case 2:
						var name1 = this.file.name + " <copy>";
						gml_file_GmlFile.next = new gml_file_GmlFile(name1,null,this.file.kind,this.file.code);
						ui_ChromeTabs.impl.addTab({ title : name1});
						break;
					}
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				console.error("Error applying changes: ",e);
			}
		}
	}
	,__class__: editors_EditCode
});
var editors_EditFont = function(file) {
	this.previewIsGettingSet = false;
	this.lastPreviewText = null;
	this.imageFileExists = false;
	editors_Editor.call(this,file);
	this.element = document.createElement("div");
	this.element.id = "font-editor";
	this.fontFamilies = Object.create(null);
};
$hxClasses["editors.EditFont"] = editors_EditFont;
editors_EditFont.__name__ = "editors.EditFont";
editors_EditFont.__super__ = editors_Editor;
editors_EditFont.prototype = $extend(editors_Editor.prototype,{
	load: function(data) {
		editors_Editor.prototype.load.call(this,data);
		if(((this.file.kind) instanceof file_kind_yy_KYyFont) == false) {
			return;
		}
		if(data == null) {
			data = electron_FileWrap.readYyFileSync(this.file.path);
		}
		if(data == null) {
			return;
		}
		if(gml_Project.current.yyUsesGUID) {
			electron_Dialog.showAlert("Font editing is not supported for the version used by this project");
			return;
		}
		this.font = data;
		this.imageFileExists = Electron_FS.existsSync(this.getImageFileName());
		this.buildPage();
		libFontScanner.getAvailableFonts().then($bind(this,this.onFontsLoaded));
	}
	,getImageFileName: function() {
		return haxe_io_Path.join([haxe_io_Path.directory(this.file.path),this.font.name]) + ".png";
	}
	,save: function() {
		var newFontJson = yy_YyJson.stringify(this.font,gml_Project.current.yyExtJson);
		this.file.writeContent(newFontJson);
		this.file.set_changed(false);
		var directory = haxe_io_Path.directory(this.file.path);
		var imagePath = this.getImageFileName();
		if(Electron_FS.existsSync(imagePath)) {
			this.imageFileExists = false;
			Electron_FS.renameSync(imagePath,haxe_io_Path.join([directory,this.font.name]) + ".old.png");
			this.onImagefileChanged();
		}
		return true;
	}
	,onFontsLoaded: function(fonts) {
		this.processFonts(fonts);
		var fontList = Reflect.fields(this.fontFamilies);
		fontList.sort(function(a,b) {
			if(a < b) {
				return -1;
			} else {
				return 1;
			}
		});
		if(fontList.length == 0) {
			if(this.fontFamilyInput == null) {
				this.fontFamilyInput = document.createElement("input");
				this.fontFamilyInput.addEventListener("change",$bind(this,this.onFamilyChanged));
				this.fontFamilySelect.replaceWith(this.fontFamilyInput);
			}
			this.fontFamilyInput.value = this.font.fontName;
			if(this.fontStyleInput == null) {
				this.fontStyleInput = document.createElement("input");
				this.fontStyleInput.addEventListener("change",$bind(this,this.onStyleChanged));
				this.fontStyleSelect.replaceWith(this.fontStyleInput);
			}
			this.fontStyleInput.value = this.font.styleName;
		} else {
			tools_HtmlTools.clearInner(this.fontFamilySelect);
			var foundCurrent = false;
			var _g = 0;
			while(_g < fontList.length) {
				var fontName = fontList[_g];
				++_g;
				var optionElement = document.createElement("option");
				optionElement.innerText = fontName;
				this.fontFamilySelect.appendChild(optionElement);
				if(this.font.fontName == fontName) {
					optionElement.selected = true;
					foundCurrent = true;
				}
			}
			if(!foundCurrent) {
				var optionElement = document.createElement("option");
				optionElement.innerText = this.font.fontName;
				optionElement.selected = true;
				this.fontFamilySelect.prepend(optionElement);
			}
			this.populateStyles();
		}
		this.updatePreview();
	}
	,processFonts: function(fonts) {
		var this1 = this.fontFamilies;
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in this1) {
		if(has.call(this1,fd)) {
			delete this1[fd];
		}
		}
		var _g = 0;
		while(_g < fonts.length) {
			var font = fonts[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.fontFamilies,font.family) == false) {
				this.fontFamilies[font.family] = { name : font.family, children : []};
			}
			this.fontFamilies[font.family].children.push(font);
		}
		var _g = 0;
		var _g1 = Reflect.fields(this.fontFamilies);
		while(_g < _g1.length) this.fontFamilies[_g1[_g++]].children.sort(function(a,b) {
			if(a.style < b.style) {
				return -1;
			} else {
				return 1;
			}
		});
	}
	,getCurrentFont: function() {
		var family = this.fontFamilies[this.font.fontName];
		if(family == null) {
			return null;
		}
		var _g = 0;
		var _g1 = family.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.style == this.font.styleName) {
				return child;
			}
		}
		return null;
	}
	,onFamilyChanged: function() {
		var newName;
		if(this.fontFamilyInput != null) {
			newName = this.fontFamilyInput.value;
		} else {
			var curOption = this.fontFamilySelect.options[this.fontFamilySelect.selectedIndex];
			newName = curOption.text;
		}
		if(newName == this.font.fontName || newName == "" || newName == null) {
			return;
		}
		if(!tools_NativeObject.hasFields(this.fontFamilies)) {
			this.font.fontName = newName;
			this.onFontChanged();
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this.fontFamilies,newName) == false) {
			electron_Dialog.showAlert("Failed to load font " + newName);
			return;
		}
		this.font.fontName = newName;
		var family = this.fontFamilies[newName];
		var oldStyleName = this.font.styleName;
		this.font.styleName = family.children[0].style;
		var _g = 0;
		var _g1 = family.children;
		while(_g < _g1.length) {
			var familyChild = _g1[_g];
			++_g;
			if(familyChild.style == oldStyleName) {
				this.font.styleName = familyChild.style;
				break;
			}
			if(familyChild.style == "Regular") {
				this.font.styleName = familyChild.style;
			}
		}
		this.populateStyles();
		this.onFontChanged();
	}
	,onStyleChanged: function() {
		var newStyle;
		if(this.fontStyleInput != null) {
			newStyle = this.fontStyleInput.value;
		} else {
			var opt = this.fontStyleSelect.options[this.fontStyleSelect.selectedIndex];
			newStyle = opt.text;
		}
		if(newStyle == this.font.styleName || newStyle == "" || newStyle == null) {
			return;
		}
		this.font.styleName = newStyle;
		this.onFontChanged();
	}
	,onSizeChanged: function() {
		var newSize = parseFloat(this.fontSizeInput.value);
		if(newSize == this.font.size || newSize == NaN) {
			return;
		}
		this.font.size = newSize;
		this.onFontChanged();
	}
	,populateStyles: function() {
		tools_HtmlTools.clearInner(this.fontStyleSelect);
		var currentFontFamily = this.fontFamilies[this.font.fontName];
		if(currentFontFamily != null) {
			var foundCur = false;
			var _g = 0;
			var _g1 = currentFontFamily.children;
			while(_g < _g1.length) {
				var fontChild = _g1[_g];
				++_g;
				var optionElement = document.createElement("option");
				optionElement.innerText = fontChild.style;
				this.fontStyleSelect.appendChild(optionElement);
				if(this.font.styleName == fontChild.style) {
					optionElement.selected = true;
					foundCur = true;
				}
			}
			if(!foundCur) {
				var optionElement = document.createElement("option");
				optionElement.innerText = this.font.styleName;
				this.fontStyleSelect.prepend(optionElement);
			}
		} else {
			var currentSelectOption = document.createElement("option");
			currentSelectOption.innerText = this.font.styleName;
			this.fontStyleSelect.appendChild(currentSelectOption);
			currentSelectOption.selected = true;
			var loadingSelectOption = document.createElement("option");
			loadingSelectOption.innerText = "Could not find more styles";
			this.fontStyleSelect.appendChild(loadingSelectOption);
		}
	}
	,addRangeElement: function(range) {
		var _gthis = this;
		this.rangesDiv = document.createElement("div");
		this.rangesDiv.classList.add("font-range");
		var rangeInput = document.createElement("input");
		if(range.lower == range.upper) {
			rangeInput.value = "" + range.lower;
		} else {
			rangeInput.value = "" + range.lower + "-" + range.upper;
		}
		rangeInput.addEventListener("input",function() {
			_gthis.onRangeChanged(rangeInput,range);
		});
		rangeInput.addEventListener("blur",function() {
			_gthis.onRangeUnfocus(rangeInput,range);
		});
		rangeInput.addEventListener("keyup",function(event) {
			if(event.keyCode == 13) {
				event.preventDefault();
				_gthis.onRangeUnfocus(rangeInput,range);
			}
		});
		this.rangesDiv.appendChild(rangeInput);
		var closeButton = document.createElement("button");
		closeButton.innerText = "x";
		closeButton.title = "Remove range";
		closeButton.addEventListener("click",function() {
			HxOverrides.remove(_gthis.font.ranges,range);
			_gthis.rangesDiv.remove();
			_gthis.onFontChanged();
		});
		this.rangesDiv.appendChild(closeButton);
		return this.rangesDiv;
	}
	,populateRanges: function() {
		tools_HtmlTools.clearInner(this.rangeWindow);
		var _g = 0;
		var _g1 = this.font.ranges;
		while(_g < _g1.length) {
			var rangeDiv = this.addRangeElement(_g1[_g++]);
			this.rangeWindow.appendChild(rangeDiv);
		}
	}
	,getRangeValues: function(input) {
		var _this = input.split("-");
		var _g = [];
		var _g1 = 0;
		while(_g1 < _this.length) {
			var v = _this[_g1];
			++_g1;
			if(v != "") {
				_g.push(v);
			}
		}
		if(_g.length == 0) {
			return [];
		}
		var result = new Array(_g.length);
		var _g1 = 0;
		var _g2 = _g.length;
		while(_g1 < _g2) {
			var i = _g1++;
			result[i] = Std.parseInt(_g[i]);
		}
		var result1 = new Array(result.length);
		var _g = 0;
		var _g1 = result.length;
		while(_g < _g1) {
			var i = _g++;
			result1[i] = Math.max(result[i],32);
		}
		if(result1.length == 0) {
			return [];
		}
		result1.sort(function(a,b) {
			return a - b;
		});
		if(result1.length == 1) {
			return [result1[0],result1[0]];
		}
		return result1.slice(0,2);
	}
	,onRangeChanged: function(element,range) {
		var s = element.value;
		var what = /[^0-9\\-]/gi;
		element.value = s.replace(what,"");
		var intRanges = this.getRangeValues(element.value);
		if(intRanges[1] - intRanges[0] > 1000) {
			return;
		}
		var oldLower = range.lower;
		var oldUpper = range.upper;
		range.lower = intRanges[0];
		range.upper = intRanges[1];
		this.onFontChanged();
		range.lower = oldLower;
		range.upper = oldUpper;
	}
	,onRangeUnfocus: function(element,range) {
		var result = element.value;
		var intRanges = this.getRangeValues(result);
		if(intRanges.length == 0) {
			element.parentElement.remove();
			HxOverrides.remove(this.font.ranges,range);
			this.onFontChanged();
			return;
		}
		HxOverrides.remove(this.font.ranges,range);
		yy_YyFont.addRange(this.font,{ lower : intRanges[0], upper : intRanges[1]});
		this.populateRanges();
		this.onFontChanged();
	}
	,onFontChanged: function(refreshPreview) {
		if(refreshPreview == null) {
			refreshPreview = true;
		}
		var fontDescriptor = this.getCurrentFont();
		if(fontDescriptor != null) {
			this.font.italic = fontDescriptor.italic;
		}
		this.font.bold = this.font.styleName.toLowerCase().indexOf("bold") >= 0;
		this.file.set_changed(true);
		if(refreshPreview) {
			this.updatePreview();
		}
	}
	,onPreviewTextChanged: function() {
		if(this.previewIsGettingSet) {
			return;
		}
		if(this.lastPreviewText == this.previewTextArea.value) {
			return;
		}
		if(this.previewTextArea.disabled) {
			return;
		}
		this.font.ranges = [];
		yy_YyFont.addCharacters(this.font,this.previewTextArea.value);
		this.lastPreviewText = this.previewTextArea.value;
		this.populateRanges();
		this.onFontChanged(false);
	}
	,onPreviewTextLostFocus: function() {
		var text = this.previewTextArea.value;
		var charcodeArray = [];
		var _g_offset = 0;
		while(_g_offset < text.length) charcodeArray.push(text.charCodeAt(_g_offset++));
		charcodeArray.sort(function(a,b) {
			return a - b;
		});
		var last = -1;
		var str = "";
		var _g = 0;
		while(_g < charcodeArray.length) {
			var charCode = charcodeArray[_g];
			++_g;
			if(last == charCode) {
				continue;
			}
			last = charCode;
			str += String.fromCodePoint(charCode);
		}
		this.previewTextArea.value = str;
	}
	,updatePreview: function() {
		var fontDescriptor = this.getCurrentFont();
		this.previewIsGettingSet = true;
		if(fontDescriptor != null) {
			this.previewTextArea.style.fontWeight = fontDescriptor.weight == null ? "null" : "" + fontDescriptor.weight;
			this.previewTextArea.style.fontFamily = "\"" + fontDescriptor.postscriptName + "\", \"" + fontDescriptor.family + " " + fontDescriptor.style + "\", \"" + fontDescriptor.family + "\"";
		} else {
			this.previewTextArea.style.fontWeight = "normal";
			this.previewTextArea.style.fontFamily = "\"" + this.font.fontName + " " + this.font.styleName + "\", \"" + this.font.fontName + "\"";
		}
		this.previewTextArea.style.fontStyle = this.font.italic ? "italic" : "normal";
		this.previewTextArea.style.fontSize = Std.string(this.font.size) + "pt";
		if(yy_YyFont.get_characterCount(this.font) > 5000) {
			this.previewTextArea.disabled = true;
			this.previewTextArea.value = "There's too many characters to preview\nHere's some preview text:\n\n" + this.font.sampleText;
		} else {
			this.lastPreviewText = yy_YyFont.getAllCharacters(this.font);
			this.previewTextArea.disabled = false;
			this.previewTextArea.value = this.lastPreviewText;
		}
		this.previewIsGettingSet = false;
	}
	,onImagefileChanged: function() {
		this.needsRegenerationWarning.style.display = this.imageFileExists ? "none" : "unset";
	}
	,buildPage: function() {
		var _gthis = this;
		var header = document.createElement("h2");
		header.innerText = this.file.name;
		this.element.appendChild(header);
		var container = document.createElement("div");
		var optionsDiv = document.createElement("div");
		optionsDiv.id = "font-options";
		var addOptionElement = function(name,element) {
			var headerDiv = document.createElement("div");
			var paragraph = document.createElement("p");
			paragraph.innerText = name;
			headerDiv.appendChild(paragraph);
			headerDiv.appendChild(element);
			headerDiv.classList.add("option");
			optionsDiv.append(headerDiv);
		};
		this.fontFamilySelect = document.createElement("select");
		var currentSelectOption = document.createElement("option");
		currentSelectOption.innerText = this.font.fontName;
		this.fontFamilySelect.appendChild(currentSelectOption);
		currentSelectOption.selected = true;
		var loadingSelectOption = document.createElement("option");
		loadingSelectOption.innerText = "Loading more fonts...";
		this.fontFamilySelect.appendChild(loadingSelectOption);
		this.fontFamilySelect.addEventListener("change",$bind(this,this.onFamilyChanged));
		addOptionElement("Font family",this.fontFamilySelect);
		this.fontStyleSelect = document.createElement("select");
		var currentSelectOption = document.createElement("option");
		currentSelectOption.innerText = this.font.styleName;
		this.fontStyleSelect.appendChild(currentSelectOption);
		currentSelectOption.selected = true;
		var loadingSelectOption = document.createElement("option");
		loadingSelectOption.innerText = "Loading more styles...";
		this.fontStyleSelect.appendChild(loadingSelectOption);
		this.fontStyleSelect.addEventListener("change",$bind(this,this.onStyleChanged));
		addOptionElement("Font style",this.fontStyleSelect);
		this.fontSizeInput = document.createElement("input");
		this.fontSizeInput.type = "number";
		this.fontSizeInput.value = Std.string(this.font.size);
		this.fontSizeInput.min = "1";
		this.fontSizeInput.max = "200";
		this.fontSizeInput.addEventListener("input",$bind(this,this.onSizeChanged));
		addOptionElement("Font size",this.fontSizeInput);
		this.rangeWindow = document.createElement("div");
		this.rangeWindow.id = "font-ranges";
		this.populateRanges();
		addOptionElement("Character ranges",this.rangeWindow);
		var addRangeDiv = document.createElement("div");
		addRangeDiv.id = "add-range";
		var newButton = document.createElement("button");
		newButton.innerText = "Add range";
		newButton.addEventListener("click",function() {
			_gthis.moreRangeOptionsDiv.style.display = "none";
			var newRange = { lower : 1114111, upper : 1114111};
			yy_YyFont.addRange(_gthis.font,newRange);
			var rangeDiv = _gthis.addRangeElement(newRange);
			_gthis.rangeWindow.appendChild(rangeDiv);
			var input = rangeDiv.getElementsByTagName("input")[0];
			input.value = "";
			input.select();
		});
		addRangeDiv.appendChild(newButton);
		var moreOptionsButton = document.createElement("button");
		moreOptionsButton.innerText = "▼";
		moreOptionsButton.classList.add("more-options");
		moreOptionsButton.addEventListener("click",function() {
			_gthis.moreRangeOptionsDiv.style.display = _gthis.moreRangeOptionsDiv.style.display == "block" ? "none" : "block";
		});
		addRangeDiv.appendChild(moreOptionsButton);
		optionsDiv.appendChild(addRangeDiv);
		this.moreRangeOptionsDiv = document.createElement("div");
		this.moreRangeOptionsDiv.classList.add("more-options-list");
		var addCharacters = document.createElement("button");
		addCharacters.innerText = "Add characters...";
		addCharacters.addEventListener("click",function() {
			electron_Dialog.showPrompt("Characters to add to font:","",function(newCharacters) {
				yy_YyFont.addCharacters(_gthis.font,newCharacters);
				_gthis.populateRanges();
				_gthis.onFontChanged();
			});
		});
		this.moreRangeOptionsDiv.appendChild(addCharacters);
		var addAscii = document.createElement("button");
		addAscii.innerText = "Add ASCII range";
		addAscii.addEventListener("click",function() {
			yy_YyFont.addRange(_gthis.font,{ lower : 32, upper : 255});
			_gthis.populateRanges();
			_gthis.onFontChanged();
		});
		this.moreRangeOptionsDiv.appendChild(addAscii);
		var addAscii = document.createElement("button");
		addAscii.innerText = "Add digits range";
		addAscii.addEventListener("click",function() {
			yy_YyFont.addRange(_gthis.font,{ lower : 48, upper : 57});
			_gthis.populateRanges();
			_gthis.onFontChanged();
		});
		this.moreRangeOptionsDiv.appendChild(addAscii);
		var addLetters = document.createElement("button");
		addLetters.innerText = "Add letters range";
		addLetters.addEventListener("click",function() {
			yy_YyFont.addRange(_gthis.font,{ lower : 65, upper : 90});
			yy_YyFont.addRange(_gthis.font,{ lower : 97, upper : 122});
			_gthis.populateRanges();
			_gthis.onFontChanged();
		});
		this.moreRangeOptionsDiv.appendChild(addLetters);
		optionsDiv.appendChild(this.moreRangeOptionsDiv);
		this.needsRegenerationWarning = document.createElement("p");
		this.needsRegenerationWarning.classList.add("regeneration-warning");
		this.needsRegenerationWarning.innerText = "The generated font file does not exist on disk. It is necessary to run the project inside GameMaker to create it.";
		this.onImagefileChanged();
		optionsDiv.append(this.needsRegenerationWarning);
		container.appendChild(optionsDiv);
		var previewArea = document.createElement("div");
		previewArea.id = "font-preview";
		this.previewTextArea = document.createElement("textarea");
		this.updatePreview();
		this.previewTextArea.addEventListener("input",$bind(this,this.onPreviewTextChanged));
		this.previewTextArea.addEventListener("blur",$bind(this,this.onPreviewTextLostFocus));
		previewArea.appendChild(this.previewTextArea);
		var previewHint = document.createElement("p");
		previewHint.classList.add("hint");
		previewHint.innerText = "Tip: Changing the characters inside this preview box will also change the font's included characters";
		previewArea.appendChild(previewHint);
		container.appendChild(previewArea);
		this.element.appendChild(container);
	}
	,__class__: editors_EditFont
});
var editors_EditKeybindings = function(file) {
	editors_Editor.call(this,file);
	this.element = document.createElement("div");
	this.element.id = "keybindings-editor";
	this.element.classList.add("popout-window");
	this.table = document.createElement("table");
	this.element.append(this.table);
	this.addSection(ui_KeyboardShortcuts.hashHandler,"Global","global");
	this.addSection(Main.aceEditor.commands,"Code Editor","codeEditor");
};
$hxClasses["editors.EditKeybindings"] = editors_EditKeybindings;
editors_EditKeybindings.__name__ = "editors.EditKeybindings";
editors_EditKeybindings.concatBindings = function(arr,sort) {
	if(arr == null || arr.length == 0) {
		return "";
	}
	var pretty = [];
	var _g = 0;
	while(_g < arr.length) pretty.push(ace_extern_AceCommandKey.prettyprint(arr[_g++]));
	if(sort) {
		pretty.sort(function(a,b) {
			if(a < b) {
				return -1;
			} else {
				return 1;
			}
		});
	}
	return pretty.join(" | ");
};
editors_EditKeybindings.splitBindings = function(s) {
	if(s.trim() == "") {
		return [];
	}
	var arr = s.split("|");
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		arr[i] = arr[i].trim();
	}
	return arr;
};
editors_EditKeybindings.initHandler = function(hh,category) {
	if(editors_EditKeybindings.defaultBindings[category] == null) {
		editors_EditKeybindings.defaultBindings[category] = ace_extern__$AceHashHandler_AceHashHandlerHelper.getKeybindingsPerCommand(hh);
	}
	var map = ui_Preferences.current.customizedKeybinds[category];
	if(map == null) {
		return;
	}
	var _g_keys = Reflect.fields(map);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g_value = map[key];
		ace_extern__$AceHashHandler_AceHashHandlerHelper.removeKeybindingsForCommand(hh,key);
		var _g = 0;
		while(_g < _g_value.length) hh.bindKey(_g_value[_g++],key);
	}
};
editors_EditKeybindings.initEditor = function(editor) {
	editors_EditKeybindings.initHandler(editor.commands,"codeEditor");
};
editors_EditKeybindings.initGlobal = function() {
	editors_EditKeybindings.initHandler(ui_KeyboardShortcuts.hashHandler,"global");
};
editors_EditKeybindings.open = function() {
	var _g = 0;
	var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
	while(_g < _g1.length) {
		var tab = _g1[_g];
		++_g;
		if(((tab.gmlFile.editor) instanceof editors_EditKeybindings)) {
			tab.click();
			return;
		}
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile("Keyboard Shortcuts",null,file_kind_misc_KKeybindings.inst));
};
editors_EditKeybindings.__super__ = editors_Editor;
editors_EditKeybindings.prototype = $extend(editors_Editor.prototype,{
	addSection: function(hh,title,section) {
		var _gthis = this;
		var headRow = document.createElement("thead");
		var headCell = document.createElement("td");
		headCell.innerText = title;
		headCell.colSpan = 4;
		headRow.appendChild(headCell);
		this.table.appendChild(headRow);
		var defaults = editors_EditKeybindings.defaultBindings[section];
		if(defaults == null) {
			defaults = { };
		}
		var custom = ui_Preferences.current.customizedKeybinds[section];
		var customSet = custom != null;
		if(!customSet) {
			custom = { };
		}
		var first = true;
		var this1 = hh.commands;
		var fn = function(name,cmd) {
			var tr = document.createElement("tr");
			var fd = document.createElement("input");
			fd.type = "text";
			var fdDef;
			if(defaults[name] == null) {
				fdDef = ace_extern_AceCommandKey.get_key(cmd.bindKey);
				if(fdDef == null) {
					fdDef = "";
					defaults[name] = [];
				} else {
					defaults[name] = [fdDef];
				}
			} else {
				fdDef = editors_EditKeybindings.concatBindings(defaults[name]);
			}
			var fdVal = editors_EditKeybindings.concatBindings(custom[name]);
			fd.placeholder = fdDef;
			if(fdVal != fdDef) {
				fd.value = fdVal;
			}
			var sync = function() {
				var val = fd.value;
				var arr;
				if(val == "") {
					Reflect.deleteField(custom,name);
					arr = defaults[name];
				} else {
					arr = editors_EditKeybindings.splitBindings(val);
					custom[name] = arr;
					if(!customSet) {
						customSet = true;
						ui_Preferences.current.customizedKeybinds[section] = custom;
					}
				}
				ace_extern__$AceHashHandler_AceHashHandlerHelper.removeKeybindingsForCommand(hh,name);
				var _g = 0;
				while(_g < arr.length) hh.bindKey(arr[_g++],name);
				ui_Preferences.save();
			};
			fd.onchange = function(_) {
				sync();
			};
			var td = document.createElement("td");
			if(first) {
				td.width = "33%";
			}
			var title = cmd.title;
			if(title == null) {
				title = tools_NativeString.capitalize(name);
				var what = /-([a-z])/g;
				title = title.replace(what,function(_,a) {
					return " " + a.toUpperCase();
				});
				var what = /([a-z])([A-Z0-9])/g;
				title = title.replace(what,function(_,a,b) {
					return a + " " + b.toUpperCase();
				});
			}
			if(cmd.description != null) {
				td.title = cmd.description;
			}
			td.innerText = title;
			tr.appendChild(td);
			td = document.createElement("td");
			if(first) {
				td.width = "1%";
			}
			var btReset = document.createElement("input");
			btReset.type = "button";
			btReset.onclick = function(_) {
				fd.value = "";
				sync();
			};
			btReset.title = "Reset to default";
			btReset.value = "↶";
			td.appendChild(btReset);
			tr.appendChild(td);
			td = document.createElement("td");
			if(first) {
				td.width = "1%";
			}
			var btClear = document.createElement("input");
			btClear.type = "button";
			btClear.onclick = function(_) {
				fd.value = " ";
				sync();
			};
			btClear.title = "Clear";
			btClear.value = "⌧";
			td.appendChild(btClear);
			tr.appendChild(td);
			td = document.createElement("td");
			td.appendChild(fd);
			tr.appendChild(td);
			_gthis.table.appendChild(tr);
			first = false;
		};
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in this1) {
		if(has.call(this1,fd)) {
			fn(fd,this1[fd]);
		}
		}
	}
	,__class__: editors_EditKeybindings
});
var editors_EditSound = function(file) {
	this.saveOnFinishLoad = false;
	editors_Editor.call(this,file);
	this.element = document.createElement("div");
	this.element.id = "sound-editor";
};
$hxClasses["editors.EditSound"] = editors_EditSound;
editors_EditSound.__name__ = "editors.EditSound";
editors_EditSound.__super__ = editors_Editor;
editors_EditSound.prototype = $extend(editors_Editor.prototype,{
	load: function(data) {
		editors_Editor.prototype.load.call(this,data);
		if(((this.file.kind) instanceof file_kind_yy_KYySound) == false) {
			return;
		}
		if(data == null) {
			data = electron_FileWrap.readYyFileSync(this.file.path);
		}
		if(data == null) {
			return;
		}
		if(gml_Project.current.yyUsesGUID) {
			electron_Dialog.showAlert("Sound editing is not supported for the version used by this project");
			return;
		}
		this.sound = data;
		this.buildPageHtml();
	}
	,ready: function() {
		this.registerPageEvents();
		this.loadAudioElement();
		this.setOptionValues();
	}
	,save: function() {
		var newSoundJson = yy_YyJson.stringify(this.sound,gml_Project.current.yyExtJson);
		this.file.writeContent(newSoundJson);
		this.file.set_changed(false);
		return true;
	}
	,getSoundPath: function() {
		if(this.sound.soundFile == null || this.sound.soundFile == "") {
			return "";
		}
		return haxe_io_Path.join([haxe_io_Path.directory(this.file.path),this.sound.soundFile]);
	}
	,invokeSoundChanged: function() {
		this.file.set_changed(true);
	}
	,onAudioReady: function() {
		var newDuration = this.audioElement.duration;
		if(newDuration == 0 || newDuration == NaN || newDuration == Infinity) {
			return;
		}
		if(Math.abs(this.sound.duration - this.audioElement.duration) > 0.01) {
			this.sound.duration = this.audioElement.duration;
			this.invokeSoundChanged();
		}
		if(this.saveOnFinishLoad) {
			this.saveOnFinishLoad = false;
			this.save();
		}
	}
	,importSound: function() {
		var _gthis = this;
		electron_Dialog.showOpenDialog({ title : "Open", buttonLabel : "Import", filters : [{ name : "Audio files", extensions : ["mp3","ogg","wav","wma"]}]},function(array) {
			if(array == null || array.length == 0) {
				return;
			}
			var newFile = array[0];
			if(Electron_FS.existsSync(newFile) == false) {
				electron_Dialog.showAlert("File not found:\n" + newFile);
				return;
			}
			var old = _gthis.getSoundPath();
			if(old != "") {
				Electron_FS.unlinkSync(old);
			}
			var thisPath = haxe_io_Path.withoutExtension(_gthis.file.path);
			var newExtension = "." + haxe_io_Path.extension(newFile);
			var dest = thisPath + newExtension;
			if(Electron_FS.copyFileSync == null) {
				Electron_FS.writeFileSync(dest,Electron_FS.readFileSync(newFile));
			} else {
				Electron_FS.copyFileSync(newFile,dest);
			}
			_gthis.sound.soundFile = _gthis.sound.name + newExtension;
			_gthis.sound.duration = 0;
			_gthis.saveOnFinishLoad = true;
			_gthis.invokeSoundChanged();
			_gthis.loadAudioElement();
			_gthis.save();
		});
	}
	,loadAudioElement: function() {
		tools_HtmlTools.clearInner(this.audioElement);
		if(this.sound.soundFile == null || this.sound.soundFile == "") {
			return;
		}
		var soundPath = this.getSoundPath() + "?rnd=";
		this.audioElement.src = soundPath + tools_Random.letterString(8);
	}
	,onVolumeSliderChanged: function(event) {
		var tmp = Math.round(100 * parseFloat(this.soundVolumeSlider.value));
		this.sound.volume = tmp / 100;
		this.soundVolumeText.value = Std.string(this.sound.volume);
		this.invokeSoundChanged();
	}
	,onVolumeSliderInput: function(event) {
		var tmp = Math.round(100 * parseFloat(this.soundVolumeSlider.value)) / 100;
		this.soundVolumeText.value = Std.string(tmp);
	}
	,onVolumeTextChanged: function(event) {
		var tmp = Math.round(100 * parseFloat(this.soundVolumeText.value));
		this.sound.volume = tmp / 100;
		this.soundVolumeSlider.value = Std.string(this.sound.volume);
		this.invokeSoundChanged();
	}
	,onCompressionChanged: function(event) {
		var inputElement = event.target;
		this.sound.compression = Std.parseInt(inputElement.value);
		this.invokeSoundChanged();
	}
	,onOutputChanged: function(event) {
		var select = event.target;
		this.sound.type = Std.parseInt(select.value);
		this.invokeSoundChanged();
	}
	,onQualityChanged: function(event) {
		var select = event.target;
		this.sound.bitDepth = Std.parseInt(select.value);
		this.invokeSoundChanged();
	}
	,onSampleRateChanged: function(event) {
		var select = event.target;
		this.sound.sampleRate = Std.parseInt(select.value);
		this.invokeSoundChanged();
	}
	,onBitRateChanged: function(event) {
		var select = event.target;
		this.sound.bitRate = Std.parseInt(select.value);
		this.invokeSoundChanged();
	}
	,registerPageEvents: function() {
		this.element.querySelector("#import-button").addEventListener("click",$bind(this,this.importSound));
		this.audioElement = this.element.querySelector("#sound-playback");
		this.audioElement.addEventListener("loadedmetadata",$bind(this,this.onAudioReady));
		this.soundVolumeSlider = this.element.querySelector("#sound-volume-slider");
		this.soundVolumeSlider.addEventListener("change",$bind(this,this.onVolumeSliderChanged));
		this.soundVolumeSlider.addEventListener("input",$bind(this,this.onVolumeSliderInput));
		tools_HtmlTools.prettifyInputRange(this.soundVolumeSlider);
		this.soundVolumeText = this.element.querySelector("#sound-volume-text");
		this.soundVolumeText.addEventListener("change",$bind(this,this.onVolumeTextChanged));
		var _g = 0;
		var _g1 = this.element.querySelector("#sound-compress-type").querySelectorAll("input[name=\"compress-type\"]");
		while(_g < _g1.length) _g1[_g++].addEventListener("change",$bind(this,this.onCompressionChanged));
		this.element.querySelector("#sound-output").addEventListener("change",$bind(this,this.onOutputChanged));
		this.element.querySelector("#sound-quality").addEventListener("change",$bind(this,this.onQualityChanged));
		this.element.querySelector("#sound-sample-rate").addEventListener("change",$bind(this,this.onSampleRateChanged));
		this.element.querySelector("#sound-bit-rate").addEventListener("change",$bind(this,this.onBitRateChanged));
	}
	,setOptionValues: function() {
		var _gthis = this;
		this.element.querySelector("h2").innerText = this.sound.name;
		this.soundVolumeSlider.value = Std.string(this.sound.volume);
		this.soundVolumeText.value = Std.string(this.sound.volume);
		var _g = 0;
		var _g1 = this.element.querySelector("#sound-compress-type").querySelectorAll("input[name=\"compress-type\"]");
		while(_g < _g1.length) {
			var child = _g1[_g++];
			if(Std.string(this.sound.compression) == child.value) {
				child.checked = true;
				break;
			}
		}
		var setSelectedValueForSelect = function(selectId,value) {
			var value1 = _gthis.element.querySelector("#" + selectId).querySelector("option[value=\"" + value + "\"]");
			if(value1 != null) {
				value1.selected = true;
			} else {
				console.log("Did not find audio option " + Std.string(value1) + " for selector " + selectId);
			}
		};
		setSelectedValueForSelect("sound-output",this.sound.type);
		setSelectedValueForSelect("sound-quality",this.sound.bitDepth);
		setSelectedValueForSelect("sound-sample-rate",this.sound.sampleRate);
		setSelectedValueForSelect("sound-bit-rate",this.sound.bitRate);
	}
	,buildPageHtml: function() {
		this.element.innerHTML = "<div>\r\n\t<h2>Name</h2>\r\n\t<button type=\"button\" id=\"import-button\" class=\"highlighted-button\">Import audio</button>\r\n\t\r\n\t<label>Preview</label>\r\n\t<audio id=\"sound-playback\" controls></audio>\r\n\t\r\n\t<div class=\"option\">\r\n\t\t<label>Volume</label>\r\n\t\t<div id=\"sound-volume-container\">\r\n\t\t\t<input id=\"sound-volume-slider\" type=\"range\" min=\"0\" max=\"1\" step=\"0.001\"/>\r\n\t\t\t<input id=\"sound-volume-text\" type=\"number\" min=\"0\" max=\"1\" step=\"0.01\"/> \r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"option\">\r\n\t\t<label>Compression Type</label>\r\n\t\t<div id=\"sound-compress-type\">\r\n\t\t\t<div title=\"Audio is uncompresssed and stored in memory. Low CPU usage at the cost of storage. Good for short frequently used sound effects.\">\r\n\t\t\t\t<input type=\"radio\" name=\"compress-type\" id=\"uncompressed\" value=\"0\">\r\n\t\t\t\t<label for=\"uncompressed\">Uncompressed - Not Streamed</label><br>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div title=\"Audio is compressed at all times. Heavier on the CPU but reduces storage. Good for long sound effects that are infrequently used.\">\r\n\t\t\t\t<input type=\"radio\" name=\"compress-type\" id=\"compressed\" value=\"1\">\r\n\t\t\t\t<label for=\"compressed\">Compressed - Not Streamed</label><br>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div title=\"Audio is uncompressed on game startup. Increases start up time but reduces storage. Good for long sound effects that are frequently used.\">\r\n\t\t\t\t<input type=\"radio\" name=\"compress-type\" id=\"uncompressed-load\" value=\"2\">\r\n\t\t\t\t<label for=\"uncompressed-load\">Uncompress on Load - Not Streamed</label><br>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div title=\"Audio is compressed and streamed from disk, reducing storage size at the cost of being heavier on the CPU. Good for music.\">\r\n\t\t\t\t<input type=\"radio\" name=\"compress-type\" id=\"compressed-streamed\" value=\"3\">\r\n\t\t\t\t<label for=\"compressed-streamed\">Compressed - Streamed</label><br>\r\n\t\t\t</div>\r\n\t\t</div> \r\n\t</div> \r\n\t\r\n\t<div class=\"option\">\r\n\t\t<label>Output</label>\r\n\t\t<select id=\"sound-output\">\r\n\t\t\t<option value=\"0\">Mono</option>\r\n\t\t\t<option value=\"1\">Stereo</option>\r\n\t\t\t<option value=\"2\">3D</option>\r\n\t\t</select>\r\n\t</div>\r\n\r\n\t<div class=\"option\">\r\n\t\t<label>Quality</label>\r\n\t\t<select id=\"sound-quality\">\r\n\t\t\t<option value=\"0\">8 bit</option>\r\n\t\t\t<option value=\"1\">16 bit</option>\r\n\t\t</select>\r\n\t</div>\r\n\t\r\n\t<div class=\"option\">\r\n\t\t<label>Sample Rate</label>\r\n\t\t<select id=\"sound-sample-rate\">\r\n\t\t\t<option value=\"5512\">5512</option>\r\n\t\t\t<option value=\"11025\">11025</option>\r\n\t\t\t<option value=\"22050\">22050</option>\r\n\t\t\t<option value=\"32000\">32000</option>\r\n\t\t\t<option value=\"44100\">44100</option>\r\n\t\t\t<option value=\"48000\">48000</option>\r\n\t\t</select>\r\n\t</div>\r\n\r\n\t<div class=\"option\">\r\n\t\t<label>Bit Rate(kbps)</label>\r\n\t\t<select id=\"sound-bit-rate\">\r\n\t\t\t<option value=\"8\">8</option>\r\n\t\t\t<option value=\"16\">16</option>\r\n\t\t\t<option value=\"24\">24</option>\r\n\t\t\t<option value=\"32\">32</option>\r\n\t\t\t<option value=\"40\">40</option>\r\n\t\t\t<option value=\"48\">48</option>\r\n\t\t\t<option value=\"56\">56</option>\r\n\t\t\t<option value=\"64\">64</option>\r\n\t\t\t<option value=\"80\">80</option>\r\n\t\t\t<option value=\"96\">96</option>\r\n\t\t\t<option value=\"112\">112</option>\r\n\t\t\t<option value=\"128\">128</option>\r\n\t\t\t<option value=\"144\">144</option>\r\n\t\t\t<option value=\"160\">160</option>\r\n\t\t\t<option value=\"192\">192</option>\r\n\t\t\t<option value=\"224\">224</option>\r\n\t\t\t<option value=\"256\">256</option>\r\n\t\t\t<option value=\"320\">320</option>\r\n\t\t\t<option value=\"512\">512</option>\r\n\t\t</select>\r\n\t</div>\r\n</div>";
	}
	,__class__: editors_EditSound
});
var editors_Panner = function(el,rootElement) {
	this.mouseDown = false;
	this.mouseY = 0;
	this.mouseX = 0;
	this.zoomed = null;
	this.mult = 1;
	this.ctr = el;
	this.ctr.classList.add("panner");
	if(rootElement.tagName == "IMG") {
		this.image = rootElement;
	} else {
		this.image = rootElement.querySelector("IMG");
	}
	this.rootElement = rootElement;
	this.pan = { x : 0, y : 0, z : 0};
	el.addEventListener("mousedown",$bind(this,this.onmousedown));
	el.addEventListener("mousewheel",$bind(this,this.onmousewheel));
	el.addEventListener("DOMMouseScroll",$bind(this,this.onmousewheel));
	this.ctr.tabIndex = 0;
};
$hxClasses["editors.Panner"] = editors_Panner;
editors_Panner.__name__ = "editors.Panner";
editors_Panner.prototype = {
	update: function() {
		var pz = this.mult >= 1;
		if(pz != this.zoomed) {
			this.zoomed = pz;
			if(pz) {
				this.ctr.classList.add("zoomed");
			} else {
				this.ctr.classList.remove("zoomed");
			}
		}
		this.ctr.setAttribute("data-zoom",Math.round(this.mult * 100) + "%");
		this.rootElement.style.transform = "matrix(" + this.mult + ",0,0," + this.mult + "," + -this.pan.x + "," + -this.pan.y + ")";
	}
	,forceUpdate: function() {
		this.mult = Math.pow(2,this.pan.z);
		this.zoomed = null;
		this.update();
	}
	,zoomTo: function(zx,zy,d) {
		var prev = this.mult;
		this.pan.z += d;
		this.mult = Math.pow(2,this.pan.z);
		var f = this.mult / prev;
		this.pan.x = (zx + this.pan.x) * f - zx;
		this.pan.y = (zy + this.pan.y) * f - zy;
		this.update();
	}
	,onmousemove: function(e) {
		var ox = this.mouseX;
		this.mouseX = e.pageX;
		var oy = this.mouseY;
		this.mouseY = e.pageY;
		if(this.mouseDown) {
			this.pan.x -= this.mouseX - ox;
			this.pan.y -= this.mouseY - oy;
			this.update();
		}
	}
	,onmousedown: function(e) {
		this.ctr.focus();
		this.onmousemove(e);
		if(e.which != 3) {
			this.ctr.focus();
			e.preventDefault();
			this.mouseDown = true;
		}
		window.document.addEventListener("mouseup",$bind(this,this.onmouseup));
		window.document.addEventListener("mousemove",$bind(this,this.onmousemove));
	}
	,onmouseup: function(e) {
		this.onmousemove(e);
		this.mouseDown = false;
		window.document.removeEventListener("mouseup",$bind(this,this.onmouseup));
		window.document.removeEventListener("mousemove",$bind(this,this.onmousemove));
	}
	,onmousewheel: function(e) {
		var d = Reflect.field(e,"wheelDelta");
		if(d == null) {
			d = -e.detail;
		}
		d = (d < 0 ? -1 : d > 0 ? 1 : 0) * 0.5;
		var mx = e.offsetX;
		var my = e.offsetY;
		this.zoomTo(mx,my,d);
	}
	,recenter: function() {
		var cw = this.ctr.offsetWidth;
		var ch = this.ctr.offsetHeight;
		if(cw <= 0 || ch <= 0) {
			return;
		}
		var qw = this.image.width;
		var qh = this.image.height;
		if(qw <= 0 || qh <= 0) {
			return;
		}
		var z = 0;
		while(qw < cw && qh < ch) if(qw * 2 < cw && qh * 2 < ch) {
			qw *= 2;
			qh *= 2;
			++z;
		} else {
			break;
		}
		while(qw > cw || qh > ch) {
			qw /= 2;
			qh /= 2;
			--z;
		}
		this.pan.z = z;
		this.pan.x = -((cw - qw) / 2 | 0);
		this.pan.y = -((ch - qh) / 2 | 0);
		this.forceUpdate();
	}
	,__class__: editors_Panner
};
var editors_sprite_BoundingBoxMeasurer = function(spriteManipulator) {
	this.onMeasured = new tools_EventHandler();
	this.spriteManipulator = spriteManipulator;
};
$hxClasses["editors.sprite.BoundingBoxMeasurer"] = editors_sprite_BoundingBoxMeasurer;
editors_sprite_BoundingBoxMeasurer.__name__ = "editors.sprite.BoundingBoxMeasurer";
editors_sprite_BoundingBoxMeasurer.prototype = {
	start: function(filePaths,tolerance) {
		this.filePaths = filePaths;
		this.tolerance = tolerance;
		this.index = 0;
		this.boundingBox = null;
		this.spriteManipulator.onReady.add($bind(this,this.onReady));
		this.iterate();
	}
	,iterate: function() {
		if(this.index >= this.filePaths.length) {
			this.spriteManipulator.onReady.remove($bind(this,this.onReady));
			if(this.boundingBox == null) {
				this.boundingBox = { left : 0, top : 0, bottom : 0, right : 0};
			}
			this.onMeasured.invoke(this.boundingBox);
			return;
		}
		var oldIndex = this.index;
		this.index++;
		this.spriteManipulator.setSprite(this.filePaths[oldIndex]);
	}
	,onReady: function(_) {
		var newBb = this.spriteManipulator.getBoundingBox(this.tolerance);
		if(this.boundingBox == null) {
			this.boundingBox = newBb;
		} else if(this.boundingBox.right != 0 || this.boundingBox.left != 0 || this.boundingBox.top != 0 || this.boundingBox.bottom != 0) {
			this.boundingBox = { left : Math.min(this.boundingBox.left,newBb.left), top : Math.min(this.boundingBox.top,newBb.top), right : Math.max(this.boundingBox.right,newBb.right), bottom : Math.max(this.boundingBox.bottom,newBb.bottom)};
		}
		this.iterate();
	}
	,__class__: editors_sprite_BoundingBoxMeasurer
};
var editors_sprite_EditSprite = function(file) {
	this.projectRoomSpeed = 60;
	this.saveMeasurement = false;
	this.spriteManipulatorBusy = false;
	this.recenter = true;
	this.playingBack = false;
	this.framesData = [];
	this.currentFrame = 0;
	var _gthis = this;
	editors_Editor.call(this,file);
	this.element = document.createElement("div");
	this.element.classList.add("sprite-editor");
	this.spriteManipulator = new resource_SpriteManipulator();
	this.boundingBoxMeasurer = new editors_sprite_BoundingBoxMeasurer(this.spriteManipulator);
	this.boundingBoxMeasurer.onMeasured.add($bind(this,this.onSpriteMeasureReady));
	this.element.tabIndex = 0;
	this.element.addEventListener("keydown",function(e) {
		if(document.activeElement.nodeName == "INPUT") {
			return;
		}
		if(_gthis.framesData.length > 1) {
			switch(e.key) {
			case " ":
				_gthis.playButton.click();
				break;
			case "ArrowLeft":
				_gthis.adjustCurrentFrame(-1).scrollIntoView();
				break;
			case "ArrowRight":
				_gthis.adjustCurrentFrame(1).scrollIntoView();
				break;
			}
		}
	});
	this.projectRoomSpeed = gml_Project.current.getFrameRate();
};
$hxClasses["editors.sprite.EditSprite"] = editors_sprite_EditSprite;
editors_sprite_EditSprite.__name__ = "editors.sprite.EditSprite";
editors_sprite_EditSprite.__super__ = editors_Editor;
editors_sprite_EditSprite.prototype = $extend(editors_Editor.prototype,{
	checkRecenter: function() {
		if(!this.recenter) {
			return;
		}
		this.panner.recenter();
		this.recenter = false;
	}
	,focusGain: function(prev) {
		editors_Editor.prototype.focusGain.call(this,prev);
		this.checkRecenter();
	}
	,setCurrentFrameElement: function(i,frame) {
		if(frame == null) {
			frame = this.framesData[i].element;
		}
		if(this.currentFrameElement == frame) {
			return frame;
		}
		this.currentFrameElement.classList.remove("current");
		frame.classList.add("current");
		this.currentFrameElement = frame;
		this.panner.image.src = this.framesData[i].url;
		return frame;
	}
	,adjustCurrentFrame: function(delta) {
		if(this.framesData.length <= 1) {
			return null;
		}
		this.currentFrame = (this.currentFrame + delta) % this.framesData.length;
		if(this.currentFrame < 0) {
			this.currentFrame += this.framesData.length;
		}
		return this.setCurrentFrameElement(this.currentFrame);
	}
	,load: function(data) {
		var _gthis = this;
		if(((this.file.kind) instanceof file_kind_yy_KYySprite) && data == null) {
			data = electron_FileWrap.readYyFileSync(this.file.path);
		}
		this.sprite = new editors_sprite_SpriteResource(data);
		this.sprite.onUnsavedChangesChanged.add(function(x) {
			_gthis.file.set_changed(x);
		});
		var triggerBboxCheck = function(_) {
			if(_gthis.sprite.get_bboxMode() == 0) {
				var _g = [];
				var frame = _gthis.sprite.frames.iterator();
				while(frame.hasNext()) _g.push(frame.next());
				var _gthis1 = _gthis.boundingBoxMeasurer;
				var result = new Array(_g.length);
				var _g1 = 0;
				var _g2 = _g.length;
				while(_g1 < _g2) {
					var i = _g1++;
					result[i] = _gthis.getImagePath(_g[i]);
				}
				_gthis1.start(result,_gthis.sprite.get_bboxTolerance());
			} else if(_gthis.sprite.get_bboxMode() == 1) {
				_gthis.sprite.set_bboxTop(0);
				_gthis.sprite.set_bboxLeft(0);
				_gthis.sprite.set_bboxRight(_gthis.sprite.get_width() - 1);
				_gthis.sprite.set_bboxBottom(_gthis.sprite.get_height() - 1);
			}
		};
		this.sprite.onBboxToleranceChanged.add(triggerBboxCheck);
		this.sprite.onBboxModeChanged.add(triggerBboxCheck);
		this.buildHtml();
	}
	,save: function() {
		var newSpriteJson = yy_YyJson.stringify(this.sprite.getUnderlyingData(),gml_Project.current.yyExtJson);
		this.file.writeContent(newSpriteJson);
		this.file.time = electron_FileWrap.mtimeSync(this.file.path);
		this.sprite.set_unsavedChanges(false);
		return true;
	}
	,getImagePath: function(frame) {
		return haxe_io_Path.join([haxe_io_Path.directory(this.file.path),frame.get_id() + ".png"]);
	}
	,checkChanges: function() {
		if(!haxe_io_Path.isAbsolute(this.file.path)) {
			return;
		}
		var t1 = electron_FileWrap.mtimeSync(this.file.path);
		if(t1 != this.file.time) {
			this.file.time = t1;
			this.load(null);
			return;
		}
		var _g = 0;
		var _g1 = this.framesData;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			t1 = electron_FileWrap.mtimeSync(frame.path);
			if(t1 != frame.importTime) {
				frame.importTime = t1;
				var url = electron_FileWrap.getImageURL(frame.path);
				frame.url = url;
				frame.element.style.backgroundImage = "url(" + url + ")";
				if(this.currentFrameElement == frame.element) {
					this.panner.image.src = url;
				}
			}
		}
	}
	,moveToNextFrame: function() {
		if(!this.playingBack) {
			return;
		}
		if(document.body.contains(this.element) == false) {
			return;
		}
		this.adjustCurrentFrame(1);
		var fps;
		if(this.sprite.get_playbackSpeedType() == 0) {
			fps = this.sprite.get_playbackSpeed();
		} else {
			fps = this.sprite.get_playbackSpeed() * this.projectRoomSpeed;
		}
		window.setTimeout($bind(this,this.moveToNextFrame),1000 / fps);
	}
	,onSpriteImport: function() {
		var _gthis = this;
		electron_Dialog.showOpenDialog({ title : "Open", buttonLabel : "Import", properties : ["openFile","multiSelections"], filters : [{ name : "Image files", extensions : ["png"]}]},function(array) {
			if(array == null || array.length == 0) {
				return;
			}
			var _g = [];
			var _g1 = 0;
			while(_g1 < array.length) {
				var v = array[_g1];
				++_g1;
				if(Electron_FS.existsSync(v)) {
					_g.push(v);
				}
			}
			var newFiles = _g;
			if(newFiles.length == 0) {
				return;
			}
			var _g = [];
			var _g1 = 0;
			while(_g1 < newFiles.length) _g.push(resource_SpriteManipulator.MeasureSpriteAsync(newFiles[_g1++]));
			Promise.all(_g).then(function(promiseResult) {
				var width = promiseResult[0].width;
				var height = promiseResult[0].height;
				var _g = 1;
				var _g1 = promiseResult.length;
				while(_g < _g1) {
					var i = _g++;
					var measure = promiseResult[i];
					if(measure.width != width || measure.height != height) {
						electron_Dialog.showAlert("Can't import images that are not the same dimensions.\n" + ("" + newFiles[0] + " is " + width + "x" + height + ".\n") + ("" + newFiles[i] + " is " + measure.width + "x" + measure.height + "."));
						return;
					}
				}
				var frame = _gthis.sprite.frames.iterator();
				while(frame.hasNext()) {
					var frame1 = frame.next();
					Electron_FS.unlinkSync(_gthis.getImagePath(frame1));
				}
				var directory = haxe_io_Path.directory(_gthis.file.path);
				var layerDirectory = haxe_io_Path.join([directory,"layers"]);
				Electron_FS.rmdirSync(layerDirectory,{ recursive : true});
				Electron_FS.mkdirSync(layerDirectory);
				var layerId = _gthis.sprite.get_defaultLayer();
				var newIds = [];
				var _g = 0;
				while(_g < newFiles.length) {
					var newFile = newFiles[_g];
					++_g;
					var newId = yy_YyGUID.create();
					newIds.push(newId);
					Electron_FS.mkdirSync(haxe_io_Path.join([layerDirectory,newId]));
					var dest = haxe_io_Path.join([layerDirectory,newId,layerId + ".png"]);
					if(Electron_FS.copyFileSync == null) {
						Electron_FS.writeFileSync(dest,Electron_FS.readFileSync(newFile));
					} else {
						Electron_FS.copyFileSync(newFile,dest);
					}
					var dest1 = haxe_io_Path.join([directory,(newId == null ? "null" : newId) + ".png"]);
					if(Electron_FS.copyFileSync == null) {
						Electron_FS.writeFileSync(dest1,Electron_FS.readFileSync(newFile));
					} else {
						Electron_FS.copyFileSync(newFile,dest1);
					}
				}
				_gthis.sprite.frames.replaceFrames(newIds);
				_gthis.sprite.set_width(width);
				_gthis.sprite.set_height(height);
				_gthis.save();
				var _g = [];
				var frame = _gthis.sprite.frames.iterator();
				while(frame.hasNext()) _g.push(frame.next());
				_gthis.spriteManipulatorBusy = true;
				_gthis.saveMeasurement = true;
				var _gthis1 = _gthis.boundingBoxMeasurer;
				var result = new Array(_g.length);
				var _g1 = 0;
				var _g2 = _g.length;
				while(_g1 < _g2) {
					var i = _g1++;
					result[i] = _gthis.getImagePath(_g[i]);
				}
				_gthis1.start(result,_gthis.sprite.get_bboxTolerance());
			});
		});
	}
	,onSpriteMeasureReady: function(bbox) {
		this.sprite.set_bboxBottom(bbox.bottom);
		this.sprite.set_bboxLeft(bbox.left);
		this.sprite.set_bboxTop(bbox.top);
		this.sprite.set_bboxRight(bbox.right);
		if(this.saveMeasurement) {
			this.save();
			this.saveMeasurement = false;
		}
		this.spriteManipulatorBusy = false;
	}
	,buildHtml: function() {
		tools_HtmlTools.clearInner(this.element);
		this.buildOptions();
		this.bindOptions();
		this.buildPreview();
	}
	,bindOptions: function() {
		var _gthis = this;
		this.element.querySelector(".sprite-title").innerText = this.sprite.get_name();
		var widthHeight = this.element.querySelector(".sprite-width-height");
		var onWidthHeightChanged = function(_) {
			var onWidthHeightChanged = "" + _gthis.sprite.get_width() + "x";
			var onWidthHeightChanged1 = _gthis.sprite.get_height();
			return widthHeight.innerText = onWidthHeightChanged + onWidthHeightChanged1;
		};
		onWidthHeightChanged(null);
		this.sprite.onHeightChanged.add(onWidthHeightChanged);
		this.sprite.onWidthChanged.add(onWidthHeightChanged);
		this.element.querySelector(".import-button").addEventListener("click",$bind(this,this.onSpriteImport));
		var bindToNumberBox = function(checkboxId,startValue,setter,event) {
			var inputElement = _gthis.element.querySelector("." + checkboxId);
			inputElement.value = startValue == null ? "null" : "" + startValue;
			var update = function() {
				setter(inputElement.valueAsNumber);
			};
			inputElement.addEventListener("change",update);
			inputElement.addEventListener("input",update);
			event.add(function(newValue) {
				inputElement.value = newValue == null ? "null" : "" + newValue;
			});
		};
		bindToNumberBox("option-origin-x",this.sprite.get_originX(),function(newValue) {
			_gthis.sprite.set_originX(newValue);
		},this.sprite.onOriginXChanged);
		bindToNumberBox("option-origin-y",this.sprite.get_originY(),function(newValue) {
			_gthis.sprite.set_originY(newValue);
		},this.sprite.onOriginYChanged);
		var originTypeElement = this.element.querySelector(".option-origin-type");
		tools_HtmlTools.setSelectedValue(originTypeElement,Std.string(this.sprite.get_originType()));
		originTypeElement.addEventListener("change",function() {
			return _gthis.sprite.setOriginType(Std.parseInt(originTypeElement.value));
		});
		this.sprite.onOriginTypeChanged.add(function(x) {
			tools_HtmlTools.setSelectedValue(originTypeElement,Std.string(_gthis.sprite.get_originType()));
		});
		bindToNumberBox("option-playback-speed",this.sprite.get_playbackSpeed(),function(newValue) {
			_gthis.sprite.set_playbackSpeed(newValue);
		},this.sprite.onPlaybackSpeedChanged);
		var playbackTypeSelect = this.element.querySelector(".option-playback-speed-type");
		tools_HtmlTools.setSelectedValue(playbackTypeSelect,Std.string(this.sprite.get_playbackSpeedType()));
		playbackTypeSelect.addEventListener("change",function() {
			var newValue = Std.parseInt(playbackTypeSelect.value);
			if(newValue == _gthis.sprite.get_playbackSpeedType()) {
				return;
			}
			var newSpeed = newValue == 0 ? _gthis.sprite.get_playbackSpeed() * _gthis.projectRoomSpeed : _gthis.sprite.get_playbackSpeed() / _gthis.projectRoomSpeed;
			_gthis.sprite.set_playbackSpeed(newSpeed);
			_gthis.sprite.set_playbackSpeedType(newValue);
		});
		this.sprite.onPlaybackSpeedTypeChanged.add(function(x) {
			tools_HtmlTools.setSelectedValue(playbackTypeSelect,Std.string(_gthis.sprite.get_playbackSpeedType()));
		});
		var textureGroupElement = this.element.querySelector(".option-texture-group");
		var _g = 0;
		var _g1 = gml_Project.current.yyTextureGroups;
		while(_g < _g1.length) {
			var textureGroup = _g1[_g];
			++_g;
			var option = document.createElement("option");
			option.innerText = textureGroup;
			option.value = textureGroup;
			textureGroupElement.appendChild(option);
		}
		tools_HtmlTools.setSelectedValue(textureGroupElement,this.sprite.get_textureGroup());
		textureGroupElement.addEventListener("change",function() {
			return _gthis.sprite.set_textureGroup(textureGroupElement.value);
		});
		this.sprite.onOriginTypeChanged.add(function(x) {
			tools_HtmlTools.setSelectedValue(textureGroupElement,_gthis.sprite.get_textureGroup());
		});
		var bindToCheckbox = function(checkboxId,startValue,setter,event) {
			var inputElement = _gthis.element.querySelector("." + checkboxId);
			inputElement.checked = startValue;
			inputElement.addEventListener("change",function() {
				setter(inputElement.checked);
			});
			event.add(function(newValue) {
				inputElement.checked = newValue;
			});
		};
		bindToCheckbox("option-tiled-horizontally",this.sprite.get_tiledHorizontal(),function(newValue) {
			_gthis.sprite.set_tiledHorizontal(newValue);
		},this.sprite.onTiledHorizontalChanged);
		bindToCheckbox("option-tiled-vertically",this.sprite.get_tiledVertical(),function(newValue) {
			_gthis.sprite.set_tiledVertical(newValue);
		},this.sprite.onTiledVerticalChanged);
		bindToCheckbox("option-seperate-texture-page",this.sprite.get_seperateTexturePage(),function(newValue) {
			_gthis.sprite.set_seperateTexturePage(newValue);
		},this.sprite.onSeperateTexturePageChanged);
		bindToCheckbox("option-premultiplied-alpha",this.sprite.get_premultipliedAlpha(),function(newValue) {
			_gthis.sprite.set_premultipliedAlpha(newValue);
		},this.sprite.onPremultipliedAlphaChanged);
		bindToCheckbox("option-edge-filtering",this.sprite.get_edgeFiltering(),function(newValue) {
			_gthis.sprite.set_edgeFiltering(newValue);
		},this.sprite.onEdgeFilteringChanged);
		var modeSelect = this.element.querySelector(".option-bbox-mode");
		tools_HtmlTools.setSelectedValue(modeSelect,Std.string(this.sprite.get_bboxMode()));
		modeSelect.addEventListener("change",function() {
			return _gthis.sprite.set_bboxMode(Std.parseInt(modeSelect.value));
		});
		this.sprite.onBboxModeChanged.add(function(x) {
			tools_HtmlTools.setSelectedValue(modeSelect,Std.string(_gthis.sprite.get_bboxMode()));
		});
		var typeSelect = this.element.querySelector(".option-bbox-type");
		tools_HtmlTools.setSelectedValue(typeSelect,Std.string(this.sprite.get_bboxType()));
		typeSelect.addEventListener("change",function() {
			return _gthis.sprite.set_bboxType(Std.parseInt(typeSelect.value));
		});
		this.sprite.onBboxTypeChanged.add(function(x) {
			tools_HtmlTools.setSelectedValue(typeSelect,Std.string(_gthis.sprite.get_bboxType()));
		});
		var sliderElement = this.element.querySelector(".option-bbox-tolerance-slider");
		sliderElement.valueAsNumber = this.sprite.get_bboxTolerance();
		this.sprite.onBboxToleranceChanged.add(function(x) {
			sliderElement.valueAsNumber = x;
			var event = document.createEvent("HTMLEvents");
			event.initEvent("input",false,true);
			sliderElement.dispatchEvent(event);
		});
		sliderElement.addEventListener("change",function() {
			return _gthis.sprite.set_bboxTolerance(sliderElement.valueAsNumber);
		});
		tools_HtmlTools.prettifyInputRange(sliderElement);
		var numberElements = this.element.querySelectorAll(".option-bbox-edge");
		var toleranceSlider = this.element.querySelector(".option-bbox-tolerance-slider");
		var toleranceBox = this.element.querySelector(".option-bbox-tolerance-box");
		var update = function(_) {
			var numbersEnabled = false;
			var toleranceEnabled = false;
			if(_gthis.sprite.get_bboxMode() == 0) {
				toleranceEnabled = true;
			} else if(_gthis.sprite.get_bboxMode() == 2) {
				numbersEnabled = true;
			}
			toleranceSlider.disabled = !toleranceEnabled;
			toleranceBox.disabled = !toleranceEnabled;
			var _g = 0;
			while(_g < numberElements.length) numberElements[_g++].disabled = !numbersEnabled;
		};
		this.sprite.onBboxModeChanged.add(update);
		update(null);
		bindToNumberBox("option-bbox-tolerance-box",this.sprite.get_bboxTolerance(),function(newValue) {
			_gthis.sprite.set_bboxTolerance(newValue);
		},this.sprite.onBboxToleranceChanged);
		bindToNumberBox("option-bbox-left",this.sprite.get_bboxLeft(),function(newValue) {
			_gthis.sprite.set_bboxLeft(newValue);
		},this.sprite.onBboxLeftChanged);
		bindToNumberBox("option-bbox-right",this.sprite.get_bboxRight(),function(newValue) {
			_gthis.sprite.set_bboxRight(newValue);
		},this.sprite.onBboxRightChanged);
		bindToNumberBox("option-bbox-top",this.sprite.get_bboxTop(),function(newValue) {
			_gthis.sprite.set_bboxTop(newValue);
		},this.sprite.onBboxTopChanged);
		bindToNumberBox("option-bbox-bottom",this.sprite.get_bboxBottom(),function(newValue) {
			_gthis.sprite.set_bboxBottom(newValue);
		},this.sprite.onBboxBottomChanged);
	}
	,buildOptions: function() {
		var options = document.createElement("div");
		options.classList.add("sprite-options");
		options.innerHTML = "<h2 class=\"sprite-title\">SpriteName</h2>\r\n<p class=\"sprite-width-height\">WIDTHxHEIGHT</p>\r\n\r\n<button class=\"highlighted-button import-button\" title=\"Replace the current sprite images and import new ones.\">Import Images</button>\r\n\r\n<div>\r\n\t<h4>Origin</h4>\r\n\t<select class=\"option-origin-type\">\r\n\t\t<option value=\"9\">Custom</option>\r\n\t\t<option value=\"0\">Top Left</option>\r\n\t\t<option value=\"1\">Top Centre</option>\r\n\t\t<option value=\"2\">Top Right</option>\r\n\t\t<option value=\"3\">Middle Left</option>\r\n\t\t<option value=\"4\">Middle Centre</option>\r\n\t\t<option value=\"5\">Middle Right</option>\r\n\t\t<option value=\"6\">Bottom Left</option>\r\n\t\t<option value=\"7\">Bottom Centre</option>\r\n\t\t<option value=\"8\">Bottom Right</option>\r\n\t</select>\r\n\t<div>\r\n\t\t<input type=\"number\" class=\"option-origin-x\"/>\r\n\t\t<span>x</span>\r\n\t\t<input type=\"number\" class=\"option-origin-y\"/>\r\n\t</div>\r\n</div>\r\n\r\n<div>\r\n\t<h4>Playback Speed</h4>\r\n\t<div class=\"one-line\">\r\n\t\t<input type=\"number\" title=\"How fast the sprite is played in game.\" class=\"option-playback-speed\" min=\"0\"/>\r\n\t\t<select class=\"option-playback-speed-type\">\r\n\t\t\t<option value=\"0\">Frames per Second</option>\r\n\t\t\t<option value=\"1\">Frames per Game Frame</option>\r\n\t\t</select>\r\n\t</div>\r\n</div>\r\n\r\n<div>\r\n\t<h4>Texture Settings</h4>\r\n\t<div title=\"The group that the sprite should be packed together with once it's put on a texture page.\" class=\"one-line\">\r\n\t\t<label>Texture Group</label>\r\n\t\t<select class=\"option-texture-group float-right\">\r\n\t\t</select>\r\n\t</div>\r\n\t<div class=\"one-line\" title=\"If the sprite is used as a horizontal tile, this should be ticked. This option may correct some visual bugs.\">\r\n\t\t<input type=\"checkbox\" class=\"option-tiled-horizontally\"/>\r\n\t\t<label for=\"option-tiled-horizontally\">Tiled Horizontally</label>\r\n\t</div>\r\n\t<div class=\"one-line\" title=\"If the sprite is used as a vertical tile, this should be ticked. This option may correct some visual bugs.\">\r\n\t\t<input type=\"checkbox\" class=\"option-tiled-vertically\"/>\r\n\t\t<label for=\"option-tiled-vertically\">Tiled Vertically</label>\r\n\t</div>\r\n\t<div class=\"one-line\" title=\"If checked, the sprite will be put on it's own texture page. This is usually not desired.\">\r\n\t\t<input type=\"checkbox\" class=\"option-seperate-texture-page\"/>\r\n\t\t<label for=\"option-seperate-texture-page\">Seperate Texture Page</label>\r\n\t</div>\r\n\t<div class=\"one-line\" title=\"Multiplies the alpha into the sprite ahead of time.\">\r\n\t\t<input type=\"checkbox\" class=\"option-premultiplied-alpha\"/>\r\n\t\t<label for=\"option-premultiplied-alpha\">Premultiplied Alpha</label>\r\n\t</div>\r\n\t<div class=\"one-line\" title=\"If checked, fixes some visual bugs that may appear on edges of scaled sprites.\">\r\n\t\t<input type=\"checkbox\" class=\"option-edge-filtering\"/>\r\n\t\t<label for=\"option-edge-filtering\">Edge Filtered</label>\r\n\t</div>\r\n</div>\r\n\r\n<div>\r\n\t<h4>Collision Mask</h4>\r\n\t\r\n\t<div class=\"one-line\" title=\"What mode the collision mask should use to determine it's size.\">\r\n\t\t<label>Mode</label>\r\n\t\t<select class=\"float-right option-bbox-mode\">\r\n\t\t\t<option value=\"0\" title=\"Determine the collision mask based on the visible pixels of the sprite.\">Automatic</option>\r\n\t\t\t<option value=\"1\" title=\"Use the full sprite size for the collision.\">Full Image</option>\r\n\t\t\t<option value=\"2\" title=\"Manually set the size of the collision mask.\">Manual</option>\r\n\t\t</select>\r\n\t</div>\r\n\r\n\t<div class=\"one-line\">\r\n\t\t<label>Type</label>\r\n\t\t<select class=\"float-right option-bbox-type\">\r\n\t\t\t<option value=\"1\">Rectangle</option>\r\n\t\t\t<option value=\"5\">Rectangle with Rotation</option>\r\n\t\t\t<option value=\"2\">Ellipse</option>\r\n\t\t\t<option value=\"3\">Diamond</option>\r\n\t\t\t<option value=\"0\">Precise</option>\r\n\t\t\t<option value=\"4\">Precise per Frame</option>\r\n\t\t</select>\r\n\t</div>\r\n\r\n\t<div class=\"one-line\" style=\"margin-top: 10px\" title=\"How visible the transparency of a pixel must be to count as part of the collision mask.\">\r\n\t\t<label>Tolerance</label>\r\n\t\t<input type=\"range\" class=\"option-bbox-tolerance-slider\" min=\"0\" max=\"255\" step=\"1\"/>\r\n\t\t<input type=\"number\" class=\"option-bbox-tolerance-box\" min=\"0\" max=\"255\"/>\r\n\t</div>\r\n\t<div style=\"margin-top: 10px\">\r\n\t\t<div class=\"one-line\">\r\n\t\t\t<label for=\"option-bbox-left\" class=\"short-label\">Left</label>\r\n\t\t\t<input name=\"option-bbox-left\" type=\"number\" class=\"option-bbox-edge option-bbox-left\"/>\r\n\t\t\t<label for=\"option-bbox-right\" class=\"short-label\">Right</label>\r\n\t\t\t<input name=\"option-bbox-right\" type=\"number\" class=\"option-bbox-edge option-bbox-right\"/>\r\n\t\t</div>\r\n\t\t<div class=\"one-line\">\r\n\t\t\t<label for=\"option-bbox-top\" class=\"short-label\">Top</label>\r\n\t\t\t<input name=\"option-bbox-top\" type=\"number\" class=\"option-bbox-edge option-bbox-top\"/>\r\n\t\t\t<label for=\"option-bbox-bottom\" class=\"short-label\">Bottom</label>\r\n\t\t\t<input name=\"option-bbox-bottom\" type=\"number\" class=\"option-bbox-edge option-bbox-bottom\"/>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n";
		this.element.appendChild(options);
	}
	,buildPreview: function() {
		var _gthis = this;
		var previewContainer = document.createElement("div");
		previewContainer.classList.add("resinfo");
		previewContainer.classList.add("sprite");
		var spriteInfoContainer = document.createElement("div");
		spriteInfoContainer.classList.add("sprite-info");
		var framesWrapper = document.createElement("div");
		framesWrapper.classList.add("sprite-frame-wrapper");
		this.framesContainer = document.createElement("div");
		this.framesContainer.classList.add("frames");
		this.fillFrameContainerContent();
		this.sprite.frames.onFramesReplaced.add(function(_) {
			_gthis.fillFrameContainerContent();
		});
		framesWrapper.appendChild(this.framesContainer);
		var playbackControls = document.createElement("div");
		playbackControls.classList.add("playback-control");
		this.playButton = document.createElement("span");
		this.playButton.classList.add("play-button");
		this.playButton.innerText = "▶";
		this.playButton.addEventListener("click",function() {
			_gthis.playingBack = !_gthis.playingBack;
			_gthis.playButton.innerText = _gthis.playingBack ? "❚❚" : "▶";
			_gthis.moveToNextFrame();
		});
		playbackControls.appendChild(this.playButton);
		framesWrapper.appendChild(playbackControls);
		spriteInfoContainer.appendChild(framesWrapper);
		previewContainer.appendChild(spriteInfoContainer);
		var pan = document.createElement("div");
		var imgCtr = document.createElement("div");
		this.recenter = true;
		var img = document.createElement("img");
		img.onload = function(_) {
			img.onload = null;
			_gthis.checkRecenter();
		};
		var framePath = this.getImagePath(editors_sprite_SpriteResourceFrames.arrayAccess(this.sprite.frames,0));
		img.src = electron_FileWrap.getImageURL(framePath);
		imgCtr.appendChild(img);
		this.sprite.frames.onFramesReplaced.add(function(_) {
			_gthis.panner.image.src = _gthis.framesData[0].url;
			_gthis.setCurrentFrameElement(0);
		});
		var spriteBorder = document.createElement("div");
		spriteBorder.style.top = "-1px";
		spriteBorder.style.left = "-1px";
		spriteBorder.classList.add("panner-element");
		var tmp = "" + this.sprite.get_width();
		spriteBorder.style.width = tmp + "px";
		this.sprite.onWidthChanged.add(function(x) {
			spriteBorder.style.width = "" + x + "px";
		});
		var tmp = "" + this.sprite.get_height();
		spriteBorder.style.height = tmp + "px";
		this.sprite.onHeightChanged.add(function(x) {
			spriteBorder.style.height = "" + x + "px";
		});
		spriteBorder.style.border = "1px solid rgba(255, 255, 255, 0.5)";
		imgCtr.appendChild(spriteBorder);
		imgCtr.appendChild(this.buildOriginCross());
		pan.appendChild(imgCtr);
		this.panner = new editors_Panner(pan,imgCtr);
		previewContainer.appendChild(pan);
		this.element.appendChild(previewContainer);
	}
	,fillFrameContainerContent: function() {
		var _gthis = this;
		this.framesData = [];
		tools_HtmlTools.clearInner(this.framesContainer);
		var frame = this.sprite.frames.iterator();
		while(frame.hasNext()) {
			var framePath = this.getImagePath(frame.next());
			var url = [electron_FileWrap.getImageURL(framePath)];
			var frame1 = [document.createElement("div")];
			var index = [this.framesData.length];
			if(index[0] == 0) {
				this.currentFrameElement = frame1[0];
				frame1[0].classList.add("current");
			}
			frame1[0].title = "" + index[0];
			this.framesData.push({ element : frame1[0], url : url[0], path : framePath, importTime : electron_FileWrap.mtimeSync(framePath)});
			frame1[0].classList.add("frame");
			if(this.sprite.get_width() > 48 || this.sprite.get_height() > 48) {
				frame1[0].style.backgroundSize = "contain";
			}
			url[0] = StringTools.replace(url[0]," ","%20");
			frame1[0].style.backgroundImage = "url(" + url[0] + ")";
			if(this.sprite.get_width() <= 24 && this.sprite.get_height() <= 24) {
				var tmp = "" + this.sprite.get_width() * 2 + "px " + this.sprite.get_height() * 2;
				frame1[0].style.backgroundSize = tmp + "px";
				frame1[0].classList.add("zoomed");
			}
			frame1[0].onclick = (function(index,frame) {
				return function(_) {
					_gthis.currentFrame = index[0];
					_gthis.setCurrentFrameElement(index[0],frame[0]);
				};
			})(index,frame1);
			frame1[0].ondblclick = (function(url) {
				return function(_) {
					Electron_Shell.openExternal(url[0]);
				};
			})(url);
			this.framesContainer.appendChild(frame1[0]);
		}
	}
	,buildOriginCross: function() {
		var _gthis = this;
		var originCross = document.createElement("p");
		originCross.classList.add("panner-element");
		originCross.classList.add("origin");
		originCross.innerText = "+";
		var grabbed = false;
		var tmp = "" + this.sprite.get_originX();
		originCross.style.left = tmp + "px";
		this.sprite.onOriginXChanged.add(function(x) {
			if(grabbed) {
				return;
			}
			originCross.style.left = "" + x + "px";
		});
		var tmp = "" + this.sprite.get_originY();
		originCross.style.top = tmp + "px";
		this.sprite.onOriginYChanged.add(function(y) {
			if(grabbed) {
				return;
			}
			originCross.style.top = "" + y + "px";
		});
		var startX = 0;
		var startY = 0;
		var onMouseMove = function(e) {
			e.preventDefault();
			var diffX = (e.clientX - startX) / _gthis.panner.mult;
			var diffY = (e.clientY - startY) / _gthis.panner.mult;
			originCross.style.left = diffX + "px";
			originCross.style.top = diffY + "px";
			_gthis.sprite.set_originX(Math.round(diffX));
			_gthis.sprite.set_originY(Math.round(diffY));
		};
		var onMouseUp = null;
		onMouseUp = function() {
			document.removeEventListener("mouseup",onMouseUp);
			document.removeEventListener("mousemove",onMouseMove);
			grabbed = false;
		};
		var onMouseDown = function(e) {
			e.preventDefault();
			e.stopPropagation();
			startX = e.clientX - Std.parseInt(originCross.style.left) * _gthis.panner.mult;
			startY = e.clientY - Std.parseInt(originCross.style.top) * _gthis.panner.mult;
			document.addEventListener("mouseup",onMouseUp);
			document.addEventListener("mousemove",onMouseMove);
			grabbed = true;
		};
		originCross.addEventListener("mousedown",onMouseDown);
		return originCross;
	}
	,__class__: editors_sprite_EditSprite
});
var editors_sprite_PreviewSprite = function(file) {
	this.recenter = true;
	this.playbackDelta = 1;
	this.interval = null;
	this.frameTimes = [];
	this.frameElements = [];
	this.framePaths = [];
	this.frameURLs = [];
	this.currentFrame = 0;
	this.frameCount = 0;
	var _gthis = this;
	editors_Editor.call(this,file);
	this.element = document.createElement("div");
	this.element.classList.add("resinfo");
	this.element.classList.add("sprite");
	this.element.tabIndex = 0;
	this.element.addEventListener("keydown",function(e) {
		if(document.activeElement.nodeName == "INPUT") {
			return;
		}
		if(_gthis.frameCount > 1) {
			switch(e.key) {
			case " ":
				_gthis.animToggle.click();
				break;
			case "ArrowLeft":
				_gthis.adjustCurrentFrame(-1).scrollIntoView();
				break;
			case "ArrowRight":
				_gthis.adjustCurrentFrame(1).scrollIntoView();
				break;
			}
		}
	});
};
$hxClasses["editors.sprite.PreviewSprite"] = editors_sprite_PreviewSprite;
editors_sprite_PreviewSprite.__name__ = "editors.sprite.PreviewSprite";
editors_sprite_PreviewSprite.__super__ = editors_Editor;
editors_sprite_PreviewSprite.prototype = $extend(editors_Editor.prototype,{
	destroy: function() {
		editors_Editor.prototype.destroy.call(this);
		if(this.interval != null) {
			window.clearInterval(this.interval);
			this.interval = null;
		}
	}
	,checkRecenter: function() {
		if(!this.recenter) {
			return;
		}
		this.panner.recenter();
		this.recenter = false;
	}
	,focusGain: function(prev) {
		editors_Editor.prototype.focusGain.call(this,prev);
		this.checkRecenter();
	}
	,getData1: function(data) {
		var d = new editors_sprite_PreviewSpriteData();
		var pj = gml_Project.current;
		var q = electron_FileWrap.readGmxFileSync(this.file.path);
		d.xorig = q.findFloat("xorig");
		d.yorig = q.findFloat("yorigin");
		d.width = q.findFloat("width");
		d.height = q.findFloat("height");
		var _g = 0;
		var _g1 = q.find("frames").findAll("frame");
		while(_g < _g1.length) {
			var frel = "sprites/" + _g1[_g++].text;
			var url = pj.getImageURL(frel);
			d.frameURLs.push(url);
			d.framePaths.push(frel);
		}
		d.frameCount = d.frameURLs.length;
		return d;
	}
	,getData2: function(q) {
		var d = new editors_sprite_PreviewSpriteData();
		d.xorig = q.xorig;
		d.yorig = q.yorig;
		d.width = q.width;
		d.height = q.height;
		d.playbackLegacy = q.playbackSpeedType != 0;
		d.playbackSpeed = q.playbackSpeed;
		var dir = haxe_io_Path.directory(this.file.path);
		var _g = 0;
		var _g1 = q.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			var fid = frame.name;
			if(fid == null) {
				fid = frame.id;
			}
			var frel = haxe_io_Path.join([dir,fid + ".png"]);
			var url = electron_FileWrap.getImageURL(frel);
			d.frameURLs.push(url);
			d.framePaths.push(frel);
		}
		d.frameCount = d.frameURLs.length;
		return d;
	}
	,setCurrentFrameElement: function(i,frame) {
		if(frame == null) {
			frame = this.frameElements[i];
		}
		if(this.currentFrameElement == frame) {
			return frame;
		}
		this.currentFrameElement.classList.remove("current");
		frame.classList.add("current");
		this.currentFrameElement = frame;
		this.image.src = this.frameURLs[i];
		return frame;
	}
	,adjustCurrentFrame: function(delta) {
		if(this.frameCount <= 1) {
			return null;
		}
		this.currentFrame = (this.currentFrame + delta) % this.frameCount;
		if(this.currentFrame < 0) {
			this.currentFrame += this.frameCount;
		}
		return this.setCurrentFrameElement(this.currentFrame);
	}
	,load: function(data) {
		var _gthis = this;
		var v2 = ((this.file.kind) instanceof file_kind_yy_KYySprite);
		if(v2 && data == null) {
			data = electron_FileWrap.readYyFileSync(this.file.path);
		}
		var d = v2 ? this.getData2(data) : this.getData1(data);
		tools_HtmlTools.clearInner(this.element);
		var ctr = document.createElement("div");
		ctr.classList.add("sprite-info");
		var info = document.createElement("div");
		info.classList.add("sprite-info-text");
		info.appendChild(document.createTextNode(d.width + "x" + d.height + "; " + d.xorig + "," + d.yorig));
		info.appendChild(document.createElement("br"));
		info.appendChild(document.createTextNode(d.frameCount + " frame" + (d.frameCount != 1 ? "s" : "")));
		if(d.frameCount > 1) {
			info.appendChild(document.createElement("br"));
			var toggle;
			var mult;
			var fps;
			toggle = document.createElement("input");
			toggle.type = "checkbox";
			toggle.title = "Toggle playback";
			this.animToggle = toggle;
			info.appendChild(toggle);
			mult = document.createElement("input");
			mult.style.width = "2em";
			mult.value = "1";
			mult.title = "Playback speed multiplier";
			info.appendChild(mult);
			fps = document.createElement("input");
			if(d.playbackLegacy) {
				info.appendChild(document.createTextNode("x"));
				fps.style.width = "2em";
				var tmp = gml_Project.current.getFrameRate();
				fps.value = "" + tmp;
				fps.title = "Target framerate";
				info.appendChild(fps);
			} else {
				info.appendChild(document.createTextNode("x"));
				fps.value = "1";
			}
			var nextFrame = function() {
				_gthis.adjustCurrentFrame(_gthis.playbackDelta);
			};
			var syncInterval = function(_) {
				if(_gthis.interval != null) {
					window.clearInterval(_gthis.interval);
				}
				if(toggle.checked) {
					var tx = parseFloat(mult.value);
					if(isNaN(tx)) {
						tx = 0;
						mult.classList.add("error");
					} else {
						mult.classList.remove("error");
					}
					var tf = 1.;
					if(d.playbackLegacy) {
						tf = parseFloat(fps.value);
						if(isNaN(tf)) {
							tf = 0;
							fps.classList.add("error");
						} else {
							fps.classList.remove("error");
						}
					}
					if(tx == 0 || tf == 0 || d.playbackSpeed == 0) {
						_gthis.interval = null;
					} else {
						var s = d.playbackSpeed * tx * tf;
						if(s < 0) {
							_gthis.playbackDelta = -1;
							s = -s;
						} else {
							_gthis.playbackDelta = 1;
						}
						_gthis.interval = window.setInterval(nextFrame,1000 / s | 0);
					}
				} else {
					_gthis.interval = null;
				}
			};
			var mult_val = mult.value;
			var fps_val = fps.value;
			var toggle_val = toggle.checked;
			var autosync_can = true;
			var autosync_1 = function() {
				autosync_can = true;
				syncInterval(null);
			};
			var autosync = function() {
				if(mult.value == mult_val && fps.value == fps_val && toggle.checked == toggle_val) {
					return;
				}
				mult_val = mult.value;
				fps_val = fps.value;
				toggle_val = toggle.checked;
				if(autosync_can) {
					autosync_can = false;
					window.setTimeout(autosync_1,50);
				}
			};
			toggle.onchange = autosync;
			mult.onchange = autosync;
			mult.onkeydown = autosync;
			mult.onkeyup = autosync;
			fps.onchange = autosync;
			fps.onkeydown = autosync;
			fps.onkeyup = autosync;
		}
		var frames = document.createElement("div");
		frames.classList.add("frames");
		this.frameCount = d.frameCount;
		this.frameElements = [];
		this.frameURLs = [];
		this.framePaths = [];
		this.frameTimes = [];
		var _g = 0;
		var _g1 = d.frameCount;
		while(_g < _g1) {
			var i = _g++;
			var url = [d.frameURLs[i]];
			var framePath = d.framePaths[i];
			var frame = [document.createElement("div")];
			var index = [this.frameElements.length];
			if(index[0] == 0) {
				this.currentFrameElement = frame[0];
				frame[0].classList.add("current");
			}
			frame[0].title = "" + index[0];
			this.frameElements.push(frame[0]);
			this.frameURLs.push(url[0]);
			this.framePaths.push(framePath);
			this.frameTimes.push(electron_FileWrap.mtimeSync(framePath));
			frame[0].classList.add("frame");
			if(d.width > 48 || d.height > 48) {
				frame[0].style.backgroundSize = "contain";
			}
			url[0] = StringTools.replace(url[0]," ","%20");
			frame[0].style.backgroundImage = "url(" + url[0] + ")";
			if(d.width <= 24 && d.height <= 24) {
				frame[0].style.backgroundSize = "" + d.width * 2 + "px " + d.height * 2 + "px";
				frame[0].classList.add("zoomed");
			}
			frame[0].onclick = (function(index,frame) {
				return function(_) {
					_gthis.currentFrame = index[0];
					_gthis.setCurrentFrameElement(index[0],frame[0]);
				};
			})(index,frame);
			frame[0].ondblclick = (function(url) {
				return function(_) {
					Electron_Shell.openExternal(url[0]);
				};
			})(url);
			frames.appendChild(frame[0]);
		}
		ctr.appendChild(info);
		ctr.appendChild(frames);
		this.element.appendChild(ctr);
		var pan = document.createElement("div");
		pan.style.flex = "1";
		var img = document.createElement("img");
		this.image = img;
		this.recenter = true;
		img.onload = function(_) {
			img.onload = null;
			_gthis.checkRecenter();
		};
		img.src = d.frameURLs[0];
		pan.appendChild(img);
		this.panner = new editors_Panner(pan,img);
		this.element.appendChild(pan);
	}
	,checkChanges: function() {
		if(!haxe_io_Path.isAbsolute(this.file.path)) {
			return;
		}
		var t1 = electron_FileWrap.mtimeSync(this.file.path);
		if(t1 != this.file.time) {
			this.file.time = t1;
			this.load(null);
			return;
		}
		var _g = 0;
		var _g1 = this.frameTimes.length;
		while(_g < _g1) {
			var i = _g++;
			t1 = electron_FileWrap.mtimeSync(this.framePaths[i]);
			if(t1 != this.frameTimes[i]) {
				this.frameTimes[i] = t1;
				var url = electron_FileWrap.getImageURL(this.framePaths[i]);
				this.frameURLs[i] = url;
				this.frameElements[i].style.backgroundImage = "url(" + url + ")";
				if(this.currentFrame == i) {
					this.panner.image.src = url;
				}
			}
		}
	}
	,__class__: editors_sprite_PreviewSprite
});
var editors_sprite_PreviewSpriteData = function() {
	this.playbackLegacy = true;
	this.playbackSpeed = 1.;
	this.framePaths = [];
	this.frameURLs = [];
	this.frameCount = 0;
};
$hxClasses["editors.sprite.PreviewSpriteData"] = editors_sprite_PreviewSpriteData;
editors_sprite_PreviewSpriteData.__name__ = "editors.sprite.PreviewSpriteData";
editors_sprite_PreviewSpriteData.prototype = {
	__class__: editors_sprite_PreviewSpriteData
};
var editors_sprite_SpriteResource = function(spriteData) {
	this.onEdgeFilteringChanged = new tools_EventHandler();
	this.onPremultipliedAlphaChanged = new tools_EventHandler();
	this.onSeperateTexturePageChanged = new tools_EventHandler();
	this.onTiledVerticalChanged = new tools_EventHandler();
	this.onTiledHorizontalChanged = new tools_EventHandler();
	this.onBboxToleranceChanged = new tools_EventHandler();
	this.onBboxBottomChanged = new tools_EventHandler();
	this.onBboxTopChanged = new tools_EventHandler();
	this.onBboxRightChanged = new tools_EventHandler();
	this.onBboxLeftChanged = new tools_EventHandler();
	this.onBboxTypeChanged = new tools_EventHandler();
	this.onBboxModeChanged = new tools_EventHandler();
	this.onPlaybackSpeedChanged = new tools_EventHandler();
	this.onPlaybackSpeedTypeChanged = new tools_EventHandler();
	this.onHeightChanged = new tools_EventHandler();
	this.onWidthChanged = new tools_EventHandler();
	this.onOriginYChanged = new tools_EventHandler();
	this.onOriginXChanged = new tools_EventHandler();
	this.onUnsavedChangesChanged = new tools_EventHandler();
	this.onTextureGroupChanged = new tools_EventHandler();
	this.onOriginTypeChanged = new tools_EventHandler();
	this._unsavedChanges = false;
	this.spriteData = spriteData;
	this.frames = editors_sprite_SpriteResourceFrames._new(spriteData);
};
$hxClasses["editors.sprite.SpriteResource"] = editors_sprite_SpriteResource;
editors_sprite_SpriteResource.__name__ = "editors.sprite.SpriteResource";
editors_sprite_SpriteResource.prototype = {
	get_name: function() {
		return this.spriteData.name;
	}
	,get_originType: function() {
		return this.spriteData.origin;
	}
	,setOriginType: function(type) {
		if(type == this.spriteData.origin) {
			return type;
		}
		if(type != 9) {
			var typeAsNumber = type;
			var yInt = Math.floor(typeAsNumber / 3);
			var oldX = this.get_originX();
			var oldY = this.get_originY();
			var tmp = this.get_width() / 2 * (typeAsNumber % 3);
			this.spriteData.sequence.xorigin = Math.round(tmp);
			var tmp = this.get_height() / 2 * yInt;
			this.spriteData.sequence.yorigin = Math.round(tmp);
			if(oldX != this.get_originX()) {
				this.onOriginXChanged.invoke(this.get_originX());
			}
			if(oldY != this.get_originY()) {
				this.onOriginYChanged.invoke(this.get_originY());
			}
		}
		this.spriteData.origin = type;
		this.set_unsavedChanges(true);
		this.onOriginTypeChanged.invoke(type);
		return type;
	}
	,get_textureGroup: function() {
		return this.spriteData.textureGroupId.name;
	}
	,set_textureGroup: function(newValue) {
		if(this.spriteData.textureGroupId.name == newValue) {
			return newValue;
		}
		this.spriteData.textureGroupId = { name : newValue, path : "texturegroups/" + newValue};
		this.set_unsavedChanges(true);
		this.onTextureGroupChanged.invoke(newValue);
		return newValue;
	}
	,get_defaultLayer: function() {
		return this.spriteData.layers[0].name;
	}
	,getUnderlyingData: function() {
		return this.spriteData;
	}
	,set_unsavedChanges: function(value) {
		if(value == this._unsavedChanges) {
			return value;
		}
		this._unsavedChanges = value;
		this.onUnsavedChangesChanged.invoke(value);
		return value;
	}
	,get_originX: function() {
		return this.spriteData.sequence.xorigin;
	}
	,set_originX: function(value) {
		if(value == this.spriteData.sequence.xorigin) {
			return value;
		}
		this.spriteData.sequence.xorigin = value;
		this.setOriginType(9);
		this.set_unsavedChanges(true);
		this.onOriginXChanged.invoke(value);
		return value;
	}
	,get_originY: function() {
		return this.spriteData.sequence.yorigin;
	}
	,set_originY: function(value) {
		if(value == this.spriteData.sequence.yorigin) {
			return value;
		}
		this.spriteData.sequence.yorigin = value;
		this.setOriginType(9);
		this.set_unsavedChanges(true);
		this.onOriginYChanged.invoke(value);
		return value;
	}
	,get_width: function() {
		return this.spriteData.width;
	}
	,set_width: function(value) {
		if(value == this.spriteData.width) {
			return value;
		}
		this.spriteData.width = value;
		this.set_unsavedChanges(true);
		this.onWidthChanged.invoke(value);
		return value;
	}
	,get_height: function() {
		return this.spriteData.height;
	}
	,set_height: function(value) {
		if(value == this.spriteData.height) {
			return value;
		}
		this.spriteData.height = value;
		this.set_unsavedChanges(true);
		this.onHeightChanged.invoke(value);
		return value;
	}
	,get_playbackSpeedType: function() {
		return this.spriteData.sequence.playbackSpeedType;
	}
	,set_playbackSpeedType: function(value) {
		if(value == this.spriteData.sequence.playbackSpeedType) {
			return value;
		}
		this.spriteData.sequence.playbackSpeedType = value;
		this.set_unsavedChanges(true);
		this.onPlaybackSpeedTypeChanged.invoke(value);
		return value;
	}
	,get_playbackSpeed: function() {
		return this.spriteData.sequence.playbackSpeed;
	}
	,set_playbackSpeed: function(value) {
		if(value == this.spriteData.sequence.playbackSpeed) {
			return value;
		}
		this.spriteData.sequence.playbackSpeed = value;
		this.set_unsavedChanges(true);
		this.onPlaybackSpeedChanged.invoke(value);
		return value;
	}
	,get_bboxMode: function() {
		return this.spriteData.bboxMode;
	}
	,set_bboxMode: function(value) {
		if(value == this.spriteData.bboxMode) {
			return value;
		}
		this.spriteData.bboxMode = value;
		this.set_unsavedChanges(true);
		this.onBboxModeChanged.invoke(value);
		return value;
	}
	,get_bboxType: function() {
		return this.spriteData.collisionKind;
	}
	,set_bboxType: function(value) {
		if(value == this.spriteData.collisionKind) {
			return value;
		}
		this.spriteData.collisionKind = value;
		this.set_unsavedChanges(true);
		this.onBboxTypeChanged.invoke(value);
		return value;
	}
	,get_bboxLeft: function() {
		return this.spriteData.bbox_left;
	}
	,set_bboxLeft: function(value) {
		if(value == this.spriteData.bbox_left) {
			return value;
		}
		this.spriteData.bbox_left = value;
		this.set_unsavedChanges(true);
		this.onBboxLeftChanged.invoke(value);
		return value;
	}
	,get_bboxRight: function() {
		return this.spriteData.bbox_right;
	}
	,set_bboxRight: function(value) {
		if(value == this.spriteData.bbox_right) {
			return value;
		}
		this.spriteData.bbox_right = value;
		this.set_unsavedChanges(true);
		this.onBboxRightChanged.invoke(value);
		return value;
	}
	,get_bboxTop: function() {
		return this.spriteData.bbox_top;
	}
	,set_bboxTop: function(value) {
		if(value == this.spriteData.bbox_top) {
			return value;
		}
		this.spriteData.bbox_top = value;
		this.set_unsavedChanges(true);
		this.onBboxTopChanged.invoke(value);
		return value;
	}
	,get_bboxBottom: function() {
		return this.spriteData.bbox_bottom;
	}
	,set_bboxBottom: function(value) {
		if(value == this.spriteData.bbox_bottom) {
			return value;
		}
		this.spriteData.bbox_bottom = value;
		this.set_unsavedChanges(true);
		this.onBboxBottomChanged.invoke(value);
		return value;
	}
	,get_bboxTolerance: function() {
		return this.spriteData.collisionTolerance;
	}
	,set_bboxTolerance: function(value) {
		if(value == this.spriteData.collisionTolerance) {
			return value;
		}
		this.spriteData.collisionTolerance = value;
		this.set_unsavedChanges(true);
		this.onBboxToleranceChanged.invoke(value);
		return value;
	}
	,get_tiledHorizontal: function() {
		return this.spriteData.HTile;
	}
	,set_tiledHorizontal: function(value) {
		if(value == this.spriteData.HTile) {
			return value;
		}
		this.spriteData.HTile = value;
		this.set_unsavedChanges(true);
		this.onTiledHorizontalChanged.invoke(value);
		return value;
	}
	,get_tiledVertical: function() {
		return this.spriteData.VTile;
	}
	,set_tiledVertical: function(value) {
		if(value == this.spriteData.VTile) {
			return value;
		}
		this.spriteData.VTile = value;
		this.set_unsavedChanges(true);
		this.onTiledVerticalChanged.invoke(value);
		return value;
	}
	,get_seperateTexturePage: function() {
		return this.spriteData.For3D;
	}
	,set_seperateTexturePage: function(value) {
		if(value == this.spriteData.For3D) {
			return value;
		}
		this.spriteData.For3D = value;
		this.set_unsavedChanges(true);
		this.onSeperateTexturePageChanged.invoke(value);
		return value;
	}
	,get_premultipliedAlpha: function() {
		return this.spriteData.preMultiplyAlpha;
	}
	,set_premultipliedAlpha: function(value) {
		if(value == this.spriteData.preMultiplyAlpha) {
			return value;
		}
		this.spriteData.preMultiplyAlpha = value;
		this.set_unsavedChanges(true);
		this.onPremultipliedAlphaChanged.invoke(value);
		return value;
	}
	,get_edgeFiltering: function() {
		return this.spriteData.edgeFiltering;
	}
	,set_edgeFiltering: function(value) {
		if(value == this.spriteData.edgeFiltering) {
			return value;
		}
		this.spriteData.edgeFiltering = value;
		this.set_unsavedChanges(true);
		this.onEdgeFilteringChanged.invoke(value);
		return value;
	}
	,__class__: editors_sprite_SpriteResource
};
var editors_sprite_SpriteResourceFrames = {};
editors_sprite_SpriteResourceFrames.arrayAccess = function(this1,index) {
	return this1.get(index);
};
editors_sprite_SpriteResourceFrames._new = function(spriteData) {
	return new editors_sprite_SpriteResourceFramesImpl(spriteData);
};
var editors_sprite_SpriteResourceFramesImpl = function(spriteData) {
	this.onFramesReplaced = new tools_EventHandler();
	this.spriteData = spriteData;
	this.array = [];
	var _g = 0;
	var _g1 = this.spriteData.frames.length;
	while(_g < _g1) this.array.push(new editors_sprite_SpriteResourceFrame(spriteData,_g++));
};
$hxClasses["editors.sprite.SpriteResourceFramesImpl"] = editors_sprite_SpriteResourceFramesImpl;
editors_sprite_SpriteResourceFramesImpl.__name__ = "editors.sprite.SpriteResourceFramesImpl";
editors_sprite_SpriteResourceFramesImpl.prototype = {
	replaceFrames: function(frameGuids) {
		yy_YySprite23.replaceFrames(this.spriteData,frameGuids);
		this.array = [];
		var _g = 0;
		var _g1 = this.spriteData.frames.length;
		while(_g < _g1) this.array.push(new editors_sprite_SpriteResourceFrame(this.spriteData,_g++));
		this.onFramesReplaced.invoke(this.array);
	}
	,get: function(index) {
		return this.array[index];
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.array);
	}
	,__class__: editors_sprite_SpriteResourceFramesImpl
};
var editors_sprite_SpriteResourceFrame = function(spriteData,index) {
	this.spriteData = spriteData;
	this.spriteFrame = this.spriteData.frames[index];
};
$hxClasses["editors.sprite.SpriteResourceFrame"] = editors_sprite_SpriteResourceFrame;
editors_sprite_SpriteResourceFrame.__name__ = "editors.sprite.SpriteResourceFrame";
editors_sprite_SpriteResourceFrame.prototype = {
	get_id: function() {
		return this.spriteFrame.name;
	}
	,__class__: editors_sprite_SpriteResourceFrame
};
var electron_ConfigFile = function(cat,name) {
	this.mtime = null;
	this.cat = cat;
	this.name = name;
	this.path = electron_FileWrap.getConfigPath(cat,name);
};
$hxClasses["electron.ConfigFile"] = electron_ConfigFile;
electron_ConfigFile.__name__ = "electron.ConfigFile";
electron_ConfigFile.prototype = {
	sync: function(force) {
		var t = electron_FileWrap.getConfigTime(this.cat,this.name);
		if(this.mtime < t || t == null && this.mtime == null || force) {
			this.mtime = t;
			this.data = electron_FileWrap.readConfigSync(this.cat,this.name);
			if(this.data == undefined) {
				return true;
			}
		}
		return false;
	}
	,flush: function() {
		electron_FileWrap.writeConfigSync(this.cat,this.name,this.data);
		this.mtime = electron_FileWrap.getConfigTime(this.cat,this.name);
	}
	,__class__: electron_ConfigFile
};
var electron_Dialog = function() { };
$hxClasses["electron.Dialog"] = electron_Dialog;
electron_Dialog.__name__ = "electron.Dialog";
electron_Dialog.showMessageBox = function(options,async) {
	if(Electron_API == null) {
		console.error("Don't have a showMessageBox here");
		return -1;
	} else if(async != null) {
		Electron_Dialog.showMessageBox(options).then(function(result) {
			async(result.response,result.checkboxChecked);
		});
		return -1;
	} else {
		return Electron_Dialog.showMessageBoxSync(options);
	}
};
electron_Dialog.showAlert = function(message) {
	if(Electron_API != null) {
		Electron_Dialog.showMessageBoxSync({ type : "info", message : message, buttons : ["OK"]});
	} else {
		window.alert(message);
	}
};
electron_Dialog.showWarning = function(message) {
	if(Electron_API != null) {
		Electron_Dialog.showMessageBoxSync({ type : "warning", message : message, buttons : ["OK"]});
	} else {
		window.alert("⚠ " + message);
	}
};
electron_Dialog.showError = function(message) {
	if(Electron_API != null) {
		Electron_Dialog.showMessageBoxSync({ type : "error", message : message, buttons : ["OK"]});
	} else {
		window.alert("❌ " + message);
	}
};
electron_Dialog.showConfirm = function(text) {
	if(Electron_API != null) {
		return Electron_Dialog.showMessageBoxSync({ type : "question", message : text, buttons : ["Yes","No"]}) == 0;
	} else {
		return window.confirm(text);
	}
};
electron_Dialog.showConfirmWarn = function(text) {
	if(Electron_API != null) {
		return Electron_Dialog.showMessageBoxSync({ type : "warning", message : text, buttons : ["Yes","No"]}) == 0;
	} else {
		return window.confirm("⚠ " + text);
	}
};
electron_Dialog.showOpenDialog = function(options,async) {
	if(Electron_API == null) {
		console.log("Don't have sync showOpenDialog here");
		return null;
	} else if(async != null) {
		Electron_Dialog.showOpenDialog(options).then(function(result) {
			async(result.canceled ? null : result.filePaths);
		});
		return null;
	} else {
		return Electron_Dialog.showOpenDialogSync(options);
	}
};
electron_Dialog.showPrompt = function(text,def,fn) {
	if(electron_Dialog.promptCtr == null) {
		electron_Dialog.initPrompt();
	}
	electron_Dialog.promptFunc = fn;
	tools_HtmlTools.setInnerText(electron_Dialog.promptSpan,text);
	electron_Dialog.promptInput.value = def;
	electron_Dialog.promptFunc = fn;
	electron_Dialog.promptCtr.style.display = "";
	electron_Dialog.promptInput.focus();
	electron_Dialog.promptInput.select();
};
electron_Dialog.initPrompt = function() {
	var proc = function(ok) {
		var fn = electron_Dialog.promptFunc;
		electron_Dialog.promptFunc = null;
		electron_Dialog.promptCtr.style.display = "none";
		fn(ok ? electron_Dialog.promptInput.value : null);
	};
	electron_Dialog.promptCtr = document.createElement("div");
	electron_Dialog.promptCtr.id = "lw_prompt";
	electron_Dialog.promptCtr.className = "lw_modal";
	electron_Dialog.promptCtr.style.display = "none";
	document.body.appendChild(electron_Dialog.promptCtr);
	var overlay = document.createElement("div");
	overlay.className = "overlay";
	overlay.addEventListener("click",function(_) {
		proc(false);
	});
	electron_Dialog.promptCtr.appendChild(overlay);
	var promptw = document.createElement("div");
	promptw.className = "window";
	electron_Dialog.promptCtr.appendChild(promptw);
	electron_Dialog.promptSpan = document.createElement("span");
	promptw.appendChild(electron_Dialog.promptSpan);
	promptw.appendChild(document.createElement("br"));
	electron_Dialog.promptInput = document.createElement("input");
	electron_Dialog.promptInput.type = "text";
	electron_Dialog.promptInput.addEventListener("keydown",function(e) {
		switch(e.keyCode) {
		case 13:
			proc(true);
			break;
		case 27:
			proc(false);
			break;
		}
	});
	promptw.appendChild(electron_Dialog.promptInput);
	var buttons = document.createElement("div");
	buttons.className = "buttons";
	promptw.appendChild(buttons);
	var z = true;
	var bt = document.createElement("input");
	bt.type = "button";
	bt.addEventListener("click",function(_) {
		proc(z);
	});
	bt.value = z ? "OK" : "Cancel";
	if(!z) {
		buttons.appendChild(document.createTextNode(" "));
	}
	buttons.appendChild(bt);
	var z1 = false;
	var bt = document.createElement("input");
	bt.type = "button";
	bt.addEventListener("click",function(_) {
		proc(z1);
	});
	bt.value = z1 ? "OK" : "Cancel";
	if(!z1) {
		buttons.appendChild(document.createTextNode(" "));
	}
	buttons.appendChild(bt);
};
electron_Dialog.initWorkarounds = function() {
	window.alert = function(text) {
		Electron_Dialog.showMessageBoxSync({ message : text, buttons : ["OK"]});
	};
	window.confirm = function(text) {
		return Electron_Dialog.showMessageBoxSync({ type : "question", message : text, buttons : ["OK","Cancel"]}) == 0;
	};
};
var electron__$FileSystem_FileSystemImpl = function() { };
$hxClasses["electron._FileSystem.FileSystemImpl"] = electron__$FileSystem_FileSystemImpl;
electron__$FileSystem_FileSystemImpl.__name__ = "electron._FileSystem.FileSystemImpl";
electron__$FileSystem_FileSystemImpl.mtimeSync = function(path) {
	try {
		return Electron_FS.statSync(path).mtimeMs;
	} catch( _g ) {
		return null;
	}
};
electron__$FileSystem_FileSystemImpl.getImageURL = function(path) {
	var t = electron__$FileSystem_FileSystemImpl.mtimeSync(path);
	if(t != null) {
		return "file:///" + path + "?mtime=" + t;
	} else {
		return null;
	}
};
var electron_FileSystemBrowser = function() { };
$hxClasses["electron.FileSystemBrowser"] = electron_FileSystemBrowser;
electron_FileSystemBrowser.__name__ = "electron.FileSystemBrowser";
electron_FileSystemBrowser.readFile = function(path,enc,callback) {
	var http = new haxe_http_HttpJs(path);
	http.onError = function(msg) {
		callback(new Error(msg),null);
	};
	http.onData = function(data) {
		callback(null,data);
	};
	http.request();
};
var electron_FileWrap = function() { };
$hxClasses["electron.FileWrap"] = electron_FileWrap;
electron_FileWrap.__name__ = "electron.FileWrap";
electron_FileWrap.existsSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return Electron_FS.existsSync(path);
	} else {
		return gml_Project.current.existsSync(path);
	}
};
electron_FileWrap.mtimeSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return electron__$FileSystem_FileSystemImpl.mtimeSync(path);
	} else {
		return gml_Project.current.mtimeSync(path);
	}
};
electron_FileWrap.unlinkSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.unlinkSync(path);
	} else {
		gml_Project.current.unlinkSync(path);
	}
};
electron_FileWrap.readTextFile = function(path,fn) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.readFile(path,"utf8",fn);
		return;
	} else {
		gml_Project.current.readTextFile(path,fn);
		return;
	}
};
electron_FileWrap.readTextFileSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return Electron_FS.readFileSync(path,"utf8");
	} else {
		return gml_Project.current.readTextFileSync(path);
	}
};
electron_FileWrap.writeTextFileSync = function(path,text) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.writeFileSync(path,text);
	} else {
		gml_Project.current.writeTextFileSync(path,text);
	}
};
electron_FileWrap.readJsonFileSync = function(path,c) {
	if(haxe_io_Path.isAbsolute(path)) {
		return JSON.parse(Electron_FS.readFileSync(path,"utf8"));
	} else {
		return gml_Project.current.readJsonFileSync(path);
	}
};
electron_FileWrap.writeJsonFileSync = function(path,value) {
	electron_FileWrap.writeTextFileSync(path,yy_YyJson.stringify(value));
};
electron_FileWrap.readYyFileSync = function(path,c,extJson) {
	if(haxe_io_Path.isAbsolute(path)) {
		return yy_YyJson.parse(Electron_FS.readFileSync(path,"utf8"));
	} else {
		return gml_Project.current.readYyFileSync(path);
	}
};
electron_FileWrap.writeYyFileSync = function(path,value,extJson) {
	electron_FileWrap.writeTextFileSync(path,yy_YyJson.stringify(value,extJson));
};
electron_FileWrap.readGmxFileSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return gmx_SfGmx.parse(Electron_FS.readFileSync(path,"utf8"));
	} else {
		return gml_Project.current.readGmxFileSync(path);
	}
};
electron_FileWrap.writeGmxFileSync = function(path,gmx) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.writeFileSync(path,gmx.toGmxString());
	} else {
		gml_Project.current.writeGmxFileSync(path,gmx);
	}
};
electron_FileWrap.mkdirSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.mkdirSync(path);
	} else {
		gml_Project.current.mkdirSync(path);
	}
};
electron_FileWrap.readdirSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		var out = [];
		var _g = 0;
		var _g1 = Electron_FS.readdirSync(path);
		while(_g < _g1.length) {
			var rel = _g1[_g];
			++_g;
			var itemFull = haxe_io_Path.join([path,rel]);
			out.push({ fileName : rel, relPath : itemFull, fullPath : itemFull, isDirectory : Electron_FS.statSync(itemFull).isDirectory()});
		}
		return out;
	} else {
		return gml_Project.current.readdirSync(path);
	}
};
electron_FileWrap.openExternal = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_IPC.send("shell-open",path);
	} else {
		gml_Project.current.openExternal(path);
	}
};
electron_FileWrap.showItemInFolder = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_IPC.send("shell-show",path);
	} else {
		gml_Project.current.showItemInFolder(path);
	}
};
electron_FileWrap.get_isWindows = function() {
	return !electron_FileWrap.isUnix;
};
electron_FileWrap.getConfigPath = function(cat,name) {
	if(Electron_FS.existsSync != null) {
		return electron_FileWrap.userPath + "/" + cat + "/" + name + ".json";
	} else {
		return cat + "/" + name;
	}
};
electron_FileWrap.getConfigTime = function(cat,name) {
	if(Electron_FS.existsSync != null) {
		return electron__$FileSystem_FileSystemImpl.mtimeSync(electron_FileWrap.getConfigPath(cat,name));
	} else {
		return null;
	}
};
electron_FileWrap.readConfigSync = function(cat,name) {
	var path = electron_FileWrap.getConfigPath(cat,name);
	var text;
	var def = undefined;
	if(Electron_FS.existsSync != null) {
		if(Electron_FS.existsSync(path)) {
			try {
				text = Electron_FS.readFileSync(path,"utf8");
			} catch( _g ) {
				return def;
			}
		} else {
			return def;
		}
	} else {
		text = window.localStorage.getItem(path);
	}
	if(text == null) {
		return def;
	}
	try {
		return JSON.parse(text);
	} catch( _g ) {
		return def;
	}
};
electron_FileWrap.writeConfigSync = function(cat,name,obj) {
	var path = electron_FileWrap.getConfigPath(cat,name);
	if(Electron_FS.existsSync != null) {
		Electron_FS.writeFileSync(path,JSON.stringify(obj,null,"\t"));
	} else {
		var text = JSON.stringify(obj);
		window.localStorage.setItem(path,text);
	}
};
electron_FileWrap.getImageURL = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return electron__$FileSystem_FileSystemImpl.getImageURL(path);
	} else {
		return gml_Project.current.getImageURL(path);
	}
};
electron_FileWrap.init = function() {
};
var electron_FontScannerFallback = function() { };
$hxClasses["electron.FontScannerFallback"] = electron_FontScannerFallback;
electron_FontScannerFallback.__name__ = "electron.FontScannerFallback";
electron_FontScannerFallback.getAvailableFonts = function() {
	return new Promise(function(resolve,reject) {
		resolve([]);
	});
};
electron_FontScannerFallback.getAvailableFontsSync = function() {
	return [];
};
var electron_MenuFallback = function() {
	this.items = [];
	this.__element = document.createElement("ul");
	this.__element.gmlMenu = this;
	this.__element.classList.add("popout-menu");
};
$hxClasses["electron.MenuFallback"] = electron_MenuFallback;
electron_MenuFallback.__name__ = "electron.MenuFallback";
electron_MenuFallback.appendOpt = function(menu,opt) {
	var item = new Electron_MenuItem(opt);
	menu.append(item);
	return item;
};
electron_MenuFallback.appendSep = function(menu,id) {
	var item = new Electron_MenuItem({ type : "separator", id : id});
	menu.append(item);
	return item;
};
electron_MenuFallback.prototype = {
	clear: function() {
		this.items.length = 0;
		tools_HtmlTools.clearInner(this.__element);
	}
	,append: function(item) {
		item.__parent = this;
		this.items.push(item);
		this.__element.appendChild(item.__element);
	}
	,insert: function(pos,item) {
		item.__parent = this;
		this.items.splice(pos,0,item);
	}
	,__hide: function() {
		var par = this.__element.parentElement;
		if(par != null && par.tagName == "LI") {
			par.parentElement.gmlMenu.__hide();
			return;
		}
		document.removeEventListener("mousedown",$bind(this,this.__outerClick));
		if(par != null) {
			par.removeChild(this.__element);
		}
		var cb = this.__then;
		if(cb != null) {
			this.__then = null;
			cb();
		}
	}
	,__outerClick: function(e) {
		var el = e.target;
		while(el != null) {
			if(el == this.__element) {
				return;
			}
			el = el.parentElement;
		}
		this.__hide();
	}
	,__update: function() {
		tools_HtmlTools.clearInner(this.__element);
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.__parent = this;
			item.__update();
			this.__element.appendChild(item.__element);
		}
	}
	,popup: function(opt) {
		this.__then = opt != null ? opt.callback : null;
		if(electron_MenuFallback.contextEvent != null) {
			this.__element.style.left = electron_MenuFallback.contextEvent.pageX + "px";
			this.__element.style.top = electron_MenuFallback.contextEvent.pageY + "px";
		}
		this.__update();
		document.addEventListener("mousedown",$bind(this,this.__outerClick));
		document.body.appendChild(this.__element);
	}
	,__class__: electron_MenuFallback
};
var electron_MenuItemFallback = function(opt) {
	this.__parent = null;
	var _gthis = this;
	this.enabled = opt.enabled != false;
	this.visible = opt.visible != false;
	this.checked = opt.checked;
	this.label = opt.label;
	this.click = opt.click;
	this.type = opt.type;
	if(this.type == null) {
		this.type = "normal";
	}
	this.__element = document.createElement("li");
	this.__element.classList.add("popout-menu-" + (opt.type != null ? opt.type : "normal"));
	if(opt.icon != null && typeof(opt.icon) == "string") {
		this.__element.style.backgroundImage = "url(" + Std.string(opt.icon) + ")";
	}
	if(opt.label != null) {
		this.__label = document.createElement("span");
		this.__label.appendChild(document.createTextNode(opt.label));
		this.__element.appendChild(this.__label);
	}
	if(this.click != null) {
		this.__element.addEventListener("click",function(e) {
			if(!_gthis.enabled) {
				return;
			}
			if(_gthis.__parent != null) {
				_gthis.__parent.__hide();
			}
			if(_gthis.click != null) {
				_gthis.click();
			}
		});
	}
	if(opt.submenu != null) {
		if(((opt.submenu) instanceof Array)) {
			var opts = opt.submenu;
			this.submenu = new electron_MenuFallback();
			var _g = 0;
			while(_g < opts.length) this.submenu.append(new electron_MenuItemFallback(opts[_g++]));
		} else {
			this.submenu = opt.submenu;
		}
	}
};
$hxClasses["electron.MenuItemFallback"] = electron_MenuItemFallback;
electron_MenuItemFallback.__name__ = "electron.MenuItemFallback";
electron_MenuItemFallback.prototype = {
	__update: function() {
		this.__element.style.display = this.visible ? "" : "none";
		if(this.__label != null) {
			if(this.__label.parentElement == null) {
				this.__element.prepend(this.__label);
			}
			if(this.label != this.__label.innerText) {
				tools_HtmlTools.setInnerText(this.__label,this.label);
			}
		}
		tools_HtmlTools.setAttributeFlag(this.__element,"disabled",!this.enabled);
		if(this.checked != null) {
			tools_HtmlTools.setAttributeFlag(this.__element,"checked",this.checked);
		}
		if(this.submenu != null) {
			this.submenu.__update();
			var submenuNode = this.submenu.__element;
			if(submenuNode.parentElement != this.__element) {
				if(submenuNode.parentElement != null) {
					submenuNode.parentElement.removeChild(submenuNode);
				}
				this.__element.appendChild(submenuNode);
			}
		}
	}
	,__class__: electron_MenuItemFallback
};
var electron_WindowsAccentColors = function() { };
$hxClasses["electron.WindowsAccentColors"] = electron_WindowsAccentColors;
electron_WindowsAccentColors.__name__ = "electron.WindowsAccentColors";
electron_WindowsAccentColors.init = function() {
	if(electron_WindowsAccentColors.ready) {
		return;
	}
	electron_WindowsAccentColors.ready = true;
	try {
		if(Electron_API == null) {
			return;
		}
		if(window.process.platform != "win32") {
			return;
		}
		var remote = Electron_API.remote;
		if(remote == null) {
			remote = window.require("@electron/remote");
		}
		var path = window.require("path");
		var appPath = Electron_App.getAppPath();
		var jsPath = path.resolve(appPath,"./misc/WindowsAccentColors.js");
		electron_WindowsAccentColors.impl = window.require(jsPath);
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		console.error("Error initializing accent colors: ",x);
	}
};
electron_WindowsAccentColors.updateFocus = function(active) {
	electron_WindowsAccentColors.init();
	if(electron_WindowsAccentColors.impl == null) {
		return;
	}
	var html = window.document.documentElement;
	var style = html.style;
	var pre = active ? "active" : "inactive";
	html.setAttribute("titlebar-foreground-is-light",html.getAttribute(pre + "-titlebar-foreground-is-light"));
	style.setProperty("--titlebar-background-color",style.getPropertyValue("--" + pre + "-titlebar-background-color"));
	style.setProperty("--titlebar-foreground-color",style.getPropertyValue("--" + pre + "-titlebar-foreground-color"));
};
electron_WindowsAccentColors.update = function(focus) {
	if(electron_WindowsAccentColors.impl == null) {
		electron_WindowsAccentColors.init();
	} else {
		electron_WindowsAccentColors.impl.reload();
	}
	if(electron_WindowsAccentColors.impl == null) {
		return;
	}
	if(!electron_WindowsAccentColors.impl.isDetectable) {
		return;
	}
	var fc0 = electron_WindowsAccentColors.impl.inactiveTitlebarTextColor;
	var fc1 = electron_WindowsAccentColors.impl.titlebarTextColor;
	var html = window.document.documentElement;
	html.setAttribute("hasAccentColors","");
	html.setAttribute("active-titlebar-foreground-is-light","" + Std.string(fc1 == "#ffffff"));
	html.setAttribute("inactive-titlebar-foreground-is-light","" + Std.string(fc0 == "#ffffff"));
	var style = html.style;
	style.setProperty("--active-titlebar-background-color",electron_WindowsAccentColors.impl.titlebarColor);
	style.setProperty("--active-titlebar-foreground-color",fc1);
	style.setProperty("--inactive-titlebar-background-color",electron_WindowsAccentColors.impl.inactiveTitlebarColor);
	style.setProperty("--inactive-titlebar-foreground-color",fc0);
	if(focus == null) {
		focus = window.document.documentElement.hasAttribute("hasFocus");
	}
	electron_WindowsAccentColors.updateFocus(focus);
};
var file_kind_KGmx = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.KGmx"] = file_kind_KGmx;
file_kind_KGmx.__name__ = "file.kind.KGmx";
file_kind_KGmx.register = function(subExt,file) {
	var arr = file_kind_KGmx.map[subExt];
	if(arr == null) {
		arr = [];
		file_kind_KGmx.map[subExt] = arr;
	}
	arr.unshift(file);
};
file_kind_KGmx.__super__ = file_FileKind;
file_kind_KGmx.prototype = $extend(file_FileKind.prototype,{
	detect: function(path,data) {
		var ext = haxe_io_Path.extension(haxe_io_Path.withoutExtension(path)).toLowerCase();
		var kinds = file_kind_KGmx.map[ext];
		if(kinds != null) {
			var _g = 0;
			while(_g < kinds.length) {
				var out = kinds[_g++].detect(path,data);
				if(out != null) {
					return out;
				}
			}
		}
		return null;
	}
	,__class__: file_kind_KGmx
});
var file_kind_KYy = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.KYy"] = file_kind_KYy;
file_kind_KYy.__name__ = "file.kind.KYy";
file_kind_KYy.register = function(modelName,file) {
	var arr = file_kind_KYy.map[modelName];
	if(arr == null) {
		arr = [];
		file_kind_KYy.map[modelName] = arr;
	}
	arr.unshift(file);
};
file_kind_KYy.__super__ = file_FileKind;
file_kind_KYy.prototype = $extend(file_FileKind.prototype,{
	detect: function(path,data) {
		var json;
		var isObject;
		if(data != null) {
			json = data;
			isObject = typeof(json) != "string";
		} else {
			try {
				json = electron_FileWrap.readYyFileSync(path);
				isObject = true;
			} catch( _g ) {
				return file_FileKind.prototype.detect.call(this,path,data);
			}
		}
		var model;
		if(isObject) {
			model = ((json.resourceType) || (json.modelName));
		} else {
			var mt = file_kind_KYy.rxModelName.exec(data);
			if(mt != null) {
				model = ((mt[1]) || (mt[2]));
			} else {
				try {
					json = yy_YyJson.parse(data);
					isObject = true;
					model = ((json.resourceType) || (json.modelName));
				} catch( _g ) {
					return file_FileKind.prototype.detect.call(this,path,json);
				}
			}
		}
		var kinds = file_kind_KYy.map[model];
		var baseDetect = file_FileKind.inst.detect;
		var isInvalid = false;
		if(kinds != null) {
			var _g = 0;
			while(_g < kinds.length) {
				var kind = kinds[_g];
				++_g;
				if(kind.detect == baseDetect) {
					return kind.detect(path,json);
				}
				if(isInvalid) {
					continue;
				}
				if(!isObject) {
					try {
						json = yy_YyJson.parse(data);
					} catch( _g1 ) {
						isInvalid = true;
						continue;
					}
				}
				var out = kind.detect(path,json);
				if(out != null) {
					return out;
				}
			}
		}
		return file_FileKind.prototype.detect.call(this,path,json);
	}
	,create: function(name,path,data,nav) {
		var json;
		if(data != null) {
			json = data;
		} else {
			try {
				json = electron_FileWrap.readYyFileSync(path);
			} catch( _g ) {
				json = null;
			}
		}
		var kind = json != null ? ((json.resourceType) || (json.modelName)) : "<unknown>";
		var opt;
		var dunno = "GMEdit doesn't know how to open YY type " + kind + ".";
		if(Electron_FS.existsSync != null) {
			opt = electron_Dialog.showMessageBox({ message : "" + dunno + " What would you like to do?", buttons : ["Open as JSON","Open in external editor","Show in directory","Do nothing"], defaultId : 3, cancelId : 3});
		} else {
			opt = electron_Dialog.showConfirm("" + dunno + " Would you like to open it as JSON?") ? 0 : 3;
		}
		switch(opt) {
		case 0:
			return file_kind_misc_KJavaScript.inst.create(name,path,null,nav);
		case 1:
			return file_kind_misc_KExtern.inst.create(name,path,null,nav);
		case 2:
			electron_FileWrap.showItemInFolder(path);
			break;
		}
		return null;
	}
	,__class__: file_kind_KYy
});
var file_kind_gmk_KGmkEvents = function() {
	file_kind_gml_KGmlEvents.call(this);
};
$hxClasses["file.kind.gmk.KGmkEvents"] = file_kind_gmk_KGmkEvents;
file_kind_gmk_KGmkEvents.__name__ = "file.kind.gmk.KGmkEvents";
file_kind_gmk_KGmkEvents.__super__ = file_kind_gml_KGmlEvents;
file_kind_gmk_KGmkEvents.prototype = $extend(file_kind_gml_KGmlEvents.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = electron_FileWrap.readTextFileSync(editor.file.path);
		}
		var out = gmk_GmkObject.getCode(typeof(data) == "string" ? gmx_SfGmx.parse(data) : data,editor.file.path);
		if(out == null) {
			return editor.setLoadError(gmk_GmkObject.errorText);
		} else {
			return out;
		}
	}
	,postproc: function(editor,code) {
		code = file_kind_gml_KGmlEvents.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var path = editor.file.path;
		var root = electron_FileWrap.readGmxFileSync(path);
		if(!gmk_GmkObject.setCode(root,path,code)) {
			editor.setSaveError("Can't update XML:\n" + gmk_GmkObject.errorText);
			return null;
		}
		return root.toGmxString();
	}
	,index: function(path,content,main,sync) {
		var obj = gmx_SfGmx.parse(content);
		var out = new parsers_GmlSeekData(this);
		var objectName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(path)));
		var parentName = obj.findText("parent");
		if(parentName != null) {
			parsers_GmlSeeker.addObjectChild(parentName,objectName);
		}
		if(ui_Preferences.current.assetThumbs) {
			var sprite = obj.findText("sprite");
			if(sprite != null) {
				var frameURL = gml_Project.current.getSpriteURL(sprite);
				if(frameURL != null) {
					ui_treeview_TreeView.setThumb(path,frameURL);
				}
			}
		}
		out.addObjectHint(objectName,parentName);
		var dir = haxe_io_Path.withExtension(path,"events");
		if(electron_FileWrap.existsSync(dir)) {
			var _g = 0;
			var _g1 = electron_FileWrap.readdirSync(dir);
			while(_g < _g1.length) {
				var event = electron_FileWrap.readGmxFileSync(_g1[_g++].relPath);
				var name = gmk_GmkEvent.toStringGmk(event);
				if(gmk_GmkEvent.isEmpty(event)) {
					continue;
				}
				var locals = new gml_GmlLocals(name);
				var code = gmk_GmkEvent.getCode(event);
				out.locals[name] = locals;
				if(code != null) {
					parsers_GmlSeeker.runSyncImpl(path,code,null,out,locals,this);
				}
			}
		}
		parsers_GmlSeeker.finish(path,out);
		return true;
	}
	,__class__: file_kind_gmk_KGmkEvents
});
var file_kind_gml_KGmlScript = function() {
	this.doesNotExist = false;
	this.isScript = true;
	file_kind_KGml.call(this);
	this.canDefineComp = true;
};
$hxClasses["file.kind.gml.KGmlScript"] = file_kind_gml_KGmlScript;
file_kind_gml_KGmlScript.__name__ = "file.kind.gml.KGmlScript";
file_kind_gml_KGmlScript.__super__ = file_kind_KGml;
file_kind_gml_KGmlScript.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data != null) {
			return data;
		}
		if(editor.file.existsContent()) {
			var text = editor.file.readContent();
			this.doesNotExist = false;
			return text;
		} else {
			console.warn("`" + editor.file.path + "` is amiss, assuming to be empty.");
			this.doesNotExist = true;
			return "";
		}
	}
	,saveCode: function(editor,code) {
		this.doesNotExist = false;
		return file_kind_KGml.prototype.saveCode.call(this,editor,code);
	}
	,checkForChanges: function(editor) {
		var result = file_kind_KGml.prototype.checkForChanges.call(this,editor);
		if(result == -1 && this.doesNotExist) {
			result = 0;
		}
		return result;
	}
	,preproc: function(editor,code) {
		code = synext_GmlExtCoroutines.pre(code);
		code = file_kind_KGml.prototype.preproc.call(this,editor,code);
		code = synext_GmlExtArgs.pre(code);
		return code;
	}
	,postproc_1: function(editor,out,sessionChanged) {
		var file = editor.file;
		var onDisk = file.path != null;
		out = synext_GmlExtArgs.post(out);
		if(out == null) {
			electron_Dialog.showError("Can't process #args:\n" + synext_GmlExtArgs.errorText);
			return null;
		}
		var canCoroutines = this.isScript;
		if(this.isScript && ui_Preferences.current.argsFormat != "") {
			if(!sessionChanged && synext_GmlExtArgsDoc.proc(file)) {
				sessionChanged = true;
				out = editor.session.getValue();
				if(onDisk && this.canImport) {
					var pair = editor.postpImport(out);
					if(pair == null) {
						return null;
					}
					out = pair.val;
				}
				if(this.canLambda) {
					out = synext_GmlExtLambda.post(editor,out);
					if(out == null) {
						electron_Dialog.showError("Can't process #lambda:\n" + synext_GmlExtLambda.errorText);
						return null;
					}
				}
				out = this.postproc_1(editor,out,true);
				if(out == null) {
					return null;
				}
				canCoroutines = false;
				window.setTimeout(function() {
					file.markClean();
				});
			}
		}
		if(canCoroutines) {
			out = synext_GmlExtCoroutines.post(out);
			if(out == null) {
				electron_Dialog.showError(synext_GmlExtCoroutines.errorText);
				return null;
			}
		}
		return out;
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return code;
		}
		return this.postproc_1(editor,code,this.saveSessionChanged);
	}
	,__class__: file_kind_gml_KGmlScript
});
var file_kind_gml_KGmlExtension = function() {
	file_kind_gml_KGmlScript.call(this);
	this.isScript = false;
	this.canDefineComp = false;
};
$hxClasses["file.kind.gml.KGmlExtension"] = file_kind_gml_KGmlExtension;
file_kind_gml_KGmlExtension.__name__ = "file.kind.gml.KGmlExtension";
file_kind_gml_KGmlExtension.__super__ = file_kind_gml_KGmlScript;
file_kind_gml_KGmlExtension.prototype = $extend(file_kind_gml_KGmlScript.prototype,{
	__class__: file_kind_gml_KGmlExtension
});
var file_kind_gml_KGmlImports = function() {
	file_kind_gml_KGmlScript.call(this);
};
$hxClasses["file.kind.gml.KGmlImports"] = file_kind_gml_KGmlImports;
file_kind_gml_KGmlImports.__name__ = "file.kind.gml.KGmlImports";
file_kind_gml_KGmlImports.__super__ = file_kind_gml_KGmlScript;
file_kind_gml_KGmlImports.prototype = $extend(file_kind_gml_KGmlScript.prototype,{
	checkForChanges: function(editor) {
		var result = file_kind_gml_KGmlScript.prototype.checkForChanges.call(this,editor);
		if(result < 0) {
			result = 0;
		}
		return result;
	}
	,__class__: file_kind_gml_KGmlImports
});
var file_kind_gml_KGmlLambdas = function() {
	file_kind_KGml.call(this);
	this.canLambda = false;
};
$hxClasses["file.kind.gml.KGmlLambdas"] = file_kind_gml_KGmlLambdas;
file_kind_gml_KGmlLambdas.__name__ = "file.kind.gml.KGmlLambdas";
file_kind_gml_KGmlLambdas.__super__ = file_kind_KGml;
file_kind_gml_KGmlLambdas.prototype = $extend(file_kind_KGml.prototype,{
	__class__: file_kind_gml_KGmlLambdas
});
var file_kind_gml_KGmlMultifile = function() {
	file_kind_KGml.call(this);
	this.checkSelfForChanges = false;
};
$hxClasses["file.kind.gml.KGmlMultifile"] = file_kind_gml_KGmlMultifile;
file_kind_gml_KGmlMultifile.__name__ = "file.kind.gml.KGmlMultifile";
file_kind_gml_KGmlMultifile.__super__ = file_kind_KGml;
file_kind_gml_KGmlMultifile.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		var file = editor.file;
		if(data != null) {
			if(((data) instanceof Array)) {
				file.multidata = { items : data, tvDir : null};
			} else {
				file.multidata = data;
			}
		}
		file.extraFiles.length = 0;
		var out = "";
		var errors = "";
		var _g = 0;
		var _g1 = file.multidata.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(out != "") {
				out += "\n\n";
			}
			out += "#define " + item.name + "\n";
			var itemSubs = parsers_GmlMultifile.split(electron_FileWrap.readTextFileSync(item.path),item.name);
			if(itemSubs == null) {
				errors += "Can't open " + item.name + " for editing: " + parsers_GmlMultifile.errorText + "\n";
			} else {
				switch(itemSubs.length) {
				case 0:
					break;
				case 1:
					out += itemSubs[0].code.trimRight();
					break;
				default:
					errors += "Can't open " + item.name + " for editing because it contains multiple scripts.\n";
				}
			}
			file.extraFiles.push(new gml_file_GmlFileExtra(item.path));
		}
		if(errors == "") {
			return out;
		} else {
			return editor.setLoadError(errors);
		}
	}
	,preproc: function(editor,code) {
		code = file_kind_KGml.prototype.preproc.call(this,editor,code);
		code = synext_GmlExtArgs.pre(code);
		return code;
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		code = synext_GmlExtArgs.post(code);
		if(code == null) {
			electron_Dialog.showError("Can't process #args:\n" + synext_GmlExtArgs.errorText);
			return null;
		}
		return code;
	}
	,saveCode: function(editor,code) {
		var file = editor.file;
		var next = parsers_GmlMultifile.split(code,"<detached code>");
		var map0 = Object.create(null);
		var _g = 0;
		var _g1 = file.multidata.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			map0[item.name] = item.path;
		}
		var errors = "";
		var _g = 0;
		while(_g < next.length) {
			var item = next[_g];
			++_g;
			var itemPath = map0[item.name];
			var itemCode = [item.code];
			if(itemPath != null) {
				electron_FileWrap.writeTextFileSync(itemPath,itemCode[0]);
				parsers_GmlSeeker.runSync(itemPath,itemCode[0],item.name,file_kind_gml_KGmlScript.inst);
			} else if(/^\w+$/.test(item.name)) {
				var args = ui_treeview_TreeViewItemMenus.createImplBoth("auto",0,file.multidata.tvDir,item.name,(function(itemCode) {
					return function(q) {
						q.openFile = false;
						q.gmlCode = itemCode[0];
						return q;
					};
				})(itemCode));
				if(args != null) {
					file.multidata.items.push({ name : item.name, path : args.npath});
				}
			} else {
				errors += "Can't save script " + item.name + " because it is not among the edited group.\n";
			}
		}
		if(errors != "") {
			electron_Dialog.showError(errors);
			return false;
		} else {
			return true;
		}
	}
	,__class__: file_kind_gml_KGmlMultifile
});
var file_kind_gml_KGmlSearchResults = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/gml_search";
};
$hxClasses["file.kind.gml.KGmlSearchResults"] = file_kind_gml_KGmlSearchResults;
file_kind_gml_KGmlSearchResults.__name__ = "file.kind.gml.KGmlSearchResults";
file_kind_gml_KGmlSearchResults.__super__ = file_kind_KCode;
file_kind_gml_KGmlSearchResults.prototype = $extend(file_kind_KCode.prototype,{
	getTabContext: function(file,data) {
		return file.name + "#" + file_kind_gml_KGmlSearchResults.nextId++;
	}
	,loadCode: function(editor,data) {
		return data;
	}
	,saveCode: function(editor,code) {
		var file = editor.file;
		if(file.searchData == null) {
			return false;
		}
		if(!file.searchData.save(file)) {
			return false;
		}
		file.markClean();
		return true;
	}
	,__class__: file_kind_gml_KGmlSearchResults
});
var file_kind_gmx_KGmxEvents = function() {
	file_kind_gml_KGmlEvents.call(this);
};
$hxClasses["file.kind.gmx.KGmxEvents"] = file_kind_gmx_KGmxEvents;
file_kind_gmx_KGmxEvents.__name__ = "file.kind.gmx.KGmxEvents";
file_kind_gmx_KGmxEvents.__super__ = file_kind_gml_KGmlEvents;
file_kind_gmx_KGmxEvents.prototype = $extend(file_kind_gml_KGmlEvents.prototype,{
	loadCode: function(editor,data) {
		var out = gmx_GmxObject.getCode(gmx_SfGmx.parse(file_kind_gml_KGmlEvents.prototype.loadCode.call(this,editor,data)));
		if(out == null) {
			return editor.setLoadError(gmx_GmxObject.errorText);
		} else {
			return out;
		}
	}
	,postproc: function(editor,code) {
		code = file_kind_gml_KGmlEvents.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var root = electron_FileWrap.readGmxFileSync(editor.file.path);
		if(!gmx_GmxObject.setCode(root,code)) {
			editor.setSaveError("Can't update GMX:\n" + gmx_GmxObject.errorText);
			return null;
		}
		return root.toGmxString();
	}
	,index: function(path,content,main,sync) {
		var obj = gmx_SfGmx.parse(content);
		var out = new parsers_GmlSeekData(this);
		var objectName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(path)));
		var parentName = obj.findText("parentName");
		if(parentName == "<undefined>") {
			parentName = null;
		}
		if(parentName != null) {
			parsers_GmlSeeker.addObjectChild(parentName,objectName);
		}
		if(ui_Preferences.current.assetThumbs) {
			var sprite = obj.findText("spriteName");
			if(sprite != "<undefined>") {
				var framePath = haxe_io_Path.join(["sprites","images",sprite + "_0.png"]);
				var frameURL = gml_Project.current.getImageURL(framePath);
				if(frameURL != null) {
					ui_treeview_TreeView.setThumb(path,frameURL);
				}
			}
		}
		out.addObjectHint(objectName,parentName);
		var _g = 0;
		var _g1 = obj.findAll("events");
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].findAll("event");
			while(_g2 < _g3.length) {
				var event = _g3[_g2];
				++_g2;
				var ename = event.attrMap["ename"];
				var name = parsers_GmlEvent.toString(Std.parseInt(event.attrMap["eventtype"]),ename == null ? Std.parseInt(event.attrMap["enumb"]) : null,ename);
				var locals = new gml_GmlLocals(name);
				out.locals[name] = locals;
				var _g4 = 0;
				var _g5 = event.findAll("action");
				while(_g4 < _g5.length) {
					var code = gmx_GmxAction.getCode(_g5[_g4++]);
					if(code != null) {
						parsers_GmlSeeker.runSyncImpl(path,code,null,out,locals,this);
					}
				}
			}
		}
		var locals = new gml_GmlLocals("properties");
		out.locals["properties"] = locals;
		var _g = 0;
		var _g1 = gmx_GmxObjectProperties.propertyList;
		while(_g < _g1.length) locals.add(_g1[_g++],"property.variable","(object property)");
		parsers_GmlSeeker.finish(path,out);
		return true;
	}
	,__class__: file_kind_gmx_KGmxEvents
});
var file_kind_gmx_KGmxExtensionAPI = function() {
	file_kind_KGml.call(this);
	this.canLambda = false;
	this.canImport = false;
	this.canHyper = false;
	this.canSyntaxCheck = false;
};
$hxClasses["file.kind.gmx.KGmxExtensionAPI"] = file_kind_gmx_KGmxExtensionAPI;
file_kind_gmx_KGmxExtensionAPI.__name__ = "file.kind.gmx.KGmxExtensionAPI";
file_kind_gmx_KGmxExtensionAPI.__super__ = file_kind_KGml;
file_kind_gmx_KGmxExtensionAPI.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = file_kind_KGml.prototype.loadCode.call(this,editor,data);
		}
		return gml_GmlExtensionAPI.get1(data);
	}
	,saveCode: function(editor,code) {
		return false;
	}
	,__class__: file_kind_gmx_KGmxExtensionAPI
});
var file_kind_gmx_KGmxMacros = function(isConfig) {
	file_kind_KGml.call(this);
	this.isConfig = isConfig;
};
$hxClasses["file.kind.gmx.KGmxMacros"] = file_kind_gmx_KGmxMacros;
file_kind_gmx_KGmxMacros.__name__ = "file.kind.gmx.KGmxMacros";
file_kind_gmx_KGmxMacros.__super__ = file_kind_KGml;
file_kind_gmx_KGmxMacros.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		var root = gmx_SfGmx.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		var notePath = gmx_GmxProject.getNotePath(editor.file.path);
		var noteReader = null;
		if(electron_FileWrap.existsSync(notePath)) {
			noteReader = new parsers_GmlReader(electron_FileWrap.readTextFileSync(notePath));
		}
		return gmx_GmxProject.getMacroCode(root,noteReader,this.isConfig);
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var root = electron_FileWrap.readGmxFileSync(editor.file.path);
		var notes = new tools_StringBuilder();
		gmx_GmxProject.setMacroCode(root,code,notes,this.isConfig);
		var notePath = gmx_GmxProject.getNotePath(editor.file.path);
		if(notes.b.length > 0) {
			electron_FileWrap.writeTextFileSync(notePath,notes.b);
		} else if(electron_FileWrap.existsSync(notePath)) {
			electron_FileWrap.unlinkSync(notePath);
		}
		return root.toGmxString();
	}
	,__class__: file_kind_gmx_KGmxMacros
});
var file_kind_gmx_KGmxMoments = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.gmx.KGmxMoments"] = file_kind_gmx_KGmxMoments;
file_kind_gmx_KGmxMoments.__name__ = "file.kind.gmx.KGmxMoments";
file_kind_gmx_KGmxMoments.__super__ = file_kind_KGml;
file_kind_gmx_KGmxMoments.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		var code = gmx_GmxTimeline.getCode(gmx_SfGmx.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data)));
		if(code != null) {
			return code;
		}
		return editor.setLoadError(gmx_GmxTimeline.errorText);
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var root = electron_FileWrap.readGmxFileSync(editor.file.path);
		if(!gmx_GmxTimeline.setCode(root,code)) {
			editor.setSaveError("Can't update GMX:\n" + gmx_GmxTimeline.errorText);
			return null;
		}
		return root.toGmxString();
	}
	,__class__: file_kind_gmx_KGmxMoments
});
var file_kind_gmx_KGmxSprite = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.gmx.KGmxSprite"] = file_kind_gmx_KGmxSprite;
file_kind_gmx_KGmxSprite.__name__ = "file.kind.gmx.KGmxSprite";
file_kind_gmx_KGmxSprite.__super__ = file_FileKind;
file_kind_gmx_KGmxSprite.prototype = $extend(file_FileKind.prototype,{
	init: function(file,data) {
		file.editor = new editors_sprite_PreviewSprite(file);
	}
	,__class__: file_kind_gmx_KGmxSprite
});
var file_kind_misc_KExtern = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.misc.KExtern"] = file_kind_misc_KExtern;
file_kind_misc_KExtern.__name__ = "file.kind.misc.KExtern";
file_kind_misc_KExtern.__super__ = file_FileKind;
file_kind_misc_KExtern.prototype = $extend(file_FileKind.prototype,{
	create: function(name,path,data,nav) {
		electron_FileWrap.openExternal(path);
		return null;
	}
	,__class__: file_kind_misc_KExtern
});
var file_kind_misc_KGLSL = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/shader";
};
$hxClasses["file.kind.misc.KGLSL"] = file_kind_misc_KGLSL;
file_kind_misc_KGLSL.__name__ = "file.kind.misc.KGLSL";
file_kind_misc_KGLSL.__super__ = file_kind_KCode;
file_kind_misc_KGLSL.prototype = $extend(file_kind_KCode.prototype,{
	init: function(file,data) {
		shaders_ShaderHighlight.nextKind = 1;
		file_kind_KCode.prototype.init.call(this,file,data);
	}
	,__class__: file_kind_misc_KGLSL
});
var file_kind_misc_KHLSL = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/shader";
};
$hxClasses["file.kind.misc.KHLSL"] = file_kind_misc_KHLSL;
file_kind_misc_KHLSL.__name__ = "file.kind.misc.KHLSL";
file_kind_misc_KHLSL.__super__ = file_kind_KCode;
file_kind_misc_KHLSL.prototype = $extend(file_kind_KCode.prototype,{
	init: function(file,data) {
		shaders_ShaderHighlight.nextKind = 2;
		file_kind_KCode.prototype.init.call(this,file,data);
	}
	,__class__: file_kind_misc_KHLSL
});
var file_kind_misc_KJavaScript = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/javascript";
};
$hxClasses["file.kind.misc.KJavaScript"] = file_kind_misc_KJavaScript;
file_kind_misc_KJavaScript.__name__ = "file.kind.misc.KJavaScript";
file_kind_misc_KJavaScript.__super__ = file_kind_KCode;
file_kind_misc_KJavaScript.prototype = $extend(file_kind_KCode.prototype,{
	__class__: file_kind_misc_KJavaScript
});
var file_kind_misc_KKeybindings = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.misc.KKeybindings"] = file_kind_misc_KKeybindings;
file_kind_misc_KKeybindings.__name__ = "file.kind.misc.KKeybindings";
file_kind_misc_KKeybindings.__super__ = file_FileKind;
file_kind_misc_KKeybindings.prototype = $extend(file_FileKind.prototype,{
	init: function(file,data) {
		file.editor = new editors_EditKeybindings(file);
	}
	,__class__: file_kind_misc_KKeybindings
});
var file_kind_misc_KMarkdown = function(dmd) {
	file_kind_KCode.call(this);
	this.isDocMd = dmd;
	this.modePath = "ace/mode/markdown";
};
$hxClasses["file.kind.misc.KMarkdown"] = file_kind_misc_KMarkdown;
file_kind_misc_KMarkdown.__name__ = "file.kind.misc.KMarkdown";
file_kind_misc_KMarkdown.__super__ = file_kind_KCode;
file_kind_misc_KMarkdown.prototype = $extend(file_kind_KCode.prototype,{
	navigate: function(editor,nav) {
		var session = editor.session;
		var len = session.getLength();
		var found = false;
		var row = 0;
		var col = 0;
		var i;
		var s;
		var defIndent = null;
		if(nav.def != null) {
			var rxDef = this.isDocMd ? new RegExp("^([ \t]*)#\\[" + nav.def.replace(tools_NativeString.escapeRx_1,"\\$1") + "\\]") : new RegExp("^[ \t]*#+[ \t]*" + nav.def.replace(tools_NativeString.escapeRx_1,"\\$1") + "[ \t]*$");
			i = 0;
			while(i < len) {
				s = session.getLine(i);
				var mt = rxDef.exec(s);
				if(mt != null) {
					row = i;
					col = s.length;
					found = true;
					if(this.isDocMd) {
						defIndent = mt[1];
					}
					break;
				} else {
					++i;
				}
			}
		}
		var ctx = nav.ctx;
		if(ctx != null) {
			var rxCtx = new RegExp(ctx.replace(tools_NativeString.escapeRx_1,"\\$1"));
			var rxEof = defIndent != null ? new RegExp("^" + defIndent + "}") : null;
			i = row;
			if(nav.ctxAfter && nav.pos != null) {
				i += nav.pos.row;
			}
			var start = found ? i : -1;
			while(i < len) {
				s = session.getLine(i);
				if(i != start && rxEof != null && rxEof.test(s)) {
					break;
				}
				var vals = rxCtx.exec(s);
				if(vals != null) {
					row = i;
					col = vals.index;
					found = true;
					break;
				} else {
					++i;
				}
			}
		}
		var pos = nav.pos;
		if(pos != null) {
			if(ctx == null && nav.def != null) {
				col = 0;
				++row;
			}
			if(!found || !nav.ctxAfter) {
				row += pos.row;
				col += pos.column;
				found = true;
			}
		}
		if(found) {
			if(nav.showAtTop) {
				Main.aceEditor.scrollToLine(row);
			}
			Main.aceEditor.gotoLine(row + 1,col);
		}
		return found;
	}
	,__class__: file_kind_misc_KMarkdown
});
var file_kind_misc_KPlain = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/text";
};
$hxClasses["file.kind.misc.KPlain"] = file_kind_misc_KPlain;
file_kind_misc_KPlain.__name__ = "file.kind.misc.KPlain";
file_kind_misc_KPlain.__super__ = file_kind_KCode;
file_kind_misc_KPlain.prototype = $extend(file_kind_KCode.prototype,{
	__class__: file_kind_misc_KPlain
});
var file_kind_misc_KPreferencesBase = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.misc.KPreferencesBase"] = file_kind_misc_KPreferencesBase;
file_kind_misc_KPreferencesBase.__name__ = "file.kind.misc.KPreferencesBase";
file_kind_misc_KPreferencesBase.__super__ = file_FileKind;
file_kind_misc_KPreferencesBase.prototype = $extend(file_FileKind.prototype,{
	navigate: function(editor,nav) {
		var ctr = editor.element;
		var target = null;
		if(nav.def != null) {
			target = ctr.querySelector("#" + nav.def);
		} else if(nav.ctx != null) {
			var legends = ctr.querySelectorAll("legend");
			var _g = 0;
			while(_g < legends.length) {
				var legend = legends[_g];
				++_g;
				if(legend.textContent == nav.ctx) {
					target = legend.parentElement;
					break;
				}
			}
		}
		if(target == null) {
			return false;
		}
		target.scrollIntoView();
		ctr.scrollTop -= 20;
		return true;
	}
	,__class__: file_kind_misc_KPreferencesBase
});
var file_kind_misc_KPreferences = function() {
	file_kind_misc_KPreferencesBase.call(this);
};
$hxClasses["file.kind.misc.KPreferences"] = file_kind_misc_KPreferences;
file_kind_misc_KPreferences.__name__ = "file.kind.misc.KPreferences";
file_kind_misc_KPreferences.loadTabState = function(tabState) {
	if(tabState.kind != "user-preferences") {
		return null;
	}
	var file = ui_Preferences.open();
	file.editor.element.scrollTop = tabState.data.top;
	return file;
};
file_kind_misc_KPreferences.__super__ = file_kind_misc_KPreferencesBase;
file_kind_misc_KPreferences.prototype = $extend(file_kind_misc_KPreferencesBase.prototype,{
	init: function(file,data) {
		file.editor = new file_kind_misc__$KPreferences_KPreferencesEditor(file);
	}
	,saveTabState: function(tab) {
		return { kind : "user-preferences", data : { top : tab.gmlFile.editor.element.scrollTop}};
	}
	,__class__: file_kind_misc_KPreferences
});
var file_kind_misc__$KPreferences_KPreferencesEditor = function(file) {
	editors_Editor.call(this,file);
	var el = ui_Preferences.element;
	if(el == null) {
		el = document.createElement("div");
		el.classList.add("popout-window");
		el.id = "preferences-editor";
		ui_Preferences.element = el;
		ui_Preferences.buildMain();
	}
	this.element = ui_Preferences.element;
	ui_Preferences.setMenu(ui_Preferences.menuMain);
};
$hxClasses["file.kind.misc._KPreferences.KPreferencesEditor"] = file_kind_misc__$KPreferences_KPreferencesEditor;
file_kind_misc__$KPreferences_KPreferencesEditor.__name__ = "file.kind.misc._KPreferences.KPreferencesEditor";
file_kind_misc__$KPreferences_KPreferencesEditor.__super__ = editors_Editor;
file_kind_misc__$KPreferences_KPreferencesEditor.prototype = $extend(editors_Editor.prototype,{
	__class__: file_kind_misc__$KPreferences_KPreferencesEditor
});
var file_kind_misc_KProjectProperties = function() {
	file_kind_misc_KPreferencesBase.call(this);
};
$hxClasses["file.kind.misc.KProjectProperties"] = file_kind_misc_KProjectProperties;
file_kind_misc_KProjectProperties.__name__ = "file.kind.misc.KProjectProperties";
file_kind_misc_KProjectProperties.loadTabState = function(tabState) {
	if(tabState.kind != "project-properties") {
		return null;
	}
	var file = ui_project_ProjectProperties.open();
	file.editor.element.scrollTop = tabState.data.top;
	return file;
};
file_kind_misc_KProjectProperties.__super__ = file_kind_misc_KPreferencesBase;
file_kind_misc_KProjectProperties.prototype = $extend(file_kind_misc_KPreferencesBase.prototype,{
	init: function(file,data) {
		file.editor = new file_kind_misc_KProjectPropertiesEditor(file,data);
	}
	,saveTabState: function(tab) {
		return { kind : "project-properties", data : { top : tab.gmlFile.editor.element.scrollTop}};
	}
	,__class__: file_kind_misc_KProjectProperties
});
var file_kind_misc_KProjectPropertiesEditor = function(file,pj) {
	editors_Editor.call(this,file);
	this.project = pj;
	if(pj.propertiesElement == null) {
		pj.propertiesElement = document.createElement("div");
		pj.propertiesElement.classList.add("popout-window");
		pj.propertiesElement.classList.add("project-properties");
		ui_project_ProjectProperties.build(pj,pj.propertiesElement);
	}
	this.element = pj.propertiesElement;
};
$hxClasses["file.kind.misc.KProjectPropertiesEditor"] = file_kind_misc_KProjectPropertiesEditor;
file_kind_misc_KProjectPropertiesEditor.__name__ = "file.kind.misc.KProjectPropertiesEditor";
file_kind_misc_KProjectPropertiesEditor.__super__ = editors_Editor;
file_kind_misc_KProjectPropertiesEditor.prototype = $extend(editors_Editor.prototype,{
	__class__: file_kind_misc_KProjectPropertiesEditor
});
var file_kind_misc_KSnippets = function() {
	file_kind_KCode.call(this);
};
$hxClasses["file.kind.misc.KSnippets"] = file_kind_misc_KSnippets;
file_kind_misc_KSnippets.__name__ = "file.kind.misc.KSnippets";
file_kind_misc_KSnippets.__super__ = file_kind_KCode;
file_kind_misc_KSnippets.prototype = $extend(file_kind_KCode.prototype,{
	loadCode: function(editor,data) {
		return ace_AceSnippets.getText(editor.file.path);
	}
	,saveCode: function(editor,code) {
		ace_AceSnippets.setText(editor.file.path,code);
		return true;
	}
	,checkForChanges: function(editor) {
		return 0;
	}
	,__class__: file_kind_misc_KSnippets
});
var file_kind_yy_KYyEvents = function() {
	file_kind_gml_KGmlEvents.call(this);
};
$hxClasses["file.kind.yy.KYyEvents"] = file_kind_yy_KYyEvents;
file_kind_yy_KYyEvents.__name__ = "file.kind.yy.KYyEvents";
file_kind_yy_KYyEvents.runSync = function(orig,src,allSync) {
	var obj = yy_YyJson.parse(src);
	var dir = haxe_io_Path.directory(orig);
	var project = gml_Project.current;
	var v23 = project.isGMS23;
	var parentName;
	var par = obj.parentObjectId;
	if(v23) {
		parentName = ((par) && (par.name));
	} else {
		parentName = ((par) && (project.yyObjectNames[par]));
	}
	if(parentName != null) {
		parsers_GmlSeeker.addObjectChild(parentName,obj.name);
	}
	if(ui_Preferences.current.assetThumbs && !allSync) {
		var spriteId = obj.spriteId;
		if(v23) {
			if(spriteId != null) {
				ui_treeview_TreeView.setThumbSprite(orig,spriteId.name);
			} else {
				ui_treeview_TreeView.resetThumb(orig);
			}
		} else if(yy_YyGUID.isValid(spriteId)) {
			var res = project.yyResources[spriteId];
			ui_treeview_TreeView.setThumbSprite(orig,res != null ? res.Value.resourceName : null);
		} else {
			ui_treeview_TreeView.resetThumb(orig);
		}
	}
	var out = new parsers_GmlSeekData(file_kind_yy_KYyEvents.inst);
	var eventsLeft = 0;
	var eventFiles = [];
	var _g = 0;
	var _g1 = obj.eventList;
	while(_g < _g1.length) {
		var ed = yy_YyObjectEvent.unpack(_g1[_g++],obj);
		var full = haxe_io_Path.join([dir,yy_YyEvent.toPath(ed.type,ed.num,ed.id)]);
		eventsLeft += 1;
		eventFiles.push({ name : yy_YyEvent.toString(ed.type,ed.num,ed.obj), full : full});
	}
	var locals = new gml_GmlLocals("properties");
	out.locals["properties"] = locals;
	var _g = 0;
	var _g1 = yy_YyObjectProperties.propertyList;
	while(_g < _g1.length) locals.add(_g1[_g++],"property.variable","(object property)");
	var _g = 0;
	var _g1 = yy_YyObjectProperties.typeList;
	while(_g < _g1.length) locals.add(_g1[_g++],"property.namespace","(object variable type)");
	var _g = 0;
	var _g1 = yy_YyObjectProperties.assetTypes;
	while(_g < _g1.length) locals.add(_g1[_g++].name,"property.namespace","(asset type)");
	out.addObjectHint(obj.name,parentName);
	var getPropType = function(prop) {
		switch(prop.varType) {
		case 0:
			return gml_type_GmlTypeDef.number;
		case 1:
			return gml_type_GmlTypeDef.int;
		case 2:
			return gml_type_GmlTypeDef.string;
		case 3:
			return gml_type_GmlTypeDef.bool;
		case 5:
			var et = [];
			if(v23) {
				var _this = prop.filters;
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = _this[i].trim();
				}
				if(yy_YyObjectProperties.isAllAssetTypes23(result) || result.length == 0) {
					return gml_type_GmlTypeDef.asset;
				}
				var _g = 0;
				var _g1 = prop.filters;
				while(_g < _g1.length) {
					var ft = _g1[_g];
					++_g;
					ft = ft.trim();
					et.push(gml_type_GmlTypeDef.simple(ft.substring(2).toLowerCase()));
				}
			} else {
				var flags = prop.resourceFilter;
				if(flags == 1023 || flags == 0) {
					return gml_type_GmlTypeDef.asset;
				}
				var _g = 0;
				var _g1 = yy_YyObjectProperties.assetTypes;
				while(_g < _g1.length) {
					var tp = _g1[_g];
					++_g;
					if((flags & tp.flag) == 0) {
						continue;
					}
					et.push(gml_type_GmlTypeDef.simple(tp.name));
				}
			}
			if(et.length > 1) {
				return gml_type_GmlType.TEither(et);
			} else if(et.length == 1) {
				return et[0];
			} else {
				return null;
			}
			break;
		case 7:
			return gml_type_GmlTypeDef.simple("color");
		default:
			return null;
		}
	};
	if(obj.properties != null) {
		var _g = 0;
		var _g1 = obj.properties;
		while(_g < _g1.length) {
			var prop = _g1[_g];
			++_g;
			var fdName = v23 ? prop.name : prop.varName;
			var fdType = getPropType(prop);
			var compText = "variable definition\n" + "from " + obj.name;
			if(fdType != null) {
				compText += "\ntype " + gml_type_GmlTypeTools.toString(fdType);
			}
			var hint = new parsers_GmlSeekDataHint(obj.name,true,fdName,{ name : fdName, value : fdName, score : 0, meta : "variable", doc : compText},null,parentName,fdType);
			out.fieldHints.set(hint.key,hint);
		}
	}
	if(eventFiles.length == 0) {
		parsers_GmlSeeker.finish(orig,out);
		return true;
	}
	var _g = 0;
	while(_g < eventFiles.length) {
		var file = eventFiles[_g];
		++_g;
		var name = [file.name];
		var full = file.full;
		if(!allSync) {
			electron_FileWrap.readTextFile(full,(function(name) {
				return function(err,code) {
					if(err == null) {
						try {
							var locals = new gml_GmlLocals(name[0]);
							out.locals[name[0]] = locals;
							parsers_GmlSeeker.runSyncImpl(orig,code,null,out,locals,file_kind_yy_KYyEvents.inst);
						} catch( _g ) {
						}
					}
					if((eventsLeft -= 1) <= 0) {
						parsers_GmlSeeker.finish(orig,out);
						parsers_GmlSeeker.runNext();
					}
				};
			})(name));
		} else {
			try {
				var code = electron_FileWrap.readTextFileSync(full);
				var locals = new gml_GmlLocals(name[0]);
				out.locals[name[0]] = locals;
				parsers_GmlSeeker.runSyncImpl(orig,code,null,out,locals,file_kind_yy_KYyEvents.inst);
			} catch( _g1 ) {
			}
		}
	}
	if(allSync) {
		parsers_GmlSeeker.finish(orig,out);
	}
	return false;
};
file_kind_yy_KYyEvents.__super__ = file_kind_gml_KGmlEvents;
file_kind_yy_KYyEvents.prototype = $extend(file_kind_gml_KGmlEvents.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = yy_YyJson.parse(file_kind_gml_KGmlEvents.prototype.loadCode.call(this,editor,data));
		}
		var file = editor.file;
		file.extraFiles.length = 0;
		return yy_YyObject.getCode(data,file.path,file.extraFiles);
	}
	,postproc: function(editor,code) {
		code = file_kind_gml_KGmlEvents.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var obj = electron_FileWrap.readYyFileSync(editor.file.path);
		if(!yy_YyObject.setCode(obj,editor.file.path,code)) {
			editor.setSaveError("Can't update YY:\n" + yy_YyObject.errorText);
			return null;
		}
		return yy_YyJson.stringify(obj,gml_Project.current.yyExtJson);
	}
	,index: function(path,content,main,sync) {
		return file_kind_yy_KYyEvents.runSync(path,content,sync);
	}
	,__class__: file_kind_yy_KYyEvents
});
var file_kind_yy_KYyExtension = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYyExtension"] = file_kind_yy_KYyExtension;
file_kind_yy_KYyExtension.__name__ = "file.kind.yy.KYyExtension";
file_kind_yy_KYyExtension.__super__ = file_FileKind;
file_kind_yy_KYyExtension.prototype = $extend(file_FileKind.prototype,{
	index: function(full,content,main,sync) {
		var ext = yy_YyJson.parse(content);
		var extDirRel = gml_Project.current.relPath(full);
		var extDir = haxe_io_Path.directory(full);
		var parentPath = ext.parent.path;
		if(parentPath.endsWith(".yy")) {
			parentPath = parentPath.substring(0,parentPath.length - 3);
		}
		var parentDir = yy_YyLoader.folderMap[parentPath];
		if(parentDir == null) {
			parentDir = ui_treeview_TreeView.find(false,{ rel : parentPath});
		}
		if(parentDir == null) {
			return true;
		}
		var treeDir = ui_treeview_TreeView.makeAssetDir(ext.name,parentPath + "/" + ext.name,"extension");
		treeDir.setAttribute("data-full-path",full);
		treeDir.setAttribute("data-ident",ext.name);
		yy_YyLoader.itemsToInsert.push({ item : treeDir, dir : parentDir});
		var _g = 0;
		var _g1 = ext.files;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var fileName = file.filename;
			var filePath = haxe_io_Path.join([extDir,fileName]);
			var fileItem = ui_treeview_TreeView.makeAssetItem(fileName,haxe_io_Path.join([extDirRel,fileName]),filePath,"file");
			yy_YyLoader.itemsToInsert.push({ item : fileItem, dir : treeDir});
			var isGmlFile = haxe_io_Path.extension(fileName).toLowerCase() == "gml";
			var _g2 = 0;
			var _g3 = file.functions;
			while(_g2 < _g3.length) {
				var func = _g3[_g2];
				++_g2;
				var name = func.name;
				if(!file_kind_yy_KYyExtension.rxValidName.test(name)) {
					continue;
				}
				var help = func.help;
				gml_GmlAPI.extKind[name] = "extfunction";
				gml_GmlAPI.extArgc[name] = func.argCount < 0 ? func.argCount : func.args.length;
				if(help != null && help != "" && !func.hidden) {
					gml_GmlAPI.extCompAdd({ name : name, value : name, score : 0, meta : "function", doc : help});
					gml_GmlAPI.extDoc[name] = gml_funcdoc_GmlFuncDocParser.parse(help,null);
					if(isGmlFile) {
						gml_GmlAPI.gmlLookupItems.push({ value : name, meta : "extfunction"});
					}
				}
				if(isGmlFile) {
					gml_GmlAPI.gmlLookup[name] = { path : filePath, sub : name, row : 0};
				}
			}
			if(isGmlFile) {
				parsers_GmlSeeker.run(filePath,"",file_kind_gml_KGmlExtension.inst);
			}
			var _g4 = 0;
			var _g5 = file.constants;
			while(_g4 < _g5.length) {
				var mcr = _g5[_g4];
				++_g4;
				var name1 = mcr.name;
				if(!file_kind_yy_KYyExtension.rxValidName.test(name1)) {
					continue;
				}
				gml_GmlAPI.extKind[name1] = "extmacro";
				if(!mcr.hidden) {
					gml_GmlAPI.extCompAdd({ name : name1, value : name1, score : 0, meta : "macro", doc : mcr.value});
				}
			}
		}
		return true;
	}
	,__class__: file_kind_yy_KYyExtension
});
var file_kind_yy_KYyExtensionAPI = function() {
	file_kind_KGml.call(this);
	this.canLambda = false;
	this.canImport = false;
	this.canHyper = false;
	this.canSyntaxCheck = false;
};
$hxClasses["file.kind.yy.KYyExtensionAPI"] = file_kind_yy_KYyExtensionAPI;
file_kind_yy_KYyExtensionAPI.__name__ = "file.kind.yy.KYyExtensionAPI";
file_kind_yy_KYyExtensionAPI.__super__ = file_kind_KGml;
file_kind_yy_KYyExtensionAPI.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = yy_YyJson.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		}
		return gml_GmlExtensionAPI.get2(data);
	}
	,saveCode: function(editor,code) {
		return false;
	}
	,__class__: file_kind_yy_KYyExtensionAPI
});
var file_kind_yy_KYyFont = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYyFont"] = file_kind_yy_KYyFont;
file_kind_yy_KYyFont.__name__ = "file.kind.yy.KYyFont";
file_kind_yy_KYyFont.__super__ = file_FileKind;
file_kind_yy_KYyFont.prototype = $extend(file_FileKind.prototype,{
	init: function(file,data) {
		file.editor = new editors_EditFont(file);
	}
	,__class__: file_kind_yy_KYyFont
});
var file_kind_yy_KYyMoments = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.yy.KYyMoments"] = file_kind_yy_KYyMoments;
file_kind_yy_KYyMoments.__name__ = "file.kind.yy.KYyMoments";
file_kind_yy_KYyMoments.__super__ = file_kind_KGml;
file_kind_yy_KYyMoments.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = yy_YyJson.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		}
		var file = editor.file;
		file.extraFiles.length = 0;
		return yy_YyTimeline.getCode(data,file.path,file.extraFiles);
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var tl = electron_FileWrap.readYyFileSync(editor.file.path);
		if(!yy_YyTimeline.setCode(tl,editor.file.path,code)) {
			editor.setSaveError("Can't update YY:\n" + yy_YyTimeline.errorText);
			return null;
		}
		return yy_YyJson.stringify(tl,gml_Project.current.yyExtJson);
	}
	,__class__: file_kind_yy_KYyMoments
});
var file_kind_yy_KYyRoomCCs = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.yy.KYyRoomCCs"] = file_kind_yy_KYyRoomCCs;
file_kind_yy_KYyRoomCCs.__name__ = "file.kind.yy.KYyRoomCCs";
file_kind_yy_KYyRoomCCs.__super__ = file_kind_KGml;
file_kind_yy_KYyRoomCCs.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = yy_YyJson.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		}
		var file = editor.file;
		file.extraFiles.length = 0;
		var code = yy_YyRooms.getCCs(file.path,data,file.extraFiles);
		parsers_GmlSeeker.runSync(file.path,code,"",file.kind);
		return code;
	}
	,saveCode: function(editor,code) {
		if(code == null) {
			return null;
		}
		if(!yy_YyRooms.setCCs(editor.file.path,code,editor.file.extraFiles)) {
			editor.setSaveError("Can't update CCs:\n" + yy_YyRooms.errorText);
			return false;
		}
		return true;
	}
	,__class__: file_kind_yy_KYyRoomCCs
});
var file_kind_yy_KYyShader = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYyShader"] = file_kind_yy_KYyShader;
file_kind_yy_KYyShader.__name__ = "file.kind.yy.KYyShader";
file_kind_yy_KYyShader.__super__ = file_FileKind;
file_kind_yy_KYyShader.prototype = $extend(file_FileKind.prototype,{
	create: function(name,path,data,nav) {
		if(data == null) {
			data = electron_FileWrap.readYyFileSync(path);
		}
		var shKind;
		switch(data.type) {
		case 2:case 4:
			shKind = file_kind_misc_KHLSL.inst;
			break;
		default:
			shKind = file_kind_misc_KGLSL.inst;
		}
		var nav1 = { kind : shKind};
		if(nav != null) {
			nav1.pos = nav.pos;
			nav1.ctx = nav.ctx;
		}
		var pathNx = haxe_io_Path.withoutExtension(path);
		if(nav != null) {
			switch(nav.def) {
			case "fragment":
				return gml_file_GmlFile.open(name + ".fsh",pathNx + ".fsh",nav1);
			case "vertex":
				return gml_file_GmlFile.open(name + ".vsh",pathNx + ".vsh",nav1);
			}
		}
		gml_file_GmlFile.open(name + ".vsh",pathNx + ".vsh",nav1);
		gml_file_GmlFile.open(name + ".fsh",pathNx + ".fsh",nav1);
		return null;
	}
	,__class__: file_kind_yy_KYyShader
});
var file_kind_yy_KYySound = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYySound"] = file_kind_yy_KYySound;
file_kind_yy_KYySound.__name__ = "file.kind.yy.KYySound";
file_kind_yy_KYySound.__super__ = file_FileKind;
file_kind_yy_KYySound.prototype = $extend(file_FileKind.prototype,{
	init: function(file,data) {
		file.editor = new editors_EditSound(file);
	}
	,__class__: file_kind_yy_KYySound
});
var file_kind_yy_KYySprite = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYySprite"] = file_kind_yy_KYySprite;
file_kind_yy_KYySprite.__name__ = "file.kind.yy.KYySprite";
file_kind_yy_KYySprite.__super__ = file_FileKind;
file_kind_yy_KYySprite.prototype = $extend(file_FileKind.prototype,{
	init: function(file,data) {
		if(gml_Project.current.yyUsesGUID) {
			file.editor = new editors_sprite_PreviewSprite(file);
		} else {
			file.editor = new editors_sprite_EditSprite(file);
		}
	}
	,__class__: file_kind_yy_KYySprite
});
var file_kind_yy_KYyUnknown = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYyUnknown"] = file_kind_yy_KYyUnknown;
file_kind_yy_KYyUnknown.__name__ = "file.kind.yy.KYyUnknown";
file_kind_yy_KYyUnknown.__super__ = file_FileKind;
file_kind_yy_KYyUnknown.prototype = $extend(file_FileKind.prototype,{
	index: function(path,content,main,sync) {
		var project = gml_Project.current;
		var full = project.fullPath(path);
		file_kind_yy_KYyUnknown.rxParentPath.exec(content);
		var resource = null;
		var mt = file_kind_yy_KYyUnknown.rxParentPath.exec(content);
		var parentPath;
		if(mt == null) {
			resource = yy_YyJson.parse(content);
			parentPath = resource.parent.path;
		} else {
			parentPath = mt[1];
		}
		var resType;
		if(resource == null) {
			var mt = file_kind_yy_KYyUnknown.rxResourceType.exec(content);
			if(mt == null) {
				resource = yy_YyJson.parse(content);
				resType = resource.resourceType;
			} else {
				resType = mt[1];
			}
		} else {
			resType = resource.resourceType;
		}
		var detect = file_kind_KYy.inst.detect(path,resource != null ? resource : content);
		if(parentPath.endsWith(".yy")) {
			parentPath = parentPath.substring(0,parentPath.length - 3);
		}
		var name;
		if(resource == null) {
			var mt = file_kind_yy_KYyUnknown.rxName.exec(content);
			if(mt == null) {
				resource = yy_YyJson.parse(content);
				name = resource.name;
			} else {
				name = mt[1];
			}
		} else {
			name = resource.name;
		}
		project.yyResourceTypes[name] = resType;
		var dir = yy_YyLoader.folderMap[parentPath];
		if(dir == null) {
			dir = ui_treeview_TreeView.find(false,{ rel : parentPath});
		}
		if(dir != null) {
			var makeEl = true;
			var kind = resType.substring(2).toLowerCase();
			switch(resType) {
			case "GMNotes":
				gml_GmlAPI.gmlLookupItems.push({ value : name, meta : "asset." + kind});
				break;
			case "GMFont":case "GMObject":case "GMPath":case "GMRoom":case "GMScript":case "GMShader":case "GMSound":case "GMSprite":case "GMTileSet":case "GMTimeline":
				var aceKind = "asset." + kind;
				gml_GmlAPI.gmlKind[name] = aceKind;
				gml_GmlAPI.gmlLookupItems.push({ value : name, meta : aceKind});
				if(resType != "GMScript") {
					var next = { name : name, value : name, score : 0, meta : kind, doc : null};
					gml_GmlAPI.gmlComp.push(next);
					gml_GmlAPI.gmlAssetComp[name] = next;
				}
				break;
			}
			switch(resType) {
			case "GMExtension":
				makeEl = false;
				break;
			case "GMNotes":
				full = haxe_io_Path.withExtension(full,"txt");
				if(electron_FileWrap.existsSync(full)) {
					content = electron_FileWrap.readTextFileSync(full);
				} else {
					content = "";
				}
				detect.kind = file_kind_misc_KPlain.inst;
				break;
			case "GMScript":
				full = haxe_io_Path.withExtension(full,"gml");
				content = electron_FileWrap.readTextFileSync(full);
				break;
			}
			if(makeEl) {
				var item = ui_treeview_TreeView.makeAssetItem(name,path,full,kind);
				item.yyOrder = tools_Dictionary.defget(gml_Project.current.yyOrder,name,0);
				item.yyOpenAs = detect.kind;
				yy_YyLoader.itemsToInsert.push({ item : item, dir : dir});
				yy_YyLoader.applyAssetColour(item,project.relPath(path));
				if(resType == "GMSprite") {
					ui_treeview_TreeView.setThumbSprite(full,name,item);
				}
			}
		} else {
			console.error("`" + path + "` has missing parent `" + parentPath + "`");
		}
		return detect.kind.index(full,content,main,sync);
	}
	,__class__: file_kind_yy_KYyUnknown
});
var gmx_GmxActionImpl = function() {
};
$hxClasses["gmx.GmxActionImpl"] = gmx_GmxActionImpl;
gmx_GmxActionImpl.__name__ = "gmx.GmxActionImpl";
gmx_GmxActionImpl.prototype = {
	getApplyTo: function(action) {
		return action.findText("whoName");
	}
	,getLibraryID: function(action) {
		return action.findText("libid");
	}
	,getActionID: function(action) {
		return Std.parseInt(action.findText("id"));
	}
	,getFunctionName: function(action) {
		return action.findText("functionname");
	}
	,getNotFlag: function(action) {
		return action.find("isnot").text == "1";
	}
	,getFirstArgString: function(action) {
		return action.find("arguments").find("argument").find("string").text;
	}
	,getArgs: function(action) {
		return action.find("arguments").findAll("argument");
	}
	,getArgString: function(arg) {
		return arg.find("string").text;
	}
	,getArgScript: function(arg) {
		return arg.find("script").text;
	}
	,getCode: function(action) {
		this.errorText = null;
		if(this.getLibraryID(action) != "1") {
			this.errorText = "Actions from user-created libraries are not supported.";
			return null;
		}
		if(this.getApplyTo(action) != "self") {
			this.errorText = "Non-self-applied actions are not supported.";
			return null;
		}
		var aid = this.getActionID(action);
		var a;
		switch(aid) {
		case 203:
			a = "action_kill_object";
			break;
		case 408:
			a = "action_if" + (this.getNotFlag(action) ? "_not " : " ") + this.getFirstArgString(action);
			break;
		case 422:
			a = "{";
			break;
		case 424:
			a = "}";
			break;
		case 601:
			var args = this.getArgs(action);
			a = "action_execute_script " + this.getArgScript(args[0]);
			var _g = 1;
			var _g1 = args.length;
			while(_g < _g1) a += ", " + this.getArgString(args[_g++]);
			break;
		case 603:
			return this.getFirstArgString(action);
		case 604:
			a = "action_inherited";
			break;
		case 605:
			a = "// " + this.getFirstArgString(action);
			break;
		default:
			this.errorText = "DnD action #" + aid + " `" + this.getFunctionName(action) + "` is not supported.";
			return null;
		}
		return "#action " + a + "\r\n";
	}
	,makeDndBlock: function(d) {
		var action = new gmx_SfGmx("action");
		var c = d.libid;
		action.addTextChild("libid","" + Std.string(c != null ? c : 1));
		action.addTextChild("id","" + d.id);
		var c = d.kind;
		action.addTextChild("kind","" + Std.string(c != null ? c : 0));
		action.addTextChild("userelative",d.rel != null ? "-1" : "0");
		action.addTextChild("isquestion",d.isQuestion ? "-1" : "0");
		action.addTextChild("useapplyto",d.who != null ? "-1" : "0");
		var c = d.exeType;
		action.addTextChild("exetype","" + Std.string(c != null ? c : 1));
		var c = d.fn;
		action.addTextChild("functionname","" + Std.string(c != null ? c : ""));
		var c = d.code;
		action.addTextChild("codestring","" + Std.string(c != null ? c : ""));
		var c = d.who;
		action.addTextChild("whoName","" + Std.string(c != null ? c : "self"));
		action.addTextChild("relative",d.rel ? "1" : "0");
		action.addTextChild("isnot",d.not ? "1" : "0");
		if(d.args != null) {
			var $arguments = new gmx_SfGmx("arguments");
			action.children.push($arguments);
			var _g = 0;
			var _g1 = d.args;
			while(_g < _g1.length) {
				var arg = _g1[_g];
				++_g;
				var argument = new gmx_SfGmx("argument");
				var kind = arg.kind;
				if(kind == null) {
					kind = 1;
				}
				argument.addTextChild("kind","" + kind);
				if(kind == 9) {
					argument.addTextChild("script",arg.s);
				} else if(arg.s != null) {
					argument.addTextChild("string",arg.s);
				}
				$arguments.children.push(argument);
			}
		}
		return action;
	}
	,makeDndFuncBlock: function(id,fn,who) {
		return this.makeDndBlock({ id : id, fn : fn, who : who, exeType : 1});
	}
	,makeCodeBlock: function(code) {
		this.errorText = null;
		if(!gmx_GmxActionImpl.rxActionPre.test(code)) {
			return this.makeDndBlock({ id : 603, kind : 7, exeType : 2, who : "self", args : [{ s : code}]});
		}
		var actData = code.substring(7).trim();
		if(actData.startsWith("//")) {
			actData = actData.substring(HxOverrides.cca(actData,2) == 32 ? 3 : 2);
			return this.makeDndBlock({ id : 605, kind : 0, exeType : 0, args : [{ s : actData}]});
		}
		var actMt = gmx_GmxActionImpl.rxActionSplit.exec(actData);
		if(actMt == null) {
			this.errorText = "Action `" + code.trimRight() + "` is not supported.";
			return null;
		}
		var actName = actMt[1];
		actData = actMt[2];
		switch(actName) {
		case "action_execute_script":
			var args = [];
			var first = true;
			var q = new parsers_GmlReader(actData);
			var depth = 0;
			var start = 0;
			while(q.pos < q.length) {
				if(q.skipCommon_inline() >= 0) {
					continue;
				}
				switch(q.source.charCodeAt(q.pos++)) {
				case 44:
					if(depth == 0) {
						var s = q.source.substring(start,q.pos - 1);
						if(first) {
							first = false;
							args.push({ kind : 9, s : s});
						} else {
							args.push({ kind : 0, s : s});
						}
						if(q.source.charCodeAt(q.pos) == 32) {
							q.pos += 1;
						}
						start = q.pos;
					}
					break;
				case 40:case 91:
					++depth;
					break;
				case 41:case 93:
					--depth;
					break;
				default:
				}
			}
			var s = q.source.substring(start,q.pos);
			if(first) {
				args.push({ kind : 9, s : s});
			} else {
				args.push({ kind : 0, s : s});
			}
			return this.makeDndBlock({ id : 601, fn : "action_execute_script", who : "self", args : args});
		case "action_if":case "action_if_not":
			return this.makeDndBlock({ id : 408, isQuestion : true, exeType : 1, fn : "action_if", who : "self", not : actName == "action_if_not", args : [{ s : actData}]});
		case "action_inherited":
			if(actData != "") {
				this.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return this.makeDndFuncBlock(604,"action_inherited",null);
		case "action_kill_object":
			if(actData != "") {
				this.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return this.makeDndFuncBlock(203,"action_kill_object","self");
		case "{":
			if(actData != "") {
				this.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return this.makeDndBlock({ id : 422, kind : 1});
		case "}":
			if(actData != "") {
				this.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return this.makeDndBlock({ id : 424, kind : 2});
		default:
			this.errorText = "Action `" + code.trimRight() + "` is not supported.";
			return null;
		}
	}
	,__class__: gmx_GmxActionImpl
};
var gmk_GmkActionImpl = function() {
	gmx_GmxActionImpl.call(this);
};
$hxClasses["gmk.GmkActionImpl"] = gmk_GmkActionImpl;
gmk_GmkActionImpl.__name__ = "gmk.GmkActionImpl";
gmk_GmkActionImpl.__super__ = gmx_GmxActionImpl;
gmk_GmkActionImpl.prototype = $extend(gmx_GmxActionImpl.prototype,{
	getLibraryID: function(action) {
		return action.attrMap["library"];
	}
	,getActionID: function(action) {
		return Std.parseInt(action.attrMap["id"]);
	}
	,getApplyTo: function(action) {
		var val = action.findText("appliesTo");
		if(val.startsWith(".")) {
			return val.substring(1);
		}
		return val;
	}
	,getArgs: function(action) {
		return action.find("arguments").findAll("argument");
	}
	,getArgString: function(arg) {
		return arg.text;
	}
	,getArgScript: function(arg) {
		return arg.text;
	}
	,getFirstArgString: function(action) {
		return action.find("arguments").find("argument").text;
	}
	,getFunctionName: function(action) {
		return action.findText("functionName");
	}
	,getNotFlag: function(action) {
		return action.findText("not") == "true";
	}
	,__class__: gmk_GmkActionImpl
});
var gmk_GmkAction = function() { };
$hxClasses["gmk.GmkAction"] = gmk_GmkAction;
gmk_GmkAction.__name__ = "gmk.GmkAction";
gmk_GmkAction.getCode = function(action) {
	var code = gmk_GmkAction.impl.getCode(action);
	gmk_GmkAction.errorText = gmk_GmkAction.impl.errorText;
	return code;
};
var gmk_GmkEvent = function() { };
$hxClasses["gmk.GmkEvent"] = gmk_GmkEvent;
gmk_GmkEvent.__name__ = "gmk.GmkEvent";
gmk_GmkEvent.compare = function(a,b) {
	var aCat = gmk_GmkEvent.categories.indexOf(a.attrMap["category"]);
	var bCat = gmk_GmkEvent.categories.indexOf(b.attrMap["category"]);
	if(aCat != bCat) {
		return aCat - bCat;
	}
	var aWith = a.attrMap["with"];
	var bWith = b.attrMap["with"];
	if(aWith != bWith) {
		if(aWith < bWith) {
			return -1;
		} else {
			return 1;
		}
	}
	return Std.parseInt(a.attrMap["id"]) - Std.parseInt(b.attrMap["id"]);
};
gmk_GmkEvent.toStringGmk = function(event) {
	var obj = event.attrMap["with"];
	return parsers_GmlEvent.toString(gmk_GmkEvent.categories.indexOf(event.attrMap["category"]),obj == null ? Std.parseInt(event.attrMap["id"]) : null,obj);
};
gmk_GmkEvent.isEmpty = function(event) {
	var _g = 0;
	var _g1 = event.findAll("actions");
	while(_g < _g1.length) if(_g1[_g++].find("action") != null) {
		return false;
	}
	return true;
};
gmk_GmkEvent.getCode = function(event) {
	var actions = [];
	var _g = 0;
	var _g1 = event.findAll("actions");
	while(_g < _g1.length) {
		var _g2 = 0;
		var _g3 = _g1[_g++].findAll("action");
		while(_g2 < _g3.length) actions.push(_g3[_g2++]);
	}
	if(actions.length == 0) {
		return "";
	}
	var out = "";
	var addAction = function(action,head) {
		var code = gmk_GmkAction.getCode(action);
		if(code == null) {
			return false;
		}
		if(!code.endsWith("\n")) {
			code += "\n";
		}
		if(head && !code.startsWith("#action ")) {
			var addSection = true;
			code = gmk_GmkEvent.rxHeader.map(code,function(e) {
				var cap = e.matched(1);
				out += "#section";
				if(HxOverrides.cca(cap,0) != 32) {
					out += "|";
				}
				out += cap;
				addSection = false;
				return "";
			});
			if(addSection) {
				out += "#section\n";
			}
		}
		out += code;
		return true;
	};
	if(!addAction(actions[0],false)) {
		return null;
	}
	var _g = 1;
	var _g1 = actions.length;
	while(_g < _g1) if(!addAction(actions[_g++],true)) {
		return null;
	}
	return out;
};
var gmk_GmkLoader = function() { };
$hxClasses["gmk.GmkLoader"] = gmk_GmkLoader;
gmk_GmkLoader.__name__ = "gmk.GmkLoader";
gmk_GmkLoader.run = function(project) {
	parsers_GmlSeeker.start();
	gml_GmlAPI.gmlClear();
	gml_GmlAPI.extClear();
	project.resourceTypes = Object.create(null);
	var seekSoon = [];
	var loadRec = null;
	loadRec = function(dir,kind,suffix,parDir) {
		var rxml = "" + dir + "/_resources.list.xml";
		if(!project.existsSync(rxml)) {
			return;
		}
		var _g = 0;
		var _g1 = project.readGmxFileSync(rxml).children;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var name = item.attrMap["name"];
			var fname = item.attrMap["filename"];
			if(fname == null) {
				fname = name;
			}
			var rel = "" + dir + "/" + fname;
			if(item.attrMap["type"] == "GROUP") {
				var tvDir = ui_treeview_TreeView.makeAssetDir(name,rel,kind);
				loadRec(rel,kind,suffix,tvDir);
				parDir.treeItems.appendChild(tvDir);
				continue;
			}
			project.resourceTypes[name] = kind;
			rel += suffix;
			var full = project.fullPath(rel);
			if(name == fname) {
				var assetKind = "asset." + kind;
				gml_GmlAPI.gmlLookupItems.push({ value : name, meta : assetKind});
				gml_GmlAPI.gmlKind[name] = assetKind;
				var ac = { name : name, value : name, score : 0, meta : kind, doc : null};
				gml_GmlAPI.gmlAssetComp[name] = ac;
				gml_GmlAPI.gmlComp.push(ac);
			}
			var openAs = null;
			var indexKind = null;
			switch(kind) {
			case "background":
				full = haxe_io_Path.withExtension(full,"png");
				break;
			case "object":
				indexKind = file_kind_gmk_KGmkEvents.inst;
				openAs = indexKind;
				break;
			case "script":
				indexKind = file_kind_gml_KGmlScript.inst;
				break;
			case "sprite":
				full = haxe_io_Path.withExtension(full,"images");
				break;
			}
			if(indexKind != null) {
				seekSoon.push({ full : full, name : name, kind : indexKind});
			}
			var tvItem = ui_treeview_TreeView.makeAssetItem(name,rel,full,kind);
			if(openAs != null) {
				tvItem.yyOpenAs = openAs;
			}
			parDir.treeItems.appendChild(tvItem);
			if(ui_Preferences.current.assetThumbs) {
				switch(kind) {
				case "background":
					ui_treeview_TreeView.setThumb(null,project.getImageURL("Backgrounds/" + fname + ".png"),tvItem);
					break;
				case "sprite":
					ui_treeview_TreeView.setThumb(null,project.getImageURL("sprites/" + fname + ".images/image 0.png"),tvItem);
					break;
				}
			}
		}
	};
	var loadRecRoot = function(dir,kind,suffix) {
		var tvDir = ui_treeview_TreeView.makeAssetDir(dir,dir,kind);
		loadRec(dir,kind,suffix,tvDir);
		ui_treeview_TreeView.element.appendChild(tvDir);
	};
	loadRecRoot("Sprites","sprite",".xml");
	loadRecRoot("Sounds","sound",".xml");
	loadRecRoot("Backgrounds","background",".xml");
	loadRecRoot("Paths","path",".xml");
	loadRecRoot("Scripts","script",".gml");
	loadRecRoot("Fonts","font",".xml");
	loadRecRoot("Time Lines","timeline",".xml");
	loadRecRoot("Objects","object",".xml");
	loadRecRoot("Rooms","room",".xml");
	var _g = 0;
	while(_g < seekSoon.length) {
		var item = seekSoon[_g];
		++_g;
		parsers_GmlSeeker.run(item.full,item.name,item.kind);
	}
};
var gmk_GmkObject = function() { };
$hxClasses["gmk.GmkObject"] = gmk_GmkObject;
gmk_GmkObject.__name__ = "gmk.GmkObject";
gmk_GmkObject.getCode = function(gmx,path) {
	gmk_GmkObject.errorText = null;
	var dir = haxe_io_Path.withExtension(path,"events");
	if(!electron_FileWrap.existsSync(dir)) {
		return "";
	}
	var out = "";
	var errors = "";
	var events = [];
	var _g = 0;
	var _g1 = electron_FileWrap.readdirSync(dir);
	while(_g < _g1.length) events.push(electron_FileWrap.readGmxFileSync(_g1[_g++].relPath));
	events.sort(gmk_GmkEvent.compare);
	var _g = 0;
	while(_g < events.length) {
		var event = events[_g];
		++_g;
		if(out != "") {
			out += "\n";
		}
		var name = gmk_GmkEvent.toStringGmk(event);
		out += "#event " + name;
		if(gmk_GmkEvent.isEmpty(event)) {
			continue;
		}
		var code = gmk_GmkEvent.getCode(event);
		if(code != null) {
			var pair = parsers_GmlHeader.parse(code,gml_GmlVersion.v1);
			if(pair.name != null) {
				out += pair.name;
			}
			out += "\n" + pair.code;
		} else {
			errors += "Unreadable action in " + name + ":\n";
			errors += gmk_GmkAction.errorText + "\n";
		}
	}
	if(errors != "") {
		gmk_GmkObject.errorText = errors;
		return null;
	} else {
		return tools_NativeString.trimTrailRn(out);
	}
};
gmk_GmkObject.setCode = function(gmx,path,code) {
	gmk_GmkObject.errorText = "Changing GMK objects is not supported.";
	return false;
};
var gmk_GmkSearcher = function() { };
$hxClasses["gmk.GmkSearcher"] = gmk_GmkSearcher;
gmk_GmkSearcher.__name__ = "gmk.GmkSearcher";
gmk_GmkSearcher.run = function(project,fn,done,opt) {
	electron_FileWrap.readGmxFileSync(project.path);
	var filesLeft = 1;
	var addError = function(s) {
		if(opt.errors != null) {
			opt.errors += "\n" + s;
		} else {
			opt.errors = s;
		}
	};
	var seekRec = null;
	seekRec = function(dir,kind,suffix) {
		var rxml = "" + dir + "/_resources.list.xml";
		if(!project.existsSync(rxml)) {
			return;
		}
		var _g = 0;
		var _g1 = project.readGmxFileSync(rxml).children;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var name = [item.attrMap["name"]];
			var fname = item.attrMap["filename"];
			if(fname == null) {
				fname = name[0];
			}
			var rel = ["" + dir + "/" + fname];
			if(item.attrMap["type"] == "GROUP") {
				seekRec(rel[0],kind,suffix);
				continue;
			}
			rel[0] += suffix;
			switch(kind) {
			case "object":
				filesLeft += 1;
				project.readGmxFile(rel[0],(function(rel,name) {
					return function(e,xml) {
						if(xml == null) {
							if((filesLeft -= 1) <= 0) {
								done();
							}
							return;
						}
						var gml0 = gmk_GmkObject.getCode(xml,rel[0]);
						if(gml0 == null) {
							if((filesLeft -= 1) <= 0) {
								done();
							}
							return;
						}
						var gml1 = fn(name[0],rel[0],gml0);
						if(gml1 != null && gml1 != gml0) {
							if(gmk_GmkObject.setCode(xml,rel[0],gml1)) {
								project.writeGmkSplitFileSync(rel[0],xml);
							} else {
								addError("Failed to modify " + name[0] + ":\n" + gmk_GmkObject.errorText);
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(rel,name));
				break;
			case "script":
				filesLeft += 1;
				project.readTextFile(rel[0],(function(rel,name) {
					return function(e,gml0) {
						if(e != null) {
							if((filesLeft -= 1) <= 0) {
								done();
							}
							return;
						}
						var gml1 = fn(name[0],rel[0],gml0);
						if(gml1 != null && gml1 != gml0) {
							project.writeTextFileSync(rel[0],gml1);
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(rel,name));
				break;
			}
		}
	};
	var seekRecRoot = function(dir,kind,suffix) {
		if(suffix == null) {
			suffix = "";
		}
		seekRec(dir,kind,suffix);
	};
	if(opt.checkScripts) {
		seekRecRoot("Scripts","script",".gml");
	}
	if(opt.checkObjects) {
		seekRecRoot("Objects","object",".xml");
	}
	if((filesLeft -= 1) <= 0) {
		done();
	}
};
var gmk_GmkSplit = function() { };
$hxClasses["gmk.GmkSplit"] = gmk_GmkSplit;
gmk_GmkSplit.__name__ = "gmk.GmkSplit";
gmk_GmkSplit.proc = function(gmkPath) {
	var gmkSplitPath = ui_Preferences.current.gmkSplitPath;
	var gmkExt = haxe_io_Path.extension(gmkPath);
	if(gmkSplitPath == "" || gmkSplitPath == null) {
		if(Electron_API == null) {
			electron_Dialog.showError("A web version of GMEdit cannot do anything with GM≤8.1 files.");
			return;
		}
		switch(electron_Dialog.showMessageBox({ message : "GMEdit cannot natively open GM≤8.1 files," + " but it could call gmk-splitter to convert them to a format that it can open." + "\nWould you like to provide a path to gmk-splitter?" + "\n\nYou can always change the path under Preferences - Navigation", buttons : ["Browse for gmk-splitter","Open gmk-splitter homepage","Do nothing"]})) {
		case 0:
			electron_Dialog.showOpenDialog({ filters : [{ name : "Executable files (*.exe; *.jar)", extensions : ["exe","jar"]}]},function(paths) {
				var path = paths[0];
				if(path == null) {
					return;
				}
				ui_Preferences.current.gmkSplitPath = path;
				ui_Preferences.save();
				gmk_GmkSplit.proc(gmkPath);
			});
			break;
		case 1:
			Electron_Shell.openExternal("http://medo42.github.io/Gmk-Splitter/");
			gmk_GmkSplit.proc(gmkPath);
			break;
		default:
		}
		return;
	}
	var splitPath = haxe_io_Path.withExtension(gmkPath,"gmksplit");
	var targetPath = splitPath + "/Global Game Settings.xml";
	if(Electron_FS.existsSync(splitPath) && Electron_FS.existsSync(targetPath)) {
		if(ui_Preferences.current.gmkSplitOpenExisting) {
			gml_Project.open(targetPath);
			return;
		} else {
			switch(electron_Dialog.showMessageBox({ message : ["`" + splitPath + "` already exists!","If you want to re-generate the directory from the updated ." + gmkExt + " file, remove the directory first.","","You can also bypass this dialog by opening `Global Game Settings.xml` in .gmksplit directory with GMEdit."].join("\n"), buttons : ["Open existing","Don't show this again"]})) {
			case 0:
				gml_Project.open(targetPath);
				return;
			case 1:
				ui_Preferences.current.gmkSplitOpenExisting = true;
				ui_Preferences.save();
				gml_Project.open(targetPath);
				return;
			default:
				return;
			}
		}
	}
	var gmkSplitArgs = [gmkPath,splitPath];
	if(haxe_io_Path.extension(gmkSplitPath).toLowerCase() == "jar") {
		gmkSplitArgs.unshift(gmkSplitPath);
		gmkSplitPath = "java";
	}
	gml_Project.nameNode.innerText = "Converting...";
	window.setTimeout(function() {
		var cpr = window.require("child_process");
		var proc = cpr.spawn(gmkSplitPath,gmkSplitArgs);
		proc.stdout.on("data",function(data) {
			console.log("gmksplit:\n" + data);
		});
		proc.stderr.on("data",function(data) {
			console.error("gmksplit:\n" + data);
		});
		proc.on("close",function(code) {
			if(code != 0) {
				electron_Dialog.showError("gmk-splitter failed to convert your file!" + "\nCheck the JavaScript console (Ctrl+Shift+I) for output");
				return;
			}
			if(Electron_FS.existsSync(targetPath)) {
				gml_Project.open(targetPath);
			}
		});
	},10);
};
var gml_GmlNamespaceDef = function() {
};
$hxClasses["gml.GmlNamespaceDef"] = gml_GmlNamespaceDef;
gml_GmlNamespaceDef.__name__ = "gml.GmlNamespaceDef";
gml_GmlNamespaceDef.prototype = {
	__class__: gml_GmlNamespaceDef
};
var gml_GmlAPILoader = function() { };
$hxClasses["gml.GmlAPILoader"] = gml_GmlAPILoader;
gml_GmlAPILoader.__name__ = "gml.GmlAPILoader";
gml_GmlAPILoader.getContent = function(path,fn) {
	if(Electron_FS.existsSync != null) {
		if(Electron_FS.existsSync(path)) {
			var s = Electron_FS.readFileSync(path,"utf8");
			s = s.replace(gml_GmlAPILoader.getContent_rx,"\n");
			fn(s);
		} else {
			fn(null);
		}
	} else {
		Electron_FS.readFile(path,"utf8",function(e,s) {
			fn(e == null ? s : null);
		});
	}
};
gml_GmlAPILoader.applyPatchFile = function(raw,txt) {
	var rx = gml_GmlAPILoader.rxInsertBefore;
	var till = -1;
	till = txt.length;
	rx.lastIndex = 0;
	var mt = rx.exec(txt);
	while(mt != null && mt.index < till) {
		var code = [mt[2]];
		var rx1 = new RegExp("^" + mt[1] + "\\b","gm");
		raw = raw.replace(rx1,(function(code) {
			return function(next) {
				return code[0] + "\n" + next;
			};
		})(code));
		mt = rx.exec(txt);
	}
	var rx = gml_GmlAPILoader.rxReplace;
	var till = -1;
	till = txt.length;
	rx.lastIndex = 0;
	var mt = rx.exec(txt);
	while(mt != null && mt.index < till) {
		var code1 = [mt[0]];
		var rx1 = new RegExp("^" + mt[1] + "\\b.*$","gm");
		raw = raw.replace(rx1,(function(code) {
			return function(_) {
				return code[0];
			};
		})(code1));
		mt = rx.exec(txt);
	}
	return raw;
};
gml_GmlAPILoader.procHelp = function(conf,dir) {
	gml_GmlAPI.helpURL = conf.helpURL;
	var helpIndexPath = conf.helpIndex;
	if(helpIndexPath != null) {
		helpIndexPath = dir + "/" + helpIndexPath;
		Electron_FS.readFile(helpIndexPath,"utf8",function(err,helpIndexJs) {
			if(err != null) {
				return;
			}
			gml_GmlAPI.helpLookup = Object.create(null);
			helpIndexJs = helpIndexJs.substring(helpIndexJs.indexOf("["));
			helpIndexJs = helpIndexJs.substring(0,helpIndexJs.indexOf(";"));
			try {
				var helpIndexArr = JSON.parse(helpIndexJs);
				var _g = 0;
				while(_g < helpIndexArr.length) {
					var pair = helpIndexArr[_g];
					++_g;
					var item = pair[1];
					if(((item) instanceof Array)) {
						item = item[0][1];
					}
					gml_GmlAPI.helpLookup[pair[0]] = item;
				}
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				haxe_Log.trace("Couldn't parse help index:",{ fileName : "./gml/GmlAPILoader.hx", lineNumber : 81, className : "gml.GmlAPILoader", methodName : "procHelp", customParams : [_g1]});
			}
		});
	}
};
gml_GmlAPILoader.loadPre = function(ctx) {
	var conf = ctx.conf;
	var dir = ctx.dir;
	var confKeywords = conf.additionalKeywords;
	if(confKeywords != null) {
		var _g = 0;
		while(_g < confKeywords.length) gml_GmlAPI.stdKind[confKeywords[_g++]] = "keyword";
	}
	var cx = new tools_ChainCall();
	if(conf.assetFiles != null) {
		var _g = 0;
		var _g1 = conf.assetFiles;
		while(_g < _g1.length) cx.call(gml_GmlAPILoader.getContent,"" + dir + "/" + _g1[_g++],function(txt) {
			parsers_GmlParseAPI.loadAssets(txt,{ kind : gml_GmlAPI.stdKind, comp : gml_GmlAPI.stdComp});
		});
	}
	var useDefault = false;
	var apiFiles = conf.apiFiles;
	if(apiFiles == null) {
		apiFiles = ["default"];
	}
	var _g = 0;
	while(_g < apiFiles.length) {
		var file = [apiFiles[_g]];
		++_g;
		if(file[0] == "default") {
			useDefault = true;
			file[0] = "fnames";
		}
		cx.call(gml_GmlAPILoader.getContent,"" + dir + "/" + file[0],(function(file) {
			return function(s) {
				if(s != null) {
					ctx.raw = tools_NativeString.nzcct(ctx.raw,"\n",s);
				} else if(file[0] == "fnames") {
					window.alert("Couldn't find fnames in " + dir);
				}
			};
		})(file));
	}
	if(useDefault) {
		cx.call(gml_GmlAPILoader.getContent,dir + "/extra.gml",function(s) {
			if(s != null && s != "") {
				ctx.raw += "\n" + s;
			}
		});
	}
	if(useDefault) {
		cx.call(gml_GmlAPILoader.getContent,dir + "/replace.gml",function(s) {
			if(s != null) {
				ctx.raw = gml_GmlAPILoader.applyPatchFile(ctx.raw,s);
			}
		});
	}
	if(conf.patchFiles != null) {
		var _g = 0;
		var _g1 = conf.patchFiles;
		while(_g < _g1.length) cx.call(gml_GmlAPILoader.getContent,"" + dir + "/" + _g1[_g++],function(s) {
			if(s != null) {
				ctx.raw = gml_GmlAPILoader.applyPatchFile(ctx.raw,s);
			}
		});
	}
	if(useDefault) {
		cx.call(gml_GmlAPILoader.getContent,dir + "/exclude.gml",function(s) {
			if(s != null) {
				tools_ERegTools.each(new EReg("^(\\w+)(\\*?)$","gm"),s,function(rx) {
					var name = rx.matched(1);
					if(rx.matched(2) != "") {
						var _this_r = new RegExp("^" + name + ".*$","gm".split("u").join(""));
						var tmp = ctx.raw.replace(_this_r,"");
						ctx.raw = tmp;
					} else {
						var _this_r = new RegExp("^" + name + "\\b.*$","gm".split("u").join(""));
						var tmp = ctx.raw.replace(_this_r,"");
						ctx.raw = tmp;
					}
				});
			}
		});
	}
	if(useDefault) {
		cx.call(gml_GmlAPILoader.getContent,dir + "/inst.gml",function(s) {
			if(s != null) {
				tools_ERegTools.each(new EReg("^(\\w+)$","gm"),s,function(rx) {
					var name = rx.matched(1);
					var _this_r = new RegExp("^" + name + "\\b","gm".split("u").join(""));
					var tmp = ctx.raw.replace(_this_r,":" + name);
					ctx.raw = tmp;
				});
			}
		});
	}
	if(useDefault) {
		cx.call(gml_GmlAPILoader.getContent,dir + "/noret.gml",function(noRet) {
			tools_ERegTools.each(new EReg("^(\\w+)$","gm"),noRet,function(rx) {
				new RegExp("^(" + rx.matched(1) + "\\(.*?\\))(?:->\\S*)","gm");
			});
		});
	}
	return cx;
};
gml_GmlAPILoader.getArgs = function() {
	return { kind : gml_GmlAPI.stdKind, doc : gml_GmlAPI.stdDoc, comp : gml_GmlAPI.stdComp, types : gml_GmlAPI.stdTypes, typeExists : gml_GmlAPI.stdTypeExists, featherAliases : gml_GmlAPI.featherAliases, namespaceDefs : gml_GmlAPI.stdNamespaceDefs, typedefs : gml_GmlAPI.stdTypedefs, fieldHints : gml_GmlAPI.stdFieldHints, instComp : gml_GmlAPI.stdInstComp, instCompMap : gml_GmlAPI.stdInstCompMap, instKind : gml_GmlAPI.stdInstKind, instType : gml_GmlAPI.stdInstType, ukSpelling : gml_GmlAPI.ukSpelling, version : gml_GmlAPI.version};
};
gml_GmlAPILoader.init = function() {
	var version = gml_GmlAPI.version;
	gml_GmlAPI.stdClear();
	window.gmlResetOnDefine = version.resetOnDefine();
	if(version == gml_GmlVersion.none) {
		return;
	}
	gml_GmlAPI.helpURL = null;
	gml_GmlAPI.helpLookup = null;
	gml_GmlAPI.ukSpelling = ui_Preferences.current.ukSpelling;
	var dir = version.dir;
	var conf = version.config;
	gml_GmlAPILoader.procHelp(conf,dir);
	var ctx = { conf : conf, dir : dir, raw : ""};
	var cx = gml_GmlAPILoader.loadPre(ctx);
	if(Electron_FS.existsSync != null) {
		var xdir = electron_FileWrap.userPath + "/api/" + version.getName();
		if(Electron_FS.existsSync(xdir)) {
			var _g = 0;
			var _g1 = Electron_FS.readdirSync(xdir);
			while(_g < _g1.length) {
				var xrel = _g1[_g];
				++_g;
				var xfull = xdir + "/" + xrel;
				if(Electron_FS.statSync(xfull).isDirectory()) {
					continue;
				}
				if(xrel == "fnames") {
					cx.call(gml_GmlAPILoader.getContent,xfull,function(s) {
						ctx.raw += "\n" + s;
					});
					continue;
				}
				var xp = new haxe_io_Path(xrel);
				if(xp.ext != null && xp.ext.toLowerCase() == "gml") {
					if(haxe_io_Path.extension(xp.file).toLowerCase() == "replace") {
						cx.call(gml_GmlAPILoader.getContent,xfull,function(s) {
							ctx.raw = gml_GmlAPILoader.applyPatchFile(ctx.raw,s);
						});
						continue;
					}
					cx.call(gml_GmlAPILoader.getContent,xfull,function(s) {
						ctx.raw += "\n" + s;
					});
				}
			}
		}
	}
	var data = gml_GmlAPILoader.getArgs();
	cx.finish(function() {
		parsers_GmlParseAPI.loadStd(ctx.raw,data);
	});
};
var gml_GmlStruct = function(name,orig) {
	this.name = name;
	this.origin = orig;
};
$hxClasses["gml.GmlStruct"] = gml_GmlStruct;
gml_GmlStruct.__name__ = "gml.GmlStruct";
gml_GmlStruct.prototype = {
	__class__: gml_GmlStruct
};
var gml_GmlEnum = function(name,orig) {
	this.tupleTypes = null;
	this.lastItem = null;
	this.fieldLookup = Object.create(null);
	this.fieldComp = [];
	this.compMap = Object.create(null);
	this.compList = [];
	this.items = Object.create(null);
	this.names = [];
	gml_GmlStruct.call(this,name,orig);
	this.typeComp = { name : name, value : name, score : 0, meta : "enum", doc : null};
};
$hxClasses["gml.GmlEnum"] = gml_GmlEnum;
gml_GmlEnum.__name__ = "gml.GmlEnum";
gml_GmlEnum.__super__ = gml_GmlStruct;
gml_GmlEnum.prototype = $extend(gml_GmlStruct.prototype,{
	__class__: gml_GmlEnum
});
var gml_GmlExtensionAPI = function() { };
$hxClasses["gml.GmlExtensionAPI"] = gml_GmlExtensionAPI;
gml_GmlExtensionAPI.__name__ = "gml.GmlExtensionAPI";
gml_GmlExtensionAPI.showFor = function(path,ident) {
	var kind = gml_GmlExtensionAPI.kindMap[gml_Project.current.version.config.projectMode];
	if(kind == null) {
		return;
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile("api: " + ident,path,kind));
};
gml_GmlExtensionAPI.procFn = function(name,exname,help,args,hidden) {
	var r = help;
	var getBaseHelp = function() {
		var r = name + "(";
		var sep = false;
		var _g = 0;
		while(_g < args.length) {
			var arg = args[_g++];
			if(sep) {
				r += ", ";
			} else {
				sep = true;
			}
			r += arg;
		}
		return r + ")";
	};
	if(help == "") {
		r = getBaseHelp();
	} else if(!help.startsWith(name + "(")) {
		r = getBaseHelp() + " " + help;
	}
	if(exname != name) {
		r += "\n// ^ external: " + exname;
	}
	return r;
};
gml_GmlExtensionAPI.procMc = function(name,val,hidden) {
	return "" + name + " = " + val;
};
gml_GmlExtensionAPI.procSort = function(a,b) {
	if(a < b) {
		return -1;
	} else if(a > b) {
		return 1;
	} else {
		return 0;
	}
};
gml_GmlExtensionAPI.procSortAuto = function(lines) {
	if(ui_Preferences.current.extensionAPIOrder == 1) {
		lines.sort(gml_GmlExtensionAPI.procSort);
	}
};
gml_GmlExtensionAPI.procInitFinal = function(sInit,sFinal) {
	var r = "";
	if(sInit != null && sInit != "") {
		r = "" + ("\n// init: " + sInit);
	}
	if(sFinal != null && sFinal != "") {
		r += "\n// final: " + sFinal;
	}
	return r;
};
gml_GmlExtensionAPI.get1 = function(src) {
	var out = "";
	var _g = 0;
	var _g1 = gmx_SfGmx.parse(src).find("files").findAll("file");
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		var linesShow = [];
		var linesHide = [];
		var _g2 = 0;
		var _g3 = file.find("functions").findAll("function");
		while(_g2 < _g3.length) {
			var fn = _g3[_g2];
			++_g2;
			var hidden = fn.findText("help") == "";
			var args = [];
			if(fn.findInt("argCount") < 0) {
				args.push("...");
			} else {
				var _g4 = 0;
				var _g5 = fn.find("args").findAll("arg");
				while(_g4 < _g5.length) args.push((_g5[_g4++].text == "1" ? "s" : "v") + args.length);
			}
			var tmp = fn.findText("name");
			(hidden ? linesHide : linesShow).push(gml_GmlExtensionAPI.procFn(tmp,fn.findText("externalName"),fn.findText("help"),args,hidden));
		}
		var _g6 = 0;
		var _g7 = file.find("constants").findAll("constant");
		while(_g6 < _g7.length) {
			var mc = _g7[_g6];
			++_g6;
			var hidden1 = mc.findInt("hidden") != 0;
			(hidden1 ? linesHide : linesShow).push(gml_GmlExtensionAPI.procMc(mc.findText("name"),mc.findText("value"),hidden1));
		}
		gml_GmlExtensionAPI.procSortAuto(linesShow);
		if(out != "") {
			out += "\n";
		}
		out += "#section " + file.findText("filename");
		out += gml_GmlExtensionAPI.procInitFinal(file.findText("init"),file.findText("final"));
		var _g8 = 0;
		while(_g8 < linesShow.length) out += "\n" + linesShow[_g8++];
		if(linesHide.length > 0) {
			gml_GmlExtensionAPI.procSortAuto(linesHide);
			out += "\n#section " + file.findText("filename") + " (hidden)";
			var _g9 = 0;
			while(_g9 < linesHide.length) out += "\n" + linesHide[_g9++];
		}
	}
	return out;
};
gml_GmlExtensionAPI.get2 = function(ext) {
	var out = "";
	var _g = 0;
	var _g1 = ext.files;
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		var linesShow = [];
		var linesHide = [];
		var _g2 = 0;
		var _g3 = file.functions;
		while(_g2 < _g3.length) {
			var fn = _g3[_g2];
			++_g2;
			var args = [];
			if(fn.argCount < 0) {
				args.push("...");
			} else {
				var _g4 = 0;
				var _g5 = fn.args;
				while(_g4 < _g5.length) args.push((_g5[_g4++] == 1 ? "s" : "v") + args.length);
			}
			(fn.hidden ? linesHide : linesShow).push(gml_GmlExtensionAPI.procFn(fn.name,fn.externalName,fn.help,args,fn.hidden));
		}
		var _g6 = 0;
		var _g7 = file.constants;
		while(_g6 < _g7.length) {
			var mc = _g7[_g6];
			++_g6;
			var name = ((mc.constantName) || (mc.name));
			(mc.hidden ? linesHide : linesShow).push(gml_GmlExtensionAPI.procMc(name,mc.value,mc.hidden));
		}
		gml_GmlExtensionAPI.procSortAuto(linesShow);
		if(out != "") {
			out += "\n";
		}
		out += "#section " + file.filename;
		out += gml_GmlExtensionAPI.procInitFinal(file.init,Reflect.field(file,"final"));
		var _g8 = 0;
		while(_g8 < linesShow.length) out += "\n" + linesShow[_g8++];
		if(linesHide.length > 0) {
			gml_GmlExtensionAPI.procSortAuto(linesHide);
			out += "\n#section " + file.filename + " (hidden)";
			var _g9 = 0;
			while(_g9 < linesHide.length) out += "\n" + linesHide[_g9++];
		}
	}
	return out;
};
var gml_GmlField = function(name,kind) {
	this.refs = 0;
	this.name = name;
	this.comp = { name : name, value : name, score : 0, meta : kind, doc : null};
};
$hxClasses["gml.GmlField"] = gml_GmlField;
gml_GmlField.__name__ = "gml.GmlField";
gml_GmlField.prototype = {
	__class__: gml_GmlField
};
var gml_GmlGlobalField = function(name) {
	this.hidden = false;
	gml_GmlField.call(this,name,"global");
	var name1 = "global." + name;
	this.fullComp = { name : name1, value : name1, score : 0, meta : "global", doc : null};
};
$hxClasses["gml.GmlGlobalField"] = gml_GmlGlobalField;
gml_GmlGlobalField.__name__ = "gml.GmlGlobalField";
gml_GmlGlobalField.__super__ = gml_GmlField;
gml_GmlGlobalField.prototype = $extend(gml_GmlField.prototype,{
	__class__: gml_GmlGlobalField
});
var gml_GmlGlobalVar = function(name,orig) {
	gml_GmlStruct.call(this,name,orig);
	this.comp = { name : name, value : name, score : 0, meta : "globalvar", doc : null};
};
$hxClasses["gml.GmlGlobalVar"] = gml_GmlGlobalVar;
gml_GmlGlobalVar.__name__ = "gml.GmlGlobalVar";
gml_GmlGlobalVar.__super__ = gml_GmlStruct;
gml_GmlGlobalVar.prototype = $extend(gml_GmlStruct.prototype,{
	__class__: gml_GmlGlobalVar
});
var gml_GmlImports = function() {
	this.localTypes = Object.create(null);
	this.docs = Object.create(null);
	this.namespaceComp = [];
	this.namespaces = Object.create(null);
	this.longenEnum = Object.create(null);
	this.longen = Object.create(null);
	this.hasGlobal = false;
	this.shortenGlobal = Object.create(null);
	this.shorten = Object.create(null);
	this.kind = Object.create(null);
	this.compMap = Object.create(null);
	this.compList = [];
};
$hxClasses["gml.GmlImports"] = gml_GmlImports;
gml_GmlImports.__name__ = "gml.GmlImports";
gml_GmlImports.prototype = {
	createLink: function() {
		return new gml_GmlImportsLink(this);
	}
	,ensureNamespace: function(space) {
		var ns = this.namespaces[space];
		if(ns != null) {
			return ns;
		}
		ns = new gml_GmlImportNamespace(space);
		var origKind = this.kind[space];
		this.kind[space] = "namespace";
		this.namespaceComp.push({ name : space, value : space, score : 0, meta : "namespace", doc : null});
		this.namespaces[space] = ns;
		var enLong;
		var en;
		if(origKind == "enum") {
			enLong = this.longen[space];
			en = gml_GmlAPI.gmlEnums[enLong];
		} else {
			enLong = space;
			en = gml_GmlAPI.gmlEnums[space];
		}
		if(en != null) {
			ns.isSealed = true;
			var _g = 0;
			var _g1 = en.compList;
			while(_g < _g1.length) {
				var c = this.enumCompToNsComp(_g1[_g++]);
				ns.compStatic.addn(c);
				ns.compInst.addn(c);
			}
			var _g = 0;
			var _g1 = en.names;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				var full = enLong + "." + name;
				ns.longen[name] = full;
				ns.shorten[full] = name;
				ns.instKind[name] = "enumfield";
			}
		}
		return ns;
	}
	,enumCompToNsComp: function(comp) {
		var name = comp.name.substring(comp.name.indexOf(".") + 1);
		return { name : name, value : name, score : 0, meta : comp.meta, doc : comp.name + " = " + comp.doc};
	}
	,enumCompToFullComp: function(comp,short) {
		var name = short + comp.name.substring(comp.name.indexOf("."));
		return { name : name, value : name, score : 0, meta : comp.meta, doc : comp.name + " = " + comp.doc};
	}
	,add: function(long,short,kind,comp,doc,space,spaceOnly,cache) {
		var isGlobal = long.startsWith("global.");
		var ns;
		var en;
		var nc;
		if(space != null) {
			ns = this.ensureNamespace(space);
			if(!spaceOnly) {
				ns.staticKind[short] = kind;
			}
			ns.instKind[short] = kind;
			if(!isGlobal) {
				var c = ns.longen[short];
				if(c != null) {
					delete ns.shorten[c];
				}
				ns.shorten[long] = short;
				ns.longen[short] = long;
			}
			if(comp != null) {
				var _g = spaceOnly ? 1 : 0;
				while(_g < 2) {
					var iter = _g++;
					if(cache != null) {
						nc = cache.nsComp;
						if(nc == null) {
							nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
							if(nc.doc == null) {
								nc.doc = long;
							}
							cache.nsComp = nc;
						}
					} else {
						nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
						if(nc.doc == null) {
							nc.doc = long;
						}
					}
					(iter > 0 ? ns.compInst : ns.compStatic).set(short,nc);
				}
			}
			if(doc != null) {
				if(!spaceOnly) {
					ns.docStaticMap[short] = doc;
				}
				ns.docInstMap[short] = doc;
			}
			short = space + "." + short;
			if(spaceOnly) {
				return;
			}
		} else {
			this.kind[short] = kind;
		}
		if(isGlobal) {
			this.hasGlobal = true;
			this.shortenGlobal[long.substring(7)] = short;
		} else {
			this.shorten[long] = short;
			if(kind == "enum") {
				en = gml_GmlAPI.gmlEnums[long];
				if(en != null) {
					ns = this.namespaces[short];
					if(ns != null) {
						ns.isSealed = true;
					}
					if(cache != null) {
						var comps = cache.enumComps;
						var nsComps = cache.enumNsComps;
						if(comps == null) {
							comps = [];
							if(ns != null) {
								nsComps = [];
							}
							var _g = 0;
							var _g1 = en.compList;
							while(_g < _g1.length) {
								var comp1 = _g1[_g];
								++_g;
								comps.push(this.enumCompToFullComp(comp1,short));
								if(ns != null) {
									nsComps.push(this.enumCompToNsComp(comp1));
								}
							}
							cache.enumComps = comps;
							if(ns != null) {
								cache.enumNsComps = nsComps;
							}
						}
						var _g = 0;
						var _g1 = comps;
						while(_g < _g1.length) this.compList.push(_g1[_g++]);
						if(ns != null) {
							var _g = 0;
							var _g1 = nsComps;
							while(_g < _g1.length) {
								var comp1 = _g1[_g];
								++_g;
								ns.compInst.addn(comp1);
								ns.compStatic.addn(comp1);
							}
						}
					} else {
						var _g = 0;
						var _g1 = en.compList;
						while(_g < _g1.length) {
							var comp1 = _g1[_g];
							++_g;
							this.compList.push(this.enumCompToFullComp(comp1,short));
							if(ns != null) {
								var c = this.enumCompToNsComp(comp1);
								ns.compInst.addn(c);
								ns.compStatic.addn(c);
							}
						}
					}
					if(ns != null) {
						var _g = 0;
						var _g1 = en.names;
						while(_g < _g1.length) {
							var name = _g1[_g];
							++_g;
							var full = long + "." + name;
							var c = ns.longen[name];
							if(c != null) {
								delete ns.shorten[c];
							}
							ns.longen[name] = full;
							ns.shorten[full] = name;
							ns.instKind[name] = "enumfield";
						}
					}
				}
				this.longenEnum[short] = long;
			}
		}
		var c = this.longen[short];
		if(c != null) {
			delete this.shorten[c];
		}
		this.longen[short] = long;
		if(doc != null) {
			this.docs[short] = doc;
		}
		if(comp != null) {
			nc = this.compMap[short];
			if(nc != null) {
				HxOverrides.remove(this.compList,nc);
			}
			if(cache != null) {
				nc = cache.comp;
				if(nc == null) {
					nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
					if(nc.doc == null) {
						nc.doc = long;
					}
					cache.comp = nc;
				}
			} else {
				nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
				if(nc.doc == null) {
					nc.doc = long;
				}
			}
			this.compMap[short] = nc;
			this.compList.push(nc);
		}
	}
	,addFieldHint: function(field,comp,doc,space,isInst,cache) {
		this.ensureNamespace(space).addFieldHint(field,isInst,comp,doc,null);
		if(!isInst) {
			if(doc != null) {
				this.docs[space + "." + field] = doc;
			}
			if(!Object.prototype.hasOwnProperty.call(this.compMap,space)) {
				var nc = { name : space, value : space, score : 0, meta : "namespace", doc : "type"};
				this.compMap[space] = nc;
				this.compList.push(nc);
			}
		}
	}
	,__class__: gml_GmlImports
};
var gml_GmlImportsLink = function(imp) {
	gml_GmlImports.call(this);
	if(((imp) instanceof gml_GmlImportsLink)) {
		imp = imp.parent;
	}
	this.parent = imp;
	this.compList = imp.compList;
	this.compMap = imp.compMap;
	this.kind = imp.kind;
	this.shorten = imp.shorten;
	this.shortenGlobal = imp.shortenGlobal;
	this.hasGlobal = imp.hasGlobal;
	this.longen = imp.longen;
	this.longenEnum = imp.longenEnum;
	this.namespaces = imp.namespaces;
	this.namespaceComp = imp.namespaceComp;
	this.docs = imp.docs;
};
$hxClasses["gml.GmlImportsLink"] = gml_GmlImportsLink;
gml_GmlImportsLink.__name__ = "gml.GmlImportsLink";
gml_GmlImportsLink.__super__ = gml_GmlImports;
gml_GmlImportsLink.prototype = $extend(gml_GmlImports.prototype,{
	__class__: gml_GmlImportsLink
});
var gml_GmlNamespace = function(name) {
	this.docInstMap = Object.create(null);
	this.compInstCacheInterfaces = [];
	this.compInstCacheParent = null;
	this.compInstCacheID = 0;
	this.compInstCache = [];
	this.compInst = new tools_ArrayMapSync();
	this.instTypes = Object.create(null);
	this.instKind = Object.create(null);
	this.docStaticMap = Object.create(null);
	this.compStatic = new tools_ArrayMap();
	this.staticTypes = Object.create(null);
	this.staticKind = Object.create(null);
	this.minus1able = false;
	this.interfaces = new tools_ArrayMap();
	this.parent = null;
	this.avoidHighlight = false;
	this.noTypeRef = false;
	this.isNullable = false;
	this.canCastToStruct = true;
	this.isObject = false;
	this.name = name;
};
$hxClasses["gml.GmlNamespace"] = gml_GmlNamespace;
gml_GmlNamespace.__name__ = "gml.GmlNamespace";
gml_GmlNamespace.prototype = {
	getInstKind: function(field,depth) {
		if(depth == null) {
			depth = 0;
		}
		var q = this;
		var n = depth;
		while(q != null && ++n <= 128) {
			var t = q.instKind[field];
			if(t != null) {
				return t;
			}
			if(q.isObject) {
				t = gml_GmlAPI.stdInstKind[field];
				if(t != null) {
					return t;
				}
			}
			var _g = 0;
			var _g1 = q.interfaces.array;
			while(_g < _g1.length) {
				t = _g1[_g++].getInstKind(field,n);
				if(t != null) {
					return t;
				}
			}
			q = q.parent;
		}
		return null;
	}
	,getInstType: function(field,depth) {
		if(depth == null) {
			depth = 0;
		}
		var q = this;
		var n = depth;
		while(q != null && ++n <= 128) {
			var t = q.instTypes[field];
			if(t != null) {
				return t;
			}
			if(q.isObject) {
				t = gml_GmlAPI.stdInstType[field];
				if(t != null) {
					return t;
				}
			}
			var _g = 0;
			var _g1 = q.interfaces.array;
			while(_g < _g1.length) {
				t = _g1[_g++].getInstType(field,n);
				if(t != null) {
					return t;
				}
			}
			q = q.parent;
		}
		return null;
	}
	,getInstTypeText: function(field,depth) {
		if(depth == null) {
			depth = 0;
		}
		var q = this;
		var n = depth;
		while(q != null && ++n <= 128) {
			var t = q.instTypes[field];
			if(t != null) {
				return "from " + q.name + "\ntype " + gml_type_GmlTypeTools.toString(t);
			}
			if(q.isObject) {
				t = gml_GmlAPI.stdInstType[field];
				if(t != null) {
					return "from " + q.name + "\ntype " + gml_type_GmlTypeTools.toString(t);
				}
			}
			var _g = 0;
			var _g1 = q.interfaces.array;
			while(_g < _g1.length) {
				var s = _g1[_g++].getInstTypeText(field,n);
				if(s != null) {
					return s;
				}
			}
			q = q.parent;
		}
		return null;
	}
	,getInstCompItem: function(field,depth) {
		if(depth == null) {
			depth = 0;
		}
		var q = this;
		var n = depth;
		while(q != null && ++n <= 128) {
			var c = q.compInst.map[field];
			if(c != null) {
				return c;
			}
			if(q.isObject) {
				c = gml_GmlAPI.stdInstCompMap[field];
				if(c != null) {
					return c;
				}
			}
			var _g = 0;
			var _g1 = q.interfaces.array;
			while(_g < _g1.length) {
				c = _g1[_g++].getInstCompItem(field,n);
				if(c != null) {
					return c;
				}
			}
			q = q.parent;
		}
		return null;
	}
	,getInstComp: function(depth,includeBuiltins) {
		if(includeBuiltins == null) {
			includeBuiltins = true;
		}
		if(depth == null) {
			depth = 0;
		}
		if(++depth > 128) {
			return [];
		}
		if(this.parent == null && !this.isObject && this.interfaces.array.length == 0) {
			this.compInstCacheID = this.compInst.changeID;
			return this.compInst.array;
		}
		var forceUpdate = false;
		var maxID = this.compInst.changeID;
		var parItems;
		if(this.parent != null) {
			parItems = this.parent.getInstComp(depth,false);
			maxID = Math.max(maxID,this.parent.compInstCacheID);
			if(this.compInstCacheParent != this.parent.name) {
				this.compInstCacheParent = this.parent.name;
				forceUpdate = true;
			}
		} else {
			parItems = null;
			this.compInstCacheParent = null;
		}
		var itfItems = this.interfaces.array.length > 0 ? [] : null;
		var _this = this.interfaces.array;
		var _g_current = 0;
		while(_g_current < _this.length) {
			var _g_value = _this[_g_current];
			var _g_key = _g_current++;
			itfItems.push(_g_value.getInstComp(depth,false));
			maxID = Math.max(maxID,_g_value.compInstCacheID);
			if(this.compInstCacheInterfaces[_g_key] != _g_value.name) {
				this.compInstCacheInterfaces[_g_key] = _g_value.name;
				forceUpdate = true;
			}
		}
		if(this.compInstCacheInterfaces.length != this.interfaces.array.length) {
			this.compInstCacheInterfaces.length = this.interfaces.array.length;
			forceUpdate = true;
		}
		if(maxID == this.compInstCacheID && !forceUpdate) {
			return this.compInstCache;
		}
		var list = this.compInst.array.slice();
		this.compInstCacheID = maxID;
		this.compInstCache = list;
		var found = Object.create(null);
		var _g = 0;
		while(_g < list.length) found[list[_g++].name] = true;
		if(itfItems != null) {
			var _g = 0;
			while(_g < itfItems.length) {
				var _g1 = 0;
				var _g2 = itfItems[_g++];
				while(_g1 < _g2.length) {
					var c = _g2[_g1];
					++_g1;
					if(found[c.name]) {
						continue;
					}
					found[c.name] = true;
					list.push(c);
				}
			}
		}
		if(parItems != null) {
			var i = parItems.length;
			while(--i >= 0) {
				var c = parItems[i];
				if(found[c.name]) {
					continue;
				}
				found[c.name] = true;
				list.unshift(c);
			}
		}
		if(this.isObject && includeBuiltins) {
			var _g = 0;
			var _g1 = gml_GmlAPI.stdInstComp;
			while(_g < _g1.length) list.push(_g1[_g++]);
		}
		return list;
	}
	,getInstDoc: function(field,depth) {
		if(depth == null) {
			depth = 0;
		}
		var q = this;
		var n = depth;
		while(q != null && ++n <= 128) {
			var d = q.docInstMap[field];
			if(d != null) {
				return d;
			}
			var _g = 0;
			var _g1 = q.interfaces.array;
			while(_g < _g1.length) {
				d = _g1[_g++].getInstDoc(field,n);
				if(d != null) {
					return d;
				}
			}
			q = q.parent;
		}
		return null;
	}
	,addFieldHint: function(field,isInst,comp,doc,type) {
		(isInst ? this.instKind : this.staticKind)[field] = doc != null ? "asset.script" : "field";
		var types = isInst ? this.instTypes : this.staticTypes;
		if(type != null) {
			types[field] = type;
		} else if(doc != null) {
			types[field] = doc.getFunctionType();
		}
		if(doc != null) {
			(isInst ? this.docInstMap : this.docStaticMap)[field] = doc;
		}
		if(comp != null && field != "") {
			(isInst ? this.compInst : this.compStatic).set(field,comp);
		}
	}
	,removeFieldHint: function(field,isInst) {
		delete (isInst ? this.instKind : this.staticKind)[field];
		delete (isInst ? this.docInstMap : this.docStaticMap)[field];
		delete (isInst ? this.instTypes : this.staticTypes)[field];
		(isInst ? this.compInst : this.compStatic).remove(field);
	}
	,procSpecialInterfaces: function(name,value) {
		switch(name) {
		case "minus1able":
			this.minus1able = value;
			break;
		case "nullable":
			this.isNullable = value;
			break;
		case "simplename":
			this.avoidHighlight = value;
			break;
		case "struct":
			this.canCastToStruct = value;
			break;
		default:
			return false;
		}
		return true;
	}
	,__class__: gml_GmlNamespace
};
var gml_GmlImportNamespace = function(name) {
	this.isSealed = false;
	this.longen = Object.create(null);
	this.shorten = Object.create(null);
	gml_GmlNamespace.call(this,name);
};
$hxClasses["gml.GmlImportNamespace"] = gml_GmlImportNamespace;
gml_GmlImportNamespace.__name__ = "gml.GmlImportNamespace";
gml_GmlImportNamespace.__super__ = gml_GmlNamespace;
gml_GmlImportNamespace.prototype = $extend(gml_GmlNamespace.prototype,{
	__class__: gml_GmlImportNamespace
});
var gml_GmlLocals = function(name) {
	if(name == null) {
		name = "";
	}
	this.hasWith = false;
	this.kind = Object.create(null);
	this.comp = [];
	this.name = name;
};
$hxClasses["gml.GmlLocals"] = gml_GmlLocals;
gml_GmlLocals.__name__ = "gml.GmlLocals";
gml_GmlLocals.prototype = {
	add: function(name,lkind,doc) {
		if(this.kind[name] == null) {
			this.kind[name] = lkind;
			this.comp.push({ name : name, value : name, score : 0, meta : lkind, doc : doc});
		}
	}
	,addLocals: function(locals) {
		var _g = 0;
		var _g1 = locals.comp;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var name = item.name;
			if(Object.prototype.hasOwnProperty.call(this.kind,name)) {
				continue;
			}
			this.comp.push(item);
			this.kind[name] = locals.kind[name];
		}
	}
	,__class__: gml_GmlLocals
};
var gml_GmlMacro = function(name,orig,expr,config) {
	gml_GmlStruct.call(this,name,orig);
	this.expr = expr;
	this.config = config;
	this.comp = { name : name, value : name, score : 0, meta : "macro", doc : expr};
};
$hxClasses["gml.GmlMacro"] = gml_GmlMacro;
gml_GmlMacro.__name__ = "gml.GmlMacro";
gml_GmlMacro.__super__ = gml_GmlStruct;
gml_GmlMacro.prototype = $extend(gml_GmlStruct.prototype,{
	__class__: gml_GmlMacro
});
var gml_GmlObjectInfo = function() {
	this.eventMap = Object.create(null);
	this.depth = null;
	this.eventList = [];
	this.parents = [];
	this.spriteName = "";
	this.objectName = "";
};
$hxClasses["gml.GmlObjectInfo"] = gml_GmlObjectInfo;
gml_GmlObjectInfo.__name__ = "gml.GmlObjectInfo";
gml_GmlObjectInfo.showFor = function(path,ident) {
	var info;
	if(haxe_io_Path.extension(path) == "gmx") {
		info = gmx_GmxObject.getInfo(electron_FileWrap.readGmxFileSync(path),path);
	} else if(haxe_io_Path.extension(path) == "yy") {
		info = yy_YyObject.getInfo(electron_FileWrap.readYyFileSync(path));
	} else {
		return;
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile("info: " + ident,null,file_kind_gml_KGmlScript.inst,info.print()));
};
gml_GmlObjectInfo.prototype = {
	print: function() {
		var buf = new tools_StringBuilder();
		buf.addFormat("// Information about object @[%s]:\n",this.objectName);
		buf.addFormat("// Sprite: @[%s]\n",this.spriteName);
		buf.addFormat("// Visible: %s\n","" + Std.string(this.visible));
		buf.addFormat("// Soild: %s\n","" + Std.string(this.solid));
		buf.addFormat("// Persistent: %s\n","" + Std.string(this.persistent));
		if(this.depth != null) {
			buf.addFormat("// Depth: %s\n","" + this.depth);
		}
		buf.addFormat("#section Parents (%d)\n",this.parents.length);
		var _g = 0;
		var _g1 = this.parents;
		while(_g < _g1.length) buf.addFormat("// @[%s]\n",_g1[_g++]);
		var children = gml_Project.current.objectChildren[this.objectName];
		var childCount = children != null ? children.length : 0;
		if(childCount > 0) {
			var cbuf = new tools_StringBuilder();
			var childCountRec = null;
			childCountRec = function(name,depth) {
				if(++depth > 64) {
					return 0;
				}
				var found = 0;
				var arr = gml_Project.current.objectChildren[name];
				if(arr != null) {
					found = arr.length;
					var _g = 0;
					while(_g < arr.length) found += childCountRec(arr[_g++],depth);
				}
				return found;
			};
			var _g = 0;
			while(_g < children.length) {
				var child = children[_g];
				++_g;
				cbuf.addFormat("// @[%s]",child);
				var subCount = childCountRec(child,0);
				if(subCount > 0) {
					cbuf.addFormat(" (%d child%s)",subCount,subCount != 1 ? "ren" : "");
					childCount += subCount;
				}
				cbuf.b += "\n";
			}
			buf.addFormat("#section Children (%d)\n",childCount);
			buf.b += Std.string(cbuf.b);
		} else {
			buf.addFormat("#section Children (0)\n");
		}
		buf.addFormat("#section Events (%d)\n",this.eventList.length);
		var _g = 0;
		var _g1 = this.eventList;
		while(_g < _g1.length) {
			var eid = _g1[_g];
			++_g;
			var items = this.eventMap[eid];
			buf.addFormat("#event %s (%d)\n",eid,items.length);
			var _g2 = 0;
			while(_g2 < items.length) buf.addFormat("// @[%s]\n",items[_g2++]);
		}
		return buf.b;
	}
	,__class__: gml_GmlObjectInfo
};
var gml_GmlScopes = $hx_exports["GmlScopes"] = function(session) {
	this.isScript = null;
	this.length = 0;
	this.scopes = [];
	this.defs = [];
	this.session = session;
};
$hxClasses["gml.GmlScopes"] = gml_GmlScopes;
gml_GmlScopes.__name__ = "gml.GmlScopes";
gml_GmlScopes.prototype = {
	getScopeResetRx: function() {
		if(this.isScript == null && this.session.gmlFile != null) {
			this.isScript = ((this.session.gmlFile.kind) instanceof file_kind_gml_KGmlScript);
		}
		if(this.isScript) {
			return gml_GmlAPI.scopeResetRx;
		} else {
			return gml_GmlAPI.scopeResetRxNF;
		}
	}
	,get: function(row) {
		var len = this.session.getLength();
		if(len != this.length) {
			this.length = len;
			var arr = this.defs;
			arr.length = 0;
			arr.length = len;
			var arr = this.scopes;
			arr.length = 0;
			arr.length = len;
		}
		var rx = this.getScopeResetRx();
		var scope = null;
		var i = row;
		while(i >= 0) {
			scope = this.scopes[i];
			if(scope != null) {
				break;
			}
			var def = this.defs[i];
			if(def == null) {
				var line = this.session.getLine(i);
				var res = rx.exec(line);
				def = res != null ? res[1] : "";
				this.defs[i] = def;
			}
			if(def != "") {
				scope = def;
				this.scopes[i] = scope;
				break;
			}
			--i;
		}
		if(i < 0) {
			scope = "";
		}
		while(++i <= row) this.scopes[i] = scope;
		return scope;
	}
	,updateOnSave: function() {
		var rx = this.getScopeResetRx();
		var currScope = "";
		var updateScope = false;
		var _g = 0;
		var _g1 = this.scopes.length;
		while(_g < _g1) {
			var i = _g++;
			var line = this.session.getLine(i);
			var mt = rx.exec(line);
			if(mt != null) {
				currScope = mt[1];
				if(this.defs[i] != currScope) {
					this.defs[i] = currScope;
					updateScope = true;
				} else {
					updateScope = false;
				}
			} else if(this.defs[i] != "") {
				this.defs[i] = "";
				updateScope = true;
			}
			if(updateScope) {
				this.scopes[i] = currScope;
			}
		}
	}
	,clear: function() {
		this.defs.length = 0;
		this.scopes.length = 0;
		this.length = 0;
	}
	,__class__: gml_GmlScopes
};
var gml_GmlVersionConfigDefaults = function() { };
$hxClasses["gml.GmlVersionConfigDefaults"] = gml_GmlVersionConfigDefaults;
gml_GmlVersionConfigDefaults.__name__ = "gml.GmlVersionConfigDefaults";
gml_GmlVersionConfigDefaults.get = function(v2) {
	var v1 = !v2;
	return { parent : null, name : null, hasStringEscapeCharacters : v2, hasLiteralStrings : v2, hasSingleQuotedStrings : v1, hasTernaryOperator : v2, hasTemplateStrings : false, hasDefineArgs : false, hasRegions : v2, hasEventSections : v1, hasEventActions : v1, hasColorLiterals : v2, hasScriptDotStatic : v2, hasQuoteTemplateStrings : v2, hasPragma : false, resetLineCounterOnDefine : true, hasJSDoc : v2, helpURL : null, helpIndex : null, indexingMode : "directory", loadingMode : "directory", searchMode : "directory", projectMode : null, docMode : null, projectRegex : null, additionalKeywords : null, apiFiles : null, assetFiles : null};
};
var gml_GmlVersionDetect = function() { };
$hxClasses["gml.GmlVersionDetect"] = gml_GmlVersionDetect;
gml_GmlVersionDetect.__name__ = "gml.GmlVersionDetect";
gml_GmlVersionDetect.verify = function(gml,v) {
	var q = new parsers_GmlReader(gml);
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 34:
			if(v >= 2) {
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 34) {
						break;
					}
					if(c == 92) {
						switch(c) {
						case 117:
							q.pos += 5;
							break;
						case 120:
							q.pos += 3;
							break;
						default:
							q.pos += 1;
						}
					}
				}
				if(!q.get_loop()) {
					return false;
				}
			} else {
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 34) {
						break;
					}
				}
				if(!q.get_loop()) {
					return false;
				}
			}
			break;
		case 39:
			if(v >= 2) {
				return false;
			} else {
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 39) {
						break;
					}
				}
				if(!q.get_loop()) {
					return false;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				while(q.get_loop()) if(q.source.charCodeAt(q.pos) == 42) {
					q.pos += 1;
					if(q.source.charCodeAt(q.pos) == 47) {
						q.pos += 1;
						break;
					}
				} else {
					q.pos += 1;
				}
				break;
			case 47:
				q.pos += 1;
				while(q.get_loop()) {
					switch(q.source.charCodeAt(q.pos)) {
					case 10:case 13:
						break;
					default:
						q.pos += 1;
						continue;
					}
					break;
				}
				break;
			default:
			}
			break;
		case 64:
			switch(q.source.charCodeAt(q.pos)) {
			case 34:
				if(v < 2) {
					return false;
				}
				q.pos += 1;
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 34) {
						break;
					}
				}
				if(!q.get_loop()) {
					return false;
				}
				break;
			case 39:
				if(v < 2) {
					return false;
				}
				q.pos += 1;
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 39) {
						break;
					}
				}
				if(!q.get_loop()) {
					return false;
				}
				break;
			default:
			}
			break;
		default:
		}
	}
	return true;
};
gml_GmlVersionDetect.run = function(gml) {
	gml += "\n";
	if(gml_GmlVersionDetect.verify(gml,2)) {
		return gml_GmlVersion.v2;
	}
	if(gml_GmlVersionDetect.verify(gml,1)) {
		return gml_GmlVersion.v1;
	}
	return gml_GmlVersion.none;
};
var gml_GmlVersionV23 = function(name,dir,isCustom) {
	gml_GmlVersion.call(this,name,dir,isCustom);
};
$hxClasses["gml.GmlVersionV23"] = gml_GmlVersionV23;
gml_GmlVersionV23.__name__ = "gml.GmlVersionV23";
gml_GmlVersionV23.__super__ = gml_GmlVersion;
gml_GmlVersionV23.prototype = $extend(gml_GmlVersion.prototype,{
	hasColorLiterals: function() {
		return gml_Project.current.isGM2022;
	}
	,__class__: gml_GmlVersionV23
});
var gml_Project = function(_path,_load) {
	if(_load == null) {
		_load = true;
	}
	this.fileCache = Object.create(null);
	this.isIndexing = false;
	this.firstLoadState = null;
	this.frameRate = null;
	this.lambdaView = null;
	this.lambdaGml = null;
	this.lambdaExt = null;
	this.lambdaMap = Object.create(null);
	this.propertiesElement = null;
	this.properties = { };
	this.hasGMLive = false;
	this.spriteURLs = Object.create(null);
	this.usesResourceOrderFile = false;
	this.yyUsesGUID = true;
	this.yyExtJson = false;
	this.isGM2023 = false;
	this.isGM2022 = false;
	this.isGMS23 = false;
	this.yyResourceVersion = 1.0;
	this.gmxFirstRoomName = null;
	this.config = "default";
	this.version = gml_GmlVersion.v1;
	this.path = _path;
	this.new_procSingle();
	if(this.path != null) {
		this.dir = haxe_io_Path.directory(this.path);
		this.name = haxe_io_Path.withoutDirectory(this.path);
	} else {
		this.dir = haxe_io_Path.directory(_path);
		this.name = haxe_io_Path.withoutDirectory(_path);
		this.displayName = this.name;
	}
	if(this.path != null) {
		this.detectVersion();
	}
	if(_load) {
		var tmp = this.path != "" ? this.displayName + " - GMEdit" : "GMEdit";
		document.title = tmp;
		ui_treeview_TreeView.clear();
		this.reload(true);
	}
};
$hxClasses["gml.Project"] = gml_Project;
gml_Project.__name__ = "gml.Project";
gml_Project.setCurrent = function(project) {
	if(gml_Project.current != null) {
		gml_Project.current.close();
	}
	gml_Project.current = project;
};
gml_Project.open = function(path) {
	gml_Project.setCurrent(new gml_Project(path));
	if(path != "") {
		ui_RecentProjects.add(gml_Project.current.path != null ? gml_Project.current.path : path);
	}
};
gml_Project.init = function() {
	gml_Project.loaderMap = { "gms1" : gmx_GmxLoader.run, "gms2" : yy_YyLoader.run, "gmk-splitter" : gmk_GmkLoader.run, "directory" : raw_RawLoader.run};
	gml_Project.searchMap = { "gms1" : gmx_GmxSearcher.run, "gms2" : yy_YySearcher.run, "gmk-splitter" : gmk_GmkSearcher.run, "directory" : raw_RawSearcher.run};
	gml_project_ProjectStateManager.init();
};
gml_Project.openInitialProject = function() {
	var path = Main.moduleArgs["open"];
	if(path != null) {
		var tmp = new gml_Project("",false);
		gml_Project.current = tmp;
		window.setTimeout(function() {
			ui_FileDrag.handle(StringTools.replace(path,"\\","/"),null);
			if(gml_Project.current == tmp) {
				gml_Project.open("");
				var tmp1 = haxe_io_Path.withoutDirectory(path);
				document.title = tmp1 + " - GMEdit";
			}
		});
	} else {
		gml_Project.open("");
	}
};
gml_Project.prototype = {
	setResourceTypeFromPath: function(resPath,resName) {
		var fsAt = resPath.indexOf("/");
		var bsAt = resPath.indexOf("\\");
		var slashAt;
		if(fsAt < 0) {
			if(bsAt < 0) {
				return;
			}
			slashAt = bsAt;
		} else if(bsAt >= 0) {
			slashAt = bsAt < fsAt ? bsAt : fsAt;
		} else {
			slashAt = fsAt;
		}
		var prefix = resPath.substring(0,slashAt);
		switch(prefix) {
		case "animcurves":case "backgrounds":case "fonts":case "objects":case "paths":case "rooms":case "scripts":case "sequences":case "shaders":case "sounds":case "sprites":case "tilesets":
			if(resName == null) {
				resName = new haxe_io_Path(resPath).file;
			}
			this.resourceTypes[resName] = prefix.substring(0,prefix.length - 1);
			break;
		default:
		}
	}
	,getResourceOrderFilePath: function() {
		return haxe_io_Path.withExtension(this.name,"resource_order");
	}
	,readResourceOrderFileSync: function() {
		if(!this.usesResourceOrderFile) {
			return null;
		}
		if(this.existsSync(this.getResourceOrderFilePath())) {
			return this.readYyFileSync(this.getResourceOrderFilePath());
		} else {
			return null;
		}
	}
	,writeResourceOrderFileSync: function(yy) {
		if(yy != null) {
			this.writeYyFileSync(this.getResourceOrderFilePath(),yy);
		}
	}
	,canLambda: function() {
		if(!this.isGMS23 && ui_Preferences.current.lambdaMagic) {
			if(this.lambdaGml == null) {
				return this.properties.lambdaMode == 2;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,getFrameRate: function() {
		var r = this.frameRate;
		if(r == null) {
			var _g = this.version.config.projectModeId;
			if(_g == null) {
				r = 30;
			} else {
				switch(_g) {
				case 1:
					if(this.gmxFirstRoomName != null) {
						try {
							var txt = this.readTextFileSync("rooms/" + this.gmxFirstRoomName + ".room.gmx");
							var mt = new RegExp("<speed>(\\d+)</speed>").exec(txt);
							r = mt != null ? Std.parseInt(mt[1]) : 30;
						} catch( _g ) {
							r = 30;
						}
					} else {
						r = 30;
					}
					break;
				case 2:
					try {
						var txt = this.readTextFileSync("options/main/inherited/options_main.inherited.yy");
						var mt = new RegExp("\"option_game_speed\": (\\d+)").exec(txt);
						r = mt != null ? Std.parseInt(mt[1]) : 60;
					} catch( _g ) {
						r = 60;
					}
					break;
				default:
					r = 30;
				}
			}
		}
		this.frameRate = r;
		return r;
	}
	,new_procSingle: function() {
		var _path = this.path;
		if(Electron_API != null) {
			switch(haxe_io_Path.extension(this.path).toLowerCase()) {
			case "gml":
				var dir = haxe_io_Path.directory(this.path);
				var dirName = haxe_io_Path.withoutDirectory(dir);
				var outer = haxe_io_Path.directory(dir);
				var outer2 = haxe_io_Path.directory(outer);
				this.version = gml_GmlVersion.none;
				this.path = null;
				if(Electron_FS.existsSync(tools_PathTools.ptJoin(dir,dirName + ".yy"))) {
					this.version = gml_GmlVersion.v2;
					var _g = 0;
					var _g1 = Electron_FS.readdirSync(outer2);
					while(_g < _g1.length) {
						var rel = _g1[_g];
						++_g;
						if(haxe_io_Path.extension(rel).toLowerCase() == "yyp") {
							this.path = tools_PathTools.ptJoin(outer2,rel);
							break;
						}
					}
				} else if(dirName == "scripts") {
					var _g = 0;
					var _g1 = Electron_FS.readdirSync(outer);
					while(_g < _g1.length) {
						var rel = _g1[_g];
						++_g;
						if(haxe_io_Path.extension(rel).toLowerCase() == "gmx" && haxe_io_Path.extension(haxe_io_Path.withoutExtension(rel)).toLowerCase() == "project") {
							this.path = tools_PathTools.ptJoin(outer,rel);
							break;
						}
					}
					if(this.path != null) {
						this.version = gml_GmlVersion.v1;
					}
				} else if(Electron_FS.existsSync(dir + ".extension.gmx")) {
					this.version = gml_GmlVersion.v1;
					var _g = 0;
					var _g1 = Electron_FS.readdirSync(outer2);
					while(_g < _g1.length) {
						var rel = _g1[_g];
						++_g;
						if(haxe_io_Path.extension(rel).toLowerCase() == "gmx" && haxe_io_Path.extension(haxe_io_Path.withoutExtension(rel)).toLowerCase() == "project") {
							this.path = tools_PathTools.ptJoin(outer2,rel);
							break;
						}
					}
				}
				if(this.version == gml_GmlVersion.none) {
					this.version = gml_GmlVersion.detect(Electron_FS.readFileSync(_path,"utf8"));
					if(this.version == gml_GmlVersion.none) {
						this.version = gml_GmlVersion.v2;
					}
				}
				window.setTimeout(function() {
					var tabName = haxe_io_Path.withoutDirectory(_path);
					if(haxe_io_Path.extension(tabName).toLowerCase() == "gmx") {
						tabName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(tabName));
					} else {
						tabName = haxe_io_Path.withoutExtension(tabName);
					}
					gml_file_GmlFile.open(tabName,_path);
				},100);
				break;
			case "gmx":
				switch(haxe_io_Path.extension(haxe_io_Path.withoutExtension(this.path)).toLowerCase()) {
				case "extension":case "object":
					this.version = gml_GmlVersion.v1;
					this.path = null;
					var dir = haxe_io_Path.directory(haxe_io_Path.directory(_path));
					var _g = 0;
					var _g1 = Electron_FS.readdirSync(dir);
					while(_g < _g1.length) {
						var rel = _g1[_g];
						++_g;
						if(haxe_io_Path.extension(rel).toLowerCase() == "gmx" && haxe_io_Path.extension(haxe_io_Path.withoutExtension(rel)).toLowerCase() == "project") {
							this.path = tools_PathTools.ptJoin(dir,rel);
							break;
						}
					}
					window.setTimeout(function() {
						var tabName = haxe_io_Path.withoutDirectory(_path);
						if(haxe_io_Path.extension(tabName).toLowerCase() == "gmx") {
							tabName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(tabName));
						} else {
							tabName = haxe_io_Path.withoutExtension(tabName);
						}
						gml_file_GmlFile.open(tabName,_path);
					},100);
					break;
				}
				break;
			case "yy":
				this.version = gml_GmlVersion.v2;
				this.path = null;
				var dir = haxe_io_Path.directory(haxe_io_Path.directory(haxe_io_Path.directory(_path)));
				var _g = 0;
				var _g1 = Electron_FS.readdirSync(dir);
				while(_g < _g1.length) {
					var rel = _g1[_g];
					++_g;
					if(haxe_io_Path.extension(rel).toLowerCase() == "yyp") {
						this.path = tools_PathTools.ptJoin(dir,rel);
						break;
					}
				}
				window.setTimeout(function() {
					var tabName = haxe_io_Path.withoutDirectory(_path);
					if(haxe_io_Path.extension(tabName).toLowerCase() == "gmx") {
						tabName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(tabName));
					} else {
						tabName = haxe_io_Path.withoutExtension(tabName);
					}
					gml_file_GmlFile.open(tabName,_path);
				},100);
				break;
			}
		}
	}
	,detectVersion: function() {
		if(this.path == "") {
			this.name = "";
			this.version = gml_GmlVersion.none;
			this.displayName = "Recent projects";
		} else {
			var pair = tools_PathTools.ptDetectProject(this.path);
			this.version = pair.version;
			this.displayName = pair.name;
		}
	}
	,close: function() {
		if(this.version != gml_GmlVersion.none) {
			plugins_PluginAPI._signal("projectClose",{ project : gml_Project.current});
		}
		ui_treeview_TreeView.saveOpen();
		var tabs = [];
		var activeTab = null;
		var _g = 0;
		var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
		while(_g < _g1.length) {
			var _tab = _g1[_g++];
			try {
				var tab = _tab;
				var ts = tab.gmlFile.kind.saveTabState(tab);
				if(ts != null) {
					if(tab.classList.contains("chrome-tab-pinned")) {
						ts.pinned = ui_ChromeTabTools.getPinLayer(tab);
					}
					if(tab.classList.contains("chrome-tab-current")) {
						activeTab = tabs.length;
					}
					tabs.push(ts);
				}
			} catch( _g2 ) {
			}
		}
		var data = { treeviewScrollTop : ui_treeview_TreeView.element.scrollTop, treeviewOpenNodes : ui_treeview_TreeView.openPaths, tabs : tabs, activeTab : activeTab, bookmarks : ui_ext_Bookmarks.getStates()};
		plugins_PluginAPI._signal("projectStateSave",{ project : this, state : data});
		gml_project_ProjectStateManager.set(this.path,data);
	}
	,finishedIndexing: function() {
		gml_Project.nameNode.innerText = this.displayName;
		if(gml_Project.current.hasGMLive) {
			ui_ext_GMLive.updateAll();
		}
		if(this.isGMS23) {
			yy_YyLoader.folderMap = null;
			var _g = 0;
			var _g1 = yy_YyLoader.itemsToInsert;
			while(_g < _g1.length) {
				var pair = _g1[_g];
				++_g;
				var el = pair.item;
				ui_treeview_TreeView.insertSorted(pair.dir,el);
				var th = ui_treeview_TreeView.thumbMap[el.getAttribute("data-full-path")];
				if(th != null) {
					ui_treeview_TreeView.setThumb(null,th,el);
				}
			}
		}
		var state = this.firstLoadState;
		if(state != null) {
			this.firstLoadState = null;
			var tabStates = state.tabs;
			if(tabStates == null) {
				if(state.tabPaths != null) {
					var _this = state.tabPaths;
					var result = new Array(_this.length);
					var _g = 0;
					var _g1 = _this.length;
					while(_g < _g1) {
						var i = _g++;
						result[i] = { fullPath : _this[i]};
					}
					tabStates = result;
				} else {
					tabStates = [];
				}
			}
			var activeFile = null;
			var _g_current = 0;
			var _g_array = tabStates;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				try {
					var file = null;
					if(_g_value.kind != null) {
						var loaders = file_FileKind.tabStateLoaders[_g_value.kind];
						if(loaders != null) {
							var _g = 0;
							while(_g < loaders.length) {
								file = loaders[_g++](_g_value);
								if(file != null) {
									break;
								}
							}
						}
					} else {
						var qry = { };
						if(_g_value.fullPath != null) {
							qry.path = _g_value.fullPath;
						} else {
							qry.path = this.fullPath(_g_value.relPath);
						}
						var el = ui_treeview_TreeView.find(true,qry);
						if(el != null) {
							file = ui_treeview_TreeView.handleItemClick(null,el,{ noExtern : true});
						}
					}
					if(file != null) {
						var pinLayerVal = _g_value.pinned;
						var pinLayer;
						if(pinLayerVal == null) {
							pinLayer = 0;
						} else if(typeof(pinLayerVal) == "boolean") {
							pinLayer = pinLayerVal ? 1 : 0;
						} else {
							pinLayer = pinLayerVal;
						}
						if(pinLayer > 0) {
							ui_ChromeTabs.impl.setTabPinLayer(file.tabEl,pinLayer);
						}
						if(_g_key == state.activeTab) {
							activeFile = file;
						}
					}
				} catch( _g1 ) {
					var _g2 = haxe_Exception.caught(_g1).unwrap();
					console.error("Error recovering " + this.path + ":",_g2);
				}
			}
			if(activeFile != null) {
				activeFile.tabEl.click();
			}
			plugins_PluginAPI._signal("projectStateRestore",{ project : this, state : state});
		}
	}
	,reload: function(first) {
		var _gthis = this;
		this.isIndexing = true;
		gml_Project.nameNode.innerText = "Loading...";
		window.setTimeout(function() {
			_gthis.objectChildren = Object.create(null);
			_gthis.objectParents = Object.create(null);
			if(_gthis.version.name == "v2" && first) {
				var yypContent = _gthis.readTextFileSync(_gthis.name);
				if(yypContent.includes("\"resourceType\": \"GMProject\"")) {
					_gthis.version = gml_GmlVersion.map["v23"];
				}
				yy_YyLoader.nextYypContent = yypContent;
			}
			gml_GmlAPI.set_version(_gthis.version);
			var state = null;
			if(first) {
				_gthis.properties = ui_project_ProjectProperties.load(_gthis);
				gml_GmlAPI.forceTemplateStrings = _gthis.properties.templateStringScript != null;
				parsers_GmlSeekData.map = Object.create(null);
				state = gml_project_ProjectStateManager.get(_gthis.path);
				if(state != null) {
					ui_ext_Bookmarks.setStates(state.bookmarks);
				}
			} else {
				ui_treeview_TreeView.saveOpen();
				if(ui_Preferences.current.clearAssetThumbsOnRefresh) {
					_gthis.spriteURLs = Object.create(null);
					_gthis.yySpriteURLs = Object.create(null);
				}
			}
			_gthis.reload_1();
			ace_AceTooltips.resetCache();
			ui_treeview_TreeView.restoreOpen(state != null ? state.treeviewOpenNodes : null);
			if(state != null) {
				ui_treeview_TreeView.element.scrollTop = state.treeviewScrollTop;
				if(first) {
					_gthis.firstLoadState = state;
				}
			}
			if(parsers_GmlSeeker.itemsLeft == 0) {
				gml_Project.nameNode.innerText = _gthis.displayName;
			} else {
				gml_Project.nameNode.innerText = "Indexing...";
			}
			if(Electron_API != null && ui_Preferences.current.taskbarOverlays) {
				try {
					if(_gthis.version != gml_GmlVersion.none) {
						if(!_gthis.isVirtual && _gthis.existsSync(_gthis.name + ".taskbar-overlay.png")) {
							Electron_IPC.send("set-taskbar-icon",_gthis.path + ".taskbar-overlay.png","");
						} else {
							var vov = _gthis.version.dir + "/taskbar-overlay.png";
							if(Electron_FS.existsSync(vov)) {
								Electron_IPC.send("set-taskbar-icon",vov,_gthis.version.label);
							} else {
								Electron_IPC.send("set-taskbar-icon",null,"");
							}
						}
					} else {
						Electron_IPC.send("set-taskbar-icon",null,"");
					}
				} catch( _g ) {
				}
			}
			if(plugins_PluginManager.ready == true && _gthis.version != gml_GmlVersion.none) {
				plugins_PluginAPI._signal("projectOpen",{ project : _gthis});
			}
			ui_ProjectStyle.reload();
		},1);
	}
	,reload_1: function() {
		if(this.version == gml_GmlVersion.none) {
			ui_RecentProjects.show();
		} else if(this.path == null) {
			ui_treeview_TreeView.clear();
		} else {
			var func = gml_Project.loaderMap[this.version.config.loadingMode];
			if(func != null) {
				func(this);
			}
		}
	}
	,search: function(fn,done,opt) {
		var func = gml_Project.searchMap[this.version.config.searchMode];
		if(func != null) {
			func(this,fn,done,opt);
		} else {
			done();
		}
	}
	,fullPath: function(path) {
		if(this.dir != "") {
			return StringTools.replace(this.dir + "/" + path,"\\","/");
		} else {
			return path;
		}
	}
	,relPath: function(path) {
		if(this.dir != "" && path.startsWith(this.dir)) {
			var p = this.dir.length;
			switch(HxOverrides.cca(path,p)) {
			case 47:case 92:
				return path.substring(p + 1);
			}
		}
		return path;
	}
	,existsSync: function(path) {
		return Electron_FS.existsSync(this.fullPath(path));
	}
	,mtimeSync: function(path) {
		return electron__$FileSystem_FileSystemImpl.mtimeSync(this.fullPath(path));
	}
	,unlinkSync: function(path) {
		Electron_FS.unlinkSync(this.fullPath(path));
	}
	,unlinkSyncSafe: function(path) {
		if(this.existsSync(path)) {
			this.unlinkSync(path);
		}
	}
	,readTextFile: function(path,fn) {
		var _gthis = this;
		if(ui_Preferences.current.assetCache) {
			var full = this.fullPath(path);
			var pair = this.fileCache[path];
			if(pair != null) {
				Electron_FS.stat(full,function(e,stat) {
					if(e == null && stat.mtimeMs == pair.mtime) {
						fn(null,pair.data);
					} else {
						Electron_FS.readFile(full,"utf8",function(e2,text) {
							fn(e2,text);
							if(e2 == null) {
								if(e == null) {
									_gthis.fileCache[path] = { data : text, mtime : stat.mtimeMs};
								} else {
									Electron_FS.stat(full,function(e3,stat2) {
										if(e3 == null) {
											_gthis.fileCache[path] = { data : text, mtime : stat2.mtimeMs};
										}
									});
								}
							}
						});
					}
				});
			} else {
				Electron_FS.readFile(full,"utf8",function(e,text) {
					fn(e,text);
					if(e == null) {
						Electron_FS.stat(full,function(e,stat) {
							if(e == null) {
								_gthis.fileCache[path] = { data : text, mtime : stat.mtimeMs};
							}
						});
					}
				});
			}
		} else {
			Electron_FS.readFile(this.fullPath(path),"utf8",fn);
		}
	}
	,readTextFileSync: function(path) {
		if(ui_Preferences.current.assetCache) {
			var full = this.fullPath(path);
			var mtime = electron__$FileSystem_FileSystemImpl.mtimeSync(full);
			var pair = this.fileCache[path];
			if(pair != null && pair.mtime == mtime) {
				return pair.data;
			}
			var result = Electron_FS.readFileSync(full,"utf8");
			this.fileCache[path] = { data : result, mtime : mtime};
			return result;
		} else {
			return Electron_FS.readFileSync(this.fullPath(path),"utf8");
		}
	}
	,writeTextFileSync: function(path,text) {
		Electron_FS.writeFileSync(this.fullPath(path),text);
	}
	,readJsonFile: function(path,callback) {
		this.readTextFile(path,function(e,d) {
			if(e == null) {
				try {
					d = JSON.parse(d);
				} catch( _g ) {
					d = null;
					e = haxe_Exception.caught(_g).unwrap();
				}
			}
			callback(e,d);
		});
	}
	,readYyFile: function(path,callback) {
		this.readTextFile(path,function(e,d) {
			if(e == null) {
				try {
					d = yy_YyJson.parse(d);
				} catch( _g ) {
					d = null;
					e = haxe_Exception.caught(_g).unwrap();
				}
			}
			callback(e,d);
		});
	}
	,readJsonFileSync: function(path) {
		return JSON.parse(this.readTextFileSync(path));
	}
	,readYyFileSync: function(path) {
		return yy_YyJson.parse(this.readTextFileSync(path));
	}
	,writeJsonFileSync: function(path,value) {
		this.writeTextFileSync(path,yy_YyJson.stringify(value));
	}
	,writeYyFileSync: function(path,value) {
		var text = yy_YyJsonPrinter.stringify(value,this.yyExtJson);
		if(ui_Preferences.current.avoidYyChanges && this.existsSync(path)) {
			try {
				if(yy_YyJsonPrinter.stringify(this.readYyFileSync(path),this.yyExtJson) == text) {
					return;
				}
			} catch( _g ) {
			}
		}
		this.writeTextFileSync(path,text);
	}
	,readGmxFile: function(path,fn) {
		var callback = fn;
		Electron_FS.readFile(this.fullPath(path),"utf8",function(e,d) {
			if(d != null) {
				try {
					d = gmx_SfGmx.parse(d);
				} catch( _g ) {
					d = null;
					e = haxe_Exception.caught(_g).unwrap();
				}
			}
			callback(e,d);
		});
	}
	,readGmxFileSync: function(path) {
		return gmx_SfGmx.parse(Electron_FS.readFileSync(this.fullPath(path),"utf8"));
	}
	,writeGmxFileSync: function(path,gmx) {
		this.writeTextFileSync(path,gmx.toGmxString());
	}
	,writeGmkSplitFileSync: function(path,xml) {
		this.writeTextFileSync(path,xml.toGmkSplitString());
	}
	,readConfigJsonFileSync: function(path) {
		if(this.existsSync("#config")) {
			var full = "#config/" + path;
			if(this.existsSync(full)) {
				try {
					return this.readJsonFileSync(full);
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					console.error("Failed to read `" + full + "`:",_g1);
				}
			}
		}
		return null;
	}
	,writeConfigJsonFileSync: function(path,value) {
		if(!this.existsSync("#config")) {
			this.mkdirSync("#config");
		}
		this.writeJsonFileSync("#config/" + path,value);
	}
	,renameSync: function(prev,next) {
		if(this.existsSync(prev)) {
			Electron_FS.renameSync(this.fullPath(prev),this.fullPath(next));
		}
	}
	,getImageURL: function(path) {
		var full = this.fullPath(path);
		var t = this.mtimeSync(path);
		if(t != null) {
			return "file:///" + full + "?mtime=" + t;
		} else {
			return null;
		}
	}
	,getSpriteURL: function(name) {
		var vi = this.version.config.projectModeId;
		if(vi == 0) {
			return null;
		}
		if(Object.prototype.hasOwnProperty.call(this.spriteURLs,name)) {
			return this.spriteURLs[name];
		}
		var r;
		if(vi == null) {
			r = null;
		} else {
			switch(vi) {
			case -81:
				r = this.getImageURL("sprites/" + name + ".images/image 0.png");
				break;
			case 1:
				r = this.getImageURL("sprites/images/" + name + "_0.png");
				break;
			case 2:
				var g = this.yyResourceGUIDs[name];
				if(g != null) {
					if(Object.prototype.hasOwnProperty.call(this.yySpriteURLs,g)) {
						r = this.yySpriteURLs[g];
					} else {
						try {
							var spritePath = this.yyUsesGUID ? this.yyResources[g].Value.resourcePath : this.yyResources[g].id.path;
							var frame = this.readYyFileSync(spritePath).frames[0];
							if(frame != null) {
								var frameName = this.yyUsesGUID ? frame.id : frame.name;
								r = this.getImageURL(haxe_io_Path.join([haxe_io_Path.directory(spritePath),frameName + ".png"]));
							} else {
								r = null;
							}
							this.yySpriteURLs[g] = r;
						} catch( _g ) {
							r = null;
						}
					}
				} else {
					r = null;
				}
				break;
			default:
				r = null;
			}
		}
		this.spriteURLs[name] = r;
		return r;
	}
	,getSpriteURLasync: function(name,fn) {
		var _gthis = this;
		if(this.version.config.projectMode == null) {
			return;
		}
		var soon_1 = function(fn,s) {
			window.setTimeout(function() {
				fn(s);
			});
		};
		if(Object.prototype.hasOwnProperty.call(this.spriteURLs,name)) {
			var s = this.spriteURLs[name];
			_gthis.spriteURLs[name] = s;
			soon_1(fn,s);
			return;
		}
		var _g = this.version.config.projectModeId;
		if(_g == null) {
			var s = null;
			_gthis.spriteURLs[name] = s;
			soon_1(fn,s);
		} else {
			switch(_g) {
			case -81:
				var full = this.fullPath("sprites/" + name + ".images/image 0.png");
				Electron_FS.access(full,0,function(e) {
					full = e == null ? "file:///" + full : null;
					_gthis.spriteURLs[name] = full;
					fn(full);
				});
				break;
			case 1:
				var full1 = this.fullPath("sprites/images/" + name + "_0.png");
				Electron_FS.access(full1,0,function(e) {
					full1 = e == null ? "file:///" + full1 : null;
					_gthis.spriteURLs[name] = full1;
					fn(full1);
				});
				break;
			case 2:
				var g = this.yyResourceGUIDs[name];
				if(g != null) {
					if(Object.prototype.hasOwnProperty.call(this.yySpriteURLs,g)) {
						var s = this.yySpriteURLs[g];
						_gthis.spriteURLs[name] = s;
						soon_1(fn,s);
					} else {
						var yyRes = this.yyResources[g];
						var spritePath = yyRes.Value != null ? yyRes.Value.resourcePath : yyRes.id.path;
						this.readYyFile(spritePath,function(e,sprite) {
							var r;
							if(e == null && sprite.frames != null) {
								var frame = sprite.frames[0];
								if(frame != null) {
									var fid = frame.name;
									if(fid == null) {
										fid = frame.id;
									}
									var framePath = haxe_io_Path.join([haxe_io_Path.directory(spritePath),fid + ".png"]);
									r = _gthis.getImageURL(framePath);
								} else {
									r = null;
								}
							} else {
								r = null;
							}
							_gthis.yySpriteURLs[g] = r;
							_gthis.spriteURLs[name] = r;
							fn(r);
						});
					}
				} else {
					var s = null;
					_gthis.spriteURLs[name] = s;
					soon_1(fn,s);
				}
				break;
			default:
				var s = null;
				_gthis.spriteURLs[name] = s;
				soon_1(fn,s);
			}
		}
	}
	,mkdirSync: function(path,options) {
		var full = this.fullPath(path);
		if(!Electron_FS.existsSync(full)) {
			Electron_FS.mkdirSync(full,options);
		}
	}
	,rmdirSync: function(path) {
		var full = this.fullPath(path);
		if(Electron_FS.existsSync(full)) {
			Electron_FS.rmdirSync(full);
		}
	}
	,rmdirRecSync: function(path) {
		Electron_FS.rmdirSync(this.fullPath(path),{ recursive : true});
	}
	,readdir: function(path,fn) {
		var _gthis = this;
		Electron_FS.readdir(path,function(e,rels) {
			var found;
			if(rels != null) {
				var full = _gthis.fullPath(path);
				found = [];
				var _g = 0;
				while(_g < rels.length) {
					var rel = rels[_g];
					++_g;
					var itemFull = haxe_io_Path.join([full,rel]);
					found.push({ fileName : rel, relPath : path + "/" + rel, fullPath : itemFull, isDirectory : Electron_FS.statSync(itemFull).isDirectory()});
				}
			} else {
				found = null;
			}
			fn(e,found);
		});
	}
	,readdirSync: function(path) {
		var full = this.fullPath(path);
		var out = [];
		var _g = 0;
		var _g1 = Electron_FS.readdirSync(full);
		while(_g < _g1.length) {
			var rel = _g1[_g];
			++_g;
			var itemFull = haxe_io_Path.join([full,rel]);
			out.push({ fileName : rel, relPath : haxe_io_Path.join([path,rel]), fullPath : itemFull, isDirectory : Electron_FS.statSync(itemFull).isDirectory()});
		}
		return out;
	}
	,openExternal: function(path) {
		Electron_IPC.send("shell-open",this.fullPath(path));
	}
	,showItemInFolder: function(path) {
		Electron_IPC.send("shell-show",this.fullPath(path));
	}
	,__class__: gml_Project
};
var gml_file_GmlFile = function(name,path,kind,data) {
	this.__changed = false;
	this.time = 0;
	this.extraFiles = [];
	this.name = name;
	this.path = path;
	this.kind = kind;
	this.context = kind.getTabContext(this,data);
	kind.init(this,data);
	this.load(data);
	this.editor.ready();
};
$hxClasses["gml.file.GmlFile"] = gml_file_GmlFile;
gml_file_GmlFile.__name__ = "gml.file.GmlFile";
gml_file_GmlFile.open = function(name,path,nav) {
	path = haxe_io_Path.normalize(path);
	var _g = 0;
	var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
	while(_g < _g1.length) {
		var tabEl = _g1[_g];
		++_g;
		var gmlFile = [tabEl.gmlFile];
		if(gmlFile[0] != null && gmlFile[0].path == path) {
			tabEl.click();
			if(nav != null) {
				window.setTimeout((function(gmlFile) {
					return function() {
						gmlFile[0].navigate(nav);
					};
				})(gmlFile));
			}
			return gmlFile[0];
		}
	}
	var kind;
	var data;
	if(nav != null && nav.kind != null) {
		kind = nav.kind;
		data = null;
	} else {
		var kd = gml_file_GmlFileKindTools.detect(path);
		kind = kd.kind;
		data = kd.data;
	}
	if(((kind) instanceof file_kind_misc_KExtern) && (Electron_API == null || nav != null && nav.noExtern)) {
		kind = file_kind_misc_KPlain.inst;
	}
	return kind.create(name,path,data,nav);
};
gml_file_GmlFile.openTab = function(file) {
	file.editor.stateLoad();
	gml_file_GmlFile.next = file;
	ui_ChromeTabs.impl.addTab({ title : file.name});
};
gml_file_GmlFile.set_current = function(file) {
	gml_file_GmlFile.current = file;
	var data = file != null ? parsers_GmlSeekData.map[file.path] : null;
	if(data != null) {
		var enable = data.hasCoroutines;
		synext_GmlExtCoroutines.enabled = enable;
		synext_GmlExtCoroutines.keywordMap = enable ? synext_GmlExtCoroutines.keywordMap1 : synext_GmlExtCoroutines.keywordMap0;
	} else {
		synext_GmlExtCoroutines.enabled = false;
		synext_GmlExtCoroutines.keywordMap = synext_GmlExtCoroutines.keywordMap0;
	}
	return file;
};
gml_file_GmlFile.prototype = {
	syncTime: function() {
		if(this.path != null && Electron_FS.existsSync != null) {
			if(this.kind.checkSelfForChanges) {
				try {
					this.time = Electron_FS.statSync(this.path).mtimeMs;
				} catch( _g ) {
				}
			}
			var _g = 0;
			var _g1 = this.extraFiles;
			while(_g < _g1.length) {
				var pair = _g1[_g];
				++_g;
				try {
					pair.time = Electron_FS.statSync(pair.path).mtimeMs;
				} catch( _g2 ) {
				}
			}
		}
	}
	,set_changed: function(z) {
		if(this.__changed != z) {
			this.__changed = z;
			if(z) {
				this.tabEl.classList.add("chrome-tab-changed");
			} else {
				this.tabEl.classList.remove("chrome-tab-changed");
			}
		}
		return z;
	}
	,close: function() {
		this.editor.stateSave();
		this.editor.destroy();
	}
	,getAceSession: function() {
		if(this.codeEditor != null) {
			return this.codeEditor.session;
		} else {
			return null;
		}
	}
	,navigate: function(nav) {
		return this.kind.navigate(this.editor,nav);
	}
	,rename: function(newName,newPath) {
		this.name = newName;
		this.path = newPath;
		this.context = this.kind.getTabContext(this,{ });
	}
	,load: function(data) {
		this.editor.load(data);
	}
	,markClean: function() {
		this.set_changed(false);
		var q = this.getAceSession();
		if(q != null) {
			q.getUndoManager().markClean();
		}
	}
	,savePost: function(out) {
		if(this.path != null) {
			this.syncTime();
			this.markClean();
		}
		if(this.path != null && out != null && this.codeEditor != null && this.codeEditor.kind.indexOnSave) {
			var data = parsers_GmlSeekData.map[this.path];
			if(data != null) {
				this.kind.index(this.path,out,data.main,true);
				if(gml_GmlAPI.version.config.indexingMode == "local") {
					this.liveApply();
				}
				this.codeEditor.session.gmlScopes.updateOnSave();
				var next = parsers_GmlSeekData.map[this.path];
				if(this.codeEditor.locals != next.locals) {
					this.codeEditor.locals = next.locals;
					if(gml_file_GmlFile.current == this) {
						this.codeEditor.session.bgTokenizer.start(0);
					}
				}
			}
		}
		if(this.path != null && gml_file_GmlFile.current == this && this.codeEditor != null && ((this.codeEditor.kind) instanceof file_kind_KGml) && this.codeEditor.kind.canSyntaxCheck) {
			var lp = gml_Project.current.properties.linterPrefs;
			var r = null;
			var _g = 0;
			while(_g < 1) {
				++_g;
				if(lp != null) {
					r = lp.onSave;
					if(r != null) {
						break;
					}
				}
				r = ui_Preferences.current.linterPrefs.onSave;
				if(r != null) {
					break;
				}
				r = parsers_linter_GmlLinterPrefs.defValue.onSave;
			}
			if(r) {
				parsers_linter_GmlLinter.runFor(this.codeEditor);
			}
		}
		plugins_PluginAPI._signal("fileSave",{ file : this, code : out});
	}
	,save: function() {
		return this.editor.save();
	}
	,liveApply: function() {
		var data = parsers_GmlSeekData.map[this.path];
		if(data != null) {
			var comp = Main.aceEditor.gmlCompleters;
			comp.gmlCompleter.items = data.comps.array;
			gml_GmlAPI.gmlComp = data.comps.array;
			gml_GmlAPI.gmlKind = data.kindMap;
			gml_GmlAPI.gmlEnums = data.enums.map;
			gml_GmlAPI.gmlDoc = data.docs.map;
			comp.globalFullCompleter.items = data.globalFullComp;
			gml_GmlAPI.gmlGlobalFullComp = data.globalFullComp;
			gml_GmlAPI.gmlGlobalFullMap = data.globalFullMap;
			comp.globalCompleter.items = data.globalFieldComp;
			gml_GmlAPI.gmlGlobalFieldComp = data.globalFieldComp;
			gml_GmlAPI.gmlGlobalFieldMap = data.globalFields.map;
			comp.instCompleter.items = data.instFieldComp;
			gml_GmlAPI.gmlInstFieldComp = data.instFieldComp;
			gml_GmlAPI.gmlInstFieldMap = data.instFieldMap;
		}
	}
	,checkChanges: function() {
		this.editor.checkChanges();
	}
	,focus: function() {
		this.checkChanges();
		var version = gml_GmlAPI.version;
		window.gmlResetOnDefine = version.resetOnDefine() && !((this.kind) instanceof file_kind_gml_KGmlSearchResults);
		if(version.config.indexingMode == "local") {
			this.liveApply();
		}
	}
	,existsContent: function() {
		return electron_FileWrap.existsSync(this.path);
	}
	,writeContent: function(code) {
		try {
			electron_FileWrap.writeTextFileSync(this.path,code);
			return true;
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g);
			electron_Dialog.showWarning("Couldn't update " + this.name + ":\n" + Std.string(_g1));
			return false;
		}
	}
	,readContent: function() {
		return electron_FileWrap.readTextFileSync(this.path);
	}
	,__class__: gml_file_GmlFile
};
var gml_file_GmlFileBackup = function() { };
$hxClasses["gml.file.GmlFileBackup"] = gml_file_GmlFileBackup;
gml_file_GmlFileBackup.__name__ = "gml.file.GmlFileBackup";
gml_file_GmlFileBackup.getPath = function(file) {
	var path = file.path;
	if(path == null) {
		return null;
	}
	path = haxe_io_Path.normalize(path);
	var dir = haxe_io_Path.normalize(gml_Project.current.dir);
	if(!path.startsWith(dir)) {
		return null;
	}
	return tools_NativeString.insert(path,dir.length,"/#backups");
};
gml_file_GmlFileBackup.save = function(file,code) {
	if(Electron_FS.existsSync == null) {
		return;
	}
	var num = ui_Preferences.current.backupCount[gml_Project.current.version.name];
	if(num == null || num <= 0) {
		return;
	}
	var path = gml_file_GmlFileBackup.getPath(file);
	if(path == null) {
		return;
	}
	if(!haxe_io_Path.isAbsolute(path)) {
		return;
	}
	try {
		var i = num - 1;
		var gap = 0;
		while(gap < 4) {
			var bkp = path + ".backup" + i;
			if(Electron_FS.existsSync(bkp)) {
				Electron_FS.unlinkSync(bkp);
				gap = 0;
			} else {
				++gap;
			}
			++i;
		}
		i = num - 1;
		while(i >= 0) {
			var s1 = path + ".backup" + i--;
			var s0 = path + ".backup" + i;
			if(Electron_FS.existsSync(s0)) {
				Electron_FS.renameSync(s0,s1);
			}
		}
		var pjDir = haxe_io_Path.normalize(gml_Project.current.dir);
		var dirs = haxe_io_Path.directory(path).substring(pjDir.length + 1).split("/");
		var dirp = pjDir;
		var _g = 0;
		while(_g < dirs.length) {
			dirp += "/" + dirs[_g++];
			if(!Electron_FS.existsSync(dirp)) {
				Electron_FS.mkdirSync(dirp);
			}
		}
		code = "// " + HxOverrides.dateStr(new Date()) + "\r\n" + code;
		Electron_FS.writeFileSync(path + ".backup" + 0,code);
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.log("Error making backup: ",_g1);
	}
};
gml_file_GmlFileBackup.load = function(name,path,kind) {
	if(gml_file_GmlFileKindTools.isGML(kind)) {
		kind = file_kind_gml_KGmlScript.inst;
	}
	var file = new gml_file_GmlFile(name,path,kind);
	file.path = null;
	gml_file_GmlFile.openTab(file);
};
gml_file_GmlFileBackup.updateMenu = function(file) {
	if(Electron_FS.existsSync == null) {
		return null;
	}
	var path = gml_file_GmlFileBackup.getPath(file);
	if(path == null) {
		return null;
	}
	if(!haxe_io_Path.isAbsolute(path)) {
		return null;
	}
	gml_file_GmlFileBackup.menu.clear();
	var name = file.name;
	var kind = file.kind;
	file = null;
	try {
		var i = 0;
		var gap = 0;
		while(gap < 4) {
			var bkp = [path + ".backup" + i];
			++i;
			if(Electron_FS.existsSync(bkp[0])) {
				var t = Electron_FS.statSync(bkp[0]).mtime;
				gml_file_GmlFileBackup.menu.append(new Electron_MenuItem({ id : "backup-" + i, label : i + ": " + HxOverrides.dateStr(t), click : (function(bkp) {
					return function() {
						gml_file_GmlFileBackup.load(name + " <backup>",bkp[0],kind);
					};
				})(bkp)}));
				gap = 0;
			} else {
				++gap;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
gml_file_GmlFileBackup.init = function() {
	gml_file_GmlFileBackup.menu = new Electron_Menu();
};
var gml_file_GmlFileExtra = function(path) {
	this.time = 0;
	this.path = path;
};
$hxClasses["gml.file.GmlFileExtra"] = gml_file_GmlFileExtra;
gml_file_GmlFileExtra.__name__ = "gml.file.GmlFileExtra";
gml_file_GmlFileExtra.prototype = {
	__class__: gml_file_GmlFileExtra
};
var gml_file_GmlFileKindTools = function() { };
$hxClasses["gml.file.GmlFileKindTools"] = gml_file_GmlFileKindTools;
gml_file_GmlFileKindTools.__name__ = "gml.file.GmlFileKindTools";
gml_file_GmlFileKindTools.isGML = function(kind) {
	return ((kind) instanceof file_kind_KGml);
};
gml_file_GmlFileKindTools.detect = function(path) {
	var ext = haxe_io_Path.extension(path).toLowerCase();
	var kinds = file_FileKind.map[ext];
	if(kinds != null) {
		var _g = 0;
		while(_g < kinds.length) {
			var out = kinds[_g++].detect(path,null);
			if(out != null) {
				return out;
			}
		}
	}
	return { kind : file_kind_misc_KExtern.inst, data : null};
};
var gml_funcdoc_GmlFuncDocArgsRet = function() { };
$hxClasses["gml.funcdoc.GmlFuncDocArgsRet"] = gml_funcdoc_GmlFuncDocArgsRet;
gml_funcdoc_GmlFuncDocArgsRet.__name__ = "gml.funcdoc.GmlFuncDocArgsRet";
gml_funcdoc_GmlFuncDocArgsRet.proc = function(doc,gml,from,_till,isAuto,autoArgs) {
	if(from == null) {
		from = 0;
	}
	var start = from;
	var till = _till != null ? _till : gml.length;
	var q = new parsers_GmlReader(gml);
	var chunk;
	var hasRetRx = gml_funcdoc_GmlFuncDocFromCode.rxHasReturn;
	var seekHasRet = !doc.hasReturn;
	var seekArg = isAuto && doc.args.length > 0 && !doc.rest;
	var hasArgRx = gml_funcdoc_GmlFuncDocArgsRet.rxHasArgArray;
	var autoRxs = null;
	if(autoArgs != null) {
		try {
			autoRxs = [];
			var _g = 0;
			while(_g < autoArgs.length) {
				var arg = autoArgs[_g];
				++_g;
				autoRxs.push(new RegExp("\\b(?:" + arg + "\\s*[!=]=\\s*undefined" + "|is_undefined\\s*\\(\\s*" + arg + "\\s*\\)" + ")"));
			}
		} catch( _g ) {
			autoRxs = null;
		}
	}
	var flush = function(p) {
		chunk = q.source.substring(start,p);
		if(seekHasRet && hasRetRx.test(chunk)) {
			seekHasRet = false;
			doc.set_returnTypeString("");
			if(!seekArg) {
				return;
			}
		}
		if(seekArg && hasArgRx.test(chunk)) {
			seekArg = false;
			doc.minArgsCache = 0;
			doc.rest = true;
			if(!seekHasRet) {
				return;
			}
		}
		if(autoRxs != null) {
			var m = doc.minArgsCache;
			if(m != 0) {
				var n = m != null ? m : autoRxs.length;
				var i = -1;
				while(++i < n) if(autoRxs[i].test(chunk)) {
					doc.minArgsCache = i;
					break;
				}
			}
		}
		start = q.pos;
	};
	q.pos = from;
	while(q.pos < till) {
		var p = q.pos;
		if(q.skipCommon_inline() >= 0) {
			flush(p);
		} else if(tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos)) && q.readIdent() == "function") {
			flush(p);
			var depth = 0;
			_hx_loop3: while(q.pos < till) switch(q.source.charCodeAt(q.pos)) {
			case 123:
				q.pos += 1;
				++depth;
				break;
			case 125:
				q.pos += 1;
				if(--depth <= 0) {
					break _hx_loop3;
				}
				break;
			default:
				if(q.skipCommon_inline() < 0) {
					q.pos += 1;
				}
			}
			start = q.pos;
		} else {
			q.pos += 1;
		}
	}
	chunk = q.source.substring(start,q.pos);
	if(seekHasRet) {
		var hasRet = hasRetRx.test(chunk);
		if(hasRet) {
			if(doc.get_returnTypeString() == null) {
				doc.set_returnTypeString("");
			}
		} else {
			doc.set_returnTypeString(null);
		}
		doc.hasReturn = hasRet;
	}
	if(seekArg && hasArgRx.test(chunk)) {
		doc.minArgsCache = 0;
		doc.rest = true;
	}
	if(autoRxs != null) {
		var m = doc.minArgsCache;
		if(m != 0) {
			var n = m != null ? m : autoRxs.length;
			var i = -1;
			while(++i < n) if(autoRxs[i].test(chunk)) {
				doc.minArgsCache = i;
				break;
			}
		}
	}
};
var gml_funcdoc_GmlFuncDocCheapArgs = function() { };
$hxClasses["gml.funcdoc.GmlFuncDocCheapArgs"] = gml_funcdoc_GmlFuncDocCheapArgs;
gml_funcdoc_GmlFuncDocCheapArgs.__name__ = "gml.funcdoc.GmlFuncDocCheapArgs";
gml_funcdoc_GmlFuncDocCheapArgs.parse = function(code) {
	var q = new parsers_GmlReader(code);
	var rxo = gml_funcdoc_GmlFuncDocCheapArgs.autogen_argo;
	var rxoi = gml_funcdoc_GmlFuncDocCheapArgs.autogen_argoi;
	var rxc = gml_funcdoc_GmlFuncDocCheapArgs.autogen_argi;
	var trail = false;
	var argc = 0;
	var chunk;
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		if(q.skipCommon_inline() >= 0) {
			chunk = q.source.substring(start,p);
			if(!trail && rxo.test(chunk)) {
				trail = true;
				rxc = rxoi;
			}
			while(argc < 16) if(rxc[argc].test(chunk)) {
				++argc;
			} else {
				break;
			}
			start = q.pos;
		} else {
			q.pos += 1;
		}
	}
	chunk = q.source.substring(start,q.pos);
	if(!trail && rxo.test(chunk)) {
		trail = true;
		rxc = rxoi;
	}
	while(argc < 16) if(rxc[argc].test(chunk)) {
		++argc;
	} else {
		break;
	}
	if(argc == 0) {
		if(trail) {
			return "...";
		} else {
			return "";
		}
	}
	var out = "v0";
	var _g = 1;
	var _g1 = argc;
	while(_g < _g1) out += ", v" + _g++;
	if(trail) {
		out += ", ...";
	}
	return out;
};
var gml_funcdoc_GmlFuncDocFromCode = function() { };
$hxClasses["gml.funcdoc.GmlFuncDocFromCode"] = gml_funcdoc_GmlFuncDocFromCode;
gml_funcdoc_GmlFuncDocFromCode.__name__ = "gml.funcdoc.GmlFuncDocFromCode";
gml_funcdoc_GmlFuncDocFromCode.skipArgCountCmp = function(chunk,k) {
	var c;
	while(--k >= 0) {
		c = chunk.charCodeAt(k);
		if(!(c > 8 && c < 14 || c == 32)) {
			break;
		}
	}
	c = chunk.charCodeAt(k);
	if(!(c >= 48 && c <= 57)) {
		return -1;
	}
	while(--k >= 0) {
		c = chunk.charCodeAt(k);
		if(!(c >= 48 && c <= 57)) {
			break;
		}
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	if(chunk.charCodeAt(k) == 61) {
		--k;
	}
	if(chunk.charCodeAt(k) == 62) {
		--k;
	} else {
		return -1;
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	var acEnd = k + 1;
	if(chunk.charCodeAt(k) != 116) {
		return -1;
	}
	while(--k >= 0) {
		c = chunk.charCodeAt(k);
		if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57)) {
			break;
		}
	}
	if(acEnd - k != 15 || chunk.substring(k + 1,acEnd) != "argument_count") {
		return -1;
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	return k;
};
gml_funcdoc_GmlFuncDocFromCode.skipOptArg = function(chunk,k) {
	var c;
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	if(chunk.charCodeAt(k) != 41) {
		return -1;
	}
	k = gml_funcdoc_GmlFuncDocFromCode.skipArgCountCmp(chunk,k);
	if(k < 0) {
		return -1;
	}
	if(chunk.charCodeAt(k) == 40) {
		--k;
	} else {
		return -1;
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	if(chunk.charCodeAt(k) == 102) {
		--k;
	} else {
		return -1;
	}
	if(chunk.charCodeAt(k) == 105) {
		--k;
	} else {
		return -1;
	}
	if(tools_CharCode.isIdent1_ni(chunk.charCodeAt(k))) {
		return -1;
	}
	return k;
};
gml_funcdoc_GmlFuncDocFromCode.splitOnSubFunctions = function(gml) {
	if(!Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdKind,"function")) {
		return [gml];
	}
	var arr = [];
	var start = 0;
	var q = new parsers_GmlReader(gml);
	while(q.get_loop()) {
		if(q.skipCommon_inline() >= 0) {
			continue;
		}
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			continue;
		}
		q.skipIdent1();
		if(q.source.substring(p,q.pos) != "function") {
			continue;
		}
		while(q.get_loop() && q.source.charCodeAt(q.pos) != 123) q.pos += 1;
		var depth = 1;
		_hx_loop3: while(q.get_loop()) {
			c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 123:
				++depth;
				break;
			case 125:
				if(--depth <= 0) {
					break _hx_loop3;
				}
				break;
			default:
				q.skipCommon_inline();
			}
		}
		arr.push(gml.substring(start,p));
		start = q.pos;
	}
	arr.push(gml.substring(start));
	return arr;
};
gml_funcdoc_GmlFuncDocFromCode.proc = function(doc,gml,from,_till) {
	if(from == null) {
		from = 0;
	}
	var rx = gml_funcdoc_GmlFuncDocFromCode.rxArg;
	doc.clear();
	var ntrx = gml_GmlFuncDoc.nameTrimRegex.update(gml_Project.current.properties.argNameRegex);
	var hasRet = false;
	var hasRetRx = gml_funcdoc_GmlFuncDocFromCode.rxHasReturn;
	var hasVarArg = false;
	var hasVarArgRx = gml_funcdoc_GmlFuncDocFromCode.rxHasVarArg;
	var hasOpt = false;
	var q = null;
	var start = 0;
	var flush = function(p) {
		var chunk = q.source.substring(start,p);
		rx.lastIndex = 0;
		var mt = rx.exec(chunk);
		var c;
		if(!hasRet && hasRetRx.test(chunk)) {
			hasRet = true;
		}
		if(!hasVarArg && hasVarArgRx.test(chunk)) {
			hasVarArg = true;
		}
		while(mt != null) {
			var argis = ((mt[1]) || (mt[2]));
			if(argis != null) {
				var argi = Std.parseInt(argis);
				var k = mt.index;
				var hasSet = false;
				var isOpt = false;
				while(--k >= 0) {
					c = chunk.charCodeAt(k);
					if(c > 8 && c < 14 || c == 32) {
						continue;
					}
					if(c == 63) {
						hasSet = false;
						var k1 = gml_funcdoc_GmlFuncDocFromCode.skipArgCountCmp(chunk,k);
						if(k1 >= 0) {
							k = k1;
							c = chunk.charCodeAt(k1);
							isOpt = true;
						}
					}
					hasSet = c == 61 && chunk.charCodeAt(k - 1) != 61;
					break;
				}
				var name = null;
				if(hasSet) {
					while(--k >= 0) {
						c = chunk.charCodeAt(k);
						if(c > 8 && c < 14 || c == 32) {
							continue;
						}
						var suffix = null;
						if(c == 47 && chunk.charCodeAt(k - 1) == 42) {
							var suffixEnd = --k;
							while(--k >= 0) {
								c = chunk.charCodeAt(k);
								if(c == 42 && chunk.charCodeAt(k - 1) == 47) {
									if(chunk.charCodeAt(k + 1) == 58) {
										suffix = chunk.substring(k + 1,suffixEnd);
									}
									k -= 2;
									while(k >= 0) {
										c = chunk.charCodeAt(k);
										if(c > 8 && c < 14 || c == 32) {
											--k;
										} else {
											break;
										}
									}
									c = chunk.charCodeAt(k);
									break;
								}
							}
						}
						if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57)) {
							break;
						}
						var nameEnd = k + 1;
						var nameStart = 0;
						while(--k >= 0) {
							c = chunk.charCodeAt(k);
							if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
								continue;
							}
							nameStart = k + 1;
							break;
						}
						name = chunk.substring(nameStart,nameEnd);
						if(ntrx != null) {
							var mt1 = ntrx.exec(name);
							if(mt1 != null && mt1[1] != null) {
								name = mt1[1];
							}
						}
						if(suffix != null) {
							name += suffix;
						}
						if(gml_funcdoc_GmlFuncDocFromCode.skipOptArg(chunk,k) >= 0) {
							isOpt = true;
						}
						break;
					}
				}
				if(name == null) {
					name = "arg" + argi;
				}
				if(isOpt) {
					hasOpt = true;
					name = "?" + name;
				}
				doc.args[argi] = name;
			} else {
				doc.rest = true;
			}
			mt = rx.exec(chunk);
		}
	};
	var sections = gml_funcdoc_GmlFuncDocFromCode.splitOnSubFunctions(gml.substring(from,_till));
	var _g = 0;
	while(_g < sections.length) {
		q = new parsers_GmlReader(sections[_g++]);
		start = 0;
		while(q.get_loop()) {
			var p = q.pos;
			var n;
			if(q.source.charCodeAt(q.pos) == 47 && q.source.charCodeAt(q.pos + 1) == 42 && q.source.charCodeAt(q.pos + 2) == 58) {
				q.pos += 2;
				q.skipComment();
				n = -1;
			} else {
				n = q.skipCommon_inline();
			}
			if(n >= 0) {
				flush(p);
				start = q.pos;
			} else {
				q.pos += 1;
			}
		}
		flush(q.pos);
	}
	if(doc.rest) {
		doc.args.push("...");
	}
	if(hasRet) {
		if(doc.post == ")") {
			doc.post = ")➜";
		}
	} else {
		doc.post = ")";
	}
	doc.hasReturn = hasRet;
	if(!hasOpt && hasVarArg) {
		doc.minArgsCache = 0;
	}
};
var gml_funcdoc_GmlFuncDocParser = function() { };
$hxClasses["gml.funcdoc.GmlFuncDocParser"] = gml_funcdoc_GmlFuncDocParser;
gml_funcdoc_GmlFuncDocParser.__name__ = "gml.funcdoc.GmlFuncDocParser";
gml_funcdoc_GmlFuncDocParser.parse = function(str,out) {
	str = StringTools.replace(str,"->","➜");
	var name = str;
	var pre = str;
	var post = "";
	var args = [];
	var rest = false;
	var argTypes = null;
	var templateItems = null;
	var parOpenAt = str.indexOf("(");
	var hasReturn = null;
	if(parOpenAt >= 0) {
		pre = str.substring(0,parOpenAt + 1);
		name = str.substring(0,parOpenAt);
		var mt = gml_funcdoc_GmlFuncDocParser.rxTemplate.exec(pre);
		if(mt != null) {
			name = mt[1];
			templateItems = gml_type_GmlTypeTemplateItem.parseSplit(mt[2]);
		}
		var depth = 1;
		var project = gml_Project.current;
		var version = project != null ? project.version : gml_GmlVersion.v2;
		var q = new parsers_GmlReader(str,version);
		q.pos = parOpenAt + 1;
		var argStart = q.pos;
		var isType = false;
		var isValue = false;
		_hx_loop1: while(q.get_loop()) {
			var c = q.source.charCodeAt(q.pos++);
			if(q.pos == argStart) {
				if(c == 32 || c == 9) {
					++argStart;
				}
			}
			switch(c) {
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(version,true);
				}
				break;
			case 44:
				if(depth == 1) {
					args.push(q.source.substring(argStart,q.pos - 1).trim());
					argStart = q.pos;
					isType = false;
					isValue = false;
				}
				break;
			case 46:
				if(!rest && q.source.charCodeAt(q.pos) == 46 && q.source.charCodeAt(q.pos + 1) == 46) {
					rest = true;
					q.pos += 2;
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				}
				break;
			case 58:
				if(!isValue && depth == 1) {
					isType = true;
				}
				break;
			case 60:
				if(isType) {
					++depth;
				}
				break;
			case 61:
				isValue = true;
				isType = false;
				break;
			case 62:
				if(isType) {
					if(depth > 1) {
						--depth;
					}
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,version);
				break;
			case 40:case 91:case 123:
				++depth;
				break;
			case 41:case 93:case 125:
				if(--depth <= 0) {
					if(args.length > 0 || q.pos - 1 > argStart) {
						args.push(q.source.substring(argStart,q.pos - 1).trim());
					}
					if(q.source.substr(q.pos,1) == "➜") {
						hasReturn = q.source.substr((q.pos + 1),4) != "void" || tools_CharCode.isIdent1_ni(q.source.charCodeAt(q.pos + 5));
					}
					post = str.substring(q.pos - 1);
					break _hx_loop1;
				}
				break;
			}
		}
		var rxt = gml_funcdoc_GmlFuncDocParser.rxArgType;
		var showArgTypes = ui_Preferences.current.showArgTypesInStatusBar;
		var _g_current = 0;
		var _g_array = args;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var i = [_g_current++];
			var arg = _g_value;
			var hadBrackets = !showArgTypes && _g_value.startsWith("[") && _g_value.endsWith("]");
			if(hadBrackets) {
				arg = _g_value.substring(1,_g_value.length - 1);
			}
			arg = arg.replace(rxt,(function(i) {
				return function(argStr,t1,t2) {
					var typeStr = ((t1) || (t2)).trimRight();
					if(templateItems != null) {
						typeStr = gml_type_GmlTypeTools.patchTemplateItems(typeStr,templateItems);
					}
					if(argTypes == null) {
						var size = args.length;
						argTypes = new Array(size);
					}
					argTypes[i[0]] = gml_type_GmlTypeParser.parse(typeStr,str);
					if(showArgTypes) {
						return argStr;
					} else {
						return "";
					}
				};
			})(i));
			if(hadBrackets) {
				arg = "[" + arg + "]";
			}
			args[i[0]] = arg;
		}
	}
	if(out != null) {
		out.minArgsCache = null;
		out.name = name;
		out.pre = pre;
		out.post = post;
		out.args = args;
		out.rest = rest;
	} else {
		out = new gml_GmlFuncDoc(name,pre,post,args,rest);
	}
	out.argTypes = argTypes;
	out.templateItems = templateItems;
	out.hasReturn = hasReturn;
	return out;
};
var gml_project_ProjectStateManager = function() { };
$hxClasses["gml.project.ProjectStateManager"] = gml_project_ProjectStateManager;
gml_project_ProjectStateManager.__name__ = "gml.project.ProjectStateManager";
gml_project_ProjectStateManager.get = function(path) {
	path = StringTools.replace(path,"\\","/");
	if(Electron_FS.existsSync != null) {
		if(gml_project_ProjectStateManager.conf.sync()) {
			gml_project_ProjectStateManager.conf.data = { };
		}
		return gml_project_ProjectStateManager.conf.data[path];
	} else {
		try {
			var stateText = window.localStorage.getItem("project:" + path);
			if(stateText == null || stateText == "") {
				return null;
			}
			return JSON.parse(stateText);
		} catch( _g ) {
			return null;
		}
	}
};
gml_project_ProjectStateManager.set = function(path,state) {
	path = StringTools.replace(path,"\\","/");
	var t = new Date().getTime();
	if(Electron_FS.existsSync != null) {
		state.mtime = t;
		gml_project_ProjectStateManager.conf.sync();
		gml_project_ProjectStateManager.conf.data[path] = state;
		gml_project_ProjectStateManager.conf.flush();
	} else {
		window.localStorage.setItem("project:" + path,JSON.stringify(state));
		window.localStorage.setItem("@project:" + path,"" + t);
	}
};
gml_project_ProjectStateManager.init = function() {
	var keepTime = 86400000 * ui_Preferences.current.projectSessionTime;
	var remTime = new Date().getTime() - keepTime;
	if(Electron_FS.existsSync != null) {
		gml_project_ProjectStateManager.conf = new electron_ConfigFile("session","project-states");
		var changed;
		if(gml_project_ProjectStateManager.conf.sync(true)) {
			gml_project_ProjectStateManager.conf.data = { };
			changed = true;
		} else {
			var remList = [];
			var access = gml_project_ProjectStateManager.conf.data;
			var _g_keys = Reflect.fields(access);
			var _g_index = 0;
			while(_g_index < _g_keys.length) {
				var key = _g_keys[_g_index++];
				if(access[key].mtime < remTime) {
					remList.push(key);
				}
			}
			changed = remList.length > 0;
			var _g = 0;
			while(_g < remList.length) delete gml_project_ProjectStateManager.conf.data[remList[_g++]];
		}
		if(changed) {
			gml_project_ProjectStateManager.conf.flush();
		}
	} else {
		var ls = window.localStorage;
		var remList = [];
		var _g = 0;
		var _g1 = ls.length;
		while(_g < _g1) {
			var k = ls.key(_g++);
			if(k.startsWith("@project:")) {
				if(parseFloat(ls.getItem(k)) < remTime) {
					remList.push(k);
					remList.push(k.substring(1));
				}
			}
		}
		var _g = 0;
		while(_g < remList.length) ls.removeItem(remList[_g++]);
	}
};
var gml_type_GmlTypeAnon = function() {
	this.fields = Object.create(null);
};
$hxClasses["gml.type.GmlTypeAnon"] = gml_type_GmlTypeAnon;
gml_type_GmlTypeAnon.__name__ = "gml.type.GmlTypeAnon";
gml_type_GmlTypeAnon.prototype = {
	__class__: gml_type_GmlTypeAnon
};
var gml_type_GmlTypeAnonField = function(t,d) {
	this.type = t;
	this.doc = d;
};
$hxClasses["gml.type.GmlTypeAnonField"] = gml_type_GmlTypeAnonField;
gml_type_GmlTypeAnonField.__name__ = "gml.type.GmlTypeAnonField";
gml_type_GmlTypeAnonField.prototype = {
	__class__: gml_type_GmlTypeAnonField
};
var gml_type_GmlTypeMap = function(fieldMap,fieldList,defaultType) {
	this.fieldMap = fieldMap;
	this.fieldList = fieldList;
	this.defaultType = defaultType;
};
$hxClasses["gml.type.GmlTypeMap"] = gml_type_GmlTypeMap;
gml_type_GmlTypeMap.__name__ = "gml.type.GmlTypeMap";
gml_type_GmlTypeMap.prototype = {
	__class__: gml_type_GmlTypeMap
};
var gml_type_GmlTypeMapField = function(name,type) {
	this.name = name;
	this.type = type;
};
$hxClasses["gml.type.GmlTypeMapField"] = gml_type_GmlTypeMapField;
gml_type_GmlTypeMapField.__name__ = "gml.type.GmlTypeMapField";
gml_type_GmlTypeMapField.prototype = {
	__class__: gml_type_GmlTypeMapField
};
var gml_type_GmlTypeKind = {};
var gml_type_GmlTypeCanCastTo = function() { };
$hxClasses["gml.type.GmlTypeCanCastTo"] = gml_type_GmlTypeCanCastTo;
gml_type_GmlTypeCanCastTo.__name__ = "gml.type.GmlTypeCanCastTo";
gml_type_GmlTypeCanCastTo.canCastToAnyOf = function(from,toArr,tpl,imp) {
	var _g = 0;
	var _g1 = toArr;
	while(_g < _g1.length) if(gml_type_GmlTypeCanCastTo.canCastTo(from,_g1[_g++],tpl,imp)) {
		return true;
	}
	return false;
};
gml_type_GmlTypeCanCastTo.canCastTo = function(from,to,tpl,imp) {
	while(true) {
		from = gml_type_GmlTypeTools.resolve(from);
		to = gml_type_GmlTypeTools.resolve(to);
		var kfrom = gml_type_GmlTypeTools.getKind(from);
		var kto = gml_type_GmlTypeTools.getKind(to);
		if(!gml_type_GmlTypeCanCastTo.allowVoidCast) {
			if(kfrom == 5 || kto == 5) {
				return false;
			}
		}
		if(from == to) {
			return true;
		}
		if(from == null || to == null) {
			return true;
		}
		if(kfrom == 1 || kto == 1) {
			return true;
		}
		if(gml_type_GmlTypeTools.equals(from,to,tpl)) {
			return true;
		}
		if(kto == 3) {
			if(kfrom == 16) {
				return true;
			}
			if(kfrom != 3 && gml_type_GmlTypeCanCastTo.canCastTo(from,gml_type_GmlTypeTools.unwrapParam(to),tpl,imp)) {
				return true;
			}
		}
		if(kfrom == 16) {
			if(gml_type_GmlTypeCanCastTo.allowNullToAny) {
				return true;
			}
			var nsName = gml_type_GmlTypeTools.getNamespace(to);
			var ns = nsName != null ? gml_GmlAPI.gmlNamespaces[nsName] : null;
			if(ns != null && ns.isNullable) {
				return true;
			}
		}
		if(gml_type_GmlTypeCanCastTo.isExplicit) {
			if(kfrom == 3) {
				if(gml_type_GmlTypeCanCastTo.canCastTo(gml_type_GmlTypeTools.unwrapParam(from),to,tpl,imp)) {
					return true;
				}
			} else if(from._hx_index == 1) {
				var _g = 0;
				var _g1 = from.types;
				while(_g < _g1.length) if(gml_type_GmlTypeCanCastTo.canCastTo(_g1[_g++],to,tpl,imp)) {
					return true;
				}
			}
		} else if(kfrom == 3 && gml_type_GmlTypeCanCastTo.allowImplicitNullCast) {
			if(gml_type_GmlTypeCanCastTo.canCastTo(gml_type_GmlTypeTools.unwrapParam(from),to,tpl,imp)) {
				return true;
			}
		}
		if(kto == 49) {
			switch(from._hx_index) {
			case 0:
				var _g2 = from.name;
				if(!gml_type_GmlTypeCanCastTo.canCastTo(from,gml_type_GmlTypeDef.asset,tpl,imp)) {
					var ns1 = gml_GmlAPI.gmlNamespaces[_g2];
					if(((ns1) && (ns1.canCastToStruct))) {
						return true;
					}
				}
				var doc = gml_GmlAPI.gmlDoc[_g2];
				if(doc != null && doc.isConstructor) {
					return true;
				}
				break;
			case 2:
				return true;
			default:
			}
		}
		if(tpl != null) {
			to = gml_type_GmlTypeTools.mapTemplateTypes(to,tpl);
			if(to == null) {
				return false;
			}
		}
		switch(from._hx_index) {
		case 0:
			var _g3 = from.name;
			var _g4 = from.params;
			var _g5 = from.kind;
			switch(to._hx_index) {
			case 0:
				var _g6 = to.name;
				var _g7 = to.params;
				var _g8 = to.kind;
				if(_g5 == 9 && _g6 == "script") {
					return true;
				}
				switch(_g8) {
				case 9:
					if(_g5 != 9) {
						return false;
					}
					var i = _g7.length;
					if(i == 0 || _g4.length == 0) {
						return true;
					}
					if(_g4.length != i) {
						return false;
					}
					if(--i >= 0) {
						var couldVoidCast = gml_type_GmlTypeCanCastTo.allowVoidCast;
						gml_type_GmlTypeCanCastTo.allowVoidCast = true;
						var ok = gml_type_GmlTypeCanCastTo.canCastTo(_g4[i],_g7[i],tpl,imp);
						gml_type_GmlTypeCanCastTo.allowVoidCast = couldVoidCast;
						if(!ok) {
							return false;
						}
					}
					while(--i >= 0) if(!gml_type_GmlTypeCanCastTo.canCastTo(_g4[i],_g7[i],tpl,imp)) {
						return false;
					}
					return true;
				case 17:
					if(_g5 == 18) {
						if(!gml_type_GmlTypeCanCastTo.allowImplicitBoolIntCasts) {
							return gml_type_GmlTypeCanCastTo.isExplicit;
						} else {
							return true;
						}
					}
					break;
				case 18:
					if(_g5 == 17) {
						if(!gml_type_GmlTypeCanCastTo.allowImplicitBoolIntCasts) {
							return gml_type_GmlTypeCanCastTo.isExplicit;
						} else {
							return true;
						}
					}
					break;
				case 32:
					if(_g7.length == 0 && Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlEnums,_g3)) {
						return true;
					}
					break;
				case 40:
					if(_g5 == 32) {
						if(gml_type_GmlTypeTools.isAny(_g4[0])) {
							return true;
						}
					}
					break;
				case 48:
					var ns2 = gml_GmlAPI.gmlNamespaces[_g3];
					if(((ns2) && (ns2.isObject))) {
						return true;
					}
					if(gml_GmlAPI.gmlKind[_g3] == "asset.object") {
						return true;
					}
					break;
				case 50:
					var ns3 = gml_GmlAPI.gmlNamespaces[_g3];
					if(((ns3) && (ns3.isObject))) {
						return true;
					}
					var nk = gml_GmlAPI.gmlKind[_g3];
					if(nk != null && nk.startsWith("asset.")) {
						return true;
					}
					break;
				default:
				}
				if(_g5 == _g8 && (_g5 != 2 || _g3 == _g6)) {
					var i1 = _g4.length;
					while(--i1 >= 0) if(_g7[i1] != null) {
						break;
					}
					if(i1 < 0) {
						return true;
					}
					i1 = _g7.length;
					while(--i1 >= 0) if(_g4[i1] != null) {
						break;
					}
					if(i1 < 0) {
						return true;
					}
				}
				var checkBoolOp = kto == 18 && gml_type_GmlTypeCanCastTo.isBoolOp;
				if(checkBoolOp && kfrom == 48) {
					return true;
				}
				var step = imp != null ? -1 : 0;
				var result = null;
				while(++step < 2) {
					var ns4 = step > 0 ? gml_GmlAPI.gmlNamespaces[_g3] : imp.namespaces[_g3];
					if(ns4 == null) {
						continue;
					}
					var ns5 = ns4;
					var depth = 0;
					var found = false;
					while(ns5 != null && ++depth < 128) {
						if(checkBoolOp && ns5.isObject) {
							found = true;
							break;
						}
						var _this = ns5.interfaces.array;
						var _g_current = 0;
						while(_g_current < _this.length) {
							var itf = _this[_g_current++];
							if(checkBoolOp && itf.isObject) {
								found = true;
								break;
							}
							if(itf.name == _g6) {
								found = true;
								break;
							}
						}
						if(found) {
							break;
						}
						ns5 = ns5.parent;
						if(((ns5) && ((ns5.name == _g6)))) {
							found = true;
							break;
						}
					}
					result = found;
					if(result) {
						break;
					}
				}
				if(result) {
					return true;
				}
				break;
			case 1:
				return gml_type_GmlTypeCanCastTo.canCastToAnyOf(from,to.types,tpl,imp);
			case 5:
				if(_g5 == 34) {
					if(_g4.length == 0) {
						return true;
					}
				}
				break;
			default:
			}
			break;
		case 1:
			var _g9 = from.types;
			if(to._hx_index == 1) {
				var _g10 = to.types;
				var _g11 = 0;
				var _g12 = _g9;
				while(_g11 < _g12.length) if(!gml_type_GmlTypeCanCastTo.canCastToAnyOf(_g12[_g11++],_g10,tpl,imp)) {
					return false;
				}
				return true;
			} else {
				var _g13 = 0;
				var _g14 = _g9;
				while(_g13 < _g14.length) if(!gml_type_GmlTypeCanCastTo.canCastTo(_g14[_g13++],to,tpl,imp)) {
					return false;
				}
				return true;
			}
			break;
		case 2:
			var _g15 = from.inf;
			switch(to._hx_index) {
			case 0:
				var _g16 = to.name;
				var _g17 = to.params;
				var _g18 = to.kind;
				switch(_g17.length) {
				case 0:
					if(_g18 == 2) {
						var ns6 = gml_GmlAPI.gmlNamespaces[_g16];
						if(ns6 != null) {
							var ok1 = true;
							var _g19 = 0;
							var _g20 = ns6.getInstComp(0,false);
							while(_g19 < _g20.length) {
								var fd = _g20[_g19++].name;
								var af = _g15.fields[fd];
								if(af == null || !gml_type_GmlTypeCanCastTo.canCastTo(af.type,ns6.getInstType(fd),null,null)) {
									ok1 = false;
									break;
								}
							}
							if(ok1) {
								return true;
							}
						}
					}
					break;
				case 1:
					var _g21 = _g17[0];
					if(_g21._hx_index == 0) {
						if(_g21.kind == 2) {
							if(_g18 == 65) {
								return gml_type_GmlTypeCanCastTo.canCastAnonToAnyFieldsOf(_g15,_g21.name);
							}
						}
					}
					break;
				default:
				}
				break;
			case 1:
				return gml_type_GmlTypeCanCastTo.canCastToAnyOf(from,to.types,tpl,imp);
			case 2:
				var _g22 = to.inf;
				var ok2 = true;
				var q = _g22.fields;
				var fd1 = null;
				var has = Object.prototype.hasOwnProperty;
				for (fd1 in q) {
				if(has.call(q,fd1)) {
					var afd1 = _g15.fields[fd1];
					if(afd1 == null || !gml_type_GmlTypeCanCastTo.canCastTo(afd1.type,_g22.fields[fd1].type,null,null)) {
						ok2 = false;
					}
				}
				}
				return ok2;
			default:
			}
			break;
		case 3:
			from = from.constraint;
			continue;
		case 5:
			var _g23 = from.meta;
			switch(to._hx_index) {
			case 0:
				var _g24 = to.params;
				if(to.kind == 34) {
					if(_g24.length == 0) {
						return true;
					}
					if(!gml_type_GmlTypeCanCastTo.canCastTo(_g24[0],gml_type_GmlTypeDef.string,tpl,imp)) {
						return false;
					}
					var vt = _g24[1];
					if(vt == null || gml_type_GmlTypeTools.getKind(vt) == 1) {
						return true;
					}
					if(!gml_type_GmlTypeCanCastTo.canCastTo(_g23.defaultType,vt,tpl,imp)) {
						return false;
					}
					var _g25 = 0;
					var _g26 = _g23.fieldList;
					while(_g25 < _g26.length) if(!gml_type_GmlTypeCanCastTo.canCastTo(_g26[_g25++].type,vt)) {
						return false;
					}
					return true;
				}
				break;
			case 1:
				return gml_type_GmlTypeCanCastTo.canCastToAnyOf(from,to.types,tpl,imp);
			default:
			}
			break;
		default:
			if(to._hx_index == 1) {
				return gml_type_GmlTypeCanCastTo.canCastToAnyOf(from,to.types,tpl,imp);
			}
		}
		return false;
	}
};
gml_type_GmlTypeCanCastTo.canCastAnonToAnyFieldsOf = function(a1,n2) {
	var ns = gml_GmlAPI.gmlNamespaces[n2];
	if(ns == null) {
		return true;
	}
	var fields = ns.getInstComp(0,true);
	var _g = 0;
	var _g1 = fields;
	while(_g < _g1.length) {
		var fd = _g1[_g++].name;
		var af = a1.fields[fd];
		if(af != null && !gml_type_GmlTypeCanCastTo.canCastTo(af.type,ns.getInstType(fd),null,null)) {
			return false;
		}
	}
	var _g_keys = Reflect.fields(a1.fields);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var found = false;
		var _g = 0;
		var _g1 = fields;
		while(_g < _g1.length) if(_g1[_g++].name == key) {
			found = true;
			break;
		}
		if(!found) {
			return false;
		}
	}
	return true;
};
var gml_type_GmlTypeTemplateItem = function(name,ct) {
	this.name = name;
	this.regex = tools_NativeString.getWholeWordRegex(name,"g");
	this.constraint = ct;
};
$hxClasses["gml.type.GmlTypeTemplateItem"] = gml_type_GmlTypeTemplateItem;
gml_type_GmlTypeTemplateItem.__name__ = "gml.type.GmlTypeTemplateItem";
gml_type_GmlTypeTemplateItem.parse = function(str) {
	var mt = /^\s*(.+?)\s*:\s*(.+?)\s*$/.exec(str);
	if(mt != null) {
		return new gml_type_GmlTypeTemplateItem(mt[1],mt[2]);
	} else {
		return new gml_type_GmlTypeTemplateItem(str.trim());
	}
};
gml_type_GmlTypeTemplateItem.parseSplit = function(str) {
	var arr = [];
	var _g = 0;
	var _g1 = str.split(/[,;]\s*/g);
	while(_g < _g1.length) arr.push(gml_type_GmlTypeTemplateItem.parse(_g1[_g++]));
	return arr;
};
gml_type_GmlTypeTemplateItem.joinTemplateString = function(arr,constraints) {
	if(arr == null) {
		return "";
	}
	var r = "<";
	var _g_current = 0;
	while(_g_current < arr.length) {
		var _g_value = arr[_g_current];
		if(_g_current++ > 0) {
			r += ",";
		}
		r += _g_value.name;
		if(constraints && _g_value.constraint != null) {
			r += ":" + _g_value.constraint;
		}
	}
	return r + ">";
};
gml_type_GmlTypeTemplateItem.toTemplateSelf = function(arr) {
	var tsp = [];
	var _g_current = 0;
	while(_g_current < arr.length) {
		var _g_value = arr[_g_current];
		tsp.push(gml_type_GmlType.TTemplate(_g_value.name,_g_current++,gml_type_GmlTypeParser.parse(_g_value.constraint,null)));
	}
	return gml_type_GmlType.TInst("self",tsp,7);
};
gml_type_GmlTypeTemplateItem.prototype = {
	__class__: gml_type_GmlTypeTemplateItem
};
var gmx_GmxAction = function() { };
$hxClasses["gmx.GmxAction"] = gmx_GmxAction;
gmx_GmxAction.__name__ = "gmx.GmxAction";
gmx_GmxAction.getCode = function(action) {
	var code = gmx_GmxAction.impl.getCode(action);
	gmx_GmxAction.errorText = gmx_GmxAction.impl.errorText;
	return code;
};
gmx_GmxAction.makeCodeBlock = function(code) {
	return gmx_GmxAction.impl.makeCodeBlock(code);
};
var gmx_GmxEvent = function() { };
$hxClasses["gmx.GmxEvent"] = gmx_GmxEvent;
gmx_GmxEvent.__name__ = "gmx.GmxEvent";
gmx_GmxEvent.toStringGmx = function(event) {
	var ename = event.attrMap["ename"];
	return parsers_GmlEvent.toString(Std.parseInt(event.attrMap["eventtype"]),ename == null ? Std.parseInt(event.attrMap["enumb"]) : null,ename);
};
gmx_GmxEvent.isEmpty = function(event) {
	return event.find("action") == null;
};
gmx_GmxEvent.getCode = function(event) {
	var out = "";
	var actions = event.findAll("action");
	var addAction = function(action,head) {
		var code = gmx_GmxAction.getCode(action);
		if(code == null) {
			return false;
		}
		if(head && !code.startsWith("#action ")) {
			var addSection = true;
			code = gmx_GmxEvent.rxHeader.map(code,function(e) {
				var cap = e.matched(1);
				out += "#section";
				if(HxOverrides.cca(cap,0) != 32) {
					out += "|";
				}
				out += cap;
				addSection = false;
				return "";
			});
			if(addSection) {
				out += "#section\n";
			}
		}
		out += code;
		return true;
	};
	if(actions.length != 0) {
		if(!addAction(actions[0],false)) {
			return null;
		}
		var _g = 1;
		var _g1 = actions.length;
		while(_g < _g1) if(!addAction(actions[_g++],true)) {
			return null;
		}
	}
	return out;
};
var gmx_GmxLoader = function() { };
$hxClasses["gmx.GmxLoader"] = gmx_GmxLoader;
gmx_GmxLoader.__name__ = "gmx.GmxLoader";
gmx_GmxLoader.run = function(project) {
	var gmx = project.readGmxFileSync(project.name);
	parsers_GmlSeeker.start();
	gml_GmlAPI.gmlClear();
	var rxName = gmx_GmxLoader.rxAssetName;
	ui_treeview_TreeView.clear();
	var tv = ui_treeview_TreeView.element;
	var ths = [];
	var seekSoon = [];
	project.resourceTypes = Object.create(null);
	var loadrec = null;
	loadrec = function(gmx,out,one,path) {
		if(gmx.name == one) {
			var path1 = gmx.text;
			var name = path1.replace(rxName.r,"$1");
			var full = project.fullPath(path1);
			var _main = "";
			var kind = file_kind_gml_KGmlScript.inst;
			var index = true;
			switch(one) {
			case "script":
				_main = name;
				break;
			case "shader":
				break;
			default:
				full += "." + one + ".gmx";
				switch(one) {
				case "object":
					kind = file_kind_gmx_KGmxEvents.inst;
					break;
				case "sprite":
					kind = file_kind_gmx_KGmxSprite.inst;
					index = false;
					break;
				case "timeline":
					kind = file_kind_gmx_KGmxMoments.inst;
					break;
				}
			}
			project.setResourceTypeFromPath(path1);
			gml_GmlAPI.gmlLookupItems.push({ value : name, meta : "asset." + one});
			if(index) {
				seekSoon.push({ full : full, main : _main, kind : kind});
			}
			var item = ui_treeview_TreeView.makeAssetItem(name,path1,full,one);
			if(one == "sprite") {
				ths.push({ path : full, item : item, name : name});
			}
			out.appendChild(item);
			if(one == "shader") {
				item.yyOpenAs = gmx.attrMap["type"].indexOf("HLSL") >= 0 ? file_kind_misc_KHLSL.inst : file_kind_misc_KGLSL.inst;
			}
		} else {
			var name = gmx.attrMap["name"];
			if(out == tv) {
				name = name.charAt(0).toUpperCase() + name.substring(1);
			}
			var next = path + name + "/";
			var r = ui_treeview_TreeView.makeAssetDir(name,next,one);
			var c = r.treeItems;
			var _g = 0;
			var _g1 = gmx.children;
			while(_g < _g1.length) loadrec(_g1[_g++],c,one,next);
			out.appendChild(r);
		}
	};
	var loadtop = function(one,plural) {
		if(plural == null) {
			plural = one + "s";
		}
		var dir = null;
		var pfx = tools_NativeString.capitalize(plural) + "/";
		var _g = 0;
		var _g1 = gmx.findAll(plural);
		while(_g < _g1.length) {
			var p = _g1[_g++];
			if(dir == null) {
				dir = ui_treeview_TreeView.makeAssetDir(tools_NativeString.capitalize(plural),pfx,one);
				tv.appendChild(dir);
			}
			var _g2 = 0;
			var _g3 = p.children;
			while(_g2 < _g3.length) loadrec(_g3[_g2++],dir.treeItems,one,pfx);
		}
	};
	loadtop("sprite");
	loadtop("script");
	loadtop("shader");
	loadtop("timeline");
	loadtop("object");
	var _g = 0;
	var _g1 = gmx.findAll("rooms");
	while(_g < _g1.length) {
		++_g;
		var rm = gmx.find("room");
		if(rm != null) {
			project.gmxFirstRoomName = rm.text;
		}
	}
	var _g = 0;
	while(_g < ths.length) {
		var th = ths[_g];
		++_g;
		ui_treeview_TreeView.setThumb(th.path,project.getSpriteURL(th.name),th.item);
	}
	var _g = 0;
	while(_g < seekSoon.length) {
		var item = seekSoon[_g];
		++_g;
		parsers_GmlSeeker.run(item.full,item.main,item.kind);
	}
	var loadinc = null;
	loadinc = function(gmx,out,path) {
		if(gmx.name == "datafile") {
			var name = gmx.findText("name");
			var rel = haxe_io_Path.join(["datafiles",name]);
			var full = project.fullPath(haxe_io_Path.join([path,name]));
			out.appendChild(ui_treeview_TreeView.makeAssetItem(name,rel,full,"datafile"));
			gml_GmlAPI.gmlLookup[rel] = { path : full, row : 0};
			gml_GmlAPI.gmlLookupItems.push({ value : rel, meta : "includedFile"});
		} else {
			var name = gmx.attrMap["name"];
			var next = path + name + "/";
			var r = ui_treeview_TreeView.makeAssetDir(name,next,"datafile");
			var c = r.treeItems;
			var _g = 0;
			var _g1 = gmx.children;
			while(_g < _g1.length) loadinc(_g1[_g++],c,next);
			out.appendChild(r);
		}
	};
	var _g = 0;
	var _g1 = gmx.findAll("datafiles");
	while(_g < _g1.length) {
		var datafiles = _g1[_g++];
		var parent = ui_treeview_TreeView.makeAssetDir("Included files","Included files/","datafile");
		var _g2 = 0;
		var _g3 = datafiles.children;
		while(_g2 < _g3.length) loadinc(_g3[_g2++],parent.treeItems,"datafiles/");
		if(parent.treeItems.children.length > 0) {
			tv.appendChild(parent);
		}
	}
	gml_GmlAPI.extClear();
	var comp = gml_GmlAPI.gmlComp;
	project.lambdaMap = Object.create(null);
	var lz = ui_Preferences.current.lambdaMagic;
	var _g = 0;
	var _g1 = gmx.findAll("NewExtensions");
	while(_g < _g1.length) {
		var extNodes = _g1[_g++].findAll("extension");
		if(extNodes.length == 0) {
			continue;
		}
		var extParentDir = ui_treeview_TreeView.makeAssetDir("Extensions","Extensions/","extension");
		var _g2 = 0;
		while(_g2 < extNodes.length) {
			var extNode = extNodes[_g2];
			++_g2;
			var extRel = extNode.text;
			extRel = StringTools.replace(extRel,"\\","/");
			var extPath = extRel + ".extension.gmx";
			var extFull = project.fullPath(extPath);
			var extGmx = project.readGmxFileSync(extPath);
			var extName = extGmx.findText("name");
			var extDir = ui_treeview_TreeView.makeAssetDir(extName,"Extensions/" + extName + "/","extension");
			extDir.setAttribute("data-full-path",extFull);
			extDir.setAttribute("data-ident",extName);
			var lm = lz && extName.toLowerCase() == "gmedit_lambda" ? project.lambdaMap : null;
			if(lm != null) {
				project.lambdaExt = extPath;
			}
			var _g3 = 0;
			var _g4 = extGmx.findAll("files");
			while(_g3 < _g4.length) {
				var _g5 = 0;
				var _g6 = _g4[_g3++].findAll("file");
				while(_g5 < _g6.length) {
					var extFile = _g6[_g5];
					++_g5;
					var extFileName = extFile.findText("filename");
					var isGmlFile = haxe_io_Path.extension(extFileName).toLowerCase() == "gml";
					var extFilePath = haxe_io_Path.join([extNode.text,extFileName]);
					var extFileFull = project.fullPath(extFilePath);
					extDir.treeItems.appendChild(ui_treeview_TreeView.makeAssetItem(extFileName,extFilePath,extFileFull,"extfile"));
					if(isGmlFile) {
						if(lm != null) {
							project.lambdaGml = extFileFull;
							synext_GmlExtLambda.readDefs(extFileFull);
						} else {
							parsers_GmlSeeker.run(extFileFull,"",file_kind_gml_KGmlExtension.inst);
						}
					}
					if(lm != null) {
						var _g7 = 0;
						var _g8 = extFile.findAll("functions");
						while(_g7 < _g8.length) {
							var _g9 = 0;
							var _g10 = _g8[_g7++].findAll("function");
							while(_g9 < _g10.length) {
								var ls = _g10[_g9++].findText("name");
								ls = ls.replace(synext_GmlExtLambda.rxlcPrefix,"__lf_");
								lm[ls] = true;
							}
						}
					} else {
						var _g11 = 0;
						var _g12 = extFile.findAll("functions");
						while(_g11 < _g12.length) {
							var _g13 = 0;
							var _g14 = _g12[_g11++].findAll("function");
							while(_g13 < _g14.length) {
								var func = _g14[_g13];
								++_g13;
								var name = func.findText("name");
								gml_GmlAPI.extKind[name] = "extfunction";
								gml_GmlAPI.extArgc[name] = func.findInt("argCount");
								var help = func.findText("help");
								if(help != null && help != "") {
									gml_GmlAPI.extCompAdd({ name : name, value : name, score : 0, meta : "function", doc : help});
									gml_GmlAPI.extDoc[name] = gml_funcdoc_GmlFuncDocParser.parse(help,null);
									if(isGmlFile) {
										gml_GmlAPI.gmlLookupItems.push({ value : name, meta : "extfunction"});
									}
								}
								if(isGmlFile) {
									gml_GmlAPI.gmlLookup[name] = { path : extFileFull, sub : name, row : 0};
								}
							}
						}
					}
					var _g15 = 0;
					var _g16 = extFile.findAll("constants");
					while(_g15 < _g16.length) {
						var _g17 = 0;
						var _g18 = _g16[_g15++].findAll("constant");
						while(_g17 < _g18.length) {
							var mcr = _g18[_g17];
							++_g17;
							var name1 = mcr.findText("name");
							gml_GmlAPI.extKind[name1] = "extmacro";
							if(mcr.findText("hidden") == "0") {
								gml_GmlAPI.extCompAdd({ name : name1, value : name1, score : 0, meta : "macro", doc : mcr.findText("value")});
							}
						}
					}
				}
			}
			if(extName == "GMLive" && Object.prototype.hasOwnProperty.call(gml_GmlAPI.extKind,"live_init")) {
				project.hasGMLive = true;
			}
			extParentDir.treeItems.appendChild(extDir);
		}
		tv.appendChild(extParentDir);
	}
	var mcrDir = ui_treeview_TreeView.makeAssetDir("Macros","macros/","config");
	var mcrItems = mcrDir.querySelector(".items");
	mcrItems.appendChild(ui_treeview_TreeView.makeAssetItem(gmx_GmxLoader.allConfigs,"Configs/default",project.fullPath(project.name),"config"));
	var _g = 0;
	var _g1 = gmx.findAll("Configs");
	while(_g < _g1.length) {
		var _g2 = 0;
		var _g3 = _g1[_g++].findAll("Config");
		while(_g2 < _g3.length) {
			var configPath = _g3[_g2++].text;
			mcrItems.appendChild(ui_treeview_TreeView.makeAssetItem(configPath.replace(rxName.r,"$1"),configPath,configPath + ".config.gmx","config"));
		}
	}
	tv.appendChild(mcrDir);
	if(project.existsSync("#import")) {
		var idir = ui_treeview_TreeView.makeAssetDir("Imports","#import/","file");
		raw_RawLoader.loadDirRec(project,idir.treeItems,"#import");
		tv.appendChild(idir);
	}
	var loadAssets = function(r,single,plural) {
		if(plural == null) {
			plural = single + "s";
		}
		var id = 0;
		var ids = gml_GmlAPI.gmlAssetIDs[single];
		var _g = 0;
		var _g1 = gmx.findAll(plural);
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].findRec(single);
			while(_g2 < _g3.length) {
				var name = _g3[_g2++].text.replace(rxName.r,"$1");
				r[name] = "asset." + single;
				var next = { name : name, value : name, score : 0, meta : single, doc : null};
				gml_GmlAPI.gmlAssetComp[name] = next;
				comp.push(next);
				ids[name] = id++;
			}
		}
	};
	var tm = Object.create(null);
	var _g = 0;
	var _g1 = gmx_GmxLoader.assetTypes;
	while(_g < _g1.length) loadAssets(tm,_g1[_g++]);
	var addMacros = function(ctr) {
		var _g = 0;
		var _g1 = ctr.findAll("constant");
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			var name = q.attrMap["name"];
			tm[name] = "macro";
			comp.push({ name : name, value : name, score : 0, meta : "macro", doc : q.text});
		}
	};
	var _g = 0;
	var _g1 = gmx.findAll("constants");
	while(_g < _g1.length) addMacros(_g1[_g++]);
	var _g = 0;
	var _g1 = gmx.findAll("Configs");
	while(_g < _g1.length) {
		var confNode = _g1[_g++].find("Config");
		if(confNode != null) {
			var _g2 = 0;
			var _g3 = project.readGmxFileSync(confNode.text + ".config.gmx").findAll("ConfigConstants");
			while(_g2 < _g3.length) {
				var _g4 = 0;
				var _g5 = _g3[_g2++].findAll("constants");
				while(_g4 < _g5.length) addMacros(_g5[_g4++]);
			}
		}
	}
	gml_GmlAPI.gmlKind = tm;
};
var gmx_GmxManip = function() { };
$hxClasses["gmx.GmxManip"] = gmx_GmxManip;
gmx_GmxManip.__name__ = "gmx.GmxManip";
gmx_GmxManip.resolve = function(q,root) {
	if(q.chain.length > 0) {
		q.chain[0] = q.chain[0].toLowerCase();
	} else {
		q.last = q.last.toLowerCase();
	}
	var pj = gml_Project.current;
	q.pj = pj;
	if(root == null) {
		root = pj.readGmxFileSync(pj.name);
	}
	var plural = q.plural;
	var single = q.single;
	var dir = root;
	var _g = 0;
	var _g1 = q.chain;
	while(_g < _g1.length) {
		var sp = _g1[_g++];
		var sub = null;
		var _g2 = 0;
		var _g3 = dir.findAll(plural);
		while(_g2 < _g3.length) {
			var o = _g3[_g2];
			++_g2;
			if(o.attrMap["name"] == sp) {
				sub = o;
				break;
			}
		}
		if(sub == null) {
			electron_Dialog.showAlert("Couldn't find directory " + q.chain.join("/"));
			return null;
		} else {
			dir = sub;
		}
	}
	var ref = null;
	var rxn = new RegExp("^\\w+[/\\\\](\\w+)");
	var _g = 0;
	var _g1 = dir.children;
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		if(o.name == single) {
			var r = rxn.exec(o.text);
			if(r != null && r[1] == q.last) {
				ref = o;
				break;
			}
		} else if(o.attrMap["name"] == q.last) {
			ref = o;
			break;
		}
	}
	if(ref == null) {
		electron_Dialog.showAlert("Couldn't find item " + q.last + "!");
		return null;
	}
	return { pj : pj, root : root, plural : plural, single : single, dir : dir, ref : ref};
};
gmx_GmxManip.add = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var root = d.root;
	var plural = d.plural;
	var single = d.single;
	var dir = d.dir;
	var ref = d.ref;
	var name = q.name;
	var ngmx;
	if(q.mkdir) {
		ngmx = new gmx_SfGmx(plural);
		ngmx.set("name",name);
	} else {
		var ntxt;
		switch(single) {
		case "script":
			ntxt = plural + "\\" + name + ".gml";
			break;
		case "shader":
			ntxt = plural + "\\" + name + ".shader";
			break;
		default:
			ntxt = plural + "\\" + name;
		}
		switch(single) {
		case "object":
			q.npath = "" + plural + "/" + name + ".object.gmx";
			pj.writeTextFileSync(q.npath,"<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\r\n<object>\r\n  <spriteName>&lt;undefined&gt;</spriteName>\r\n  <solid>0</solid>\r\n  <visible>-1</visible>\r\n  <depth>0</depth>\r\n  <persistent>0</persistent>\r\n  <parentName>&lt;undefined&gt;</parentName>\r\n  <maskName>&lt;undefined&gt;</maskName>\r\n  <events/>\r\n  <PhysicsObject>0</PhysicsObject>\r\n  <PhysicsObjectSensor>0</PhysicsObjectSensor>\r\n  <PhysicsObjectShape>0</PhysicsObjectShape>\r\n  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>\r\n  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>\r\n  <PhysicsObjectGroup>0</PhysicsObjectGroup>\r\n  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>\r\n  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>\r\n  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>\r\n  <PhysicsObjectAwake>-1</PhysicsObjectAwake>\r\n  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>\r\n  <PhysicsShapePoints/>\r\n</object>\r\n");
			parsers_GmlSeeker.runSync(pj.fullPath(q.npath),"<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\r\n<object>\r\n  <spriteName>&lt;undefined&gt;</spriteName>\r\n  <solid>0</solid>\r\n  <visible>-1</visible>\r\n  <depth>0</depth>\r\n  <persistent>0</persistent>\r\n  <parentName>&lt;undefined&gt;</parentName>\r\n  <maskName>&lt;undefined&gt;</maskName>\r\n  <events/>\r\n  <PhysicsObject>0</PhysicsObject>\r\n  <PhysicsObjectSensor>0</PhysicsObjectSensor>\r\n  <PhysicsObjectShape>0</PhysicsObjectShape>\r\n  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>\r\n  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>\r\n  <PhysicsObjectGroup>0</PhysicsObjectGroup>\r\n  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>\r\n  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>\r\n  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>\r\n  <PhysicsObjectAwake>-1</PhysicsObjectAwake>\r\n  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>\r\n  <PhysicsShapePoints/>\r\n</object>\r\n",q.name,file_kind_gmx_KGmxEvents.inst);
			gml_file_GmlFile.open(q.name,pj.fullPath(q.npath));
			break;
		case "script":
			q.npath = "" + plural + "/" + name + ".gml";
			var gml = q.gmlCode;
			if(gml == null) {
				gml = "/// " + name;
			}
			pj.writeTextFileSync(q.npath,gml);
			parsers_GmlSeeker.runSync(pj.fullPath(q.npath),gml,q.name,file_kind_gml_KGmlScript.inst);
			gml_file_GmlFile.open(q.name,pj.fullPath(q.npath));
			break;
		case "shader":
			q.npath = "" + plural + "/" + name + ".shader";
			pj.writeTextFileSync(q.npath,"//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\t\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n\r\n//######################_==_YOYO_SHADER_MARKER_==_######################@~//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n\r\n");
			gml_file_GmlFile.open(q.name,pj.fullPath(q.npath));
			break;
		}
		ngmx = new gmx_SfGmx(single,ntxt);
	}
	switch(q.order) {
	case -1:
		dir.children.splice(dir.children.indexOf(ref),0,ngmx);
		break;
	case 1:
		dir.children.splice(dir.children.indexOf(ref) + 1,0,ngmx);
		break;
	default:
		ref.children.push(ngmx);
	}
	ui_treeview_TreeViewItemMenus.createImplTV(q);
	pj.writeTextFileSync(pj.name,root.toGmxString());
	pj.reload();
	return true;
};
gmx_GmxManip.remove = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var root = d.root;
	var single = d.single;
	var dir = d.dir;
	var ref = d.ref;
	var remrec = null;
	remrec = function(node) {
		if(node.name == single) {
			var dp = node.text;
			if(single != "script") {
				dp += "." + single + ".gmx";
			}
			if(pj.existsSync(dp)) {
				pj.unlinkSync(dp);
				var fp = pj.fullPath(dp);
				if(ui_Preferences.current.closeTabsOnFileDeletion) {
					var _g = 0;
					var _g1 = ui_ChromeTabs.impl.tabEls;
					while(_g < _g1.length) {
						var tab = _g1[_g];
						++_g;
						if(tab.gmlFile.path == null) {
							continue;
						}
						if(tab.gmlFile.path == fp) {
							tab.querySelector(".chrome-tab-close").click();
							break;
						}
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) remrec(_g1[_g++]);
		}
	};
	remrec(ref);
	HxOverrides.remove(dir.children,ref);
	q.tvDir.treeItems.removeChild(q.tvRef);
	pj.writeTextFileSync(pj.name,root.toGmxString());
	pj.reload();
	return true;
};
gmx_GmxManip.rename = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var single = d.single;
	var gmx = d.ref;
	if(gmx.name != single) {
		gmx.set("name",q.name);
	} else {
		var p0 = gmx.text;
		switch(single) {
		case "object":case "script":
			break;
		default:
			p0 += "." + single + ".gmx";
		}
		var mt = new RegExp("^(\\w+[/\\\\])(\\w+)(.*)$").exec(p0);
		if(mt == null) {
			electron_Dialog.showAlert("Can't match resource name");
			return false;
		}
		var p1 = mt[1] + q.name + mt[3];
		var fp0 = pj.fullPath(p0);
		var fp1 = pj.fullPath(p1);
		var _g = 0;
		var _g1 = ui_ChromeTabs.impl.tabEls;
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			if(tab.gmlFile.path != fp0) {
				continue;
			}
			tab.gmlFile.path = fp1;
			tab.querySelector(".chrome-tab-title-text").innerText = q.name;
			tab.setAttribute(ui_ChromeTabs.attrContext,fp1);
			break;
		}
		pj.renameSync(p0,p1);
		gmx.text = p1;
	}
	pj.writeTextFileSync(pj.name,d.root.toGmxString());
	pj.reload();
	return true;
};
gmx_GmxManip.move = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	q.chain = q.srcChain;
	q.last = q.srcLast;
	var sd = gmx_GmxManip.resolve(q,d.root);
	if(sd == null) {
		return false;
	}
	HxOverrides.remove(sd.dir.children,sd.ref);
	switch(q.order) {
	case -1:
		tools_NativeArray.insertBefore(d.dir.children,sd.ref,d.ref);
		break;
	case 1:
		tools_NativeArray.insertAfter(d.dir.children,sd.ref,d.ref);
		break;
	default:
		d.ref.children.push(sd.ref);
	}
	d.pj.writeTextFileSync(d.pj.name,d.root.toGmxString());
	yy_YyManip.moveTV(q);
	return true;
};
gmx_GmxManip.addExtensionFile = function(extensionPath,filePaths) {
	var ext = electron_FileWrap.readGmxFileSync(extensionPath);
	var extDir = haxe_io_Path.directory(extensionPath);
	var changed = false;
	var extFileRoot = ext.find("files");
	var extFiles = extFileRoot.findAll("file");
	var firstFile = extFiles[0];
	var firstFileConfigs = firstFile != null ? firstFile.find("ConfigOptions").findAll("Config") : null;
	var _g = 0;
	while(_g < filePaths.length) {
		var srcFull = filePaths[_g];
		++_g;
		var rel = [haxe_io_Path.withoutDirectory(srcFull)];
		var dstFull = extDir + "/" + rel[0];
		try {
			if(Electron_FS.copyFileSync == null) {
				Electron_FS.writeFileSync(dstFull,Electron_FS.readFileSync(srcFull));
			} else {
				Electron_FS.copyFileSync(srcFull,dstFull);
			}
		} catch( _g1 ) {
			console.error(haxe_Exception.caught(_g1).unwrap());
		}
		if(tools_NativeArray.findFirst(extFiles,(function(rel) {
			return function(file) {
				return file.findText("filename") == rel[0];
			};
		})(rel)) != null) {
			if(haxe_io_Path.normalize(srcFull) == haxe_io_Path.normalize(dstFull)) {
				continue;
			}
			continue;
		}
		var file = extFileRoot.addTextChild("file");
		file.addTextChild("filename",rel[0]);
		file.addTextChild("origname","extensions\\" + rel[0]);
		file.addTextChild("init","");
		file.addTextChild("final","");
		file.addTextChild("kind","" + yy_YyExtensionFileKind.detect(srcFull));
		file.addTextChild("uncompress","0");
		var configOptions = file.addTextChild("ConfigOptions",null);
		if(firstFileConfigs != null) {
			var _g2 = 0;
			while(_g2 < firstFileConfigs.length) {
				var oldConfig = firstFileConfigs[_g2++];
				var config = configOptions.addTextChild("Config",null);
				config.set("name",oldConfig.attrMap["name"]);
				config.addTextChild("CopyToMask","9223372036854775807");
			}
		} else {
			var config1 = configOptions.addTextChild("Config",null);
			config1.set("name","Default");
			config1.addTextChild("CopyToMask","9223372036854775807");
		}
		file.addTextChild("ProxyFiles");
		file.addTextChild("functions");
		file.addTextChild("constants");
		changed = true;
	}
	if(changed) {
		electron_FileWrap.writeGmxFileSync(extensionPath,ext);
		gml_Project.current.reload();
	}
};
var gmx_GmxObject = function() { };
$hxClasses["gmx.GmxObject"] = gmx_GmxObject;
gmx_GmxObject.__name__ = "gmx.GmxObject";
gmx_GmxObject.getCode = function(gmx) {
	var out = gmx_GmxObjectProperties.get(gmx);
	if(out != "") {
		out += "\n";
	}
	var errors = "";
	var objectIDs = gml_GmlAPI.gmlAssetIDs["object"];
	var _g = 0;
	var _g1 = gmx.findAll("events");
	while(_g < _g1.length) {
		var evOuter = _g1[_g];
		++_g;
		var events = evOuter.findAll("event");
		events.sort(function(a,b) {
			var atype = Std.parseInt(a.attrMap["eventtype"]);
			var btype = Std.parseInt(b.attrMap["eventtype"]);
			if(atype != btype) {
				return atype - btype;
			}
			var aname = a.attrMap["ename"];
			var bname = b.attrMap["ename"];
			if(aname != null || bname != null) {
				var aid = objectIDs[aname];
				var bid = objectIDs[bname];
				if(aid != null && bid != null) {
					return aid - bid;
				}
				if(aname < bname) {
					return 1;
				} else {
					return -1;
				}
			}
			var anumb = Std.parseInt(a.attrMap["enumb"]);
			var bnumb = Std.parseInt(b.attrMap["enumb"]);
			return anumb - bnumb;
		});
		var _g2 = 0;
		while(_g2 < events.length) {
			var event = events[_g2];
			++_g2;
			if(out != "") {
				out += "\n";
			}
			var name = gmx_GmxEvent.toStringGmx(event);
			out += "#event " + name;
			if(gmx_GmxEvent.isEmpty(event)) {
				continue;
			}
			var code = gmx_GmxEvent.getCode(event);
			if(code != null) {
				var pair = parsers_GmlHeader.parse(code,gml_GmlVersion.v1);
				if(pair.name != null) {
					out += pair.name;
				}
				out += "\n" + pair.code;
			} else {
				errors += "Unreadable action in " + name + ":\n";
				errors += gmx_GmxAction.errorText + "\n";
			}
		}
	}
	if(errors != "") {
		gmx_GmxObject.errorText = errors;
		return null;
	} else {
		return tools_NativeString.trimTrailRn(out);
	}
};
gmx_GmxObject.setCode = function(gmx,gmlCode) {
	var eventData = parsers_GmlEvent.parse(gmlCode,gml_GmlVersion.v1);
	if(eventData == null) {
		gmx_GmxObject.errorText = parsers_GmlEvent.parseError;
		return false;
	}
	var filterErrors = "";
	var i = 0;
	while(i < eventData.length) {
		var item = eventData[i];
		var idat = item.data;
		var tmp;
		if(idat.type != -1) {
			tmp = true;
		} else if(idat.numb != 1) {
			tmp = true;
		} else {
			var err = gmx_GmxObjectProperties.set(gmx,item.code.join("\n"));
			if(err != null) {
				filterErrors += err;
			}
			tmp = false;
		}
		if(tmp) {
			++i;
		} else {
			eventData.splice(i,1);
		}
	}
	if(filterErrors != "") {
		gmx_GmxObject.errorText = filterErrors;
		return false;
	}
	var evCtr = gmx.find("events");
	if(evCtr == null) {
		evCtr = new gmx_SfGmx("events");
		gmx.children.push(evCtr);
	} else {
		evCtr.children.splice(0,evCtr.children.length);
	}
	var objectIDs = gml_GmlAPI.gmlAssetIDs["object"];
	eventData.sort(function(a,b) {
		var adata = a.data;
		var bdata = b.data;
		var atype = adata.type;
		var btype = bdata.type;
		if(atype != btype) {
			return atype - btype;
		}
		var aname = adata.name;
		var bname = bdata.name;
		if(aname != null || bname != null) {
			var aid = objectIDs[aname];
			var bid = objectIDs[bname];
			if(aid != null && bid != null) {
				return bid - aid;
			}
			if(aname < bname) {
				return 1;
			} else {
				return -1;
			}
		}
		var anumb = adata.numb;
		var bnumb = bdata.numb;
		return bnumb - anumb;
	});
	var _g = 0;
	while(_g < eventData.length) {
		var source = eventData[_g];
		++_g;
		var event = new gmx_SfGmx("event");
		var data = source.data;
		event.set("eventtype","" + data.type);
		if(data.numb != null) {
			event.set("enumb","" + data.numb);
		}
		if(data.name != null) {
			event.set("ename","" + data.name);
		}
		evCtr.children.push(event);
		if(source.code.length > 0) {
			var _g1 = 0;
			var _g2 = source.code;
			while(_g1 < _g2.length) {
				var gml = _g2[_g1];
				++_g1;
				var a = gmx_GmxAction.makeCodeBlock(gml + "\r\n");
				if(a == null) {
					gmx_GmxObject.errorText = gmx_GmxAction.errorText;
					return false;
				} else {
					event.children.push(a);
				}
			}
		} else {
			var q = gmx_GmxAction.makeCodeBlock("");
			event.children.push(q);
		}
	}
	return true;
};
gmx_GmxObject.openEventInherited = function(full,edef) {
	var edata = parsers_GmlEvent.fromString(edef);
	if(edata == null) {
		return null;
	}
	var etype = "" + edata.type;
	var enumb = edata.numb != null ? "" + edata.numb : null;
	var ename = edata.name;
	var dir = haxe_io_Path.directory(full);
	var gmx = electron_FileWrap.readGmxFileSync(full);
	var parent = gmx.findText("parentName");
	var tries = 1024;
	while(parent != "<undefined>" && --tries >= 0) {
		var path = haxe_io_Path.join([dir,parent + ".object.gmx"]);
		if(!electron_FileWrap.existsSync(path)) {
			return null;
		}
		gmx = electron_FileWrap.readGmxFileSync(path);
		var _g = 0;
		var _g1 = gmx.findAll("events");
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].findAll("event");
			while(_g2 < _g3.length) {
				var event = _g3[_g2];
				++_g2;
				if(event.attrMap["eventtype"] == etype && event.attrMap["enumb"] == enumb && event.attrMap["ename"] == ename) {
					return gml_file_GmlFile.open(parent,path,{ def : edef});
				}
			}
		}
		parent = gmx.findText("parentName");
	}
	return null;
};
gmx_GmxObject.getInfo = function(gmx,path,info) {
	var objName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(path)));
	if(info == null) {
		info = new gml_GmlObjectInfo();
		info.spriteName = gmx.findText("spriteName");
		info.objectName = objName;
		info.visible = gmx.findText("visible") != "0";
		info.persistent = gmx.findText("persistent") != "0";
		info.solid = gmx.findText("solid") != "0";
		info.depth = parseFloat(gmx.findText("depth"));
	}
	var _g = 0;
	var _g1 = gmx.findAll("events");
	while(_g < _g1.length) {
		var _g2 = 0;
		var _g3 = _g1[_g++].findAll("event");
		while(_g2 < _g3.length) {
			var event = _g3[_g2];
			++_g2;
			var enumb = event.attrMap["enumb"];
			var eid = parsers_GmlEvent.toString(Std.parseInt(event.attrMap["eventtype"]),enumb != null ? Std.parseInt(enumb) : null,event.attrMap["ename"]);
			var elist = info.eventMap[eid];
			if(elist == null) {
				elist = [];
				info.eventList.push(eid);
				info.eventMap[eid] = elist;
			}
			elist.unshift(objName + "(" + eid + ")");
		}
	}
	var parent = gmx.findText("parentName");
	if(parent != "" && parent != "<undefined>") {
		var parentPath = haxe_io_Path.join([haxe_io_Path.directory(path),parent + ".object.gmx"]);
		info.parents.unshift(parent);
		if(electron_FileWrap.existsSync(parentPath)) {
			gmx_GmxObject.getInfo(electron_FileWrap.readGmxFileSync(parentPath),parentPath,info);
		}
	}
	return info;
};
var gmx_GmxObjectProperties = function() { };
$hxClasses["gmx.GmxObjectProperties"] = gmx_GmxObjectProperties;
gmx_GmxObjectProperties.__name__ = "gmx.GmxObjectProperties";
gmx_GmxObjectProperties.get = function(o) {
	var out = "#event " + "properties" + " (no comments/etc. here are saved)";
	var addID_opt = function(key,val) {
		if(val != "<undefined>") {
			out += "\n" + key + " = " + val + ";";
		}
	};
	var addPrim_opt = function(key,val,def) {
		if(val != def) {
			out += "\n" + key + " = " + (val == null ? "null" : Std.string(val)) + ";";
		}
	};
	(function(key,val) {
		out += "\n" + key + " = " + (val != "<undefined>" ? val : "-1") + ";";
	})("parent_index",o.findText("parentName"));
	addID_opt("sprite_index",o.findText("spriteName"));
	addID_opt("mask_index",o.findText("maskName"));
	addPrim_opt("visible",o.findInt("visible") != 0,true);
	addPrim_opt("solid",o.findInt("solid") != 0,false);
	addPrim_opt("persistent",o.findInt("persistent") != 0,false);
	var usesPhysics = o.findInt("PhysicsObject") != 0;
	out += "\n" + "uses_physics" + " = " + (usesPhysics == null ? "null" : Std.string(usesPhysics)) + ";";
	if(usesPhysics) {
		var val = o.findFloat("PhysicsObjectDensity");
		out += "\n" + "physics_density" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findFloat("PhysicsObjectRestitution");
		out += "\n" + "physics_restitution" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findInt("PhysicsObjectGroup");
		out += "\n" + "physics_collision_group" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findFloat("PhysicsObjectLinearDamping");
		out += "\n" + "physics_linear_damping" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findFloat("PhysicsObjectAngularDamping");
		out += "\n" + "physics_angular_damping" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findFloat("PhysicsObjectFriction");
		out += "\n" + "physics_friction" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findInt("PhysicsObjectSensor") != 0;
		out += "\n" + "physics_sensor" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findInt("PhysicsObjectAwake") != 0;
		out += "\n" + "physics_start_awake" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findInt("PhysicsObjectKinematic") != 0;
		out += "\n" + "physics_kinematic" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.findInt("PhysicsObjectShape");
		out += "\n" + "physics_shape" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var pts = [];
		var gmxPts = o.find("PhysicsShapePoints");
		if(gmxPts != null) {
			var _g = 0;
			var _g1 = gmxPts.children;
			while(_g < _g1.length) pts.push(_g1[_g++].text);
		}
		var val = "\"" + pts.join(";") + "\"";
		out += "\n" + "physics_shape_data" + " = " + (val == null ? "null" : Std.string(val)) + ";";
	}
	return out;
};
gmx_GmxObjectProperties.set = function(o,code) {
	var id = function(v) {
		switch(v._hx_index) {
		case 0:
			if(v.f < 0) {
				return "<undefined>";
			}
			throw haxe_Exception.thrown("Can't assign numeric IDs aside of -1");
		case 1:
			return v.s;
		case 3:
			var _g = v.s;
			if(_g == "noone") {
				return "<undefined>";
			} else {
				return _g;
			}
			break;
		default:
			throw haxe_Exception.thrown("Expected an identifier, got " + $hxEnums[v.__enum__].__constructs__[v._hx_index]._hx_name);
		}
	};
	var bool = function(v) {
		switch(v._hx_index) {
		case 0:
			switch(v.f) {
			case 0:
				return false;
			case 1:
				return true;
			default:
				throw haxe_Exception.thrown("Expected a bool, got " + Std.string(v));
			}
			break;
		case 3:
			switch(v.s) {
			case "false":
				return false;
			case "true":
				return true;
			default:
				throw haxe_Exception.thrown("Expected a bool, got " + Std.string(v));
			}
			break;
		default:
			throw haxe_Exception.thrown("Expected a bool, got " + Std.string(v));
		}
	};
	var int = function(v) {
		if(v._hx_index == 0) {
			var _g = v.f;
			if(_g % 1 != 0) {
				throw haxe_Exception.thrown("Expected an int, got " + Std.string(v));
			}
			return _g | 0;
		} else {
			throw haxe_Exception.thrown("Expected an int, got " + Std.string(v));
		}
	};
	var real = function(v) {
		if(v._hx_index == 0) {
			return v.f;
		} else {
			throw haxe_Exception.thrown("Expected a number, got " + Std.string(v));
		}
	};
	var varProc = function(key,val) {
		try {
			switch(key) {
			case "mask_index":
				o.setChildText("maskName",id(val));
				break;
			case "parent_index":
				o.setChildText("parentName",id(val));
				break;
			case "persistent":
				o.setChildInt("persistent",bool(val) ? -1 : 0);
				break;
			case "physics_angular_damping":
				o.setChildFloat("PhysicsObjectAngularDamping",real(val));
				break;
			case "physics_collision_group":
				o.setChildInt("PhysicsObjectGroup",int(val));
				break;
			case "physics_density":
				o.setChildFloat("PhysicsObjectDensity",real(val));
				break;
			case "physics_friction":
				o.setChildFloat("PhysicsObjectFriction",real(val));
				break;
			case "physics_kinematic":
				o.setChildInt("PhysicsObjectKinematic",bool(val) ? -1 : 0);
				break;
			case "physics_linear_damping":
				o.setChildFloat("PhysicsObjectLinearDamping",real(val));
				break;
			case "physics_restitution":
				o.setChildFloat("PhysicsObjectRestitution",real(val));
				break;
			case "physics_sensor":
				o.setChildInt("PhysicsObjectSensor",bool(val) ? -1 : 0);
				break;
			case "physics_shape":
				o.setChildInt("PhysicsObjectShape",int(val));
				break;
			case "physics_shape_data":
				var sv;
				if(val._hx_index == 1) {
					sv = val.s;
				} else {
					throw haxe_Exception.thrown("Expected a data string");
				}
				var pts = sv.split(";");
				var next = [];
				var _g = 0;
				var _g1 = pts.length;
				while(_g < _g1) {
					var i = _g++;
					var ptPair = pts[i].split(",");
					if(ptPair.length != 2) {
						throw haxe_Exception.thrown("Expected two coordinates for point " + i);
					}
					var ptX = parseFloat(ptPair[0]);
					if(isNaN(ptX)) {
						throw haxe_Exception.thrown("X coordinate for point " + i + " is not a valid number (" + ptPair[0] + ").");
					}
					var ptY = parseFloat(ptPair[1]);
					if(isNaN(ptY)) {
						throw haxe_Exception.thrown("Y coordinate for point " + i + " is not a valid number (" + ptPair[1] + ").");
					}
					next.push(new gmx_SfGmx("point","" + ptX + "," + ptY));
				}
				var ptsGmx = o.find("PhysicsShapePoints");
				ptsGmx.children.splice(0,ptsGmx.children.length);
				var _g = 0;
				while(_g < next.length) ptsGmx.children.push(next[_g++]);
				break;
			case "physics_start_awake":
				o.setChildInt("PhysicsObjectAwake",bool(val) ? -1 : 0);
				break;
			case "solid":
				o.setChildInt("solid",bool(val) ? -1 : 0);
				break;
			case "sprite_index":
				o.setChildText("spriteName",id(val));
				break;
			case "uses_physics":
				o.setChildInt("PhysicsObject",bool(val) ? -1 : 0);
				break;
			case "visible":
				o.setChildInt("visible",bool(val) ? -1 : 0);
				break;
			default:
				throw haxe_Exception.thrown("" + key + " is not a known property");
			}
			return null;
		} catch( _g ) {
			return Std.string(haxe_Exception.caught(_g).unwrap());
		}
	};
	return parsers_GmlObjectProperties.parse(code,gml_GmlVersion.v1,varProc);
};
var gmx_GmxProject = function() { };
$hxClasses["gmx.GmxProject"] = gmx_GmxProject;
gmx_GmxProject.__name__ = "gmx.GmxProject";
gmx_GmxProject.getNotePath = function(path) {
	return path + ".gmlnotes";
};
gmx_GmxProject.getMacroCode = function(gmx,notes,isConfig) {
	var out = "";
	if(isConfig) {
		gmx = gmx.find("ConfigConstants");
	}
	if(gmx != null) {
		var _g = 0;
		var _g1 = gmx.findAll("constants");
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].findAll("constant");
			while(_g2 < _g3.length) {
				var mcrNode = _g3[_g2];
				++_g2;
				out += "#macro " + mcrNode.attrMap["name"] + " " + mcrNode.text + "\n";
			}
		}
	}
	if(notes != null) {
		var flush0 = 0;
		while(notes.get_loop()) {
			var flush1 = notes.pos;
			var c = notes.source.charCodeAt(notes.pos++);
			switch(c) {
			case 35:
				if(notes.source.substr(notes.pos,5) != "macro") {
					continue;
				}
				notes.pos += 5;
				notes.skipSpaces0();
				var start = notes.pos;
				while(notes.get_loop()) {
					c = notes.source.charCodeAt(notes.pos);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						notes.pos += 1;
					} else {
						break;
					}
				}
				var name = notes.source.substring(start,notes.pos);
				notes.skipLine();
				notes.skipLineEnd();
				if(flush1 > flush0) {
					var flush = notes.source.substring(flush0,flush1);
					var at = out.indexOf("#macro " + name);
					if(at >= 0) {
						out = out.substring(0,at) + flush + out.substring(at);
					} else {
						out += flush;
					}
				}
				flush0 = notes.pos;
				break;
			case 47:
				switch(notes.source.charCodeAt(notes.pos)) {
				case 42:
					notes.pos += 1;
					notes.skipComment();
					break;
				case 47:
					notes.pos += 1;
					notes.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				notes.skipStringAuto(c,gml_GmlVersion.v1);
				break;
			}
		}
		if(notes.pos > flush0) {
			out += notes.source.substring(flush0,notes.pos);
		}
	}
	return out;
};
gmx_GmxProject.setMacroCode = function(gmx,gmlCode,notes,isConfig) {
	var q = new parsers_GmlReader(gmlCode);
	var mcrOuter = isConfig ? gmx.find("ConfigConstants") : gmx;
	var mcrParent = mcrOuter.find("constants");
	if(mcrParent == null) {
		mcrParent = new gmx_SfGmx("constants");
		mcrOuter.children.push(mcrParent);
	} else {
		mcrParent.children.splice(0,mcrParent.children.length);
	}
	var found = 0;
	var flush0 = 0;
	while(q.get_loop()) {
		var flush1 = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.source.substr(q.pos,5) != "macro") {
				continue;
			}
			q.pos += 5;
			q.skipSpaces0();
			var start = q.pos;
			while(q.get_loop()) {
				c = q.source.charCodeAt(q.pos);
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
					q.pos += 1;
				} else {
					break;
				}
			}
			var name = q.source.substring(start,q.pos);
			q.skipSpaces0();
			start = q.pos;
			q.skipLine();
			var expr = q.source.substring(start,q.pos);
			q.skipLineEnd();
			var mcrNode = new gmx_SfGmx("constant",expr);
			mcrNode.set("name",name);
			mcrParent.children.push(mcrNode);
			if(flush1 > flush0) {
				notes.b += Std.string(q.source.substring(flush0,flush1));
				notes.addFormat("#macro %s\n",name);
			}
			flush0 = q.pos;
			++found;
			break;
		case 34:case 39:
			q.skipString1(c);
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				q.skipLineEnd();
				break;
			default:
			}
			break;
		default:
		}
	}
	if(q.pos > flush0) {
		notes.b += Std.string(q.source.substring(flush0,q.pos));
	}
	mcrParent.set("number","" + found);
	return true;
};
var gmx_GmxSearcher = function() { };
$hxClasses["gmx.GmxSearcher"] = gmx_GmxSearcher;
gmx_GmxSearcher.__name__ = "gmx.GmxSearcher";
gmx_GmxSearcher.run = function(pj,fn,done,opt) {
	var pjDir = pj.dir;
	var pjGmx = electron_FileWrap.readGmxFileSync(pj.path);
	var rxName = gmx_GmxLoader.rxAssetName;
	var filesLeft = 1;
	var addError = function(s) {
		if(opt.errors != null) {
			opt.errors += "\n" + s;
		} else {
			opt.errors = s;
		}
	};
	var findrec = null;
	findrec = function(node,one) {
		if(node.name == one) {
			var name = node.text.replace(rxName.r,"$1");
			var full = haxe_io_Path.join([pjDir,node.text]);
			switch(one) {
			case "object":
				full += "." + one + ".gmx";
				filesLeft += 1;
				electron_FileWrap.readTextFile(full,function(err,xml) {
					if(err == null) {
						var gmx = gmx_SfGmx.parse(xml);
						var gml0 = gmx_GmxObject.getCode(gmx);
						if(gml0 != null) {
							var gml1 = fn(name,full,gml0);
							if(gml1 != null && gml1 != gml0) {
								if(gmx_GmxObject.setCode(gmx,gml1)) {
									electron_FileWrap.writeTextFileSync(full,gmx.toGmxString());
								} else {
									addError("Failed to modify " + name + ":\n" + gmx_GmxObject.errorText);
								}
							}
						}
					}
					if((filesLeft -= 1) <= 0) {
						done();
					}
				});
				break;
			case "script":case "shader":
				filesLeft += 1;
				electron_FileWrap.readTextFile(full,function(err,code) {
					if(err == null) {
						var gml1 = fn(name,full,code);
						if(gml1 != null && gml1 != code) {
							electron_FileWrap.writeTextFileSync(full,gml1);
						}
					}
					if((filesLeft -= 1) <= 0) {
						done();
					}
				});
				break;
			case "timeline":
				full += "." + one + ".gmx";
				filesLeft += 1;
				electron_FileWrap.readTextFile(full,function(err,xml) {
					if(err == null) {
						var gmx = gmx_SfGmx.parse(xml);
						var gml0 = gmx_GmxTimeline.getCode(gmx);
						if(gml0 != null) {
							var gml1 = fn(name,full,gml0);
							if(gml1 != null && gml1 != gml0) {
								if(gmx_GmxTimeline.setCode(gmx,gml1)) {
									electron_FileWrap.writeTextFileSync(full,gmx.toGmxString());
								} else {
									addError("Failed to modify " + name + ":\n" + gmx_GmxTimeline.errorText);
								}
							}
						}
					}
					if((filesLeft -= 1) <= 0) {
						done();
					}
				});
				break;
			}
		} else {
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) findrec(_g1[_g++],one);
		}
	};
	if(opt.checkScripts) {
		var _g = 0;
		var _g1 = pjGmx.findAll("scripts");
		while(_g < _g1.length) findrec(_g1[_g++],"script");
	}
	if(opt.checkObjects) {
		var _g = 0;
		var _g1 = pjGmx.findAll("objects");
		while(_g < _g1.length) findrec(_g1[_g++],"object");
	}
	if(opt.checkTimelines) {
		var _g = 0;
		var _g1 = pjGmx.findAll("timelines");
		while(_g < _g1.length) findrec(_g1[_g++],"timeline");
	}
	if(opt.checkShaders) {
		var _g = 0;
		var _g1 = pjGmx.findAll("shaders");
		while(_g < _g1.length) findrec(_g1[_g++],"shader");
	}
	if(opt.checkExtensions) {
		var _g = 0;
		var _g1 = pjGmx.findAll("NewExtensions");
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].findAll("extension");
			while(_g2 < _g3.length) {
				var extNode = [_g3[_g2]];
				++_g2;
				if(opt.expandLambdas && extNode[0].text == "gmedit_lambda") {
					continue;
				}
				filesLeft += 1;
				pj.readGmxFile(extNode[0].text + ".extension.gmx",(function(extNode) {
					return function(extError,extGmx) {
						if(extError == null) {
							var _g = 0;
							var _g1 = extGmx.findAll("files");
							while(_g < _g1.length) {
								var _g2 = 0;
								var _g3 = _g1[_g++].findAll("file");
								while(_g2 < _g3.length) {
									var extFileName = _g3[_g2++].findText("filename");
									if(haxe_io_Path.extension(extFileName).toLowerCase() != "gml") {
										continue;
									}
									var extFilePath = [haxe_io_Path.join([extNode[0].text,extFileName])];
									filesLeft += 1;
									pj.readTextFile(extFilePath[0],(function(extFilePath) {
										return function(err,code) {
											if(err == null) {
												var gml1 = fn(extFilePath[0],extFilePath[0],code);
												if(gml1 != null && gml1 != code) {
													pj.writeTextFileSync(extFilePath[0],gml1);
												}
											}
											if((filesLeft -= 1) <= 0) {
												done();
											}
										};
									})(extFilePath));
								}
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(extNode));
			}
		}
	}
	var findMcr = function(name,full,pjGmx) {
		var procMcr = function(gmx) {
			var notePath = gmx_GmxProject.getNotePath(full);
			var gml0 = gmx_GmxProject.getMacroCode(gmx,electron_FileWrap.existsSync(notePath) ? new parsers_GmlReader(electron_FileWrap.readTextFileSync(notePath)) : null,pjGmx == null);
			var gml1 = fn(name,full,gml0);
			if(gml1 != null && gml1 != gml0) {
				var notes1 = new tools_StringBuilder();
				if(gmx_GmxProject.setMacroCode(gmx,gml1,notes1,pjGmx == null)) {
					if(notes1.b.length > 0) {
						electron_FileWrap.writeTextFileSync(notePath,notes1.b);
					} else if(electron_FileWrap.existsSync(notePath)) {
						electron_FileWrap.unlinkSync(notePath);
					}
					electron_FileWrap.writeTextFileSync(full,gmx.toGmxString());
				} else {
					addError("Failed to modify " + name + ":\n" + gmx_GmxTimeline.errorText);
				}
			}
		};
		if(pjGmx == null) {
			filesLeft += 1;
			electron_FileWrap.readTextFile(full,function(err,xml) {
				if(err == null) {
					procMcr(gmx_SfGmx.parse(xml));
				}
				if((filesLeft -= 1) <= 0) {
					done();
				}
			});
		} else {
			procMcr(pjGmx);
		}
	};
	if(opt.checkMacros) {
		var _g = 0;
		var _g1 = pjGmx.findAll("Configs");
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].findAll("Config");
			while(_g2 < _g3.length) {
				var configPath = _g3[_g2++].text;
				var configName = configPath.replace(rxName.r,"$1");
				var configFull = haxe_io_Path.join([pjDir,configPath + ".config.gmx"]);
				findMcr(configName,configFull,null);
			}
		}
	}
	findMcr(gmx_GmxLoader.allConfigs,pj.path,pjGmx);
	if((filesLeft -= 1) <= 0) {
		done();
	}
};
var gmx_GmxTimeline = function() { };
$hxClasses["gmx.GmxTimeline"] = gmx_GmxTimeline;
gmx_GmxTimeline.__name__ = "gmx.GmxTimeline";
gmx_GmxTimeline.getCode = function(tl) {
	var out = "";
	var errors = "";
	var _g = 0;
	var _g1 = tl.findAll("entry");
	while(_g < _g1.length) {
		var entry = _g1[_g];
		++_g;
		if(out != "") {
			out += "\n";
		}
		var name = entry.findText("step");
		out += "#moment " + name;
		var event = entry.find("event");
		var code = gmx_GmxEvent.getCode(event);
		if(code != null) {
			var pair = parsers_GmlHeader.parse(code,gml_GmlVersion.v1);
			if(pair.name != null) {
				out += pair.name;
			}
			if(event.find("action") != null) {
				out += "\n";
			}
			out += pair.code;
		} else {
			errors += "Unreadable action in moment " + name + ":\n";
			errors += gmx_GmxAction.errorText + "\n";
		}
	}
	if(errors != "") {
		gmx_GmxTimeline.errorText = errors;
		return null;
	} else {
		return tools_NativeString.trimTrailRn(out);
	}
};
gmx_GmxTimeline.setCode = function(tl,gmlCode) {
	var data = parsers_GmlTimeline.parse(gmlCode,gml_GmlVersion.v1);
	if(data == null) {
		gmx_GmxTimeline.errorText = parsers_GmlTimeline.parseError;
		return false;
	}
	tl.children.splice(0,tl.children.length);
	data.sort(function(a,b) {
		return a.moment - b.moment;
	});
	var _g = 0;
	while(_g < data.length) {
		var item = data[_g];
		++_g;
		var entry = new gmx_SfGmx("entry");
		tl.children.push(entry);
		entry.addTextChild("step","" + item.moment);
		var event = new gmx_SfGmx("event");
		entry.children.push(event);
		var _g1 = 0;
		var _g2 = item.code;
		while(_g1 < _g2.length) {
			var a = gmx_GmxAction.makeCodeBlock(_g2[_g1++] + "\r\n");
			if(a == null) {
				gmx_GmxTimeline.errorText = gmx_GmxAction.errorText;
				return false;
			} else {
				event.children.push(a);
			}
		}
	}
	return true;
};
var gmx_SfGmx = function(name,text) {
	this.attrMap = Object.create(null);
	this.attrList = [];
	this.children = [];
	this.name = name;
	this.text = text;
};
$hxClasses["gmx.SfGmx"] = gmx_SfGmx;
gmx_SfGmx.__name__ = "gmx.SfGmx";
gmx_SfGmx.fromXml = function(xml) {
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var gmx = new gmx_SfGmx(xml.nodeName);
	var a = xml.attributes();
	while(a.hasNext()) {
		var a1 = a.next();
		gmx.attrList.push(a1);
		gmx.attrMap[a1] = xml.get(a1);
	}
	var q = xml.elements();
	while(q.hasNext()) {
		var q1 = q.next();
		gmx.children.push(gmx_SfGmx.fromXml(q1));
	}
	if(gmx.children.length == 0) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var q = xml.children[0];
		if(q != null) {
			if(q.nodeType == Xml.Document || q.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (q.nodeType == null ? "null" : XmlType.toString(q.nodeType)));
			}
			gmx.text = q.nodeValue;
		}
	}
	return gmx;
};
gmx_SfGmx.parse = function(code) {
	return gmx_SfGmx.fromXml(Xml.parse(code).firstElement());
};
gmx_SfGmx.prototype = {
	addTextChild: function(name,value) {
		var r = new gmx_SfGmx(name,value);
		this.children.push(r);
		return r;
	}
	,find: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return q;
			}
		}
		return null;
	}
	,findText: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return q.text;
			}
		}
		return null;
	}
	,findInt: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return Std.parseInt(q.text);
			}
		}
		return null;
	}
	,findFloat: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return parseFloat(q.text);
			}
		}
		return null;
	}
	,findAll: function(name) {
		var r = [];
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				r.push(q);
			}
		}
		return r;
	}
	,findRec: function(name,r) {
		if(r == null) {
			r = [];
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				r.push(q);
			}
			q.findRec(name,r);
		}
		return r;
	}
	,setChildText: function(elName,val) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == elName) {
				q.text = val;
				return;
			}
		}
		this.children.push(new gmx_SfGmx(elName,val));
	}
	,setChildInt: function(elName,val) {
		this.setChildText(elName,"" + val);
	}
	,setChildFloat: function(elName,val) {
		this.setChildText(elName,"" + val);
	}
	,set: function(attr,value) {
		if(!Object.prototype.hasOwnProperty.call(this.attrMap,attr)) {
			this.attrList.push(attr);
		}
		this.attrMap[attr] = value;
	}
	,toStringRec: function(r,t) {
		r.b += String.fromCodePoint(60);
		r.b += Std.string(this.name);
		var _g = 0;
		var _g1 = this.attrList;
		while(_g < _g1.length) {
			var attr = _g1[_g];
			++_g;
			r.addFormat(" %s=\"%s\"",attr,StringTools.htmlEscape(this.attrMap[attr],true));
		}
		if(this.children.length == 0 && this.text == null) {
			r.b += "/>";
			return;
		}
		r.b += String.fromCodePoint(62);
		var n = this.children.length;
		if(n > 0) {
			var t1 = t + "  ";
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				r.b += "\r\n";
				r.b += t1 == null ? "null" : "" + t1;
				this.children[i].toStringRec(r,t1);
			}
			r.b += "\r\n";
			r.b += t == null ? "null" : "" + t;
		} else {
			var x = StringTools.htmlEscape(this.text);
			r.b += Std.string(x);
		}
		r.addFormat("</%s>",this.name);
	}
	,toString: function() {
		var b = new tools_StringBuilder();
		this.toStringRec(b,"");
		return b.b;
	}
	,toGmxString: function() {
		var b = new tools_StringBuilder();
		b.b += "<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\r\n";
		this.toStringRec(b,"");
		b.b += "\r\n";
		return b.b;
	}
	,toGmkSplitString: function() {
		var b = new tools_StringBuilder();
		b.b += "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n";
		this.toStringRec(b,"");
		b.b += "\r\n";
		return b.b;
	}
	,__class__: gmx_SfGmx
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe_Int64 = {};
haxe_Int64.toString = function(this1) {
	var i = this1;
	if(i.high == 0 && i.low == 0) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var ten = new haxe__$Int64__$_$_$Int64(0,10);
	while(i.high != 0 || i.low != 0) {
		var r = haxe_Int64.divMod(i,ten);
		if(r.modulus.high < 0) {
			str = (~r.modulus.low + 1 | 0) + str;
			var x = r.quotient;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			i = new haxe__$Int64__$_$_$Int64(high,low);
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high,low);
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high << 1 | divisor.low >>> 31,divisor.low << 1);
		mask = new haxe__$Int64__$_$_$Int64(mask.high << 1 | mask.low >>> 31,mask.low << 1);
		if(cmp >= 0) {
			break;
		}
	}
	while(mask.high != 0 || mask.low != 0) {
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high = modulus.high - divisor.high | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				--high;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,modulus.low - divisor.low | 0);
		}
		mask = new haxe__$Int64__$_$_$Int64(mask.high >>> 1,mask.high << 31 | mask.low >>> 1);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high >>> 1,divisor.high << 31 | divisor.low >>> 1);
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high,low);
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
haxe_Int64Helper.parseString = function(sParam) {
	var base_high = 0;
	var base_low = 10;
	var current = new haxe__$Int64__$_$_$Int64(0,0);
	var multiplier = new haxe__$Int64__$_$_$Int64(0,1);
	var sIsNegative = false;
	var s = StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g = 0;
	while(_g < len) {
		var digitInt = HxOverrides.cca(s,len - 1 - _g++) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw haxe_Exception.thrown("NumberFormatError");
		}
		if(digitInt != 0) {
			var digit_high = digitInt >> 31;
			var digit_low = digitInt;
			if(sIsNegative) {
				var al = multiplier.low & 65535;
				var ah = multiplier.low >>> 16;
				var bl = digit_low & 65535;
				var bh = digit_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var low = p00;
				var high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = p00 + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					++high;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					++high;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_low = low;
				var high1 = current.high - high | 0;
				if(haxe_Int32.ucompare(current.low,b_low) < 0) {
					--high1;
					high1 = high1 | 0;
				}
				current = new haxe__$Int64__$_$_$Int64(high1,current.low - b_low | 0);
				if(!(current.high < 0)) {
					throw haxe_Exception.thrown("NumberFormatError: Underflow");
				}
			} else {
				var al1 = multiplier.low & 65535;
				var ah1 = multiplier.low >>> 16;
				var bl1 = digit_low & 65535;
				var bh1 = digit_low >>> 16;
				var p001 = haxe_Int32._mul(al1,bl1);
				var p101 = haxe_Int32._mul(ah1,bl1);
				var p011 = haxe_Int32._mul(al1,bh1);
				var low1 = p001;
				var high2 = (haxe_Int32._mul(ah1,bh1) + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
				p011 <<= 16;
				low1 = p001 + p011 | 0;
				if(haxe_Int32.ucompare(low1,p011) < 0) {
					++high2;
					high2 = high2 | 0;
				}
				p101 <<= 16;
				low1 = low1 + p101 | 0;
				if(haxe_Int32.ucompare(low1,p101) < 0) {
					++high2;
					high2 = high2 | 0;
				}
				high2 = high2 + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var high3 = current.high + high2 | 0;
				var low2 = current.low + low1 | 0;
				if(haxe_Int32.ucompare(low2,current.low) < 0) {
					++high3;
					high3 = high3 | 0;
				}
				current = new haxe__$Int64__$_$_$Int64(high3,low2);
				if(current.high < 0) {
					throw haxe_Exception.thrown("NumberFormatError: Overflow");
				}
			}
		}
		var al2 = multiplier.low & 65535;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base_low & 65535;
		var bh2 = base_low >>> 16;
		var p002 = haxe_Int32._mul(al2,bl2);
		var p102 = haxe_Int32._mul(ah2,bl2);
		var p012 = haxe_Int32._mul(al2,bh2);
		var low3 = p002;
		var high4 = (haxe_Int32._mul(ah2,bh2) + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 <<= 16;
		low3 = p002 + p012 | 0;
		if(haxe_Int32.ucompare(low3,p012) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		p102 <<= 16;
		low3 = low3 + p102 | 0;
		if(haxe_Int32.ucompare(low3,p102) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
		multiplier = new haxe__$Int64__$_$_$Int64(high4,low3);
	}
	return current;
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	a.a1 = i.readByte() << 8 | i.readByte();
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			a1 = (a1 + b.b[_g++]) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var len = data.length;
	var b = data.b.bufferValue;
	var _g = 0;
	while(_g < len) {
		var tmp = (c_crc ^ b.bytes[_g++]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				if(new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","").match(protocol)) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var headers = r.getAllResponseHeaders().split("\r\n");
				var _g = [];
				var _g1 = 0;
				var _g2 = headers;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v != "") {
						_g.push(v);
					}
				}
				headers = _g;
				_gthis.responseHeaders = new haxe_ds_StringMap();
				var _g = 0;
				while(_g < headers.length) {
					var a = headers[_g++].split(": ");
					var hname = a.shift();
					var hval = a.length == 1 ? a[0] : a.join(": ");
					hval = StringTools.ltrim(StringTools.rtrim(hval));
					_gthis.responseHeaders.h[hname] = hval;
				}
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var _g = this.postData;
		var _g1 = this.postBytes;
		var uri = _g == null ? _g1 == null ? null : new Blob([_g1.b.bufferValue]) : _g1 == null ? _g : null;
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var uri1 = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = uri1 + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				r.open("GET",this.url + (this.url.split("?").length <= 1 ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(_g1.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < paths.length) {
		var v = paths[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	if(_g.length == 0) {
		return "";
	}
	var path = _g[0];
	var _g1 = 1;
	var _g2 = _g.length;
	while(_g1 < _g2) {
		path = haxe_io_Path.addTrailingSlash(path);
		path += _g[_g1++];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = target.join(slash);
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_io_UInt8Array = {};
haxe_io_UInt8Array.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	while(_g < position) {
		var c = xml.charCodeAt(_g++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				aname = HxOverrides.substr(str,start,p - start);
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _this = value.children;
				var _g_current = 0;
				while(_g_current < _this.length) this.writeNode(_this[_g_current++],this.pretty ? tabs + "\t" : tabs);
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			this.output.b += Std.string(StringTools.trim(commentContent));
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _this = value.children;
			var _g_current = 0;
			while(_g_current < _this.length) this.writeNode(_this[_g_current++],tabs);
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _this = value.children;
		var _g_current = 0;
		while(_g_current < _this.length) {
			var child = _this[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__:true,__constructs__:null
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FUnknown",$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FInfoZipUnicodePath",$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_name:"FUtf8",_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__constructs__ = [haxe_zip_ExtraField.FUnknown,haxe_zip_ExtraField.FInfoZipUnicodePath,haxe_zip_ExtraField.FUtf8];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			var da = this.treeDepth(t.left);
			var db = this.treeDepth(t.right);
			return 1 + (da < db ? da : db);
		case 2:
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				return haxe_zip_Huffman.NeedBit(this.treeCompress(t.left),this.treeCompress(t.right));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		while(_g < size) {
			++_g;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,t.left);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,t.right);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		while(_g < maxbits) {
			++_g;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		while(_g < nlengths) {
			var p = lengths[_g++ + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < nlengths) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			++_g;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			return h.i;
		case 1:
			return this.applyHuffman(this.getBit() ? h.right : h.left);
		case 2:
			return this.applyHuffman(h.table[this.getBits(h.n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			if((cmf & 15) != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if((flg & 32) != 0) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				if(this.input.readUInt16() != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				while(_g < hclen) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g++]] = this.getBits(3);
				var _g = hclen;
				while(_g < 19) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g++]] = 0;
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					++_g;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			if(!calc.equals(haxe_crypto_Adler32.read(this.input))) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	return new haxe_zip_Reader(i).read();
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var d = this.i.readUInt16();
		return new Date((d >> 9) + 1980,(d >> 5 & 15) - 1,d & 31,t >> 11 & 31,t >> 5 & 63,(t & 31) << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(this.i.read(len - 5).toString(),crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		i.readUInt16();
		var flags = i.readUInt16();
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if((flags & 2048) != 0) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : null, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(65536));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,65536);
						out.addBytes(tmp,0,n);
						if(n < 65536) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var haxe_zip_Writer = function(o) {
	this.o = o;
	this.files = new haxe_ds_List();
};
$hxClasses["haxe.zip.Writer"] = haxe_zip_Writer;
haxe_zip_Writer.__name__ = "haxe.zip.Writer";
haxe_zip_Writer.prototype = {
	writeZipDate: function(date) {
		this.o.writeUInt16(date.getHours() << 11 | date.getMinutes() << 5 | date.getSeconds() >> 1);
		this.o.writeUInt16(date.getFullYear() - 1980 << 9 | date.getMonth() + 1 << 5 | date.getDate());
	}
	,writeEntryHeader: function(f) {
		var o = this.o;
		var flags = 0;
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				if(val._hx_index == 2) {
					flags |= 2048;
				}
			}
		}
		o.writeInt32(67324752);
		o.writeUInt16(20);
		o.writeUInt16(flags);
		if(f.data == null) {
			f.fileSize = 0;
			f.dataSize = 0;
			f.crc32 = 0;
			f.compressed = false;
			f.data = new haxe_io_Bytes(new ArrayBuffer(0));
		} else {
			if(f.crc32 == null) {
				if(f.compressed) {
					throw haxe_Exception.thrown("CRC32 must be processed before compression");
				}
				f.crc32 = haxe_crypto_Crc32.make(f.data);
			}
			if(!f.compressed) {
				f.fileSize = f.data.length;
			}
			f.dataSize = f.data.length;
		}
		o.writeUInt16(f.compressed ? 8 : 0);
		this.writeZipDate(f.fileTime);
		o.writeInt32(f.crc32);
		o.writeInt32(f.dataSize);
		o.writeInt32(f.fileSize);
		o.writeUInt16(f.fileName.length);
		var e = new haxe_io_BytesOutput();
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				switch(val._hx_index) {
				case 0:
					var _g = val.bytes;
					e.writeUInt16(val.tag);
					e.writeUInt16(_g.length);
					e.write(_g);
					break;
				case 1:
					var namebytes = haxe_io_Bytes.ofString(val.name);
					e.writeUInt16(28789);
					e.writeUInt16(namebytes.length + 5);
					e.writeByte(1);
					e.writeInt32(val.crc);
					e.write(namebytes);
					break;
				case 2:
					break;
				}
			}
		}
		var ebytes = e.getBytes();
		o.writeUInt16(ebytes.length);
		o.writeString(f.fileName);
		o.write(ebytes);
		this.files.add({ name : f.fileName, compressed : f.compressed, clen : f.data.length, size : f.fileSize, crc : f.crc32, date : f.fileTime, fields : ebytes});
	}
	,write: function(files) {
		var _g_head = files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.writeEntryHeader(val);
			this.o.writeFullBytes(val.data,0,val.data.length);
		}
		this.writeCDR();
	}
	,writeCDR: function() {
		var cdr_size = 0;
		var cdr_offset = 0;
		var _g_head = this.files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var namelen = val.name.length;
			var extraFieldsLength = val.fields.length;
			this.o.writeInt32(33639248);
			this.o.writeUInt16(20);
			this.o.writeUInt16(20);
			this.o.writeUInt16(0);
			this.o.writeUInt16(val.compressed ? 8 : 0);
			this.writeZipDate(val.date);
			this.o.writeInt32(val.crc);
			this.o.writeInt32(val.clen);
			this.o.writeInt32(val.size);
			this.o.writeUInt16(namelen);
			this.o.writeUInt16(extraFieldsLength);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeInt32(0);
			this.o.writeInt32(cdr_offset);
			this.o.writeString(val.name);
			this.o.write(val.fields);
			cdr_size += 46 + namelen + extraFieldsLength;
			cdr_offset += 30 + namelen + extraFieldsLength + val.clen;
		}
		this.o.writeInt32(101010256);
		this.o.writeUInt16(0);
		this.o.writeUInt16(0);
		this.o.writeUInt16(this.files.length);
		this.o.writeUInt16(this.files.length);
		this.o.writeInt32(cdr_size);
		this.o.writeInt32(cdr_offset);
		this.o.writeUInt16(0);
	}
	,__class__: haxe_zip_Writer
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = intf[_g++];
				if(i == cl || js_Boot.__interfLoop(i,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
Math.__name__ = "Math";
var parsers_GmlEvent = function() { };
$hxClasses["parsers.GmlEvent"] = parsers_GmlEvent;
parsers_GmlEvent.__name__ = "parsers.GmlEvent";
parsers_GmlEvent.link = function(type,numb,name) {
	var arr = parsers_GmlEvent.i2s[type];
	if(arr == null) {
		arr = [];
		parsers_GmlEvent.i2s[type] = arr;
	}
	arr[numb] = name;
	parsers_GmlEvent.s2i[name] = { type : type, numb : numb};
};
parsers_GmlEvent.linkType = function(type,name) {
	var nlq = name.toLowerCase();
	parsers_GmlEvent.t2s[type] = nlq;
	parsers_GmlEvent.t2sc[type] = name;
	parsers_GmlEvent.s2t[nlq] = type;
};
parsers_GmlEvent.toString = function(type,numb,name) {
	if(type == 4) {
		return "collision:" + name;
	}
	var arr = parsers_GmlEvent.i2s[type];
	if(arr != null) {
		var out = arr[numb];
		if(out != null) {
			return out;
		}
	}
	var tName = parsers_GmlEvent.t2s[type];
	if(type == 5 || type == 9 || type == 10) {
		return tName + ":" + parsers_GmlKeycode.toName(numb);
	}
	if(tName != null) {
		return tName + ":" + numb;
	}
	return "event" + type + ":" + numb;
};
parsers_GmlEvent.fromString = function(name) {
	var out = parsers_GmlEvent.s2i[name];
	if(out != null) {
		return out;
	}
	var i = name.indexOf(":");
	if(i < 0) {
		return null;
	}
	var type = parsers_GmlEvent.s2t[name.substring(0,i)];
	var name1 = name.substring(i + 1);
	if(type == null) {
		return null;
	}
	if(type == 4) {
		return { type : type, numb : null, name : name1};
	}
	if(type == 5 || type == 9 || type == 10) {
		var r = parsers_GmlKeycode.codes[name1];
		var key = r == null ? name1.startsWith("key") ? Std.parseInt(name1.substring(3)) : null : r;
		if(key == null) {
			return null;
		}
		return { type : type, numb : key};
	}
	var numb = Std.parseInt(name1);
	if(numb == null) {
		return null;
	}
	return { type : type, numb : numb};
};
parsers_GmlEvent.parse = function(gmlCode,version) {
	var eventData = [];
	var eventMap = Object.create(null);
	var errors = "";
	var q = new parsers_GmlReader(gmlCode);
	var evStart = 0;
	var evCode = [];
	var evName = null;
	var sctName = null;
	var flush = function(till,cont,eof) {
		var flushCode = q.source.substring(evStart,till);
		flushCode = tools_NativeString.trimTrailRn(flushCode,eof ? 0 : cont ? 1 : 2);
		if(evName == null) {
			if(flushCode != "") {
				errors += "There's code prior to first event definition.\n";
			}
		} else {
			if(sctName != null && sctName != "") {
				flushCode = "///" + sctName + "\r\n" + flushCode;
				sctName = null;
			}
			var flushData = parsers_GmlEvent.fromString(evName);
			if(flushData != null) {
				if(eof || flushCode != "") {
					evCode.push(flushCode);
				}
				if(!cont) {
					if(Object.prototype.hasOwnProperty.call(eventMap,evName)) {
						errors += "Duplicate event declaration found for `" + evName + "`.\n";
					} else {
						eventData.push({ data : flushData, code : evCode});
						eventMap[evName] = true;
					}
					evCode = [];
				}
			} else {
				errors += "`" + evName + "` is not a known event type.\n";
			}
		}
	};
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.pos > 1) {
				switch(q.source.charCodeAt(q.pos - 2)) {
				case 10:case 13:
					break;
				default:
					continue;
				}
			}
			if(q.source.substr(q.pos,5) == "event") {
				flush(q.pos - 1,false);
				q.pos += 5;
				q.skipSpaces0();
				var nameStart = q.pos;
				q.skipEventName();
				evName = q.source.substring(nameStart,q.pos);
				nameStart = q.pos;
				q.skipSpaces0();
				q.skipLine();
				sctName = q.source.substring(nameStart,q.pos);
				if(sctName == "") {
					sctName = null;
				} else if(version.config.hasJSDoc) {
					if(HxOverrides.cca(sctName,0) == 124) {
						sctName = " @desc " + sctName.substring(1);
					} else {
						sctName = " @description" + sctName;
					}
				} else if(HxOverrides.cca(sctName,0) == 124) {
					sctName = sctName.substring(1);
				}
				q.skipLineEnd();
				evStart = q.pos;
			} else if(version.config.hasEventSections && q.source.substr(q.pos,7) == "section") {
				var nameStart1 = q.pos += 7;
				var nameEnd = -1;
				_hx_loop2: while(q.get_loop()) switch(q.source.charCodeAt(q.pos)) {
				case 10:
					nameEnd = q.pos;
					q.pos += 1;
					break _hx_loop2;
				case 13:
					nameEnd = q.pos;
					q.pos += 1;
					if(q.get_loop() && q.source.charCodeAt(q.pos) == 10) {
						q.pos += 1;
					}
					break _hx_loop2;
				default:
					q.pos += 1;
				}
				if(nameEnd < 0) {
					nameEnd = q.length;
				}
				flush(nameStart1 - 8,true);
				sctName = q.source.substring(nameStart1,nameEnd);
				if(HxOverrides.cca(sctName,0) == 124) {
					sctName = sctName.substring(1);
				}
				evStart = q.pos;
			} else if(version.config.hasEventActions && q.source.substr(q.pos,6) == "action") {
				q.pos += 6;
				flush(q.pos - 7,true);
				evStart = q.pos - 7;
				q.skipLine();
				q.skipLineEnd();
				flush(q.pos,true);
				evStart = q.pos;
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	flush(q.pos,false,true);
	if(errors != "") {
		parsers_GmlEvent.parseError = errors;
		return null;
	} else {
		return eventData;
	}
};
parsers_GmlEvent.init = function() {
	parsers_GmlEvent.linkType(0,"event" + 0);
	parsers_GmlEvent.linkType(1,"event" + 1);
	parsers_GmlEvent.linkType(2,"event" + 2);
	parsers_GmlEvent.linkType(3,"event" + 3);
	parsers_GmlEvent.linkType(4,"event" + 4);
	parsers_GmlEvent.linkType(5,"event" + 5);
	parsers_GmlEvent.linkType(6,"event" + 6);
	parsers_GmlEvent.linkType(7,"event" + 7);
	parsers_GmlEvent.linkType(8,"event" + 8);
	parsers_GmlEvent.linkType(9,"event" + 9);
	parsers_GmlEvent.linkType(10,"event" + 10);
	parsers_GmlEvent.linkType(11,"event" + 11);
	parsers_GmlEvent.linkType(12,"event" + 12);
	parsers_GmlEvent.linkType(13,"event" + 13);
	parsers_GmlEvent.linkType(14,"event" + 14);
	parsers_GmlEvent.linkType(15,"event" + 15);
	parsers_GmlEvent.linkType(0,"Create");
	parsers_GmlEvent.linkType(1,"Destroy");
	parsers_GmlEvent.linkType(2,"Alarm");
	parsers_GmlEvent.linkType(3,"Step");
	parsers_GmlEvent.linkType(4,"Collision");
	parsers_GmlEvent.linkType(5,"Keyboard");
	parsers_GmlEvent.linkType(6,"Mouse");
	parsers_GmlEvent.linkType(7,"Other");
	parsers_GmlEvent.linkType(8,"Draw");
	parsers_GmlEvent.linkType(9,"KeyPress");
	parsers_GmlEvent.linkType(10,"KeyRelease");
	parsers_GmlEvent.linkType(12,"CleanUp");
	parsers_GmlEvent.linkType(13,"Gesture");
	parsers_GmlEvent.comp.push({ name : "collision", value : "collision", score : 0, meta : "event", doc : null});
	parsers_GmlEvent.comp.push({ name : "keypress", value : "keypress", score : 0, meta : "event", doc : null});
	parsers_GmlEvent.comp.push({ name : "keyrelease", value : "keyrelease", score : 0, meta : "event", doc : null});
	parsers_GmlEvent.comp.push({ name : "keyboard", value : "keyboard", score : 0, meta : "event", doc : null});
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/events.gml"]),"utf8",function(err,data) {
		tools_ERegTools.each(new EReg("^([\\d-]+):([\\d-]+)[ \t]+(\\w+)","gm"),data,function(rx) {
			var name = rx.matched(3);
			parsers_GmlEvent.comp.push({ name : name, value : name, score : 0, meta : "event", doc : null});
			parsers_GmlEvent.link(Std.parseInt(rx.matched(1)),Std.parseInt(rx.matched(2)),name);
		});
	});
};
var parsers_GmlHeader = function() { };
$hxClasses["parsers.GmlHeader"] = parsers_GmlHeader;
parsers_GmlHeader.__name__ = "parsers.GmlHeader";
parsers_GmlHeader.parse = function(code,version) {
	var mt;
	var name = null;
	if(version.config.hasJSDoc) {
		mt = parsers_GmlHeader.rx2.exec(code);
		if(mt != null) {
			name = mt[2];
			if(mt[1] == "desc") {
				name = "|" + name.substring(1);
			}
		}
	} else {
		mt = parsers_GmlHeader.rx1.exec(code);
		if(mt != null) {
			name = mt[1];
			if(HxOverrides.cca(name,0) != 32) {
				name = "|" + name;
			}
		}
	}
	if(mt != null) {
		return { name : name, code : code.substring(mt[0].length)};
	} else {
		return { name : null, code : code};
	}
};
var parsers_GmlKeycode = function() { };
$hxClasses["parsers.GmlKeycode"] = parsers_GmlKeycode;
parsers_GmlKeycode.__name__ = "parsers.GmlKeycode";
parsers_GmlKeycode.initNames = function() {
	var r = [];
	r.length = 0;
	r.length = 256;
	var add = function(k,s) {
		r[k] = s;
		parsers_GmlKeycode.comp.push({ name : s, value : s, score : 0, meta : "key", doc : "keycode:" + k});
	};
	var i = 65;
	while(i <= 90) {
		add(i,String.fromCodePoint(i));
		++i;
	}
	i = 48;
	while(i <= 57) {
		add(i,String.fromCodePoint(i));
		++i;
	}
	add(0,"vk_nokey");
	add(1,"vk_anykey");
	add(8,"vk_backspace");
	add(9,"vk_tab");
	add(13,"vk_return");
	add(16,"vk_shift");
	add(17,"vk_control");
	add(18,"vk_alt");
	add(19,"vk_pause");
	add(27,"vk_escape");
	add(32,"vk_space");
	add(33,"vk_pageup");
	add(34,"vk_pagedown");
	add(35,"vk_end");
	add(36,"vk_home");
	add(37,"vk_left");
	add(38,"vk_up");
	add(39,"vk_right");
	add(40,"vk_down");
	add(44,"vk_printscreen");
	add(45,"vk_insert");
	add(46,"vk_delete");
	add(96,"vk_numpad0");
	add(97,"vk_numpad1");
	add(98,"vk_numpad2");
	add(99,"vk_numpad3");
	add(100,"vk_numpad4");
	add(101,"vk_numpad5");
	add(102,"vk_numpad6");
	add(103,"vk_numpad7");
	add(104,"vk_numpad8");
	add(105,"vk_numpad9");
	add(106,"vk_multiply");
	add(107,"vk_add");
	add(109,"vk_subtract");
	add(110,"vk_decimal");
	add(111,"vk_divide");
	add(112,"vk_f1");
	add(113,"vk_f2");
	add(114,"vk_f3");
	add(115,"vk_f4");
	add(116,"vk_f5");
	add(117,"vk_f6");
	add(118,"vk_f7");
	add(119,"vk_f8");
	add(120,"vk_f9");
	add(121,"vk_f10");
	add(122,"vk_f11");
	add(123,"vk_f12");
	add(160,"vk_lshift");
	add(161,"vk_rshift");
	add(162,"vk_lcontrol");
	add(163,"vk_rcontrol");
	add(164,"vk_lalt");
	add(165,"vk_ralt");
	return r;
};
parsers_GmlKeycode.initCodes = function(names) {
	var r = Object.create(null);
	var _g = 0;
	var _g1 = names.length;
	while(_g < _g1) {
		var k = _g++;
		var name = names[k];
		if(name != null) {
			r[name] = k;
		}
	}
	var _g = 65;
	var _g1 = 91;
	while(_g < _g1) {
		var k = _g++;
		r[String.fromCodePoint((k + 32))] = k;
	}
	return r;
};
parsers_GmlKeycode.toName = function(k) {
	var r = parsers_GmlKeycode.names[k];
	if(r == null) {
		return "key" + k;
	} else {
		return r;
	}
};
var parsers_GmlMultifile = function() { };
$hxClasses["parsers.GmlMultifile"] = parsers_GmlMultifile;
parsers_GmlMultifile.__name__ = "parsers.GmlMultifile";
parsers_GmlMultifile.split = function(gmlCode,first) {
	var q = new parsers_GmlReader(gmlCode);
	var start = 0;
	var out = [];
	var scriptName = first;
	var errors = "";
	var version = gml_GmlAPI.version;
	var flush = function(till) {
		if(start > 0 || till > start) {
			var next = q.source.substring(start,till);
			next = next.trimRight();
			out.push({ name : scriptName, code : next});
		}
	};
	var row = 1;
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 10:
			++row;
			break;
		case 35:
			if(q.pos == 1 || q.source.charCodeAt(q.pos - 2) == 10) {
				if(q.source.substr(q.pos,6) == "define") {
					flush(q.pos - 1);
					q.pos += 6;
					q.skipSpaces0();
					var p = q.pos;
					q.skipIdent1();
					scriptName = q.source.substring(p,q.pos);
					if(scriptName == "") {
						errors += "Expected a script name at line " + row + ".\n";
					}
					q.skipLine();
					p = q.pos;
					q.skipLineEnd();
					if(q.pos > p) {
						++row;
					}
					start = q.pos;
				}
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				row += q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			row += q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	flush(q.pos);
	if(errors != "") {
		parsers_GmlMultifile.errorText = errors;
		return null;
	} else {
		return out;
	}
};
var parsers_GmlObjectProperties = function() { };
$hxClasses["parsers.GmlObjectProperties"] = parsers_GmlObjectProperties;
parsers_GmlObjectProperties.__name__ = "parsers.GmlObjectProperties";
parsers_GmlObjectProperties.parse = function(code,v,fn,vfn,ovfn) {
	var q = new parsers_GmlReader(code);
	var state = 1;
	var key = null;
	var type = null;
	var object = null;
	var params = null;
	var err;
	var val;
	var s;
	var call = function(v) {
		if(object != null) {
			if(ovfn != null) {
				err = ovfn(object,key,v);
			} else {
				err = null;
			}
		} else if(type != null) {
			var guid = null;
			while(q.get_loop()) {
				switch(q.source.charCodeAt(q.pos)) {
				case 9:case 32:case 59:
					q.pos += 1;
					continue;
				}
				break;
			}
			var call;
			if(q.source.charCodeAt(q.pos) == 47) {
				var offset = 1;
				if(offset == null) {
					offset = 0;
				}
				call = q.source.charCodeAt(q.pos + offset) == 47;
			} else {
				call = false;
			}
			if(call) {
				var start = q.pos += 2;
				q.skipLine();
				var raw = q.source.substring(start,q.pos).trim();
				if(yy_YyGUID.test.test(raw)) {
					guid = raw;
				}
			}
			err = vfn(key,type,guid,params,v);
		} else {
			err = fn(key,v);
		}
	};
	var c;
	var start;
	var readString = function() {
		var c = q.source.charCodeAt(q.pos);
		start = q.pos++;
		var s = null;
		val = null;
		switch(c) {
		case 34:
			if(v.hasStringEscapeCharacters()) {
				q.skipString2();
				s = code.substring(start,q.pos);
				try {
					s = JSON.parse(s);
				} catch( _g ) {
					var s1 = "Invalid string, " + Std.string(haxe_Exception.caught(_g).unwrap());
					var this1 = tools_NativeString.offsetToPos(code,start);
					return "[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + " " + s1;
				}
			} else {
				q.skipString1(34);
			}
			break;
		case 39:
			if(v.hasSingleQuoteStrings()) {
				q.skipString1(39);
			} else {
				var this1 = tools_NativeString.offsetToPos(code,start);
				return "[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + " " + "Unexpected '";
			}
			break;
		case 64:
			if(v.hasLiteralStrings()) {
				start += 1;
				c = q.source.charCodeAt(q.pos++);
				if(c == 34 || c == 39) {
					q.skipString1(c);
				} else {
					var s1 = "Unexpected " + String.fromCodePoint(c);
					var this1 = tools_NativeString.offsetToPos(code,start);
					return "[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + " " + s1;
				}
			} else {
				var this1 = tools_NativeString.offsetToPos(code,start);
				return "[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + " " + "Unexpected @";
			}
			break;
		}
		if(s == null) {
			s = code.substring(start + 1,q.pos - 1);
		}
		val = parsers_GmlObjectPropertiesValue.CString(s);
		return null;
	};
	while(q.get_loop()) {
		c = q.source.charCodeAt(q.pos);
		switch(c) {
		case 35:
			var offset = 1;
			if(offset == null) {
				offset = 0;
			}
			if(q.source.charCodeAt(q.pos + offset) == 34) {
				q.pos += 1;
				s = readString();
				if(s != null) {
					return s;
				}
				if(val._hx_index == 1) {
					val = parsers_GmlObjectPropertiesValue.EString(val.s);
				}
				switch(state) {
				case 4:
					call(val);
					if(err != null) {
						var this1 = tools_NativeString.offsetToPos(code,start);
						return "[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
					break;
				case 7:
					params.push(val);
					state = 8;
					break;
				default:
					var this2 = tools_NativeString.offsetToPos(code,start);
					return "[Ln " + (this2.row + 1) + ", col " + (this2.column + 1) + "]" + " " + "Unexpected code string";
				}
			} else if((c >= 48 && c <= 57 || c == 46 || c == 45) && (state == 4 || state == 7)) {
				start = q.pos;
				q.pos += 1;
				q.skipNumber();
				s = code.substring(start,q.pos);
				var f = parseFloat(s);
				if(isNaN(f)) {
					var this3 = tools_NativeString.offsetToPos(code,start);
					return "[Ln " + (this3.row + 1) + ", col " + (this3.column + 1) + "]" + " " + ("Invalid number " + s);
				}
				val = parsers_GmlObjectPropertiesValue.Number(f);
				if(state == 7) {
					params.push(val);
					state = 8;
				} else {
					call(val);
					if(err != null) {
						var this4 = tools_NativeString.offsetToPos(code,start);
						return "[Ln " + (this4.row + 1) + ", col " + (this4.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
				}
			} else {
				var tmp;
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					switch(state) {
					case 1:case 4:case 5:case 7:case 9:
						tmp = true;
						break;
					default:
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					start = q.pos++;
					while(q.get_loop()) {
						c = q.source.charCodeAt(q.pos);
						if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
							q.pos += 1;
						} else {
							break;
						}
					}
					s = code.substring(start,q.pos);
					switch(state) {
					case 4:
						val = parsers_GmlObjectPropertiesValue.Ident(s);
						call(val);
						if(err != null) {
							var this5 = tools_NativeString.offsetToPos(code,start);
							return "[Ln " + (this5.row + 1) + ", col " + (this5.column + 1) + "]" + " " + err;
						}
						state = 1;
						key = null;
						break;
					case 5:
						type = s;
						state = 6;
						break;
					case 7:
						params.push(parsers_GmlObjectPropertiesValue.Ident(s));
						state = 8;
						break;
					case 9:
						key = s;
						state = 2;
						break;
					default:
						key = s;
						type = null;
						params = null;
						state = 3;
					}
				} else {
					var p = q.pos;
					var s1 = "Unexpected " + String.fromCodePoint(c);
					var this6 = tools_NativeString.offsetToPos(code,p);
					return "[Ln " + (this6.row + 1) + ", col " + (this6.column + 1) + "]" + " " + s1;
				}
			}
			break;
		case 40:
			var start1 = ++q.pos;
			q.skipVarExpr(q.version,41);
			if(q.get_eof()) {
				var this7 = tools_NativeString.offsetToPos(code,start1);
				return "[Ln " + (this7.row + 1) + ", col " + (this7.column + 1) + "]" + " " + "Unclosed ()";
			}
			var val1 = parsers_GmlObjectPropertiesValue.EString(q.source.substring(start1,q.pos++));
			switch(state) {
			case 4:
				call(val1);
				if(err != null) {
					var this8 = tools_NativeString.offsetToPos(code,start1);
					return "[Ln " + (this8.row + 1) + ", col " + (this8.column + 1) + "]" + " " + err;
				}
				state = 1;
				key = null;
				break;
			case 7:
				params.push(val1);
				state = 8;
				break;
			default:
				var this9 = tools_NativeString.offsetToPos(code,start1);
				return "[Ln " + (this9.row + 1) + ", col " + (this9.column + 1) + "]" + " " + "Unexpected code literal";
			}
			break;
		case 44:
			if(state == 8) {
				state = 7;
				q.pos += 1;
			} else {
				var this10 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this10.row + 1) + ", col " + (this10.column + 1) + "]" + " " + "Unexpected ,";
			}
			break;
		case 46:
			if(state == 3) {
				state = 9;
				object = key;
				key = null;
				q.pos += 1;
			} else {
				var this11 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this11.row + 1) + ", col " + (this11.column + 1) + "]" + " " + "Unexpected .";
			}
			break;
		case 47:
			var offset1 = 1;
			if(offset1 == null) {
				offset1 = 0;
			}
			switch(q.source.charCodeAt(q.pos + offset1)) {
			case 42:
				q.pos += 2;
				q.skipComment();
				break;
			case 47:
				q.pos += 2;
				q.skipLine();
				break;
			default:
				var this12 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this12.row + 1) + ", col " + (this12.column + 1) + "]" + " " + "Unexpected /";
			}
			break;
		case 58:
			if(state == 3 && vfn != null) {
				state = 5;
				q.pos += 1;
			} else {
				var this13 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this13.row + 1) + ", col " + (this13.column + 1) + "]" + " " + "Unexpected :";
			}
			break;
		case 9:case 10:case 13:case 32:case 59:
			q.pos += 1;
			break;
		case 60:
			if(state == 6) {
				state = 7;
				params = [];
				q.pos += 1;
			} else {
				var this14 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this14.row + 1) + ", col " + (this14.column + 1) + "]" + " " + "Unexpected <";
			}
			break;
		case 61:
			switch(state) {
			case 2:case 3:case 6:
				state = 4;
				q.pos += 1;
				break;
			default:
				var this15 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this15.row + 1) + ", col " + (this15.column + 1) + "]" + " " + "Unexpected =";
			}
			break;
		case 62:
			if(state == 8) {
				state = 2;
				q.pos += 1;
			} else {
				var this16 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this16.row + 1) + ", col " + (this16.column + 1) + "]" + " " + "Unexpected >";
			}
			break;
		case 34:case 39:case 64:case 96:
			s = readString();
			if(s != null) {
				return s;
			}
			switch(state) {
			case 4:
				call(val);
				if(err != null) {
					var this17 = tools_NativeString.offsetToPos(code,start);
					return "[Ln " + (this17.row + 1) + ", col " + (this17.column + 1) + "]" + " " + err;
				}
				state = 1;
				key = null;
				break;
			case 7:
				params.push(val);
				state = 8;
				break;
			default:
				var this18 = tools_NativeString.offsetToPos(code,start);
				return "[Ln " + (this18.row + 1) + ", col " + (this18.column + 1) + "]" + " " + "Unexpected string";
			}
			break;
		case 91:
			if(state != 4) {
				var this19 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this19.row + 1) + ", col " + (this19.column + 1) + "]" + " " + "Unexpected [";
			}
			start = q.pos++;
			state = 7;
			var vals = [];
			_hx_loop3: while(q.get_loop()) {
				c = q.source.charCodeAt(q.pos);
				switch(c) {
				case 9:case 10:case 13:case 32:
					q.pos += 1;
					break;
				case 44:
					if(state != 8) {
						var this20 = tools_NativeString.offsetToPos(code,q.pos);
						return "[Ln " + (this20.row + 1) + ", col " + (this20.column + 1) + "]" + " " + "Unexpected ,";
					}
					q.pos += 1;
					state = 7;
					break;
				case 34:case 39:case 64:case 96:
					s = readString();
					if(s != null) {
						return s;
					}
					vals.push(val);
					state = 8;
					break;
				case 93:
					if(state != 8) {
						var this21 = tools_NativeString.offsetToPos(code,q.pos);
						return "[Ln " + (this21.row + 1) + ", col " + (this21.column + 1) + "]" + " " + "Unexpected ]";
					}
					q.pos += 1;
					state = 4;
					break _hx_loop3;
				default:
					var p1 = q.pos;
					var s2 = "Unexpected " + String.fromCodePoint(c);
					var this22 = tools_NativeString.offsetToPos(code,p1);
					return "[Ln " + (this22.row + 1) + ", col " + (this22.column + 1) + "]" + " " + s2;
				}
			}
			if(state != 4) {
				var this23 = tools_NativeString.offsetToPos(code,start);
				return "[Ln " + (this23.row + 1) + ", col " + (this23.column + 1) + "]" + " " + "Unclosed [";
			}
			val = parsers_GmlObjectPropertiesValue.Values(vals);
			call(val);
			if(err != null) {
				var this24 = tools_NativeString.offsetToPos(code,start);
				return "[Ln " + (this24.row + 1) + ", col " + (this24.column + 1) + "]" + " " + err;
			}
			state = 1;
			key = null;
			break;
		default:
			if((c >= 48 && c <= 57 || c == 46 || c == 45) && (state == 4 || state == 7)) {
				start = q.pos;
				q.pos += 1;
				q.skipNumber();
				s = code.substring(start,q.pos);
				var f1 = parseFloat(s);
				if(isNaN(f1)) {
					var this25 = tools_NativeString.offsetToPos(code,start);
					return "[Ln " + (this25.row + 1) + ", col " + (this25.column + 1) + "]" + " " + ("Invalid number " + s);
				}
				val = parsers_GmlObjectPropertiesValue.Number(f1);
				if(state == 7) {
					params.push(val);
					state = 8;
				} else {
					call(val);
					if(err != null) {
						var this26 = tools_NativeString.offsetToPos(code,start);
						return "[Ln " + (this26.row + 1) + ", col " + (this26.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
				}
			} else {
				var tmp1;
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					switch(state) {
					case 1:case 4:case 5:case 7:case 9:
						tmp1 = true;
						break;
					default:
						tmp1 = false;
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					start = q.pos++;
					while(q.get_loop()) {
						c = q.source.charCodeAt(q.pos);
						if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
							q.pos += 1;
						} else {
							break;
						}
					}
					s = code.substring(start,q.pos);
					switch(state) {
					case 4:
						val = parsers_GmlObjectPropertiesValue.Ident(s);
						call(val);
						if(err != null) {
							var this27 = tools_NativeString.offsetToPos(code,start);
							return "[Ln " + (this27.row + 1) + ", col " + (this27.column + 1) + "]" + " " + err;
						}
						state = 1;
						key = null;
						break;
					case 5:
						type = s;
						state = 6;
						break;
					case 7:
						params.push(parsers_GmlObjectPropertiesValue.Ident(s));
						state = 8;
						break;
					case 9:
						key = s;
						state = 2;
						break;
					default:
						key = s;
						type = null;
						params = null;
						state = 3;
					}
				} else {
					var p2 = q.pos;
					var s3 = "Unexpected " + String.fromCodePoint(c);
					var this28 = tools_NativeString.offsetToPos(code,p2);
					return "[Ln " + (this28.row + 1) + ", col " + (this28.column + 1) + "]" + " " + s3;
				}
			}
		}
	}
	return null;
};
var parsers_GmlObjectPropertiesValue = $hxEnums["parsers.GmlObjectPropertiesValue"] = { __ename__:true,__constructs__:null
	,Number: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_._hx_name="Number",$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_._hx_name="CString",$_.__params__ = ["s"],$_)
	,EString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_._hx_name="EString",$_.__params__ = ["s"],$_)
	,Ident: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_._hx_name="Ident",$_.__params__ = ["s"],$_)
	,Values: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_._hx_name="Values",$_.__params__ = ["a"],$_)
};
parsers_GmlObjectPropertiesValue.__constructs__ = [parsers_GmlObjectPropertiesValue.Number,parsers_GmlObjectPropertiesValue.CString,parsers_GmlObjectPropertiesValue.EString,parsers_GmlObjectPropertiesValue.Ident,parsers_GmlObjectPropertiesValue.Values];
var parsers_GmlParseAPI = function() { };
$hxClasses["parsers.GmlParseAPI"] = parsers_GmlParseAPI;
parsers_GmlParseAPI.__name__ = "parsers.GmlParseAPI";
parsers_GmlParseAPI.loadStd = function(src,data) {
	var stdKind = data.kind;
	var stdComp = data.comp;
	var stdDoc = data.doc;
	var stdTypes = data.types;
	var stdTypeExists = data.typeExists;
	var ukSpelling = data.ukSpelling;
	var kindPrefix = data.kindPrefix != null ? data.kindPrefix + "." : "";
	var version = data.version != null ? data.version : gml_GmlVersion.none;
	var instComp = data.instComp;
	var instCompMap = data.instCompMap;
	var instKind = data.instKind;
	var instType = data.instType;
	var namespaceDefs = data.namespaceDefs;
	var typedefs = data.typedefs;
	var fieldHints = data.fieldHints;
	var featureFlags = ui_Preferences.current.apiFeatureFlags;
	var rxTypedef = new RegExp("^" + "typedef\\s+" + "(\\w+)" + "(?:\\s*:\\s*(" + "\\w+(?:\\s*,\\s*\\w+)*" + "))?" + "(?:\\s*=\\s*(" + ["\\w+<\\s*" + "(?:\r?\n.*?)*?" + "\r?\n\\s*>",".+"].join("|") + "))?" + "","gm");
	if(namespaceDefs != null || typedefs != null) {
		var till = -1;
		till = src.length;
		rxTypedef.lastIndex = 0;
		var mt = rxTypedef.exec(src);
		while(mt != null && mt.index < till) {
			var name = mt[1];
			var parent = mt[2];
			var def = mt[3];
			var wantKind = true;
			stdComp.push({ name : name, value : name, score : 0, meta : "namespace", doc : "type\nbuilt-in"});
			if(def != null) {
				if(typedefs != null) {
					typedefs[name] = gml_type_GmlTypeParser.parse(def,mt[0]);
				}
			} else if(namespaceDefs != null) {
				var def1 = new gml_GmlNamespaceDef();
				def1.name = name;
				def1.parents = parent != null ? parent.split(/\s*,\s*/) : [];
				if(def1.parents.indexOf("simplename") >= 0) {
					wantKind = false;
				}
				namespaceDefs.push(def1);
			}
			if(stdTypeExists != null) {
				stdTypeExists[name] = true;
			}
			if(wantKind) {
				stdKind[name] = "namespace";
			}
			mt = rxTypedef.exec(src);
		}
	}
	var rxFeatherAlias = new RegExp("^" + "(?:feathername|fe_name)\\b\\s*" + "(?:(\\w+)\\s*)?" + "[=:]\\s*" + "([\\w\\.\\*]+)" + ".*" + "(?:\n\\s*typedef\\s*(\\w+))?" + "","gm");
	var featherAliases = data.featherAliases;
	if(featherAliases != null) {
		var till = -1;
		till = src.length;
		rxFeatherAlias.lastIndex = 0;
		var mt = rxFeatherAlias.exec(src);
		while(mt != null && mt.index < till) {
			(function(mt) {
				var gmeName = mt[1];
				if(gmeName == null) {
					gmeName = mt[3];
					if(gmeName == null) {
						console.warn("Can't parse \"" + mt[0] + "\" - no GMEdit type name");
						return;
					}
				}
				var feName = mt[2];
				if(feName.includes("*")) {
					var flatname = StringTools.replace(gmeName,"_","");
					feName = feName.replace("*",flatname);
				}
				featherAliases[feName.toLowerCase()] = gmeName;
			})(mt);
			mt = rxFeatherAlias.exec(src);
		}
	}
	var rxStruct = new RegExp("^" + "(?:" + ["(\\w+)" + "\\?" + "(?::(\\S+))?","\\?\\?" + "(\\w+)"].join("|") + ")" + "(?://.*)?" + "$","gm");
	var currStruct = null;
	if(fieldHints != null) {
		var till = -1;
		till = src.length;
		rxStruct.lastIndex = 0;
		var mt = rxStruct.exec(src);
		while(mt != null && mt.index < till) {
			var name = mt[1];
			if(name == null) {
				name = mt[3];
				currStruct = name;
				stdKind[name] = "namespace";
			} else {
				var typeStr = mt[2];
				var type = gml_type_GmlTypeDef.simple(typeStr);
				var cinf = "from " + currStruct;
				if(typeStr != null) {
					cinf += "\ntype " + typeStr;
				}
				fieldHints.push(new parsers_GmlSeekDataHint(currStruct,true,name,{ name : name, value : name, score : 0, meta : "variable", doc : cinf},null,null,type));
			}
			mt = rxStruct.exec(src);
		}
	}
	var oldTypeWarn = gml_type_GmlTypeParser.warnAboutMissing;
	var typeWarn = [];
	gml_type_GmlTypeParser.warnAboutMissing = typeWarn;
	var rxFunc = new RegExp("^" + "(:*)" + "(\\w+" + "(?:<.*?>)?" + "\\(" + ".+" + ")","gm");
	var rxFuncTail = new RegExp("^" + "(.*?)" + "([ ~\\$#*@&£!:]*)" + "\\s*(?:\\^(\\w*))?" + "\\s*" + "(?://.*)?" + "$");
	var isGMS1 = version.config.docMode == "gms1";
	var till = -1;
	till = src.length;
	rxFunc.lastIndex = 0;
	var mt = rxFunc.exec(src);
	while(mt != null && mt.index < till) {
		var doc = gml_funcdoc_GmlFuncDocParser.parse(mt[2],null);
		var _g = 0;
		while(_g < typeWarn.length) console.warn("[API] Unknown type " + typeWarn[_g++] + " referenced in " + mt[0]);
		typeWarn.length = 0;
		var name = doc.name;
		var orig = name;
		var show = true;
		var mtt = rxFuncTail.exec(doc.post);
		var flags;
		if(mtt != null) {
			doc.post = mtt[1];
			flags = mtt[2];
			var featureFlag = mtt[3];
			if(featureFlag != null && featureFlags.indexOf(featureFlag) == -1) {
				show = false;
			}
		} else {
			flags = "";
		}
		if(!flags.includes("&")) {
			if(isGMS1) {
				var usn = name.replace("colour","color");
				if(ukSpelling) {
					orig = usn;
				} else {
					name = usn;
				}
				if(orig != name) {
					stdKind[orig] = "function";
					stdDoc[orig] = doc;
				}
			} else if(flags.includes(ukSpelling ? "$" : "£")) {
				show = false;
			}
			if(!Object.prototype.hasOwnProperty.call(stdKind,name)) {
				stdKind[name] = kindPrefix + "function";
				if(show) {
					stdComp.push({ name : name, value : name, score : 0, meta : "function", doc : doc.getAcText()});
				}
				stdDoc[name] = doc;
			}
		}
		mt = rxFunc.exec(src);
	}
	var rxVar = new RegExp("^" + "(" + "(\\w+)" + "(" + "\\[.*?\\]" + ")?" + "([~\\*\\$£#@&]*)" + ")" + "(?:\\^(\\w*))?" + "(?::(\\S+))?" + "[ \t]*" + "(?://.*)?" + "$" + "","gm");
	var till = -1;
	till = src.length;
	rxVar.lastIndex = 0;
	var mt = rxVar.exec(src);
	while(mt != null && mt.index < till) {
		var comp = mt[1];
		var name = mt[2];
		var range = mt[3];
		var flags = mt[4];
		var featureFlag = mt[5];
		var typeStr = mt[6];
		var type = null;
		if(!flags.includes("&")) {
			if(typeStr != null && stdTypes != null) {
				type = gml_type_GmlTypeParser.parse(typeStr,mt[0]);
				stdTypes[name] = type;
				var _g = 0;
				while(_g < typeWarn.length) console.warn("[API] Unknown type " + typeWarn[_g++] + " referenced in " + mt[0]);
				typeWarn.length = 0;
			}
			var kind = flags.indexOf("#") >= 0 ? "constant" : "variable";
			var show = true;
			if(featureFlag != null && featureFlags.indexOf(featureFlag) < 0) {
				show = false;
			}
			if(flags.includes("@")) {
				if(instComp != null) {
					var doc = "built-in";
					if(flags.includes("*")) {
						doc = "built-in" + "\nread-only";
					}
					if(range != null) {
						doc += "\narray" + range;
					}
					if(typeStr != null) {
						doc += "\ntype" + typeStr;
					}
					var c = { name : name, value : name, score : 0, meta : "variable", doc : doc};
					instComp.push(c);
					instCompMap[name] = c;
				}
				if(instKind != null) {
					instKind[name] = "variable";
				}
				if(instKind != null && typeStr != null) {
					instType[name] = type;
				}
			}
			var orig = name;
			if(version.config.docMode == "gms1") {
				var usn = name.replace("colour","color");
				if(ukSpelling) {
					orig = usn;
				} else {
					name = usn;
				}
				if(orig != name) {
					stdKind[orig] = kindPrefix + kind;
				}
			}
			stdKind[name] = kindPrefix + kind;
			var doc1 = comp;
			if(typeStr != null) {
				doc1 = comp + ("\ntype " + typeStr);
			}
			if(show) {
				stdComp.push({ name : name, value : name, score : 0, meta : kind, doc : doc1});
			}
		}
		mt = rxVar.exec(src);
	}
	tools_ERegTools.each(new EReg("^(\\w+)[ \t]*=[ \t]*(.+)$","gm"),src,function(rx) {
		var name = rx.matched(1);
		var expr = rx.matched(2);
		stdKind[name] = kindPrefix + "constant";
		stdComp.push({ name : name, value : name, score : 0, meta : "constant", doc : expr});
	});
	gml_type_GmlTypeParser.warnAboutMissing = oldTypeWarn;
};
parsers_GmlParseAPI.loadAssets = function(src,out) {
	var stdKind = out.kind;
	var stdComp = out.comp;
	tools_ERegTools.each(new EReg("(\\w+)","g"),src,function(rx) {
		var name = rx.matched(1);
		stdKind[name] = "asset";
		stdComp.push({ name : name, value : name, score : 0, meta : "asset", doc : null});
	});
};
var tools_StringReader = function(src) {
	this.source = src;
	this.length = this.source.length;
	this.pos = 0;
};
$hxClasses["tools.StringReader"] = tools_StringReader;
tools_StringReader.__name__ = "tools.StringReader";
tools_StringReader.prototype = {
	tell: function() {
		return this.pos;
	}
	,seek: function(p) {
		this.pos = p;
	}
	,close: function() {
		this.source = null;
	}
	,read: function() {
		return this.source.charCodeAt(this.pos++);
	}
	,readChar: function() {
		return this.source.charAt(this.pos++);
	}
	,readChars: function(count) {
		var s = HxOverrides.substr(this.source,this.pos,count);
		this.pos += count;
		return s;
	}
	,peek: function(offset) {
		if(offset == null) {
			offset = 0;
		}
		return this.source.charCodeAt(this.pos + offset);
	}
	,peekstr: function(count,offset) {
		if(offset == null) {
			offset = 0;
		}
		return this.source.substr((this.pos + offset),count);
	}
	,skipPeek: function() {
		return this.source.charCodeAt(++this.pos);
	}
	,skip: function(num) {
		if(num == null) {
			num = 1;
		}
		this.pos += num;
	}
	,skipIfEquals: function(c) {
		if(this.source.charCodeAt(this.pos) == c) {
			this.pos += 1;
			return true;
		} else {
			return false;
		}
	}
	,skipIfStrEquals: function(s) {
		if(this.source.substr(this.pos,s.length) == s) {
			var num = s.length;
			if(num == null) {
				num = 1;
			}
			this.pos += num;
			return true;
		} else {
			return false;
		}
	}
	,skipIfIdentEquals: function(s,offset) {
		if(offset == null) {
			offset = 0;
		}
		var offset1 = offset;
		if(offset == null) {
			offset1 = 0;
		}
		if(this.source.substr((this.pos + offset1),s.length) != s) {
			return false;
		}
		var offset1 = s.length + offset;
		if(offset1 == null) {
			offset1 = 0;
		}
		var c = this.source.charCodeAt(this.pos + offset1);
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
			return false;
		}
		var num = s.length;
		if(num == null) {
			num = 1;
		}
		this.pos += num;
		return true;
	}
	,get: function(p) {
		return this.source.charCodeAt(p);
	}
	,charAt: function(p) {
		return this.source.charAt(p);
	}
	,substring: function(start,till) {
		return this.source.substring(start,till);
	}
	,substr: function(start,length) {
		return this.source.substr(start,length);
	}
	,getWatch: function(n) {
		var bn = this.pos < n ? this.pos : n;
		return this.source.substr((this.pos - bn),bn) + "¦" + this.source.substr(this.pos,n);
	}
	,__class__: tools_StringReader
};
var parsers_GmlReader = function(gmlCode,version) {
	tools_StringReader.call(this,gmlCode);
	if(version != null) {
		this.version = version;
	} else {
		var project = gml_Project.current;
		if(project != null) {
			this.version = project.version;
		} else {
			this.version = gml_GmlVersion.v2;
		}
	}
};
$hxClasses["parsers.GmlReader"] = parsers_GmlReader;
parsers_GmlReader.__name__ = "parsers.GmlReader";
parsers_GmlReader.skipComment_1 = function(s,p) {
	if(s.substr(p,5) == "event") {
		return true;
	}
	switch(s.substr(p,6)) {
	case "action":case "define":case "moment":case "target":
		return true;
	}
	if(s.substr(p,7) == "section") {
		return true;
	}
	return false;
};
parsers_GmlReader.__super__ = tools_StringReader;
parsers_GmlReader.prototype = $extend(tools_StringReader.prototype,{
	get_loop: function() {
		return this.pos < this.length;
	}
	,get_eof: function() {
		return this.pos >= this.length;
	}
	,get_loopLocal: function() {
		return this.pos < this.length;
	}
	,skipLine: function() {
		while(this.pos < this.length) {
			switch(this.source.charCodeAt(this.pos)) {
			case 10:case 13:
				break;
			default:
				this.pos += 1;
				continue;
			}
			break;
		}
	}
	,skipLineEnd: function() {
		if(this.pos < this.length) {
			switch(this.source.charCodeAt(this.pos)) {
			case 10:
				this.pos += 1;
				break;
			case 13:
				this.pos += 1;
				if(this.source.charCodeAt(this.pos) == 10) {
					this.pos += 1;
				}
				break;
			}
		}
	}
	,skipComment: function() {
		var n = 0;
		while(this.pos < this.length) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 10) {
				++n;
				if(this.source.charCodeAt(this.pos) == 35 && parsers_GmlReader.skipComment_1(this.source,this.pos + 1)) {
					break;
				}
			} else if(c == 42 && this.source.charCodeAt(this.pos) == 47) {
				this.pos += 1;
				break;
			}
		}
		return n;
	}
	,skipString1: function(qc) {
		var c = this.source.charCodeAt(this.pos);
		var n = 0;
		while(c != qc && this.pos < this.length) {
			this.pos += 1;
			c = this.source.charCodeAt(this.pos);
			if(c == 10) {
				++n;
			}
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return n;
	}
	,skipString2: function() {
		var n = 0;
		var c = this.source.charCodeAt(this.pos);
		while(c != 34 && this.pos < this.length) {
			if(c == 92) {
				this.pos += 1;
				c = this.source.charCodeAt(this.pos);
				switch(c) {
				case 10:
					++n;
					this.pos += 1;
					break;
				case 117:
					this.pos += 4;
					break;
				case 120:
					this.pos += 2;
					break;
				default:
					this.pos += 1;
				}
			} else {
				this.pos += 1;
			}
			c = this.source.charCodeAt(this.pos);
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return n;
	}
	,skipStringTemplate: function(version,isDqTpl) {
		var n = 0;
		var esc = version.hasStringEscapeCharacters();
		var stop = isDqTpl ? 34 : 96;
		while(this.get_loop()) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 92) {
				if(esc) {
					var c1 = this.source.charCodeAt(this.pos++);
					var max = -1;
					switch(c1) {
					case 117:
						max = 6;
						break;
					case 120:
						max = 2;
						break;
					}
					if(max > 0) {
						var _g = 0;
						var _g1 = max;
						while(_g < _g1) {
							++_g;
							c1 = this.source.charCodeAt(this.pos);
							if(c1 >= 48 && c1 <= 57 || c1 >= 97 && c1 <= 102 || c1 >= 65 && c1 <= 70) {
								this.pos += 1;
							} else {
								break;
							}
						}
					}
				} else if(this.source.charCodeAt(this.pos) == stop) {
					this.pos += 1;
				}
			} else if(c == stop) {
				break;
			} else if(isDqTpl ? c == 123 : c == 36 && this.source.charCodeAt(this.pos) == 123) {
				this.pos += 1;
				var depth = 0;
				_hx_loop3: while(this.get_loop()) {
					c = this.source.charCodeAt(this.pos++);
					switch(c) {
					case 10:
						++n;
						break;
					case 36:
						if(this.source.charCodeAt(this.pos) == 34 && version.hasQuoteTemplateStrings()) {
							this.pos += 1;
							this.skipStringTemplate(version,true);
						}
						break;
					case 47:
						switch(this.source.charCodeAt(this.pos)) {
						case 42:
							this.pos += 1;
							this.skipComment();
							break;
						case 47:
							this.skipLine();
							break;
						default:
						}
						break;
					case 34:case 39:case 64:case 96:
						this.skipStringAuto(c,version);
						break;
					case 123:
						++depth;
						break;
					case 125:
						if(--depth < 0) {
							break _hx_loop3;
						}
						break;
					}
				}
			} else if(c == 10) {
				++n;
			}
		}
		return n;
	}
	,skipNumber: function(canDot) {
		if(canDot == null) {
			canDot = true;
		}
		var c = this.source.charCodeAt(this.pos);
		while(this.pos < this.length) {
			if(c == 46) {
				if(canDot) {
					canDot = false;
					this.pos += 1;
				} else {
					break;
				}
			} else if(c >= 48 && c <= 57 || c == 95) {
				this.pos += 1;
			} else {
				break;
			}
			c = this.source.charCodeAt(this.pos);
		}
	}
	,readNumber: function() {
		var start = this.pos;
		this.skipNumber();
		return this.source.substring(start,this.pos);
	}
	,skipHex: function() {
		var c = this.source.charCodeAt(this.pos);
		while(this.pos < this.length) if(c == 95 || tools_CharCode.isHex(c)) {
			this.pos += 1;
			c = this.source.charCodeAt(this.pos);
		} else {
			break;
		}
	}
	,skipBinary: function() {
		var c = this.source.charCodeAt(this.pos);
		while(this.pos < this.length) if(c == 95 || c == 48 || c == 49) {
			this.pos += 1;
			c = this.source.charCodeAt(this.pos);
		} else {
			break;
		}
	}
	,readHex: function() {
		var start = this.pos;
		this.skipHex();
		return this.source.substring(start,this.pos);
	}
	,skipStringAuto: function(startquote,version) {
		switch(startquote) {
		case 34:
			if(version.hasStringEscapeCharacters()) {
				return this.skipString2();
			} else {
				return this.skipString1(34);
			}
			break;
		case 39:
			if(version.hasSingleQuoteStrings()) {
				return this.skipString1(39);
			} else {
				return 0;
			}
			break;
		case 64:
			if(version.hasLiteralStrings()) {
				var c = this.source.charCodeAt(this.pos++);
				if(c == 34 || c == 39) {
					return this.skipString1(c);
				} else {
					return 0;
				}
			} else {
				return 0;
			}
			break;
		case 96:
			if(version.hasTemplateStrings()) {
				return this.skipStringTemplate(version);
			} else {
				return 0;
			}
			break;
		default:
			return 0;
		}
	}
	,isDqTplStart: function(version) {
		if(this.source.charCodeAt(this.pos) == 34) {
			return version.hasQuoteTemplateStrings();
		} else {
			return false;
		}
	}
	,skipDqTplString: function(version) {
		this.pos += 1;
		return this.skipStringTemplate(version,true);
	}
	,readStringAuto: function(startquote) {
		var start = this.pos;
		this.skipStringAuto(startquote,this.version);
		return this.source.substring(start,this.pos - 1);
	}
	,skipSpaces0: function() {
		while(this.get_loop()) {
			switch(this.source.charCodeAt(this.pos)) {
			case 9:case 32:
				this.pos += 1;
				continue;
			}
			break;
		}
	}
	,skipSpaces0_local: function() {
		while(this.pos < this.length) {
			switch(this.source.charCodeAt(this.pos)) {
			case 9:case 32:
				this.pos += 1;
				continue;
			}
			break;
		}
	}
	,skipSpaces1: function() {
		var lines = 0;
		while(this.get_loop()) {
			switch(this.source.charCodeAt(this.pos)) {
			case 10:
				++lines;
				this.pos += 1;
				continue;
			case 9:case 13:case 32:
				this.pos += 1;
				continue;
			}
			break;
		}
		return lines;
	}
	,skipSpaces1_local: function() {
		var lines = 0;
		while(this.pos < this.length) {
			switch(this.source.charCodeAt(this.pos)) {
			case 10:
				++lines;
				this.pos += 1;
				continue;
			case 9:case 13:case 32:
				this.pos += 1;
				continue;
			}
			break;
		}
		return lines;
	}
	,skipSpaces1x: function(till) {
		_hx_loop1: while(this.pos < till) switch(this.source.charCodeAt(this.pos)) {
		case 9:case 10:case 13:case 32:
			this.pos += 1;
			break;
		default:
			break _hx_loop1;
		}
	}
	,skipIdent: function() {
		var this1 = this.source.charCodeAt(this.pos);
		if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90) {
			while(this.pos < this.length) {
				var this1 = this.source.charCodeAt(this.pos);
				if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90 || this1 >= 48 && this1 <= 57) {
					this.pos += 1;
				} else {
					break;
				}
			}
		}
	}
	,skipDigits: function() {
		while(this.pos < this.length) {
			var this1 = this.source.charCodeAt(this.pos);
			if(this1 >= 48 && this1 <= 57) {
				this.pos += 1;
			} else {
				break;
			}
		}
	}
	,skipIdent1: function() {
		while(this.pos < this.length) {
			var this1 = this.source.charCodeAt(this.pos);
			if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90 || this1 >= 48 && this1 <= 57) {
				this.pos += 1;
			} else {
				break;
			}
		}
	}
	,skipDotIdent1: function() {
		while(this.pos < this.length) {
			var c = this.source.charCodeAt(this.pos);
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
				this.pos += 1;
			} else if(c == 46) {
				this.pos += 1;
			} else {
				break;
			}
		}
	}
	,readIdent: function() {
		var this1 = this.source.charCodeAt(this.pos);
		if(!(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90)) {
			return null;
		}
		var start = this.pos;
		while(this.pos < this.length) {
			var this1 = this.source.charCodeAt(this.pos);
			if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90 || this1 >= 48 && this1 <= 57) {
				this.pos += 1;
			} else {
				break;
			}
		}
		return this.source.substring(start,this.pos);
	}
	,skipEventName: function() {
		while(this.pos < this.length) {
			var c = this.source.charCodeAt(this.pos);
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58) {
				this.pos += 1;
			} else {
				break;
			}
		}
	}
	,canContextName: function(p) {
		if(p != 0) {
			return this.source.charCodeAt(p - 1) == 10;
		} else {
			return true;
		}
	}
	,readContextName: function(name) {
		var p = this.pos;
		this.skipIdent1();
		var result;
		switch(this.source.substring(p - 1,this.pos)) {
		case "#event":
			this.skipSpaces0();
			p = this.pos;
			this.skipEventName();
			result = this.source.substring(p,this.pos);
			this.skipLine();
			if(name != null) {
				return name + ("(" + result + ")");
			} else {
				return result;
			}
			break;
		case "#moment":
			this.skipSpaces0();
			p = this.pos;
			this.skipIdent1();
			result = this.source.substring(p,this.pos);
			this.skipLine();
			if(name != null) {
				return name + ("(" + result + ")");
			} else {
				return result;
			}
			break;
		case "#define":case "#target":
			this.skipSpaces0();
			p = this.pos;
			this.skipIdent1();
			result = this.source.substring(p,this.pos);
			this.skipLine();
			return result;
		default:
			return null;
		}
	}
	,canHaveTopLevelFunctions: function(kind) {
		var pj = gml_Project.current;
		if(this.version == pj.version) {
			if(!pj.isGMS23) {
				return false;
			}
		} else if(!this.version.hasFunctionLiterals()) {
			return false;
		}
		if(!((kind) instanceof file_kind_gml_KGmlScript)) {
			return false;
		}
		return kind.isScript;
	}
	,readSolFunctionName: function() {
		if(this.pos > 0 && this.source.charCodeAt(this.pos + (-1)) != 10) {
			return null;
		}
		var first = null;
		var start = this.pos;
		var at = this.pos;
		first = this.source.charCodeAt(this.pos);
		if(first != 102) {
			return null;
		} else if(this.source.charCodeAt(at + 7) != 110) {
			return null;
		} else {
			var c = this.source.charCodeAt(at + 8);
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
				return null;
			} else if(this.source.substr(at,8) != "function") {
				return null;
			} else {
				this.pos = at + 8;
				this.skipSpaces0_local();
				c = this.source.charCodeAt(this.pos);
				if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
					this.pos = start;
					return null;
				} else {
					start = this.pos;
					this.skipIdent1();
					return this.source.substring(start,this.pos);
				}
			}
		}
	}
	,readFunctionName: function(first) {
		var start = this.pos;
		var at = this.pos;
		if(first == null) {
			first = this.source.charCodeAt(this.pos);
		} else {
			--at;
		}
		if(first != 102) {
			return null;
		}
		if(this.source.charCodeAt(at + 7) != 110) {
			return null;
		}
		var c = this.source.charCodeAt(at + 8);
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
			return null;
		}
		if(this.source.substr(at,8) != "function") {
			return null;
		}
		this.pos = at + 8;
		this.skipSpaces0_local();
		c = this.source.charCodeAt(this.pos);
		if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			this.pos = start;
			return null;
		}
		start = this.pos;
		this.skipIdent1();
		return this.source.substring(start,this.pos);
	}
	,skipNops: function(till) {
		var n = 0;
		if(till == null) {
			till = this.length;
		}
		_hx_loop1: while(this.pos < till) switch(this.source.charCodeAt(this.pos)) {
		case 10:
			this.pos += 1;
			++n;
			break;
		case 9:case 13:case 32:
			this.pos += 1;
			break;
		case 47:
			switch(this.source.charCodeAt(this.pos + 1)) {
			case 42:
				this.pos += 2;
				n += this.skipComment();
				break;
			case 47:
				this.skipLine();
				break;
			default:
				break _hx_loop1;
			}
			break;
		default:
			break _hx_loop1;
		}
		return n;
	}
	,skipNopsTillNewline: function() {
		_hx_loop1: while(this.pos < this.length) switch(this.source.charCodeAt(this.pos)) {
		case 10:
			this.pos += 1;
			return;
		case 9:case 13:case 32:
			this.pos += 1;
			break;
		case 47:
			switch(this.source.charCodeAt(this.pos + 1)) {
			case 42:
				this.pos += 2;
				break;
			case 47:
				this.skipLine();
				break;
			default:
				break _hx_loop1;
			}
			break;
		default:
			break _hx_loop1;
		}
	}
	,readNops: function() {
		var start = this.pos;
		this.skipNops();
		return this.source.substring(start,this.pos);
	}
	,readNopsTillNewline: function() {
		var start = this.pos;
		this.skipNopsTillNewline();
		return this.source.substring(start,this.pos);
	}
	,skipVarExpr: function(v,sep) {
		var depth = 0;
		var n = 0;
		_hx_loop1: while(this.pos < this.length) {
			var p = this.pos;
			var c = this.source.charCodeAt(this.pos++);
			if(c == sep && depth == 0) {
				this.pos = p;
				break;
			} else {
				switch(c) {
				case 10:
					++n;
					break;
				case 9:case 13:case 32:
					break;
				case 35:
					if(p == 0 || this.source.charCodeAt(p - 1) == 10) {
						if(this.readContextName(null) != null) {
							this.pos = p;
							break _hx_loop1;
						}
					}
					break;
				case 47:
					switch(this.source.charCodeAt(this.pos)) {
					case 42:
						this.pos += 1;
						this.skipComment();
						break;
					case 47:
						this.skipLine();
						break;
					default:
					}
					break;
				case 59:
					this.pos = p;
					break _hx_loop1;
				case 34:case 39:case 64:case 96:
					this.skipStringAuto(c,v);
					break;
				case 40:case 91:case 123:
					++depth;
					break;
				case 41:case 93:case 125:
					if(--depth < 0) {
						this.pos = p;
						break _hx_loop1;
					}
					break;
				default:
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						this.skipIdent1();
						if(gml_GmlAPI.kwFlow[this.source.substring(p,this.pos)]) {
							this.pos = p;
							break _hx_loop1;
						}
					}
				}
			}
		}
		return n;
	}
	,skipComplexExpr: function(editor) {
		var l = new parsers_linter_GmlLinter();
		l.runPre(this.source,editor,this.version);
		l.initSkipper();
		l.reader.pos = this.pos;
		l.expr.read(0,0,null,null);
		this.pos = l.reader.getBottomOffset();
	}
	,skipComplexStatement: function(editor) {
		var l = new parsers_linter_GmlLinter();
		l.runPre(this.source,editor,this.version);
		l.initSkipper();
		l.reader.pos = this.pos;
		l.readStat(0,0);
		this.pos = l.reader.getBottomOffset();
	}
	,skipTypeParams: function(till,open,close) {
		if(close == null) {
			close = 62;
		}
		if(open == null) {
			open = 60;
		}
		if(till == null) {
			till = this.length;
		}
		var p2 = this.pos;
		var depth = 1;
		this.pos += 1;
		while(this.pos < till) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == open) {
				++depth;
			} else if(c == close) {
				if(--depth <= 0) {
					break;
				}
			}
		}
		if(depth > 0) {
			this.pos = p2;
			return false;
		} else {
			return true;
		}
	}
	,skipType: function(till) {
		return gml_type_GmlTypeParser.skipTypeName(this,till);
	}
	,skipCommon_inline: function() {
		var c = this.source.charCodeAt(this.pos);
		switch(c) {
		case 47:
			switch(this.source.charCodeAt(this.pos + 1)) {
			case 42:
				this.pos += 2;
				return this.skipComment();
			case 47:
				this.pos += 2;
				this.skipLine();
				return 0;
			default:
				return -1;
			}
			break;
		case 34:case 39:case 64:case 96:
			this.pos += 1;
			return this.skipStringAuto(c,this.version);
		default:
			return -1;
		}
	}
	,skipCommon: function() {
		return this.skipCommon_inline();
	}
	,skipBalancedParenExpr: function() {
		var depth = 0;
		while(this.get_loop()) {
			var c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 47:
				switch(this.source.charCodeAt(this.pos)) {
				case 42:
					this.pos += 1;
					this.skipComment();
					break;
				case 47:
					this.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				this.skipStringAuto(c,this.version);
				break;
			case 40:case 91:case 123:
				++depth;
				break;
			case 41:case 93:case 125:
				if(--depth < 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,skipVars: function(fn,v,isArgs,d) {
		if(d == null) {
			d = new parsers_SkipVarsData();
		}
		this.skipNops();
		var till;
		if(isArgs) {
			till = this.source.indexOf("\n",this.pos);
			if(till < 0) {
				till = this.length;
			}
		} else {
			till = this.length;
		}
		while(this.pos < till) {
			var c = this.source.charCodeAt(this.pos);
			if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
				break;
			}
			var p = this.pos;
			d.nameStart = p;
			if(this.source.charCodeAt(this.pos) == 63) {
				d.isOptional = true;
				this.pos += 1;
				this.skipNops();
			} else {
				d.isOptional = false;
			}
			this.skipIdent1();
			d.nameEnd = this.pos;
			d.name = this.source.substring(p,this.pos);
			this.skipSpaces1x(till);
			d.rawTypeStart = this.pos;
			if(this.source.charCodeAt(this.pos) == 58 && this.source.charCodeAt(this.pos + 1) != 61) {
				this.pos += 1;
				d.typeStart = this.pos;
				var typeStart = this.pos;
				gml_type_GmlTypeParser.skipTypeName(this,null);
				if(this.pos > typeStart) {
					d.typeEnd = this.pos;
					d.typeStr = this.source.substring(typeStart,this.pos);
				} else {
					d.typeStr = null;
				}
			} else if(this.source.charCodeAt(this.pos) == 47 && this.source.charCodeAt(this.pos + 1) == 42 && this.source.charCodeAt(this.pos + 2) == 58) {
				var cmtStart = this.pos += 3;
				this.skipComment();
				var cmtEnd = this.pos;
				this.pos = cmtStart;
				gml_type_GmlTypeParser.skipTypeName(this,null);
				this.skipSpaces1x(cmtEnd);
				if(this.pos == cmtEnd - 2) {
					d.typeStart = cmtStart;
					d.typeEnd = cmtEnd - 2;
					d.typeStr = this.source.substring(cmtStart,cmtEnd - 2);
				} else {
					d.typeStr = null;
				}
				this.pos = cmtEnd;
			} else {
				d.typeStr = null;
			}
			d.rawTypeEnd = this.pos;
			this.skipSpaces1x(till);
			c = this.source.charCodeAt(this.pos);
			if(c == 61 || c == 58 && this.source.charCodeAt(this.pos + 1) == 61) {
				this.pos += 1;
				this.skipSpaces1();
				d.exprStart = this.pos;
				this.skipVarExpr(v,44);
			} else {
				d.exprStart = this.pos;
			}
			d.exprEnd = this.pos;
			this.skipNops(till);
			fn(d);
			if(this.source.charCodeAt(this.pos) != 44) {
				break;
			}
			this.pos += 1;
			this.skipNops(till);
		}
		return 0;
	}
	,checkWrites: function(p0,p1) {
		return tools_GmlCodeTools.isWrite(this.source,p0,p1);
	}
	,getPos: function(p) {
		var row = 0;
		var rowStart = 0;
		var _g = 0;
		while(_g < p) {
			var i = _g++;
			if(this.source.charCodeAt(i) == 10) {
				++row;
				rowStart = i + 1;
			}
		}
		return { column : p - rowStart, row : row};
	}
	,__class__: parsers_GmlReader
});
var parsers_SkipVarsData = function() {
	this.isOptional = false;
	this.exprEnd = 0;
	this.exprStart = 0;
	this.typeEnd = 0;
	this.typeStart = 0;
	this.typeStr = null;
	this.rawTypeEnd = 0;
	this.rawTypeStart = 0;
	this.nameEnd = 0;
	this.nameStart = 0;
	this.name = null;
};
$hxClasses["parsers.SkipVarsData"] = parsers_SkipVarsData;
parsers_SkipVarsData.__name__ = "parsers.SkipVarsData";
parsers_SkipVarsData.prototype = {
	__class__: parsers_SkipVarsData
};
var parsers_GmlReaderExt = function(gmlCode,version) {
	this.oldShowOnStack = [];
	this.oldName = [];
	this.oldRowStart = [];
	this.oldRow = [];
	this.oldLength = [];
	this.oldPos = [];
	this.oldSource = [];
	this.onEOF = null;
	this.showOnStack = true;
	this.name = "";
	this.rowStart = 0;
	this.row = 0;
	parsers_GmlReader.call(this,gmlCode,version);
};
$hxClasses["parsers.GmlReaderExt"] = parsers_GmlReaderExt;
parsers_GmlReaderExt.__name__ = "parsers.GmlReaderExt";
parsers_GmlReaderExt.__super__ = parsers_GmlReader;
parsers_GmlReaderExt.prototype = $extend(parsers_GmlReader.prototype,{
	markLine: function() {
		this.row++;
		this.rowStart = this.pos;
	}
	,getStack: function() {
		var n = this.oldPos.length;
		var i = n + 1;
		var r = "";
		while(--i >= 0) {
			var _pos;
			var _rowStart;
			if(i == n) {
				_pos = this.pos;
				_rowStart = this.rowStart;
			} else {
				if(!this.oldShowOnStack[i]) {
					continue;
				}
				_pos = this.oldPos[i];
				_rowStart = this.oldRowStart[i];
			}
			var _col = _pos - _rowStart;
			var _name = i == n ? this.name : this.oldName[i];
			r += (_name != null ? "\nfrom " + _name : "\nfrom") + "[Ln " + ((i == n ? this.row : this.oldRow[i]) + 1) + ", col " + (_col + 1) + "]";
			if(i > 0) {
				var _source = i == n ? this.source : this.oldSource[i];
				var _rowEnd = _source.indexOf("\n",_rowStart);
				if(_rowEnd >= 0) {
					if(_source.charCodeAt(_rowEnd - 1) == 13) {
						--_rowEnd;
					}
				} else {
					_rowEnd = _source.length;
				}
				r += ": " + tools_NativeString.insert(_source.substring(_rowStart,_rowEnd),_col,"¦");
			}
		}
		return r;
	}
	,getTopPos: function() {
		if(this.oldPos.length > 0) {
			return { column : this.oldPos[0] - this.oldRowStart[0], row : this.oldRow[0]};
		} else {
			return { column : this.pos - this.rowStart, row : this.row};
		}
	}
	,getTopPosString: function() {
		var this1 = this.getTopPos();
		return "[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]";
	}
	,get_depth: function() {
		return this.oldSource.length;
	}
	,get_loop: function() {
		if(this.pos < this.length) {
			return true;
		}
		while(this.oldSource.length > 0) {
			this.source = this.oldSource.pop();
			this.pos = this.oldPos.pop();
			this.length = this.oldLength.pop();
			this.row = this.oldRow.pop();
			this.rowStart = this.oldRowStart.pop();
			this.name = this.oldName.pop();
			this.showOnStack = this.oldShowOnStack.pop();
			if(this.pos < this.length) {
				return true;
			}
		}
		if(this.onEOF != null) {
			var s = this.onEOF(this);
			if(s != null) {
				this.source = s;
				this.length = s.length;
				this.pos = 0;
				this.rowStart = 0;
				this.row++;
				return true;
			}
		}
		return false;
	}
	,get_eof: function() {
		return !this.get_loop();
	}
	,pushSource: function(code,_name) {
		this.oldSource.push(this.source);
		this.oldPos.push(this.pos);
		this.oldLength.push(this.length);
		this.oldRow.push(this.row);
		this.oldRowStart.push(this.rowStart);
		this.oldName.push(this.name);
		this.oldShowOnStack.push(this.showOnStack);
		this.source = code;
		this.pos = 0;
		this.row = 0;
		this.rowStart = 0;
		this.name = _name;
		this.length = code.length;
		this.showOnStack = true;
	}
	,pushSourceExt: function(code,pos,till,row,rowStart,name) {
		this.pushSource(code,name);
		this.pos = pos;
		this.length = till;
		this.row = row;
		this.rowStart = rowStart;
	}
	,setTo: function(q) {
		this.version = q.version;
		this.source = q.source;
		tools_NativeArray.setTo(this.oldSource,q.oldSource);
		this.pos = q.pos;
		tools_NativeArray.setTo(this.oldPos,q.oldPos);
		this.length = q.length;
		tools_NativeArray.setTo(this.oldLength,q.oldLength);
		this.row = q.row;
		tools_NativeArray.setTo(this.oldRow,q.oldRow);
		this.rowStart = q.rowStart;
		tools_NativeArray.setTo(this.oldRowStart,q.oldRowStart);
		this.name = q.name;
		tools_NativeArray.setTo(this.oldName,q.oldName);
		this.showOnStack = q.showOnStack;
		tools_NativeArray.setTo(this.oldShowOnStack,q.oldShowOnStack);
	}
	,clear: function() {
		this.source = "";
		this.oldSource.length = 0;
		this.name = null;
		this.oldName.length = 0;
		this.pos = 0;
		this.oldPos.length = 0;
		this.length = 0;
		this.oldLength.length = 0;
		this.row = 0;
		this.oldRow.length = 0;
		this.rowStart = 0;
		this.oldRowStart.length = 0;
		this.showOnStack = true;
		this.oldShowOnStack.length = 0;
	}
	,skipComment: function() {
		while(this.pos < this.length) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 10) {
				this.row++;
				this.rowStart = this.pos;
				if(this.source.charCodeAt(this.pos) == 35 && parsers_GmlReader.skipComment_1(this.source,this.pos + 1)) {
					break;
				}
			} else if(c == 42 && this.source.charCodeAt(this.pos) == 47) {
				this.pos += 1;
				break;
			}
		}
		return 0;
	}
	,skipString1: function(qc) {
		var c = this.source.charCodeAt(this.pos);
		while(c != qc && this.pos < this.length) {
			this.pos += 1;
			c = this.source.charCodeAt(this.pos);
			if(c == 10) {
				this.row++;
				this.rowStart = this.pos;
			}
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return 0;
	}
	,skipString2: function() {
		var c = this.source.charCodeAt(this.pos);
		while(c != 34 && this.pos < this.length) {
			if(c == 92) {
				this.pos += 1;
				c = this.source.charCodeAt(this.pos);
				switch(c) {
				case 10:
					this.pos += 1;
					this.row++;
					this.rowStart = this.pos;
					break;
				case 117:
					this.pos += 4;
					break;
				case 120:
					this.pos += 2;
					break;
				default:
					this.pos += 1;
				}
			} else {
				this.pos += 1;
			}
			c = this.source.charCodeAt(this.pos);
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return 0;
	}
	,print: function() {
		var i = this.oldSource.length;
		var r = [this.source.substring(this.pos,this.length)];
		while(--i >= 0) r.push(this.oldSource[i].substring(this.oldPos[i],this.oldLength[i]));
		return r;
	}
	,getBottomOffset: function() {
		if(this.oldPos.length > 0) {
			return this.oldPos[this.oldPos.length - 1];
		} else {
			return this.pos;
		}
	}
	,getWatchForDepth: function(depth,n) {
		var p = this.oldPos[depth];
		var bn = p < n ? p : n;
		var src = this.oldSource[depth];
		return src.substr((p - bn),bn) + "¦" + src.substr(p,n);
	}
	,__class__: parsers_GmlReaderExt
});
var parsers_GmlSeekData = function(kind) {
	this.hasGMLive = false;
	this.hasCoroutines = false;
	this.imports = null;
	this.typedefs = new tools_ArrayMap();
	this.namespaceImplements = Object.create(null);
	this.namespaceHints = new tools_ArrayMap();
	this.fieldHints = new tools_ArrayMap();
	this.docs = new tools_ArrayMap();
	this.comps = new tools_ArrayMap();
	this.kindMap = Object.create(null);
	this.kindList = [];
	this.locals = Object.create(null);
	this.mfuncs = new tools_ArrayMap();
	this.macros = new tools_ArrayMap();
	this.instFieldComp = [];
	this.instFieldList = [];
	this.instFieldMap = Object.create(null);
	this.globalTypes = new tools_ArrayMap();
	this.globalFullComp = [];
	this.globalFullMap = Object.create(null);
	this.globalFieldComp = [];
	this.globalFields = new tools_ArrayMap();
	this.globalVarTypes = new tools_ArrayMap();
	this.globalVars = new tools_ArrayMap();
	this.enums = new tools_ArrayMap();
	if(kind == null) {
		kind = file_kind_gml_KGmlScript.inst;
	}
	this.kind = kind;
};
$hxClasses["parsers.GmlSeekData"] = parsers_GmlSeekData;
parsers_GmlSeekData.__name__ = "parsers.GmlSeekData";
parsers_GmlSeekData.apply = function(path,prev,next) {
	if(prev == null) {
		prev = parsers_GmlSeekData.blank;
	}
	if(next == null) {
		next = parsers_GmlSeekData.blank;
	}
	if(next.imports == null) {
		next.imports = prev.imports;
	}
	if(gml_GmlAPI.version.config.indexingMode == "local") {
		return;
	}
	var _this = prev.docs.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var d = _this[_g_current++];
		if(!Object.prototype.hasOwnProperty.call(next.docs.map,d.name)) {
			delete gml_GmlAPI.gmlDoc[d.name];
		}
	}
	var _this = next.docs.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var d = _this[_g_current++];
		gml_GmlAPI.gmlDoc[d.name] = d;
	}
	var _g = 0;
	var _g1 = prev.kindList;
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(next.kindMap,k)) {
			delete gml_GmlAPI.gmlKind[k];
		}
	}
	var _g = 0;
	var _g1 = next.kindList;
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		gml_GmlAPI.gmlKind[k] = next.kindMap[k];
	}
	var _this = prev.comps.array;
	var _g_current = 0;
	while(_g_current < _this.length) HxOverrides.remove(gml_GmlAPI.gmlComp,_this[_g_current++]);
	var _this = next.comps.array;
	var _g_current = 0;
	while(_g_current < _this.length) gml_GmlAPI.gmlComp.push(_this[_g_current++]);
	var _this = prev.enums.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var e = _this[_g_current++];
		var _g = 0;
		var _g1 = e.compList;
		while(_g < _g1.length) HxOverrides.remove(gml_GmlAPI.gmlComp,_g1[_g++]);
		delete gml_GmlAPI.gmlKind[e.name];
		delete gml_GmlAPI.gmlEnums[e.name];
		HxOverrides.remove(gml_GmlAPI.gmlEnumTypeComp,e.typeComp);
	}
	var _this = next.enums.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var e = _this[_g_current++];
		var _g = 0;
		var _g1 = e.compList;
		while(_g < _g1.length) gml_GmlAPI.gmlComp.push(_g1[_g++]);
		gml_GmlAPI.gmlEnums[e.name] = e;
		gml_GmlAPI.gmlKind[e.name] = "enum";
		gml_GmlAPI.gmlEnumTypeComp.push(e.typeComp);
	}
	var _this = prev.macros.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var m = _this[_g_current++];
		if(!Object.prototype.hasOwnProperty.call(next.macros.map,m.name)) {
			delete gml_GmlAPI.gmlMacros[m.name];
		}
	}
	var _this = next.macros.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var m = _this[_g_current++];
		gml_GmlAPI.gmlMacros[m.name] = m;
	}
	var _this = prev.mfuncs.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var m = _this[_g_current++];
		if(!Object.prototype.hasOwnProperty.call(next.mfuncs.map,m.name)) {
			delete gml_GmlAPI.gmlMFuncs[m.name];
		}
	}
	var _this = next.mfuncs.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var m = _this[_g_current++];
		gml_GmlAPI.gmlMFuncs[m.name] = m;
	}
	var this1 = prev.globalVarTypes.map;
	var fn = function(s,t) {
		if(!Object.prototype.hasOwnProperty.call(next.globalTypes.map,s)) {
			delete gml_GmlAPI.gmlTypes[s];
		}
	};
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in this1) {
	if(has.call(this1,fd)) {
		fn(fd,this1[fd]);
	}
	}
	var this1 = next.globalVarTypes.map;
	var fn = function(s,t) {
		gml_GmlAPI.gmlTypes[s] = t;
	};
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in this1) {
	if(has.call(this1,fd)) {
		fn(fd,this1[fd]);
	}
	}
	var _this = prev.globalFields.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var g = _this[_g_current++];
		if(next.globalFields.map[g.name] == g) {
			continue;
		}
		if(--g.refs <= 0) {
			delete gml_GmlAPI.gmlGlobalFieldMap[g.name];
			if(!g.hidden) {
				HxOverrides.remove(gml_GmlAPI.gmlGlobalFieldComp,g.comp);
			}
			delete gml_GmlAPI.gmlGlobalFullMap[g.name];
			if(!g.hidden) {
				HxOverrides.remove(gml_GmlAPI.gmlGlobalFullComp,g.fullComp);
			}
		}
	}
	var _this = next.globalFields.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var g = _this[_g_current++];
		if(prev.globalFields.map[g.name] == g) {
			continue;
		}
		if(++g.refs == 1) {
			gml_GmlAPI.gmlGlobalFieldMap[g.name] = g;
			if(!g.hidden) {
				gml_GmlAPI.gmlGlobalFieldComp.push(g.comp);
			}
			gml_GmlAPI.gmlGlobalFullMap[g.name] = g;
			if(!g.hidden) {
				gml_GmlAPI.gmlGlobalFullComp.push(g.fullComp);
			}
		}
	}
	var this1 = prev.globalTypes.map;
	var fn = function(s,t) {
		if(!Object.prototype.hasOwnProperty.call(next.globalTypes.map,s)) {
			delete gml_GmlAPI.gmlGlobalTypes[s];
		}
	};
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in this1) {
	if(has.call(this1,fd)) {
		fn(fd,this1[fd]);
	}
	}
	var this1 = next.globalTypes.map;
	var fn = function(s,t) {
		gml_GmlAPI.gmlGlobalTypes[s] = t;
	};
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in this1) {
	if(has.call(this1,fd)) {
		fn(fd,this1[fd]);
	}
	}
	var _g = 0;
	var _g1 = prev.instFieldList;
	while(_g < _g1.length) {
		var fd = _g1[_g];
		++_g;
		if(next.instFieldMap[fd.name] == fd) {
			continue;
		}
		if(--fd.refs <= 0) {
			delete gml_GmlAPI.gmlInstFieldMap[fd.name];
			HxOverrides.remove(gml_GmlAPI.gmlInstFieldComp,fd.comp);
		}
	}
	var _g = 0;
	var _g1 = next.instFieldList;
	while(_g < _g1.length) {
		var fd = _g1[_g];
		++_g;
		if(prev.instFieldMap[fd.name] == fd) {
			continue;
		}
		if(++fd.refs == 1) {
			gml_GmlAPI.gmlInstFieldMap[fd.name] = fd;
			gml_GmlAPI.gmlInstFieldComp.push(fd.comp);
		}
	}
	var _this = next.namespaceHints.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var nsh = _this[_g_current++];
		var ns = gml_GmlAPI.ensureNamespace(nsh.namespace);
		if(nsh.parentSpace != null && (ns.parent == null || ns.parent.name != nsh.parentSpace)) {
			ns.parent = gml_GmlAPI.ensureNamespace(nsh.parentSpace);
		}
		if(nsh.isObject != null) {
			ns.isObject = nsh.isObject;
			gml_GmlAPI.gmlNamespaceComp.map[nsh.namespace].meta = nsh.isObject ? "object" : "namespace";
		}
	}
	var access = prev.namespaceImplements;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g_value = access[key];
		var ns = gml_GmlAPI.gmlNamespaces[key];
		if(ns == null) {
			continue;
		}
		var arr1 = next.namespaceImplements[key];
		var _g = 0;
		while(_g < _g_value.length) {
			var impName = _g_value[_g];
			++_g;
			if(arr1 != null && arr1.indexOf(impName) != -1) {
				continue;
			}
			if(ns.procSpecialInterfaces(impName,false)) {
				continue;
			}
			ns.interfaces.remove(impName);
		}
	}
	var access = next.namespaceImplements;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g_value = access[key];
		var ns = gml_GmlAPI.ensureNamespace(key);
		var arr0 = prev.namespaceImplements[key];
		var _g = 0;
		while(_g < _g_value.length) {
			var impName = _g_value[_g];
			++_g;
			if(arr0 != null && arr0.indexOf(impName) != -1 && Object.prototype.hasOwnProperty.call(ns.interfaces.map,impName)) {
				continue;
			}
			if(ns.procSpecialInterfaces(impName,true)) {
				continue;
			}
			var impSpace = gml_GmlAPI.ensureNamespace(impName);
			ns.interfaces.addn(impSpace);
		}
	}
	var this1 = prev.typedefs.map;
	var fn = function(tn,_) {
		if(Object.prototype.hasOwnProperty.call(next.typedefs.map,tn)) {
			return;
		}
		delete gml_GmlAPI.gmlTypedefs[tn];
	};
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in this1) {
	if(has.call(this1,fd)) {
		fn(fd,this1[fd]);
	}
	}
	var this1 = next.typedefs.map;
	var fn = function(tn,td) {
		gml_GmlAPI.gmlTypedefs[tn] = td;
		gml_GmlAPI.ensureNamespace(tn);
	};
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in this1) {
	if(has.call(this1,fd)) {
		fn(fd,this1[fd]);
	}
	}
	var _this = prev.fieldHints.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var hint = _this[_g_current++];
		var ns = gml_GmlAPI.gmlNamespaces[hint.namespace];
		if(ns == null) {
			continue;
		}
		ns.removeFieldHint(hint.field,hint.isInst);
	}
	var _this = next.fieldHints.array;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var hint = _this[_g_current++];
		var ns = gml_GmlAPI.ensureNamespace(hint.namespace);
		if(hint.parentSpace != null && (ns.parent == null || ns.parent.name != hint.parentSpace)) {
			ns.parent = gml_GmlAPI.ensureNamespace(hint.parentSpace);
		}
		ns.addFieldHint(hint.field,hint.isInst,hint.comp,hint.doc,hint.type);
	}
	if(prev.hasGMLive || next.hasGMLive) {
		ui_ext_GMLive.update(path,next.hasGMLive);
	}
	var file = gml_file_GmlFile.current;
	if(file != null && file.path == path) {
		var update = false;
		if(prev.hasCoroutines != next.hasCoroutines) {
			var enable = next.hasCoroutines;
			synext_GmlExtCoroutines.enabled = enable;
			synext_GmlExtCoroutines.keywordMap = enable ? synext_GmlExtCoroutines.keywordMap1 : synext_GmlExtCoroutines.keywordMap0;
			update = true;
		}
		if(update) {
			Main.aceEditor.getSession().bgTokenizer.start(0);
		}
	}
};
parsers_GmlSeekData.prototype = {
	addObjectHint: function(name,parentName) {
		this.namespaceHints.set(name,new parsers_GmlSeekDataNamespaceHint(name,parentName,true));
	}
	,__class__: parsers_GmlSeekData
};
var parsers_GmlSeekDataNamespaceHint = function(namespace,parentSpace,isObject) {
	this.namespace = namespace;
	this.parentSpace = parentSpace;
	this.isObject = isObject;
};
$hxClasses["parsers.GmlSeekDataNamespaceHint"] = parsers_GmlSeekDataNamespaceHint;
parsers_GmlSeekDataNamespaceHint.__name__ = "parsers.GmlSeekDataNamespaceHint";
parsers_GmlSeekDataNamespaceHint.prototype = {
	__class__: parsers_GmlSeekDataNamespaceHint
};
var parsers_GmlSeekDataHint = function(namespace,isInst,field,comp,doc,parentSpace,type) {
	this.namespace = namespace;
	this.parentSpace = parentSpace;
	this.field = field;
	this.isInst = isInst;
	this.doc = doc;
	this.comp = comp;
	this.type = type;
	this.key = namespace + (isInst ? ":" : ".") + field;
};
$hxClasses["parsers.GmlSeekDataHint"] = parsers_GmlSeekDataHint;
parsers_GmlSeekDataHint.__name__ = "parsers.GmlSeekDataHint";
parsers_GmlSeekDataHint.prototype = {
	merge: function(hint,preferExisting) {
		var cd1 = ((hint.comp) && (hint.comp.doc));
		if(cd1 != null) {
			var cd0 = ((this.comp) && (this.comp.doc));
			var cdp = this.field + "(";
			if(cd0 == null) {
				this.comp.doc = cd1;
			} else if(cd0.startsWith(cdp)) {
				if(cd1.startsWith(cdp)) {
					if(!preferExisting) {
						this.comp.doc = cd1;
					}
				} else {
					this.comp.doc = cd0 + "\n" + cd1;
				}
			} else if(cd1.startsWith(cdp)) {
				this.comp.doc = cd1 + "\n" + cd0;
			} else if(!preferExisting) {
				this.comp.doc = cd1;
			}
		}
		if(hint.doc != null && (!preferExisting || this.doc == null)) {
			this.doc = hint.doc;
		}
		if(hint.type != null) {
			if(!preferExisting || this.type == null) {
				this.type = hint.type;
			} else {
				var t1 = this.type;
				var t2 = hint.type;
				var _g = 0;
				_hx_loop1: while(_g < 16) {
					++_g;
					if(t1 == null) {
						if(t2 == null) {
							break;
						}
						this.type = hint.type;
						ace_extern_AceAutoCompleteItem.setDocTag(this.comp,"type",gml_type_GmlTypeTools.toString(this.type));
						break;
					} else if(t1._hx_index == 0) {
						var _g1 = t1.params;
						switch(t1.kind) {
						case 32:
							t1 = _g1[0];
							if(t2 == null) {
								break _hx_loop1;
							} else if(t2._hx_index == 0) {
								if(t2.kind == 32) {
									t2 = t2.params[0];
								} else {
									break _hx_loop1;
								}
							} else {
								break _hx_loop1;
							}
							break;
						case 33:
							t1 = _g1[0];
							if(t2 == null) {
								break _hx_loop1;
							} else if(t2._hx_index == 0) {
								if(t2.kind == 33) {
									t2 = t2.params[0];
								} else {
									break _hx_loop1;
								}
							} else {
								break _hx_loop1;
							}
							break;
						case 34:
							t1 = _g1[1];
							if(t2 == null) {
								break _hx_loop1;
							} else if(t2._hx_index == 0) {
								if(t2.kind == 34) {
									t2 = t2.params[1];
								} else {
									break _hx_loop1;
								}
							} else {
								break _hx_loop1;
							}
							break;
						case 35:
							t1 = _g1[0];
							if(t2 == null) {
								break _hx_loop1;
							} else if(t2._hx_index == 0) {
								if(t2.kind == 35) {
									t2 = t2.params[0];
								} else {
									break _hx_loop1;
								}
							} else {
								break _hx_loop1;
							}
							break;
						default:
							break _hx_loop1;
						}
					} else {
						break;
					}
					if(t2 == null) {
						break;
					}
				}
			}
		}
	}
	,__class__: parsers_GmlSeekDataHint
};
var parsers_GmlSeeker = function() { };
$hxClasses["parsers.GmlSeeker"] = parsers_GmlSeeker;
parsers_GmlSeeker.__name__ = "parsers.GmlSeeker";
parsers_GmlSeeker.start = function() {
	parsers_GmlSeeker.itemsLeft = 0;
	parsers_GmlSeeker.itemQueue.length = 0;
};
parsers_GmlSeeker.runItem = function(item) {
	parsers_GmlSeeker.itemsLeft++;
	var ready = function(err,text) {
		if(err != null) {
			if(err.errno == -4058) {
				console.warn("Can't index `" + item.path + "` - file is missing.");
			} else {
				console.error("Can't index `" + item.path + "`:",err);
			}
			parsers_GmlSeeker.runNext();
		} else {
			try {
				if(parsers_GmlSeeker.runSync(item.path,text,item.main,item.kind)) {
					parsers_GmlSeeker.runNext();
				}
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				console.error("Can't index `" + item.path + "`:",_g1);
				parsers_GmlSeeker.runNext();
			}
		}
	};
	electron_FileWrap.readTextFile(item.path,ready);
};
parsers_GmlSeeker.run = function(path,main,kind) {
	var item = { path : StringTools.replace(path,"\\","/"), main : main, kind : kind};
	if(parsers_GmlSeeker.itemsLeft < 16) {
		parsers_GmlSeeker.runItem(item);
	} else {
		parsers_GmlSeeker.itemQueue.push(item);
	}
};
parsers_GmlSeeker.runFinish = function() {
	gml_GmlAPI.gmlComp.sort(function(a,b) {
		if(a.name < b.name) {
			return -1;
		} else {
			return 1;
		}
	});
	var pj = gml_Project.current;
	if(pj != null && pj.isIndexing) {
		pj.isIndexing = false;
		pj.finishedIndexing();
		Main.aceEditor.getSession().bgTokenizer.start(0);
	}
};
parsers_GmlSeeker.runNext = function() {
	var left = --parsers_GmlSeeker.itemsLeft;
	var item = parsers_GmlSeeker.itemQueue.shift();
	var now = new Date().getTime();
	if(parsers_GmlSeeker.lastLabelUpdateTime < now - 333) {
		parsers_GmlSeeker.lastLabelUpdateTime = now;
		gml_Project.nameNode.innerText = "Indexing (" + parsers_GmlSeeker.itemQueue.length + ")...";
	}
	if(item != null) {
		parsers_GmlSeeker.runItem(item);
	} else if(left <= 0) {
		parsers_GmlSeeker.runFinish();
	}
};
parsers_GmlSeeker.runSyncImpl = function(orig,src,main,out,locals,kind) {
	new parsers_seeker_GmlSeekerImpl(orig,src,main,out,locals,kind).run();
};
parsers_GmlSeeker.finish = function(orig,out) {
	parsers_GmlSeekData.apply(orig,parsers_GmlSeekData.map[orig],out);
	parsers_GmlSeekData.map[orig] = out;
	out.comps.nameSort();
};
parsers_GmlSeeker.addObjectChild = function(parentName,childName) {
	var pj = gml_Project.current;
	pj.objectParents[childName] = parentName;
	var parChildren = pj.objectChildren[parentName];
	if(parChildren == null) {
		parChildren = [];
		pj.objectChildren[parentName] = parChildren;
	}
	parChildren.push(childName);
};
parsers_GmlSeeker.runSync = function(path,content,main,kind) {
	return kind.index(path,content,main,false);
};
var parsers_GmlTimeline = function() { };
$hxClasses["parsers.GmlTimeline"] = parsers_GmlTimeline;
parsers_GmlTimeline.__name__ = "parsers.GmlTimeline";
parsers_GmlTimeline.parse = function(gmlCode,version) {
	var out = [];
	var errors = "";
	var q = new parsers_GmlReader(gmlCode);
	var mmStart = 0;
	var mmTime = null;
	var mmCode = [];
	var sctName = null;
	var flush = function(till,cont) {
		var mmNext = q.source.substring(mmStart,till).trimRight();
		if(mmTime == null) {
			if(mmNext != "") {
				errors += "There's code prior to first moment definition.\n";
			}
		} else {
			if(sctName != null && sctName != "") {
				var pfx = version.hasJSDoc() ? "/// @desc" : "///";
				pfx += sctName + "\r\n";
				mmNext = pfx + mmNext;
				sctName = null;
			}
			mmCode.push(mmNext);
			if(!cont) {
				out.push({ moment : mmTime, code : mmCode});
				mmCode = [];
			}
		}
	};
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.pos == 1 || q.source.charCodeAt(q.pos - 2) == 10) {
				if(q.source.substr(q.pos,6) == "moment") {
					flush(q.pos - 1);
					q.pos += 6;
					q.skipSpaces0();
					var timeStart = q.pos;
					while(q.get_loop()) {
						c = q.source.charCodeAt(q.pos);
						if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
							q.pos += 1;
						} else {
							break;
						}
					}
					var timeString = q.source.substring(timeStart,q.pos);
					mmTime = Std.parseInt(timeString);
					if(mmTime == null) {
						errors += timeString + " is not a valid moment number.";
					}
					timeStart = q.pos;
					q.skipLine();
					sctName = q.source.substring(timeStart,q.pos);
					q.skipLineEnd();
					mmStart = q.pos;
				} else if(q.source.substr(q.pos,7) == "section" && version.config.hasEventSections) {
					var nameStart = q.pos += 7;
					q.skipLine();
					var nameEnd = q.pos;
					q.skipLineEnd();
					flush(nameStart - 8,true);
					sctName = q.source.substring(nameStart,nameEnd);
					mmStart = q.pos;
				}
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	flush(q.pos);
	if(errors != "") {
		parsers_GmlTimeline.parseError = errors;
		return null;
	} else {
		return out;
	}
};
var parsers_linter_GmlLinter = function() {
	this.canContinue = false;
	this.canBreak = false;
	this.__skipAvail = false;
	this.__peekReader = new parsers_GmlReaderExt("",gml_GmlVersion.none);
	this.__next_isPeek = false;
	this.__nextVal_end = 0;
	this.__nextVal_start = 0;
	this.__nextVal_source = "";
	this.__nextVal_cache = null;
	this.nextKind = 0;
	this.seqStart = new parsers_GmlReaderExt("",gml_GmlVersion.none);
	this.setLocalTypes = true;
	this.setLocalVars = false;
	this.isProperties = false;
	this.localKinds = Object.create(null);
	this.localNamesPerDepth = [];
	this.__otherType_type = null;
	this.__otherType_set = false;
	this.__selfType_type = null;
	this.__selfType_set = false;
	this.currFuncRetStatus = 0;
	this.localVarTokenType = "local";
	this.context = "";
	this.macroCache = Object.create(null);
	this.errors = [];
	this.warnings = [];
	this.errorPos = null;
	this.errorText = null;
	this.prefs = { };
	var p1 = gml_Project.current.properties.linterPrefs;
	var p2 = ui_Preferences.current.linterPrefs;
	var p3 = parsers_linter_GmlLinterPrefs.defValue;
	var q = p1;
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in q) {
	if(has.call(q,fd)) {
		this.prefs[fd] = Reflect.field(p1,fd);
	}
	}
	var q = p2;
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in q) {
	if(has.call(q,fd)) {
		if(Reflect.field(this.prefs,fd) == null) {
			this.prefs[fd] = Reflect.field(p2,fd);
		}
	}
	}
	var q = p3;
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in q) {
	if(has.call(q,fd)) {
		if(Reflect.field(this.prefs,fd) == null) {
			this.prefs[fd] = Reflect.field(p3,fd);
		}
	}
	}
	var tmp = Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdKind,"method");
	this.prefs.forbidNonIdentCalls = !tmp;
	gml_type_GmlTypeCanCastTo.allowImplicitNullCast = this.prefs.implicitNullableCasts;
	gml_type_GmlTypeCanCastTo.allowImplicitBoolIntCasts = this.prefs.implicitBoolIntCasts;
	gml_type_GmlTypeCanCastTo.allowNullToAny = false;
	this.initModules();
};
$hxClasses["parsers.linter.GmlLinter"] = parsers_linter_GmlLinter;
parsers_linter_GmlLinter.__name__ = "parsers.linter.GmlLinter";
parsers_linter_GmlLinter.getOption = function(fn) {
	var lp = gml_Project.current.properties.linterPrefs;
	var r = null;
	var _g = 0;
	while(_g < 1) {
		++_g;
		if(lp != null) {
			r = fn(lp);
			if(r != null) {
				break;
			}
		}
		r = fn(ui_Preferences.current.linterPrefs);
		if(r != null) {
			break;
		}
		r = fn(parsers_linter_GmlLinterPrefs.defValue);
	}
	return r;
};
parsers_linter_GmlLinter.runFor = function(editor,opt) {
	var q = new parsers_linter_GmlLinter();
	q.setLocalVars = opt && opt.setLocals;
	var session = opt ? opt.session : editor.session;
	if(session.gmlErrorMarkers != null) {
		var _g = 0;
		var _g1 = session.gmlErrorMarkers;
		while(_g < _g1.length) {
			var mk = _g1[_g];
			++_g;
			session.removeMarker(mk);
		}
		session.gmlErrorMarkers.length = 0;
		session.clearAnnotations();
	}
	var t = window.performance.now();
	var code = ((opt) && (opt.code));
	if(code == null) {
		code = synext_SyntaxExtension.postprocForLinterArray(editor,session.getValue(),file_kind_KGml.syntaxExtensions);
	}
	var ohno = q.run(code,editor,gml_Project.current.version);
	t = window.performance.now() - t;
	if(session.gmlErrorMarkers == null) {
		session.gmlErrorMarkers = [];
	}
	var annotations = [];
	var markerMap = Object.create(null);
	var addMarker = function(text,pos,isError) {
		do {
			var newLevel = isError ? 2 : 1;
			var old = markerMap[pos.row];
			if(old != null) {
				if(old.level >= newLevel) {
					break;
				}
				HxOverrides.remove(session.gmlErrorMarkers,old.id);
				session.removeMarker(old.id);
			}
			var clazz = isError ? "ace_error-line" : "ace_warning-line";
			var marker = new ace_gml_AceGmlWarningMarker(session,pos.row,clazz);
			var markerID = marker.addTo(session);
			session.gmlErrorMarkers.push(markerID);
			markerMap[pos.row] = { level : newLevel, id : markerID};
		} while(false);
		annotations.push({ row : pos.row, column : pos.column, type : isError ? "error" : "warning", text : text});
	};
	var _g = 0;
	var _g1 = q.warnings;
	while(_g < _g1.length) {
		var warn = _g1[_g];
		++_g;
		addMarker(warn.text,warn.pos,false);
	}
	var _g = 0;
	var _g1 = q.errors;
	while(_g < _g1.length) {
		var error = _g1[_g];
		++_g;
		addMarker(error.text,error.pos,true);
	}
	if(opt ? opt.updateStatusBar : true) {
		var msg;
		if(q.warnings.length == 0 && q.errors.length == 0) {
			msg = "OK!";
		} else {
			if(ohno) {
				msg = "⛔";
			} else if(q.errors.length > 0) {
				msg = "🛑";
			} else {
				msg = "⚠";
			}
			if(q.errors.length > 0) {
				msg += q.errors.length + " error";
				if(q.errors.length != 1) {
					msg += "s";
				}
			}
			if(q.warnings.length > 0) {
				if(q.errors.length > 0) {
					msg += ", ";
				}
				msg += q.warnings.length + " warning";
				if(q.warnings.length != 1) {
					msg += "s";
				}
			}
			msg += "!";
		}
		msg += " (lint time: " + (t.toFixed(2) + "ms)");
		var aceEditor = opt ? opt.editor : Main.aceEditor;
		window.setTimeout(function() {
			var statusBar = aceEditor.statusBar;
			statusBar.ignoreUntil = window.performance.now() + statusBar.delayTime + 50;
			statusBar.setText(msg);
		},50);
	}
	session.setAnnotations(annotations);
	return ohno;
};
parsers_linter_GmlLinter.getType = function(expr,editor,context,pos) {
	var q = new parsers_linter_GmlLinter();
	q.setLocalTypes = false;
	q.runPre(expr,editor,gml_Project.current.version,context);
	if(pos != null) {
		var types = ace_AceGmlContextResolver.run(editor.session,pos);
		q.__selfType_set = true;
		q.__selfType_type = types.self;
		q.__otherType_set = true;
		q.__otherType_type = types.other;
	}
	var ok = !q.expr.read(0,0,null,null);
	q.runPost();
	return { type : ok ? q.expr.currType : null, doc : ok ? q.expr.currFunc : null};
};
parsers_linter_GmlLinter.prototype = {
	setError: function(text) {
		if(this.errorPos != null) {
			return;
		}
		this.errorText = text + this.reader.getStack();
		this.errorPos = this.reader.getTopPos();
	}
	,addWarning: function(text) {
		if(this.prefs.suppressAll || this.isProperties) {
			return;
		}
		this.warnings.push(new parsers_linter_GmlLinterProblem(text + this.reader.getStack(),this.reader.getTopPos()));
	}
	,addError: function(text) {
		if(this.prefs.suppressAll || this.isProperties) {
			return;
		}
		this.errors.push(new parsers_linter_GmlLinterProblem(text + this.reader.getStack(),this.reader.getTopPos()));
	}
	,set_context: function(ctx) {
		this.context = ctx;
		if(this.setLocalVars || this.setLocalTypes) {
			if(!(((this.editor.kind) instanceof file_kind_gml_KGmlEvents) && ctx == "properties")) {
				if(this.setLocalVars) {
					this.editor.locals[ctx] = new gml_GmlLocals(ctx);
				}
				if(this.setLocalTypes) {
					var this1 = Object.create(null);
					this.getImports(true).localTypes = this1;
				}
			}
		}
		return ctx;
	}
	,getImports: function(force) {
		var imp = this.editor.imports[this.context];
		if(imp == null && force) {
			imp = new gml_GmlImports();
			this.editor.imports[this.context] = imp;
		}
		return imp;
	}
	,getSelfType: function() {
		if(this.__selfType_set) {
			return this.__selfType_type;
		}
		var gmlFile = this.editor.file;
		var scope = this.context;
		var t;
		if(gmlFile != null && ((gmlFile.kind) instanceof file_kind_gml_KGmlEvents)) {
			t = gml_type_GmlTypeDef.simple(gmlFile.name);
		} else {
			var scopeDoc = gml_GmlAPI.gmlDoc[((scope) || (gmlFile.name))];
			t = scopeDoc != null ? scopeDoc.isConstructor ? gml_type_GmlTypeDef.simple(scope) : scopeDoc.selfType : null;
		}
		if(t == null && this.prefs.strictScriptSelf) {
			t = gml_type_GmlTypeDef.void;
		}
		return t;
	}
	,getOtherType: function() {
		if(this.__otherType_set) {
			return this.__otherType_type;
		}
		var ctx_scope = this.context;
		if(StringTools.startsWith(ctx_scope,"collision:")) {
			return gml_type_GmlTypeDef.object(ctx_scope.substring("collision:".length));
		} else {
			return null;
		}
	}
	,initSkipper: function() {
		this.setLocalTypes = false;
		this.setLocalVars = false;
		this.currFuncDoc = null;
	}
	,readSeqStartError: function(text) {
		if(this.errorPos != null) {
			return true;
		}
		this.errorText = text + this.seqStart.getStack();
		this.errorPos = this.seqStart.getTopPos();
		return true;
	}
	,readSeqStartWarn: function(text) {
		if(this.errorPos != null) {
			return true;
		}
		this.warnings.push(new parsers_linter_GmlLinterProblem(text + this.seqStart.getStack(),this.seqStart.getTopPos()));
		return true;
	}
	,initModules: function() {
		this.funcLiteral = new parsers_linter_GmlLinterFuncLiteral(this);
		this.expr = new parsers_linter_GmlLinterExpr(this);
		this.binOps = new parsers_linter_GmlLinterBinOps(this);
		this.funcArgs = new parsers_linter_GmlLinterFuncArgs(this);
	}
	,get_nextVal: function() {
		if(this.__nextVal_cache == null) {
			this.__nextVal_cache = this.__nextVal_source.substring(this.__nextVal_start,this.__nextVal_end);
		}
		return this.__nextVal_cache;
	}
	,nextDump: function() {
		var v = this.get_nextVal();
		if(v != "") {
			return "`" + v + "` (" + parsers_linter_GmlLinterKind.getName(this.nextKind) + ")";
		} else {
			return parsers_linter_GmlLinterKind.getName(this.nextKind);
		}
	}
	,__next_ret: function(nvk,src,nv0,nv1) {
		this.__nextVal_cache = null;
		this.__nextVal_source = src;
		this.__nextVal_start = nv0;
		this.__nextVal_end = nv1;
		this.nextKind = nvk;
		return nvk;
	}
	,__next_retv: function(nvk,nv) {
		this.__nextVal_cache = nv;
		this.nextKind = nvk;
		return nvk;
	}
	,initKeywords: function() {
		this.keywords = parsers_linter_GmlLinterInit.keywords(this.version.config);
	}
	,peek: function() {
		var q = this.__peekReader;
		q.setTo(this.reader);
		var wasPeek = this.__next_isPeek;
		this.__next_isPeek = true;
		var r = parsers_linter_GmlLinterParser.next(this,q);
		this.__next_isPeek = wasPeek;
		this.__skipAvail = true;
		return r;
	}
	,skip: function() {
		if(this.__skipAvail) {
			this.__skipAvail = false;
			this.reader.setTo(this.__peekReader);
			return this.nextKind;
		} else {
			throw haxe_Exception.thrown("Can't skip - didn't peek");
		}
	}
	,skipIf: function(cond) {
		if(cond) {
			this.reader.setTo(this.__peekReader);
		}
		this.__skipAvail = false;
		return cond;
	}
	,skipIfPeek: function(kind) {
		var cond = this.peek() == kind;
		if(cond) {
			this.reader.setTo(this.__peekReader);
		}
		this.__skipAvail = false;
		return cond;
	}
	,readError: function(s) {
		this.setError(s);
		return true;
	}
	,readExpect: function(s) {
		this.setError("Expected " + s + ", got " + this.nextDump());
		return true;
	}
	,readCheckSkip: function(kind,expect) {
		if(parsers_linter_GmlLinterParser.next(this,this.reader) == kind) {
			return false;
		}
		return this.readExpect(expect);
	}
	,readOps: function(oldDepth,firstType,firstLVal,firstOp,firstVal,firstLocalName) {
		return this.binOps.read(oldDepth,firstType,firstLVal,firstOp,firstVal,firstLocalName);
	}
	,checkCallArgs: function(doc,currName,argc,isExpr,isNew) {
		var isUserFunc;
		if(currName == null) {
			isUserFunc = true;
			currName = "an anonymous function";
		} else {
			isUserFunc = !Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdDoc,currName);
		}
		var minArgs;
		var maxArgs;
		if(doc != null) {
			currName = doc.name;
			minArgs = doc.get_minArgs();
			maxArgs = doc.get_maxArgs();
			if(doc.isConstructor) {
				if(!isNew) {
					this.addWarning("`" + currName + "` is a constructor, but is not used via `new`");
				}
			} else {
				if(isNew) {
					this.addWarning("`" + currName + "` is not a constructor, but is being used via `new`");
				}
				if(isExpr && this.prefs.checkHasReturn && doc.hasReturn == false) {
					this.addWarning("`" + currName + "` does not return anything, the result is unspecified");
				}
			}
		} else {
			minArgs = gml_GmlAPI.extArgc[currName];
			if(minArgs == null) {
				if(this.prefs.requireFunctions && this.prefs.forbidNonIdentCalls) {
					this.addWarning("`" + currName + "` doesn't seem to be a valid function");
				}
				return;
			}
			if(minArgs < 0) {
				minArgs = 0;
				maxArgs = 2147483647;
			} else {
				maxArgs = minArgs;
			}
		}
		if(!(isUserFunc && !this.prefs.checkScriptArgumentCounts)) {
			if(argc < minArgs) {
				if(maxArgs == minArgs) {
					this.addError("Not enough arguments for " + currName + " (expected " + minArgs + ", got " + argc + ")");
				} else if(maxArgs >= 2147483647) {
					this.addError("Not enough arguments for " + currName + " (expected " + minArgs + "+, got " + argc + ")");
				} else {
					this.addError("Not enough arguments for " + currName + " (expected " + minArgs + ".." + maxArgs + ", got " + argc + ")");
				}
			} else if(argc > maxArgs) {
				if(minArgs == maxArgs) {
					this.addError("Too many arguments for " + currName + " (expected " + maxArgs + ", got " + argc + ")");
				} else {
					this.addError("Too many arguments for " + currName + " (expected " + minArgs + ".." + maxArgs + ", got " + argc + ")");
				}
			}
		}
	}
	,readExpr: function(oldDepth,flags,_nk,targetType) {
		if(flags == null) {
			flags = 0;
		}
		return this.expr.read(oldDepth,flags,_nk,targetType);
	}
	,discardBlockScopes: function(newDepth) {
		while(this.localNamesPerDepth.length > newDepth) {
			var arr = this.localNamesPerDepth.pop();
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) this.localKinds[arr[_g++]] = 9;
			}
		}
	}
	,readLoopStat: function(oldDepth,flags) {
		if(flags == null) {
			flags = 0;
		}
		var _canBreak = this.canBreak;
		var _canContinue = this.canContinue;
		this.canBreak = true;
		this.canContinue = true;
		var result = this.readStat(oldDepth + 1,flags);
		this.canBreak = _canBreak;
		this.canContinue = _canContinue;
		return result;
	}
	,readTypeName: function() {
		var typeStr = gml_type_GmlTypeParser.readNameForLinter(this);
		if(typeStr == null) {
			return true;
		}
		parsers_linter_GmlLinter.readTypeName_typeStr = typeStr;
		return false;
	}
	,valueCanCastTo: function(val,valType,target,tpl) {
		if(val != null) {
			if(val._hx_index == 1) {
				if(val.n == -1) {
					var nsName = gml_type_GmlTypeTools.getNamespace(target);
					if(nsName != null) {
						var ns = gml_GmlAPI.gmlNamespaces[nsName];
						var depth = 0;
						while(ns != null && ++depth < 128) {
							if(ns.minus1able) {
								return true;
							}
							ns = ns.parent;
						}
					}
				}
			}
		}
		return gml_type_GmlTypeCanCastTo.canCastTo(valType,target,tpl,this.getImports());
	}
	,checkTypeCast: function(source,target,ctx,val) {
		if(this.valueCanCastTo(val,source,target,null)) {
			return true;
		}
		var m = "Can't cast " + gml_type_GmlTypeTools.toString(source) + " to " + gml_type_GmlTypeTools.toString(target);
		if(ctx != null) {
			m += " for " + ctx;
		}
		this.addWarning(m);
		return false;
	}
	,checkTypeCastEq: function(source,target,ctx) {
		var unassignable = gml_type_GmlTypeParser.parse("uncompareable",null);
		if(gml_type_GmlTypeCanCastTo.canCastTo(source,unassignable,null,null) && gml_type_GmlTypeCanCastTo.canCastTo(target,unassignable,null,null)) {
			if(gml_type_GmlTypeCanCastTo.canCastTo(source,target,null,this.getImports())) {
				return true;
			}
			this.addWarning("Can't compare a " + gml_type_GmlTypeTools.toString(source) + " to a " + gml_type_GmlTypeTools.toString(target));
		}
		return true;
	}
	,checkTypeCastBoolOp: function(source,val,ctx) {
		var wasBoolOp = gml_type_GmlTypeCanCastTo.isBoolOp;
		gml_type_GmlTypeCanCastTo.isBoolOp = true;
		var result = this.checkTypeCast(source,gml_type_GmlTypeDef.bool,ctx,val);
		gml_type_GmlTypeCanCastTo.isBoolOp = wasBoolOp;
		return result;
	}
	,checkTypeCastOp: function(left,leftVal,right,rightVal,op,opv) {
		switch(op) {
		case 12:case 14:case 15:
			this.checkTypeCastEq(left,right,opv);
			return gml_type_GmlTypeDef.bool;
		case 16:case 17:case 18:case 19:
			this.checkTypeCast(left,gml_type_GmlTypeDef.number,opv,leftVal);
			this.checkTypeCast(right,gml_type_GmlTypeDef.number,opv,rightVal);
			return gml_type_GmlTypeDef.bool;
		case 20:case 21:case 22:
			this.checkTypeCastBoolOp(left,leftVal,opv);
			this.checkTypeCastBoolOp(right,rightVal,opv);
			return gml_type_GmlTypeDef.bool;
		case 24:
			if(gml_type_GmlTypeTools.equals(left,gml_type_GmlTypeDef.string) || gml_type_GmlTypeTools.equals(left,gml_type_GmlTypeDef.number)) {
				if(this.checkTypeCast(right,left,opv,rightVal)) {
					return left;
				} else {
					return null;
				}
			} else if(gml_type_GmlTypeTools.equals(right,gml_type_GmlTypeDef.string) || gml_type_GmlTypeTools.equals(right,gml_type_GmlTypeDef.number)) {
				if(this.checkTypeCast(left,right,opv,leftVal)) {
					return right;
				} else {
					return null;
				}
			}
			break;
		case 28:
			this.checkTypeCast(left,gml_type_GmlTypeDef.number,opv,leftVal);
			this.checkTypeCast(right,gml_type_GmlTypeDef.number,opv,rightVal);
			return gml_type_GmlTypeDef.int;
		case 30:case 31:case 32:case 33:case 34:
			this.checkTypeCast(left,gml_type_GmlTypeDef.int,opv,leftVal);
			this.checkTypeCast(right,gml_type_GmlTypeDef.int,opv,rightVal);
			return gml_type_GmlTypeDef.int;
		default:
			this.checkTypeCast(left,gml_type_GmlTypeDef.number,opv,leftVal);
			this.checkTypeCast(right,gml_type_GmlTypeDef.number,opv,rightVal);
			return gml_type_GmlTypeDef.number;
		}
		return null;
	}
	,readSwitch: function(oldDepth) {
		var newDepth = oldDepth + 1;
		if(this.readCheckSkip(40,"an opening `{` for switch-block")) {
			return true;
		}
		var isInCase = false;
		this.seqStart.setTo(this.reader);
		var hasDefault = false;
		var caseCount = 0;
		var q = this.reader;
		while(q.get_loop()) switch(this.peek()) {
		case 41:
			this.skip();
			if(caseCount == 0 && !hasDefault) {
				return this.readSeqStartError("Empty switch-blocks are forbidden in GML");
			}
			return false;
		case 70:
			this.skip();
			if(hasDefault) {
				return this.readError("That's default-case redefinition");
			}
			hasDefault = true;
			if(this.readCheckSkip(54,"a colon after default-case")) {
				return true;
			}
			if(isInCase) {
				if(this.prefs.blockScopedCase) {
					this.discardBlockScopes(newDepth);
				}
				isInCase = false;
			}
			break;
		case 71:
			++caseCount;
			this.skip();
			if(this.expr.read(newDepth,0,null,null)) {
				return true;
			}
			if(this.readCheckSkip(54,"a colon after a case")) {
				return true;
			}
			if(isInCase) {
				if(this.prefs.blockScopedCase) {
					this.discardBlockScopes(newDepth);
				}
				isInCase = false;
			}
			break;
		default:
			isInCase = true;
			if(this.readStat(newDepth)) {
				return true;
			}
			if(caseCount == 0 && !hasDefault) {
				return this.readError("Statements inside a switch-block must appear inside case/default");
			}
		}
		return this.readSeqStartError("Unclosed switch-block");
	}
	,readEnum: function(oldDepth) {
		var newDepth = oldDepth + 1;
		if(this.readCheckSkip(4,"an enum name")) {
			return true;
		}
		if(this.readCheckSkip(40,"an opening `{` for enum")) {
			return true;
		}
		var seenComma = true;
		while(this.reader.get_loop()) switch(parsers_linter_GmlLinterParser.next(this,this.reader)) {
		case 4:
			if(!seenComma) {
				return this.readExpect("a `,` or `}` in enum");
			}
			var nk = this.peek();
			if(this.skipIf(nk == 12)) {
				if(this.expr.read(newDepth,0,null,null)) {
					return true;
				}
				nk = this.peek();
			}
			seenComma = this.skipIf(nk == 51);
			break;
		case 41:
			return false;
		default:
			return this.readExpect("an enum field or `}`");
		}
		return this.readSeqStartError("Unclosed {}");
	}
	,readStat: function(oldDepth,flags,_nk) {
		if(flags == null) {
			flags = 0;
		}
		var newDepth = oldDepth + 1;
		var q = this.reader;
		var nk = _nk != null ? _nk : parsers_linter_GmlLinterParser.next(this,this.reader);
		var mainKind = nk;
		var z;
		switch(nk) {
		case 10:case 88:
			break;
		case 11:
			if(this.readEnum(newDepth)) {
				return true;
			}
			break;
		case 40:
			z = false;
			this.seqStart.setTo(this.reader);
			while(q.get_loop()) {
				if(this.skipIf(this.peek() == 41)) {
					z = true;
					break;
				}
				if(this.readStat(newDepth)) {
					return true;
				}
			}
			if(!z) {
				return this.readSeqStartError("Unclosed {}");
			}
			break;
		case 49:
			if(this.prefs.requireSemicolons) {
				this.addWarning("Stray semicolon");
			}
			break;
		case 64:
			if(this.expr.read(newDepth)) {
				return true;
			}
			var nullSafety = this.expr.nullSafety;
			if(this.prefs.requireParentheses && !this.expr.hasParens) {
				this.addWarning("Expression is missing parentheses");
			}
			this.checkTypeCastBoolOp(this.expr.currType,this.expr.currValue,"an if condition");
			this.skipIf(this.peek() == 65);
			if(this.skipIf(this.peek() == 49)) {
				return this.readError("You have a semicolon before your then-expression.");
			}
			parsers_linter_GmlLinterLocalNullSafetyItems.prepatch(nullSafety,this);
			if(this.readStat(newDepth)) {
				return true;
			}
			if(this.skipIf(this.peek() == 66)) {
				parsers_linter_GmlLinterLocalNullSafetyItems.elsepatch(nullSafety,this);
				if(this.readStat(newDepth)) {
					return true;
				}
			}
			parsers_linter_GmlLinterLocalNullSafetyItems.postpatch(nullSafety,this);
			break;
		case 67:
			switch(this.peek()) {
			case 41:
				flags = flags | 8;
				break;
			case 49:
				this.skip();
				flags = flags | 8;
				break;
			default:
				var retType = this.currFuncDoc != null ? this.currFuncDoc.get_returnType() : null;
				if(this.expr.read(newDepth,0,null,retType)) {
					return true;
				}
				switch(this.currFuncRetStatus) {
				case 0:case 2:
					this.currFuncRetStatus = 1;
					break;
				case 3:
					this.addWarning("The function is marked as returning nothing but has a return statement.");
					break;
				default:
				}
				if(retType != null && this.expr.currType != null) {
					this.checkTypeCast(this.expr.currType,retType,"return",this.expr.currValue);
				}
			}
			break;
		case 68:
			break;
		case 69:
			z = this.canBreak;
			this.canBreak = true;
			if(this.expr.read(newDepth,0,null,null)) {
				return true;
			}
			if(this.prefs.requireParentheses && !this.expr.hasParens) {
				this.addWarning("Expression is missing parentheses");
			}
			if(this.readSwitch(newDepth)) {
				this.canBreak = z;
				return true;
			} else {
				this.canBreak = z;
			}
			break;
		case 72:
			if(this.readStat(newDepth)) {
				return true;
			}
			if(this.readCheckSkip(73,"a `catch` after a `try` block")) {
				return true;
			}
			var hasPar = this.skipIf(this.peek() == 38);
			if(this.readCheckSkip(4,"an exception name")) {
				return true;
			}
			var varName = this.get_nextVal();
			this.localKinds[varName] = mainKind;
			if(this.setLocalVars && mainKind != 6) {
				var locals = this.editor.locals[this.context];
				if(!Object.prototype.hasOwnProperty.call(locals.kind,varName)) {
					locals.add(varName,this.localVarTokenType,"try-catch");
				}
			}
			if(hasPar) {
				if(this.readCheckSkip(39,"a closing `)`")) {
					return true;
				}
			}
			if(this.readStat(newDepth)) {
				return true;
			}
			if(this.skipIf(this.peek() == 74)) {
				if(this.readStat(newDepth)) {
					return true;
				}
			}
			break;
		case 5:case 6:case 7:case 8:case 77:case 89:
			var varKeyword = this.get_nextVal();
			var isArgs = nk == 89;
			var keywordStr = this.get_nextVal();
			this.seqStart.setTo(this.reader);
			var found = 0;
			var startRow = this.reader.row;
			while(q.get_loop()) {
				nk = this.peek();
				if(isArgs && this.__peekReader.row > startRow) {
					break;
				}
				if(isArgs && nk == 53) {
					this.skip();
					nk = this.peek();
				}
				if(!this.skipIf(nk == 4)) {
					break;
				}
				var varName = [this.get_nextVal()];
				var allowTypeRedefinition = false;
				if(mainKind != 6 && mainKind != 77) {
					var lk = this.localKinds[varName[0]];
					if(mainKind != 5 || this.prefs.blockScopedVar) {
						if(lk != null && lk != 9) {
							this.addWarning("Redefinition of a variable `" + varName[0] + "`");
						} else {
							allowTypeRedefinition = true;
							var arr = this.localNamesPerDepth[oldDepth];
							if(arr == null) {
								arr = [];
								this.localNamesPerDepth[oldDepth] = arr;
							}
							arr.push(varName[0]);
						}
					} else if(lk == null || lk == 9) {
						allowTypeRedefinition = true;
					}
					this.localKinds[varName[0]] = mainKind;
				}
				var argIndex = found++;
				nk = this.peek();
				var varType;
				var varTypeStr;
				if(nk == 54) {
					this.skip();
					if(this.readTypeName()) {
						return true;
					}
					varTypeStr = parsers_linter_GmlLinter.readTypeName_typeStr;
					varType = gml_type_GmlTypeParser.parse(varTypeStr,null);
					if(this.setLocalTypes) {
						this.getImports(true).localTypes[varName[0]] = varType;
					}
					nk = this.peek();
				} else {
					varType = null;
					varTypeStr = null;
					if(isArgs && this.currFuncDoc != null && this.currFuncDoc.argTypes != null) {
						varType = this.currFuncDoc.argTypes[argIndex];
						varTypeStr = varType != null ? gml_type_GmlTypeTools.toString(varType) : null;
						if(varType != null && this.setLocalTypes) {
							this.getImports(true).localTypes[varName[0]] = varType;
						}
					}
				}
				var typeInfo = null;
				if(nk == 12) {
					this.skip();
					var setToken = this.get_nextVal();
					if(this.expr.read(newDepth,0,null,varType)) {
						return true;
					}
					var varExprType = this.expr.currType;
					if(mainKind != 6) {
						if(varType != null) {
							this.checkTypeCast(varExprType,varType,"variable declaration",this.expr.currValue);
						} else if(varExprType != null) {
							var apply;
							if(this.setLocalTypes) {
								if(!(this.prefs.specTypeColon && setToken == ":=")) {
									switch(mainKind) {
									case 7:
										apply = this.prefs.specTypeConst;
										break;
									case 8:
										apply = this.prefs.specTypeLet;
										break;
									case 77:
										apply = this.prefs.specTypeStatic;
										break;
									default:
										apply = keywordStr == "var" || keywordStr == "static" ? this.prefs.specTypeVar : this.prefs.specTypeMisc;
									}
								} else {
									apply = true;
								}
							} else {
								apply = false;
							}
							if(apply) {
								var imp = this.getImports(true);
								var lastVarType = imp.localTypes[varName[0]];
								if(lastVarType == null) {
									if(this.setLocalVars) {
										typeInfo = "type " + gml_type_GmlTypeTools.toString(varExprType) + " (auto)";
									}
									imp.localTypes[varName[0]] = varExprType;
								} else if(allowTypeRedefinition) {
									imp.localTypes[varName[0]] = varExprType;
								} else if(!gml_type_GmlTypeTools.equals(varExprType,lastVarType)) {
									this.addWarning("Implicit redefinition of type for local variable " + varName[0] + " from " + gml_type_GmlTypeTools.toString(lastVarType) + " to " + gml_type_GmlTypeTools.toString(varExprType));
								}
							}
						}
					}
				}
				if(this.setLocalVars && mainKind != 6) {
					if(typeInfo == null && varTypeStr != null) {
						typeInfo = "type " + varTypeStr;
					}
					var locals = this.editor.locals[this.context];
					if(Object.prototype.hasOwnProperty.call(locals.kind,varName[0])) {
						if(typeInfo != null) {
							var comp = tools_NativeArray.findFirst(locals.comp,(function(varName) {
								return function(cc) {
									return cc.name == varName[0];
								};
							})(varName));
							if(comp != null) {
								comp.doc = typeInfo;
							}
						}
					} else {
						locals.add(varName[0],this.localVarTokenType,typeInfo);
					}
				}
				if(!this.skipIf(this.peek() == 51)) {
					break;
				}
			}
			if(found == 0) {
				this.readSeqStartWarn("This `" + varKeyword + "` has no declarations.");
			}
			break;
		case 75:case 79:case 93:case 95:case 97:
			if(this.expr.read(newDepth,0,null,null)) {
				return true;
			}
			break;
		case 80:
			if(parsers_linter_GmlLinterParser.next(this,this.reader) != 38) {
				return this.readExpect("a `(` to open a for-loop");
			}
			if(!this.skipIf(this.peek() == 49)) {
				if(this.readStat(newDepth)) {
					return true;
				}
			}
			if(!this.skipIf(this.peek() == 49)) {
				if(this.expr.read(newDepth,0,null,null)) {
					return true;
				}
				this.checkTypeCastBoolOp(this.expr.currType,this.expr.currValue,"an if condition");
				this.skipIf(this.peek() == 49);
			}
			if(!this.skipIf(this.peek() == 39)) {
				if(this.readLoopStat(newDepth,8)) {
					return true;
				}
				if(parsers_linter_GmlLinterParser.next(this,this.reader) != 39) {
					return this.readExpect("a `)` to close a for-loop");
				}
			}
			if(this.readLoopStat(newDepth)) {
				return true;
			}
			break;
		case 81:
			if(this.readLoopStat(newDepth)) {
				return true;
			}
			switch(parsers_linter_GmlLinterParser.next(this,this.reader)) {
			case 82:case 83:
				if(this.expr.read(newDepth,0,null,null)) {
					return true;
				}
				if(this.prefs.requireParentheses && !this.expr.hasParens) {
					this.addWarning("Expression is missing parentheses");
				}
				this.checkTypeCastBoolOp(this.expr.currType,this.expr.currValue,"an do-loop condition");
				break;
			default:
				return this.readExpect("an `until` or `while` for a do-loop");
			}
			break;
		case 82:case 84:
			if(this.expr.read(newDepth,0,null,null)) {
				return true;
			}
			if(this.prefs.requireParentheses && !this.expr.hasParens) {
				this.addWarning("Expression is missing parentheses");
			}
			switch(nk) {
			case 82:
				this.checkTypeCastBoolOp(this.expr.currType,this.expr.currValue,"a while-loop condition");
				break;
			case 84:
				this.checkTypeCast(this.expr.currType,gml_type_GmlTypeDef.number,"a repeat-loop count",this.expr.currValue);
				break;
			default:
			}
			if(this.readLoopStat(newDepth)) {
				return true;
			}
			break;
		case 85:
			if(!this.canBreak) {
				this.addError("Can't use `break` here");
			}
			break;
		case 86:
			if(!this.canContinue) {
				this.addError("Can't use `continue` here");
			}
			break;
		case 87:
			var locals = this.editor.locals[this.context];
			if(locals != null) {
				locals.hasWith = true;
			}
			if(this.expr.read(newDepth,0,null,null)) {
				return true;
			}
			var ctxType = this.expr.currType;
			if(this.prefs.requireParentheses && !this.expr.hasParens) {
				this.addWarning("Expression is missing parentheses");
			}
			var self0z = this.__selfType_set;
			var self0t = this.__selfType_type;
			var other0z = this.__otherType_set;
			var other0t = this.__otherType_type;
			this.__otherType_set = true;
			this.__otherType_type = this.getSelfType();
			this.__selfType_set = true;
			this.__selfType_type = ctxType;
			if(this.readLoopStat(newDepth)) {
				return true;
			}
			this.__otherType_set = other0z;
			this.__otherType_type = other0t;
			this.__selfType_set = self0z;
			this.__selfType_type = self0t;
			break;
		case 91:
			if(this.funcLiteral.read(newDepth,false,true)) {
				return true;
			}
			break;
		case 94:
			switch(this.peek()) {
			case 1:case 4:
				this.skip();
				break;
			default:
				return this.readExpect("a label name");
			}
			this.skipIf(this.peek() == 54);
			break;
		default:
			var flags1 = flags | 2;
			if(flags1 == null) {
				flags1 = 0;
			}
			if(this.expr.read(newDepth,flags1,nk,null)) {
				return true;
			}
		}
		if(!this.skipIf(this.peek() == 49)) {
			if(this.prefs.requireSemicolons && !parsers_linter_GmlLinterKind.__noSemico[mainKind] && (flags & 8) == 0) {
				switch(q.source.charCodeAt(q.pos + (-1))) {
				case 59:case 125:
					break;
				default:
					this.addWarning("Expected a semicolon after a statement (" + parsers_linter_GmlLinterKind.getName(mainKind) + ")");
				}
			}
		}
		this.discardBlockScopes(newDepth);
		return false;
	}
	,runPre: function(source,editor,version,context) {
		if(context == null) {
			context = "";
		}
		this.version = version;
		this.editor = editor;
		var kind = editor.kind;
		this.functionsAreGlobal = ((kind) instanceof file_kind_gml_KGmlScript) && kind.isScript;
		this.set_context(context);
		if(context != "") {
			this.currFuncDoc = gml_GmlAPI.gmlDoc[context];
		} else if(((editor.kind) instanceof file_kind_gml_KGmlScript) && !gml_Project.current.isGMS23) {
			this.currFuncDoc = gml_GmlAPI.gmlDoc[editor.file.name];
		} else {
			this.currFuncDoc = null;
		}
		this.initKeywords();
		(this.reader = new parsers_GmlReaderExt(source.trimRight())).name = editor.file.name;
		this.errorText = null;
	}
	,runPost: function() {
		this.reader.clear();
		this.seqStart.clear();
		this.__peekReader.clear();
	}
	,run: function(source,editor,version) {
		this.runPre(source,editor,version);
		var q = this.reader;
		var ohno = false;
		while(q.get_loop()) {
			var nk = parsers_linter_GmlLinterParser.next(this,this.reader);
			if(nk == 0) {
				break;
			}
			if(this.readStat(0,0,nk)) {
				this.errors.push(new parsers_linter_GmlLinterProblem(this.errorText,this.errorPos));
				ohno = true;
				break;
			}
		}
		this.runPost();
		return ohno;
	}
	,__class__: parsers_linter_GmlLinter
};
var parsers_linter_GmlLinterProblem = function(text,pos) {
	this.text = text;
	this.pos = pos;
};
$hxClasses["parsers.linter.GmlLinterProblem"] = parsers_linter_GmlLinterProblem;
parsers_linter_GmlLinterProblem.__name__ = "parsers.linter.GmlLinterProblem";
parsers_linter_GmlLinterProblem.prototype = {
	__class__: parsers_linter_GmlLinterProblem
};
var parsers_linter_GmlLinterValue = $hxEnums["parsers.linter.GmlLinterValue"] = { __ename__:true,__constructs__:null
	,VUndefined: {_hx_name:"VUndefined",_hx_index:0,__enum__:"parsers.linter.GmlLinterValue",toString:$estr}
	,VNumber: ($_=function(n,gml) { return {_hx_index:1,n:n,gml:gml,__enum__:"parsers.linter.GmlLinterValue",toString:$estr}; },$_._hx_name="VNumber",$_.__params__ = ["n","gml"],$_)
	,VString: ($_=function(s,gml) { return {_hx_index:2,s:s,gml:gml,__enum__:"parsers.linter.GmlLinterValue",toString:$estr}; },$_._hx_name="VString",$_.__params__ = ["s","gml"],$_)
};
parsers_linter_GmlLinterValue.__constructs__ = [parsers_linter_GmlLinterValue.VUndefined,parsers_linter_GmlLinterValue.VNumber,parsers_linter_GmlLinterValue.VString];
var parsers_linter_GmlLinterArrayAccess = function() { };
$hxClasses["parsers.linter.GmlLinterArrayAccess"] = parsers_linter_GmlLinterArrayAccess;
parsers_linter_GmlLinterArrayAccess.__name__ = "parsers.linter.GmlLinterArrayAccess";
parsers_linter_GmlLinterArrayAccess.read = function(self,nk,newDepth,currType,currKind,currValue) {
	var isNull = nk == 59;
	if((isNull || self.prefs.implicitNullableCasts) && gml_type_GmlTypeTools.getKind(currType) == 3) {
		currType = gml_type_GmlTypeTools.unwrapParam(currType);
	}
	var isArray = false;
	var isArray2d = false;
	var isLiteral = false;
	var arrayType1 = null;
	var arrayValue1 = null;
	var arrayType2 = null;
	var arrayValue2 = null;
	var checkColon = true;
	switch(self.peek()) {
	case 31:
		self.skip();
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		self.checkTypeCast(self.expr.currType,gml_type_GmlTypeDef.number,"list index",self.expr.currValue);
		currType = gml_type_GmlTypeTools.resolve(currType);
		if(self.checkTypeCast(currType,gml_type_GmlTypeDef.ds_list,"[|",currValue)) {
			currType = gml_type_GmlTypeTools.unwrapParam(currType,0);
		} else {
			currType = null;
		}
		break;
	case 52:
		self.skip();
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		self.checkTypeCast(self.expr.currType,gml_type_GmlTypeDef.number,"grid X",self.expr.currValue);
		if(self.readCheckSkip(51,"a comma before second index")) {
			return true;
		}
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		self.checkTypeCast(self.expr.currType,gml_type_GmlTypeDef.number,"grid Y",self.expr.currValue);
		currType = gml_type_GmlTypeTools.resolve(currType);
		if(self.checkTypeCast(currType,gml_type_GmlTypeDef.ds_grid,"[#",currValue)) {
			currType = gml_type_GmlTypeTools.unwrapParam(currType,0);
		} else {
			currType = null;
		}
		break;
	case 53:
		self.skip();
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		currType = gml_type_GmlTypeTools.resolve(currType);
		var mapMeta = currType == null ? null : currType._hx_index == 5 ? currType.meta : null;
		if(mapMeta != null) {
			var _g = self.expr.currValue;
			if(_g._hx_index == 2) {
				var _g1 = _g.gml;
				var k = _g1;
				try {
					k = JSON.parse(_g1);
					var mapField = mapMeta.fieldMap[k];
					currType = mapField != null ? mapField.type : mapMeta.defaultType;
				} catch( _g ) {
					currType = mapMeta.defaultType;
				}
			} else {
				self.checkTypeCast(self.expr.currType,gml_type_GmlTypeDef.string,"map key",self.expr.currValue);
				currType = mapMeta.defaultType;
			}
		} else if(self.checkTypeCast(currType,gml_type_GmlTypeDef.ds_map,"[?",currValue)) {
			self.checkTypeCast(self.expr.currType,gml_type_GmlTypeTools.unwrapParam(currType,0),"map key",self.expr.currValue);
			currType = gml_type_GmlTypeTools.unwrapParam(currType,1);
		} else {
			currType = null;
		}
		break;
	case 55:
		self.skip();
		isArray = true;
		checkColon = false;
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		arrayType1 = self.expr.currType;
		arrayValue1 = self.expr.currValue;
		if(self.skipIf(self.peek() == 51)) {
			isArray2d = true;
			if(self.expr.read(newDepth,0,null,null)) {
				return true;
			}
			arrayType2 = self.expr.currType;
			arrayValue2 = self.expr.currValue;
		}
		break;
	case 56:
		self.skip();
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		self.checkTypeCast(self.expr.currType,gml_type_GmlTypeDef.string,"struct key",self.expr.currValue);
		currType = gml_type_GmlTypeTools.unwrapParam(currType,0);
		break;
	default:
		isArray = true;
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		arrayType1 = self.expr.currType;
		arrayValue1 = self.expr.currValue;
		if(self.skipIf(self.peek() == 51)) {
			isArray2d = true;
			if(self.expr.read(newDepth,0,null,null)) {
				return true;
			}
			arrayType2 = self.expr.currType;
			arrayValue2 = self.expr.currValue;
		}
		if(isNull && self.skipIf(self.peek() == 51)) {
			parsers_linter_GmlLinterArrayLiteral.read(self,newDepth,null);
			isLiteral = true;
		}
	}
	if(!isLiteral) {
		if(self.readCheckSkip(43,"a closing `]` in array access")) {
			return true;
		}
	}
	if(isLiteral) {
		if(self.readCheckSkip(54,"a colon in a ?: operator")) {
			return true;
		}
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		currKind = 53;
	} else if(isNull && isArray && checkColon && self.peek() == 54) {
		self.skip();
		if(self.expr.read(newDepth,0,null,null)) {
			return true;
		}
		currKind = 53;
	} else {
		currKind = isNull ? 48 : 46;
		if(isArray) {
			var _g = 0;
			var _g1 = isArray2d ? 2 : 1;
			while(_g < _g1) {
				var pass = _g++;
				var arrayType = pass > 0 ? arrayType2 : arrayType1;
				var arrayValue = pass > 0 ? arrayValue2 : arrayValue1;
				currType = gml_type_GmlTypeTools.resolve(currType);
				var ck = gml_type_GmlTypeTools.getKind(currType);
				var enumTupleName;
				if(currType == null) {
					enumTupleName = null;
				} else if(currType._hx_index == 6) {
					ck = 41;
					enumTupleName = currType.enumName;
				} else {
					enumTupleName = null;
				}
				if(ck == null) {
					if(arrayType != null) {
						self.checkTypeCast(arrayType,gml_type_GmlTypeDef.number,"array index",arrayValue);
					}
					currType = gml_type_GmlTypeTools.resolve(currType);
					if(self.checkTypeCast(currType,gml_type_GmlTypeDef.anyArray,"array access",currValue)) {
						currType = gml_type_GmlTypeTools.unwrapParam(currType,0);
					} else {
						currType = null;
					}
				} else {
					switch(ck) {
					case 40:
						currType = gml_type_GmlTypeTools.resolve(currType);
						if(arrayType != null) {
							self.checkTypeCast(arrayType,gml_type_GmlTypeTools.unwrapParam(currType,0),"array index",arrayValue);
						}
						currType = gml_type_GmlTypeTools.unwrapParam(currType,1);
						break;
					case 41:
						if(arrayValue == null) {
							self.checkTypeCast(arrayType,gml_type_GmlTypeDef.number,"array index",arrayValue);
							currType = null;
						} else if(arrayValue._hx_index == 1) {
							var _g2 = arrayValue.n;
							var p;
							if(enumTupleName == null) {
								p = gml_type_GmlTypeTools.unwrapParams(currType);
							} else {
								var en = gml_GmlAPI.gmlEnums[enumTupleName];
								p = en != null ? en.tupleTypes : null;
							}
							if(p == null) {
								currType = null;
							} else if(_g2 < 0) {
								currType = null;
								self.addWarning("Out-of-bounds tuple access (index " + _g2 + ")");
							} else if(_g2 >= p.length - 1) {
								var lastTupleType = gml_type_GmlTypeTools.resolve(p[p.length - 1]);
								if(gml_type_GmlTypeTools.getKind(lastTupleType) == 10) {
									currType = gml_type_GmlTypeTools.unwrapParam(lastTupleType);
								} else if(_g2 >= p.length) {
									currType = null;
									self.addWarning("Out-of-bounds tuple access (index " + _g2 + ", length is " + p.length + ")");
								} else {
									currType = lastTupleType;
								}
							} else {
								currType = p[_g2 | 0];
							}
						} else {
							currType = null;
						}
						break;
					default:
						if(arrayType != null) {
							self.checkTypeCast(arrayType,gml_type_GmlTypeDef.number,"array index",arrayValue);
						}
						currType = gml_type_GmlTypeTools.resolve(currType);
						if(self.checkTypeCast(currType,gml_type_GmlTypeDef.anyArray,"array access",currValue)) {
							currType = gml_type_GmlTypeTools.unwrapParam(currType,0);
						} else {
							currType = null;
						}
					}
				}
			}
		}
	}
	parsers_linter_GmlLinterArrayAccess.outType = currType;
	parsers_linter_GmlLinterArrayAccess.outKind = currKind;
	return false;
};
var parsers_linter_GmlLinterArrayLiteral = function() { };
$hxClasses["parsers.linter.GmlLinterArrayLiteral"] = parsers_linter_GmlLinterArrayLiteral;
parsers_linter_GmlLinterArrayLiteral.__name__ = "parsers.linter.GmlLinterArrayLiteral";
parsers_linter_GmlLinterArrayLiteral.read = function(self,oldDepth,targetType) {
	var newDepth = oldDepth + 1;
	var tupleTypes = null;
	var tupleHasRest = false;
	var tupleRestType = null;
	var itemType = null;
	if(targetType != null) {
		targetType = gml_type_GmlTypeTools.resolve(targetType);
		if(targetType != null) {
			if(targetType._hx_index == 6) {
				var en = gml_GmlAPI.gmlEnums[targetType.enumName];
				if(en != null) {
					tupleTypes = en.tupleTypes;
				}
			}
		}
		if(gml_type_GmlTypeTools.getKind(targetType) == 41) {
			tupleTypes = gml_type_GmlTypeTools.unwrapParams(targetType);
		} else if(gml_type_GmlTypeCanCastTo.canCastTo(targetType,gml_type_GmlTypeDef.anyArray,null,null)) {
			itemType = gml_type_GmlTypeTools.unwrapParam(targetType);
		}
		if(tupleTypes != null) {
			var t = gml_type_GmlTypeTools.resolve(tupleTypes[tupleTypes.length - 1]);
			if(gml_type_GmlTypeTools.getKind(t) == 10) {
				tupleHasRest = true;
				tupleRestType = gml_type_GmlTypeTools.unwrapParam(t);
			}
		}
	}
	var closed = false;
	var seenComma = true;
	var index = 0;
	var autoType = null;
	var q = self.reader;
	self.seqStart.setTo(q);
	_hx_loop1: while(q.get_loop()) switch(self.peek()) {
	case 43:
		self.skip();
		closed = true;
		break _hx_loop1;
	case 51:
		if(seenComma) {
			return self.readError("Unexpected `,`");
		} else {
			seenComma = true;
			self.skip();
		}
		break;
	default:
		if(!seenComma) {
			return self.readExpect("a comma in values list");
		}
		seenComma = false;
		if(self.expr.read(newDepth,0,null,itemType)) {
			return true;
		}
		if(tupleTypes != null) {
			var tt = tupleTypes[index];
			if(tupleHasRest && index >= tupleTypes.length - 1) {
				tt = tupleRestType;
			}
			self.checkTypeCast(self.expr.currType,tt,"tuple literal",self.expr.currValue);
		} else if(itemType != null) {
			self.checkTypeCast(self.expr.currType,itemType,"array literal",self.expr.currValue);
		} else if(index == 0) {
			autoType = self.expr.currType;
		} else if(autoType != null) {
			if(!gml_type_GmlTypeCanCastTo.canCastTo(self.expr.currType,autoType,null,null)) {
				autoType = null;
			}
		}
		++index;
	}
	if(!closed) {
		return self.readSeqStartError("Unclosed [] literal");
	}
	if(tupleTypes != null) {
		gml_type_GmlTypeTools.resolve(tupleTypes[tupleTypes.length - 1]);
		if(tupleHasRest) {
			if(index < tupleTypes.length - 1) {
				self.readSeqStartWarn("Expected a >=" + (tupleTypes.length - 1) + "-value tuple, got a " + index + "-value tuple");
			}
		} else if(index != tupleTypes.length) {
			self.readSeqStartWarn("Expected a " + tupleTypes.length + "-value tuple, got a " + index + "-value tuple");
		}
		parsers_linter_GmlLinterArrayLiteral.outType = targetType;
	} else if(itemType != null) {
		parsers_linter_GmlLinterArrayLiteral.outType = targetType;
	} else {
		parsers_linter_GmlLinterArrayLiteral.outType = index > 0 ? gml_type_GmlType.TInst("array",[autoType],32) : gml_type_GmlTypeDef.anyArray;
	}
	return false;
};
var parsers_linter_GmlLinterHelper = function(linter) {
	this.linter = linter;
};
$hxClasses["parsers.linter.GmlLinterHelper"] = parsers_linter_GmlLinterHelper;
parsers_linter_GmlLinterHelper.__name__ = "parsers.linter.GmlLinterHelper";
parsers_linter_GmlLinterHelper.prototype = {
	__class__: parsers_linter_GmlLinterHelper
};
var parsers_linter_GmlLinterBinOps = function(linter) {
	parsers_linter_GmlLinterHelper.call(this,linter);
};
$hxClasses["parsers.linter.GmlLinterBinOps"] = parsers_linter_GmlLinterBinOps;
parsers_linter_GmlLinterBinOps.__name__ = "parsers.linter.GmlLinterBinOps";
parsers_linter_GmlLinterBinOps.__super__ = parsers_linter_GmlLinterHelper;
parsers_linter_GmlLinterBinOps.prototype = $extend(parsers_linter_GmlLinterHelper.prototype,{
	read: function(oldDepth,firstType,firstLVal,firstOp,firstVal,firstLocalName) {
		var newDepth = oldDepth + 1;
		var q = this.linter.reader;
		var types = [firstType];
		var ops = [firstOp];
		var vals = [firstVal];
		var lvals = [firstLVal];
		var expr = this.linter.expr;
		var localNames = [firstLocalName];
		var nullSafety = [];
		while(q.get_loop()) {
			if(expr.read(newDepth,1)) {
				return true;
			}
			localNames.push(expr.isLocalIdent ? expr.currName : null);
			var _g = 0;
			var _g1 = expr.nullSafety;
			while(_g < _g1.length) nullSafety.push(_g1[_g++]);
			types.push(expr.currType);
			lvals.push(expr.currValue);
			var nk = this.linter.peek();
			if(parsers_linter_GmlLinterKind.__isBinOp[nk] || nk == 12) {
				this.linter.skip();
				ops.push(nk);
				vals.push(this.linter.get_nextVal());
			} else {
				break;
			}
		}
		var pmin = 7;
		var pmax = 0;
		var _g = 0;
		while(_g < ops.length) {
			var pc = parsers_linter_GmlLinterKind.__binOpPriority[ops[_g++]];
			if(pc < pmin) {
				pmin = pc;
			}
			if(pc > pmax) {
				pmax = pc;
			}
		}
		while(pmin <= pmax) {
			var i = 0;
			while(i < ops.length) if(parsers_linter_GmlLinterKind.__binOpPriority[ops[i]] == pmin) {
				var t1 = types[i];
				var t2 = types[i + 1];
				var lv1 = lvals[i];
				var lv2 = lvals[i + 1];
				var nsName = null;
				if(localNames[i] != null && gml_type_GmlTypeTools.equals(t2,gml_type_GmlTypeDef.undefined)) {
					nsName = localNames[i];
				} else if(localNames[i + 1] != null && gml_type_GmlTypeTools.equals(t1,gml_type_GmlTypeDef.undefined)) {
					nsName = localNames[i + 1];
				}
				if(nsName != null) {
					var notNull = ops[i] == 15;
					var result = null;
					var _g = 0;
					while(_g < nullSafety.length) {
						var v = nullSafety[_g];
						++_g;
						if(v.name == nsName) {
							result = v;
							break;
						}
					}
					var nsi = result;
					if(nsi != null) {
						if(nsi.status != null && nsi.status != notNull) {
							nsi.status = null;
						}
					} else {
						nullSafety.push(new parsers_linter_GmlLinterLocalNullSafetyItem(nsName,notNull));
					}
				}
				types[i] = this.linter.checkTypeCastOp(t1,lv1,t2,lv2,ops[i],vals[i]);
				types.splice(i + 1,1);
				vals.splice(i,1);
				ops.splice(i,1);
			} else {
				++i;
			}
			++pmin;
		}
		expr.currType = types[0];
		this.nullSafety = nullSafety;
		return false;
	}
	,__class__: parsers_linter_GmlLinterBinOps
});
var parsers_linter_GmlLinterExpr = function(linter) {
	parsers_linter_GmlLinterHelper.call(this,linter);
};
$hxClasses["parsers.linter.GmlLinterExpr"] = parsers_linter_GmlLinterExpr;
parsers_linter_GmlLinterExpr.__name__ = "parsers.linter.GmlLinterExpr";
parsers_linter_GmlLinterExpr.__super__ = parsers_linter_GmlLinterHelper;
parsers_linter_GmlLinterExpr.prototype = $extend(parsers_linter_GmlLinterHelper.prototype,{
	invalid: function(flags) {
		return this.linter.readExpect((flags & 2) != 0 ? "a statement" : "an expression");
	}
	,checkConst: function(currName,currKind) {
		switch(currKind) {
		case 4:
			if(this.linter.localKinds[currName] == 7) {
				this.linter.addWarning("Assigning to a `const` local `" + currName + "`");
			}
			break;
		case 47:case 48:
			this.linter.addError("Null-conditional values cannot be assigned to");
			break;
		default:
		}
	}
	,read: function(oldDepth,flags,_nk,targetType,templateTypes) {
		if(flags == null) {
			flags = 0;
		}
		var self = this.linter;
		var newDepth = oldDepth + 1;
		var q = self.reader;
		var nk = _nk != null ? _nk : parsers_linter_GmlLinterParser.next(self,self.reader);
		if(nk == 0) {
			return this.invalid(flags);
		}
		var wasStat = (flags & 2) != 0;
		var statKind = nk;
		var currKind = nk;
		var currName = nk == 4 ? this.linter.get_nextVal() : null;
		var isLocalIdent = false;
		var selfType = null;
		var currType = null;
		var currFunc = null;
		var currValue = null;
		var nullSafety = [];
		var hasParens = false;
		switch(nk) {
		case 1:
			currType = gml_type_GmlTypeDef.string;
			currValue = parsers_linter_GmlLinterValue.VString(null,this.linter.get_nextVal());
			break;
		case 2:
			currType = gml_type_GmlTypeDef.number;
			var nv = this.linter.get_nextVal();
			currValue = parsers_linter_GmlLinterValue.VNumber(parseFloat(nv),nv);
			break;
		case 3:
			currType = gml_type_GmlTypeDef.undefined;
			currValue = parsers_linter_GmlLinterValue.VUndefined;
			break;
		case 4:
			if((flags & 16) != 0) {
				this.checkConst(currName,currKind);
			}
			if(this.linter.localKinds[currName] == 9) {
				this.linter.addWarning("Trying to access a variable `" + currName + "` outside of its scope");
			}
			if(self.isProperties && (flags & 2) != 0) {
				var cond = this.linter.peek() == 54;
				if(this.linter.skipIf(cond)) {
					if(this.linter.readCheckSkip(4,"variable type")) {
						return true;
					}
					var cond = this.linter.peek() == 16;
					if(this.linter.skipIf(cond)) {
						var depth = 1;
						_hx_loop1: while(q.get_loop()) {
							var _this = this.linter;
							switch(parsers_linter_GmlLinterParser.next(_this,_this.reader)) {
							case 16:
								++depth;
								break;
							case 18:
								if(--depth <= 0) {
									break _hx_loop1;
								}
								break;
							default:
							}
						}
					}
				}
			}
			parsers_linter_GmlLinterIdent.read(self,currName);
			currType = parsers_linter_GmlLinterIdent.type;
			currFunc = parsers_linter_GmlLinterIdent.func;
			isLocalIdent = parsers_linter_GmlLinterIdent.isLocal;
			break;
		case 23:case 35:
			if(self.expr.read(newDepth,0,null,null)) {
				return true;
			}
			nullSafety = this.nullSafety;
			if(nk == 23) {
				self.checkTypeCastBoolOp(this.currType,this.currValue,"!");
				currType = gml_type_GmlTypeDef.bool;
				var _g = this.currValue;
				if(_g != null) {
					if(_g._hx_index == 1) {
						var v = _g.n > 0.5 ? 0 : 1;
						currValue = parsers_linter_GmlLinterValue.VNumber(v,"" + v);
					}
				}
				var _g = 0;
				var _g1 = nullSafety;
				while(_g < _g1.length) {
					var nsi = _g1[_g];
					++_g;
					if(nsi.status != null) {
						nsi.status = !nsi.status;
					}
				}
			} else {
				self.checkTypeCast(this.currType,gml_type_GmlTypeDef.int,"~",this.currValue);
				currType = gml_type_GmlTypeDef.int;
				var _g = this.currValue;
				if(_g != null) {
					if(_g._hx_index == 1) {
						var i = ~(_g.n | 0);
						currValue = parsers_linter_GmlLinterValue.VNumber(i,"" + i);
					}
				}
			}
			break;
		case 36:case 37:
			if(self.expr.read(newDepth,16,null,null)) {
				return true;
			}
			self.checkTypeCast(this.currType,gml_type_GmlTypeDef.number,nk == 36 ? "++" : "--",this.currValue);
			currType = gml_type_GmlTypeDef.number;
			break;
		case 38:
			var arrowState = null;
			var arrowArgName = null;
			if(this.linter.skipIfPeek(39)) {
				arrowState = 3;
			} else if(this.linter.peek() == 4) {
				arrowArgName = this.linter.get_nextVal();
				var peeker = this.linter.__peekReader;
				var _g = 0;
				while(_g < 2) {
					var iter = _g++;
					peeker.skipSpaces1();
					switch(peeker.source.charCodeAt(peeker.pos++)) {
					case 41:
						peeker.skipSpaces1();
						if(peeker.skipIfStrEquals("=>")) {
							arrowState = 2;
							this.linter.skip();
						}
						break;
					case 44:
						arrowState = 1;
						this.linter.skip();
						break;
					case 58:
						if(iter == 0) {
							arrowState = 0;
							this.linter.skip();
						}
						break;
					case 61:
						peeker.skipComplexExpr(this.linter.editor);
						continue;
					}
					break;
				}
			}
			if(arrowState == null) {
				hasParens = true;
				if(self.expr.read(newDepth,0,null,null)) {
					return true;
				}
				this.linter.readCheckSkip(39,"a `)`");
				if(this.currKind == 44) {
					statKind = 44;
					currKind = statKind;
				}
				currType = this.currType;
				currFunc = this.currFunc;
				currValue = this.currValue;
				nullSafety = this.nullSafety;
			} else {
				if((flags & 2) != 0) {
					if(arrowState == 2) {
						return this.linter.readError("Arrow functions cannot be statements");
					} else {
						return this.linter.readExpect("a `)`");
					}
				}
				if(self.funcLiteral.read(newDepth,false,true,{ arrowFunc : { state : arrowState, firstArgName : arrowArgName}, targetType : targetType, templateTypes : templateTypes})) {
					return true;
				}
				currFunc = self.funcLiteral.doc;
				currType = currFunc.getFunctionType();
			}
			break;
		case 40:
			var anon = new gml_type_GmlTypeAnon();
			var anonFields = anon.fields;
			if(!self.skipIf(self.peek() == 41)) {
				_hx_loop4: while(q.get_loop()) {
					var key;
					switch(parsers_linter_GmlLinterParser.next(self,self.reader)) {
					case 1:
						try {
							key = JSON.parse(self.get_nextVal());
						} catch( _g ) {
							key = null;
							self.addWarning("Invalid string for key name");
						}
						break;
					case 4:
						key = self.get_nextVal();
						break;
					case 41:
						break _hx_loop4;
					default:
						return self.readExpect("a field name");
					}
					switch(self.peek()) {
					case 41:case 51:
						parsers_linter_GmlLinterIdent.read(self,key);
						this.currType = parsers_linter_GmlLinterIdent.type;
						this.currFunc = parsers_linter_GmlLinterIdent.func;
						break;
					case 54:
						self.skip();
						if(self.expr.read(newDepth,0,null,null)) {
							return true;
						}
						break;
					default:
						return this.linter.readExpect("a `:` between key-value pair in {}");
					}
					if(key != null) {
						anonFields[key] = new gml_type_GmlTypeAnonField(this.currType,this.currFunc);
					}
					switch(self.peek()) {
					case 41:
						self.skip();
						break _hx_loop4;
					case 51:
						self.skip();
						break;
					default:
						return self.readExpect("a `,` or a `}` after a key-value pair in {}");
					}
				}
			}
			currType = gml_type_GmlType.TAnon(anon);
			break;
		case 42:
			if(parsers_linter_GmlLinterArrayLiteral.read(self,newDepth,targetType)) {
				return true;
			}
			currType = parsers_linter_GmlLinterArrayLiteral.outType;
			break;
		case 62:
			if(self.expr.read(newDepth,1 | 64,null,null)) {
				return true;
			}
			if(this.currKind == 63) {
				currType = this.currType;
			} else {
				currType = null;
			}
			currFunc = null;
			break;
		case 76:case 90:
			if(self.funcLiteral.read(newDepth,nk == 76,(flags & 2) != 0,{ targetType : targetType, templateTypes : templateTypes})) {
				return true;
			}
			currFunc = self.funcLiteral.doc;
			currType = currFunc.getFunctionType();
			break;
		case 78:
			if(self.expr.read(newDepth,32 | 4,null,null)) {
				return true;
			}
			currType = ((this.currType) || (gml_type_GmlTypeDef.simple(this.currName)));
			currFunc = gml_type_GmlTypeTools.getSelfCallDoc(currType,self.getImports());
			break;
		default:
			if(parsers_linter_GmlLinterKind.__isUnOp[nk]) {
				if(self.expr.read(newDepth,1,null,null)) {
					return true;
				}
				self.checkTypeCast(this.currType,gml_type_GmlTypeDef.number,nk == 24 ? "+" : "-",this.currValue);
				currType = gml_type_GmlTypeDef.number;
				if(nk == 24) {
					currValue = this.currValue;
				} else {
					var _g = this.currValue;
					if(_g != null) {
						if(_g._hx_index == 1) {
							var _g1 = _g.n;
							var f = _g1;
							f = -_g1;
							currValue = parsers_linter_GmlLinterValue.VNumber(f,"" + f);
						}
					}
				}
			} else {
				return this.invalid(flags);
			}
		}
		_hx_loop5: while(q.get_loop()) {
			nk = self.peek();
			var setValue = false;
			switch(nk) {
			case 12:
				if((flags & 2) != 0) {
					this.checkConst(currName,currKind);
					self.skip();
					flags = flags & ~2;
					statKind = 12;
					if(self.expr.read(newDepth,0,null,currType)) {
						return true;
					}
					self.checkTypeCast(this.currType,currType,"assignment",this.currValue);
					currType = null;
				} else {
					if((flags & 1) != 0) {
						break _hx_loop5;
					}
					if(self.prefs.noSingleEquals) {
						self.addWarning("Using single `=` as a comparison operator");
					}
					self.skip();
					if(self.readOps(newDepth,currType,currValue,nk,self.get_nextVal(),currKind == 4 && isLocalIdent ? currName : null)) {
						return true;
					}
					parsers_linter_GmlLinterLocalNullSafetyItems.mergeItems(nullSafety,self.binOps.nullSafety);
					flags = flags | 4;
					currType = this.currType;
				}
				break;
			case 23:
				if((flags & 1) != 0 || self.keywords["in"] == null) {
					break _hx_loop5;
				}
				self.seqStart.setTo(self.reader);
				self.skip();
				if(!self.skipIf(self.peek() == 96)) {
					self.reader.setTo(self.seqStart);
					break _hx_loop5;
				}
				if(self.expr.read(newDepth,0,null,null)) {
					return true;
				}
				currKind = 96;
				currType = gml_type_GmlTypeDef.bool;
				break;
			case 36:case 37:
				if((flags & 4) != 0) {
					break _hx_loop5;
				}
				if(!parsers_linter_GmlLinterKind.__canPostfix[currKind]) {
					break _hx_loop5;
				}
				this.checkConst(currName,currKind);
				self.skip();
				currKind = nk;
				statKind = currKind;
				currType = gml_type_GmlTypeDef.number;
				break;
			case 38:
				if(self.prefs.forbidNonIdentCalls && !parsers_linter_GmlLinterKind.__canCall[currKind]) {
					return self.readError("Expression " + parsers_linter_GmlLinterKind.getName(currKind) + " is not callable");
				}
				if((flags & 4) != 0 && (flags & 32) == 0) {
					return self.readError("Can't call this");
				}
				self.skip();
				var argc = self.funcArgs.read(newDepth,currFunc,currKind == 4 && currName == "method" ? gml_type_GmlTypeDef.methodSelf : selfType,currType);
				if(argc < 0) {
					return true;
				}
				if(currFunc != null) {
					self.checkCallArgs(currFunc,currName,argc,(flags & 2) == 0,(flags & 32) != 0);
					if(currFunc.selfType != null) {
						var currSelfType = self.getSelfType();
						if(gml_type_GmlTypeCanCastTo.canCastTo(currSelfType,currFunc.selfType,null,null) == false) {
							self.addWarning(currFunc.name + " expects to be executed in the context of " + gml_type_GmlTypeTools.toString(currFunc.selfType) + " (self is " + gml_type_GmlTypeTools.toString(currSelfType) + ")");
						}
					}
				}
				currKind = 44;
				statKind = currKind;
				currType = this.linter.funcArgs.returnType;
				currFunc = gml_type_GmlTypeTools.getSelfCallDoc(currType,self.getImports());
				break;
			case 53:
				if((flags & 1) != 0) {
					break _hx_loop5;
				}
				self.checkTypeCast(currType,gml_type_GmlTypeDef.bool,"ternary condition",currValue);
				self.skip();
				parsers_linter_GmlLinterLocalNullSafetyItems.prepatch(nullSafety,this.linter);
				if(self.expr.read(newDepth,0,null,null)) {
					return true;
				}
				currType = this.currType;
				if(self.readCheckSkip(54,"a colon in a ternary operator")) {
					return true;
				}
				parsers_linter_GmlLinterLocalNullSafetyItems.elsepatch(nullSafety,this.linter);
				if(self.expr.read(newDepth,0,null,null)) {
					return true;
				}
				var elseType = this.currType;
				if(currType != null) {
					if(elseType != null) {
						if(gml_type_GmlTypeTools.getKind(elseType) == 16) {
							if(!gml_type_GmlTypeCanCastTo.canCastTo(currType,elseType,null,null)) {
								currType = gml_type_GmlTypeDef.nullable(currType);
							}
						} else if(gml_type_GmlTypeTools.getKind(currType) == 16) {
							if(!gml_type_GmlTypeCanCastTo.canCastTo(elseType,currType,null,null)) {
								currType = gml_type_GmlTypeDef.nullable(elseType);
							}
						} else {
							self.checkTypeCast(this.currType,currType,"ternary else-value",this.currValue);
						}
					}
				} else {
					currType = elseType;
				}
				parsers_linter_GmlLinterLocalNullSafetyItems.postpatch(nullSafety,this.linter);
				currKind = 53;
				break;
			case 57:
				if((flags & 1) != 0) {
					break _hx_loop5;
				}
				self.skip();
				if(self.expr.read(newDepth,0,null,null)) {
					return true;
				}
				if(gml_type_GmlTypeTools.getKind(currType) == 3) {
					currType = gml_type_GmlTypeTools.unwrapParam(currType);
				}
				self.checkTypeCast(this.currType,currType,"?? operator value",this.currValue);
				currKind = 57;
				break;
			case 50:case 58:
				if((flags & 32) != 0) {
					break _hx_loop5;
				}
				self.skip();
				if(self.readCheckSkip(4,"field name after `.`")) {
					return true;
				}
				var field = self.get_nextVal();
				if(nk == 58 && gml_type_GmlTypeTools.getKind(currType) == 3) {
					currType = gml_type_GmlTypeTools.unwrapParam(currType);
				}
				var enumType;
				var scriptName;
				if(currKind == 4) {
					enumType = gml_GmlAPI.gmlEnums[currName];
					scriptName = enumType == null && gml_GmlAPI.gmlKind[currName] == "asset.script" ? currName : null;
				} else {
					enumType = null;
					scriptName = null;
				}
				currKind = nk == 50 ? 45 : 47;
				var isStatic;
				var nsType = null;
				if(enumType != null) {
					isStatic = true;
					currType = gml_type_GmlTypeDef.int;
					currFunc = null;
					var ef = enumType.compMap[field];
					if(ef != null && ef.doc != null) {
						if(/^\d+$/g.test(ef.doc)) {
							setValue = true;
							currValue = parsers_linter_GmlLinterValue.VNumber(parseFloat(ef.doc),ef.doc);
						}
					}
				} else if(scriptName != null) {
					selfType = currType;
					isStatic = true;
					nsType = gml_type_GmlTypeDef.simple(scriptName);
				} else {
					selfType = currType;
					isStatic = gml_type_GmlTypeTools.getKind(currType) == 4;
					nsType = isStatic ? gml_type_GmlTypeTools.unwrapParam(currType) : currType;
				}
				var ctn = null;
				if(enumType == null) {
					if(scriptName != null) {
						ctn = scriptName;
					} else if(nsType == null) {
						currType = null;
						currFunc = null;
					} else {
						switch(nsType._hx_index) {
						case 0:
							var _g = nsType.name;
							switch(nsType.kind) {
							case 2:
								ctn = _g;
								break;
							case 8:
								currType = gml_GmlAPI.gmlGlobalTypes[field];
								currFunc = null;
								break;
							default:
								currType = null;
								currFunc = null;
							}
							break;
						case 2:
							var fd = nsType.inf.fields[field];
							if(fd != null) {
								currType = fd.type;
								currFunc = fd.doc;
							} else {
								currType = null;
								currFunc = null;
								if(self.prefs.requireFields) {
									self.addWarning("Variable " + field + " is not part of anonymous struct " + gml_type_GmlTypeTools.toString(nsType));
								}
							}
							break;
						default:
							currType = null;
							currFunc = null;
						}
					}
				}
				if(ctn != null) {
					var wantWarn = false;
					var imp = self.getImports();
					var step = imp != null ? -1 : 0;
					var result = null;
					while(++step < 2) {
						var ns = step > 0 ? gml_GmlAPI.gmlNamespaces[ctn] : imp.namespaces[ctn];
						if(ns == null) {
							continue;
						}
						wantWarn = true;
						if(isStatic) {
							currType = ns.staticTypes[field];
							currFunc = ns.docStaticMap[field];
							result = Object.prototype.hasOwnProperty.call(ns.staticKind,field);
						} else {
							currType = ns.getInstType(field);
							currFunc = ns.getInstDoc(field);
							result = ns.getInstKind(field) != null;
						}
						if(result) {
							break;
						}
					}
					var found = result;
					if(found) {
						if(currType != null) {
							if(selfType._hx_index == 0) {
								var _g1 = selfType.params;
								if(_g1.length > 0) {
									currType = gml_type_GmlTypeTools.mapTemplateTypes(currType,_g1);
								}
							}
						}
					} else {
						var en = gml_GmlAPI.gmlEnums[ctn];
						if(en != null) {
							wantWarn = true;
							if(Object.prototype.hasOwnProperty.call(en.items,field)) {
								currType = gml_type_GmlTypeDef.int;
								found = true;
							} else {
								currType = gml_type_GmlTypeDef.forbidden;
							}
						} else {
							currType = null;
						}
						currFunc = null;
					}
					if(!found) {
						currType = null;
						currFunc = null;
						if(wantWarn && self.prefs.requireFields) {
							self.addWarning("Variable " + field + " is not part of " + ctn);
						}
					}
				}
				break;
			case 42:case 59:
				self.skip();
				if(parsers_linter_GmlLinterArrayAccess.read(self,nk,newDepth,currType,currKind,currValue)) {
					return true;
				}
				currKind = parsers_linter_GmlLinterArrayAccess.outKind;
				currType = parsers_linter_GmlLinterArrayAccess.outType;
				break;
			case 63:
				if((flags & 1) != 0 && (flags & 64) == 0) {
					break _hx_loop5;
				}
				self.skip();
				if(self.readTypeName()) {
					return true;
				}
				var asType = gml_type_GmlTypeParser.parse(parsers_linter_GmlLinter.readTypeName_typeStr,null);
				if(self.prefs.warnAboutRedundantCasts && gml_type_GmlTypeTools.equals(currType,asType)) {
					self.addWarning("Redundant cast, " + gml_type_GmlTypeTools.toString(currType) + " is already of type " + gml_type_GmlTypeTools.toString(asType));
				}
				if((flags & 64) == 0) {
					var ex = gml_type_GmlTypeCanCastTo.isExplicit;
					gml_type_GmlTypeCanCastTo.isExplicit = true;
					self.checkTypeCast(currType,asType,"as",currValue);
					gml_type_GmlTypeCanCastTo.isExplicit = ex;
				}
				currType = asType;
				currFunc = null;
				currKind = 63;
				break;
			case 96:
				if((flags & 1) != 0) {
					break _hx_loop5;
				}
				self.skip();
				if(self.expr.read(newDepth,0,null,null)) {
					return true;
				}
				currKind = 96;
				currType = gml_type_GmlTypeDef.bool;
				break;
			default:
				if(parsers_linter_GmlLinterKind.__isSetOp[nk]) {
					if((flags & 2) == 0) {
						return self.readError("Can't use " + self.nextDump() + " here.");
					}
					this.checkConst(currName,currKind);
					self.skip();
					var opv = currType != null ? self.get_nextVal() : null;
					statKind = 12;
					currKind = statKind;
					if(self.expr.read(newDepth,0,null,currType)) {
						return true;
					}
					if(currType != null) {
						self.checkTypeCastOp(currType,currValue,this.currType,this.currValue,opv == "+=" ? 24 : 25,opv);
					}
					currType = null;
					flags = flags | 4;
				} else if(parsers_linter_GmlLinterKind.__isBinOp[nk]) {
					if((flags & 1) != 0) {
						break _hx_loop5;
					}
					self.skip();
					if(self.readOps(newDepth,currType,currValue,nk,self.get_nextVal(),currKind == 4 && isLocalIdent ? currName : null)) {
						return true;
					}
					parsers_linter_GmlLinterLocalNullSafetyItems.mergeItems(nullSafety,self.binOps.nullSafety);
					currType = this.currType;
					flags = flags | 4;
				} else {
					break _hx_loop5;
				}
			}
			if(!setValue) {
				currValue = null;
			}
			if(nk != 50 && nk != 58) {
				selfType = null;
			}
		}
		if(wasStat && !parsers_linter_GmlLinterKind.__isStat[statKind]) {
			self.nextKind = statKind;
			self.__nextVal_cache = "";
			return self.readExpect("a statement");
		}
		this.currName = currKind == 4 ? currName : null;
		this.isLocalIdent = currKind == 4 && isLocalIdent;
		this.currKind = currKind;
		this.currType = currType;
		this.selfType = selfType;
		this.currFunc = currFunc;
		this.currValue = currValue;
		this.hasParens = hasParens;
		this.nullSafety = nullSafety;
		return false;
	}
	,__class__: parsers_linter_GmlLinterExpr
});
var parsers_linter_GmlLinterFuncArgs = function(linter) {
	parsers_linter_GmlLinterHelper.call(this,linter);
};
$hxClasses["parsers.linter.GmlLinterFuncArgs"] = parsers_linter_GmlLinterFuncArgs;
parsers_linter_GmlLinterFuncArgs.__name__ = "parsers.linter.GmlLinterFuncArgs";
parsers_linter_GmlLinterFuncArgs.__super__ = parsers_linter_GmlLinterHelper;
parsers_linter_GmlLinterFuncArgs.prototype = $extend(parsers_linter_GmlLinterHelper.prototype,{
	read: function(oldDepth,doc,selfType,fnType) {
		var _gthis = this;
		var newDepth = oldDepth + 1;
		var q = this.linter.reader;
		this.linter.seqStart.setTo(q);
		var closed = false;
		var seenComma = true;
		var argc = 0;
		var argTypes;
		var argTypeClamp;
		var argTypesLen;
		var templateTypes = null;
		var isFuncValue = false;
		if(doc != null) {
			argTypes = doc.argTypes;
			argTypesLen = argTypes != null ? argTypes.length : 0;
			argTypeClamp = doc.rest && argTypes != null ? argTypesLen - 1 : 2147483647;
			if(doc.templateItems != null) {
				var size = doc.templateItems.length;
				templateTypes = new Array(size);
			}
			if(doc.templateSelf != null) {
				var to = doc.templateSelf;
				var imp = this.linter.getImports();
				if(!gml_type_GmlTypeCanCastTo.canCastTo(selfType,to,templateTypes,imp)) {
					var text = "Can't cast " + gml_type_GmlTypeTools.toString(selfType,templateTypes) + " to " + gml_type_GmlTypeTools.toString(doc.templateSelf,templateTypes) + " for " + doc.name + "#self";
					this.linter.addWarning(text);
				}
			}
		} else {
			var tmp;
			if(fnType != null) {
				fnType = gml_type_GmlTypeTools.resolve(fnType);
				tmp = gml_type_GmlTypeTools.getKind(fnType) == 9;
			} else {
				tmp = false;
			}
			if(tmp) {
				isFuncValue = true;
				argTypes = gml_type_GmlTypeTools.unwrapParams(fnType);
				argTypesLen = argTypes.length - 1;
				argTypeClamp = argTypesLen > 0 && gml_type_GmlTypeTools.getKind(gml_type_GmlTypeTools.resolve(argTypes[argTypesLen - 1])) == 10 ? argTypesLen - 1 : 2147483647;
			} else {
				argTypes = null;
				argTypesLen = 0;
				argTypeClamp = 0;
			}
		}
		var isMethod = gml_type_GmlTypeTools.getKind(selfType) == 64;
		var methodSelf = null;
		var hasBufferAutoType = false;
		var bufferAutoType = null;
		var bufferAutoTypeRet = false;
		if(doc != null && argTypes != null && doc.name.includes("buffer_")) {
			var _g = 0;
			var _g1 = argTypes;
			while(_g < _g1.length) {
				var argType = _g1[_g];
				++_g;
				if(argType != null) {
					if(argType._hx_index == 0) {
						if(argType.params.length == 0) {
							if(argType.kind == 2) {
								if(argType.name == "buffer_auto_type") {
									hasBufferAutoType = true;
									break;
								}
							}
						}
					}
				}
			}
			var _g = doc.get_returnType();
			if(_g != null) {
				if(_g._hx_index == 0) {
					if(_g.params.length == 0) {
						if(_g.kind == 2) {
							if(_g.name == "buffer_auto_type") {
								hasBufferAutoType = true;
								bufferAutoTypeRet = true;
							}
						}
					}
				}
			}
		}
		var procArgument = function(isUndefined) {
			var argType;
			var argTypeInd = argc;
			if(argTypes != null) {
				if(argTypeInd > argTypeClamp) {
					argTypeInd = argTypeClamp;
				}
				argType = argTypeInd >= argTypesLen ? null : argTypes[argTypeInd];
			} else {
				argType = null;
			}
			if(!isUndefined) {
				if(isMethod && argc == 1) {
					var funcLiteral = _gthis.linter.funcLiteral;
					var lso = funcLiteral.selfOverride;
					funcLiteral.selfOverride = methodSelf;
					var foundError = _gthis.linter.expr.read(newDepth,0,null,null,null);
					funcLiteral.selfOverride = lso;
					if(foundError) {
						return true;
					}
				} else if(_gthis.linter.expr.read(newDepth,0,null,argType,templateTypes)) {
					return true;
				}
			}
			if(argTypes != null && (isUndefined || _gthis.linter.expr.currType != null)) {
				if(argType != null) {
					if(isFuncValue && argTypeInd == argTypeClamp) {
						argType = gml_type_GmlTypeTools.unwrapParam(argType);
					}
					if(hasBufferAutoType) {
						if(argType != null) {
							if(argType._hx_index == 0) {
								var _g = argType.name;
								if(argType.params.length == 0) {
									if(argType.kind == 2) {
										if(_g == "buffer_auto_type") {
											argType = bufferAutoType;
										} else if(_g == "buffer_type") {
											bufferAutoType = isUndefined ? null : parsers_linter_misc_GmlLinterBufferAutoType.map[_gthis.linter.expr.currName];
										}
									}
								}
							}
						}
					}
					var argExprType = isUndefined ? gml_type_GmlTypeDef.undefined : _gthis.linter.expr.currType;
					if(!_gthis.linter.valueCanCastTo(isUndefined ? parsers_linter_GmlLinterValue.VUndefined : _gthis.linter.expr.currValue,argExprType,argType,templateTypes)) {
						var argName;
						if(doc != null) {
							argName = ((doc.args[argTypeInd]) || ("?"));
						} else {
							argName = null;
						}
						var text = "Can't cast " + gml_type_GmlTypeTools.toString(argExprType,templateTypes) + " to " + gml_type_GmlTypeTools.toString(argType,templateTypes) + " for " + argName + "#" + argc;
						_gthis.linter.addWarning(text);
					}
				}
			}
			if(isMethod && argc == 0) {
				methodSelf = isUndefined ? gml_type_GmlTypeDef.undefined : _gthis.linter.expr.currType;
			}
			argc += 1;
			return false;
		};
		_hx_loop2: while(q.get_loop()) switch(this.linter.peek()) {
		case 39:
			this.linter.skip();
			closed = true;
			break _hx_loop2;
		case 51:
			if(seenComma) {
				this.linter.skip();
				procArgument(true);
			} else {
				seenComma = true;
				this.linter.skip();
			}
			break;
		default:
			if(!seenComma) {
				this.linter.readExpect("a comma in values list");
				return -1;
			}
			seenComma = false;
			procArgument(false);
		}
		if(doc != null) {
			var retType = doc.get_returnType();
			if(bufferAutoTypeRet) {
				retType = bufferAutoType;
			}
			this.returnType = gml_type_GmlTypeTools.mapTemplateTypes(retType,templateTypes);
		} else if(isFuncValue) {
			this.returnType = argTypes[argTypesLen];
		} else {
			this.returnType = null;
		}
		if(!closed) {
			this.linter.readSeqStartError("Unclosed ()");
			return -1;
		} else {
			return argc;
		}
	}
	,__class__: parsers_linter_GmlLinterFuncArgs
});
var parsers_linter_GmlLinterFuncLiteral = function(linter) {
	parsers_linter_GmlLinterHelper.call(this,linter);
};
$hxClasses["parsers.linter.GmlLinterFuncLiteral"] = parsers_linter_GmlLinterFuncLiteral;
parsers_linter_GmlLinterFuncLiteral.__name__ = "parsers.linter.GmlLinterFuncLiteral";
parsers_linter_GmlLinterFuncLiteral.__super__ = parsers_linter_GmlLinterHelper;
parsers_linter_GmlLinterFuncLiteral.prototype = $extend(parsers_linter_GmlLinterHelper.prototype,{
	read: function(oldDepth,isFunc,isStat,options) {
		var _gthis = this;
		var name = "function";
		var isTopLevel = isFunc && isStat && oldDepth == 2 && this.linter.functionsAreGlobal;
		if(options == null) {
			options = parsers_linter_GmlLinterFuncLiteral.defaultOptions;
		}
		var arrowOpts = options.arrowFunc;
		var targetType = options.targetType;
		var templateTypes = options.templateTypes;
		var targetArgTypes = null;
		if(targetType != null) {
			var mappedType = targetType;
			if(templateTypes != null) {
				mappedType = gml_type_GmlTypeTools.mapTemplateTypes(targetType,templateTypes);
			}
			if(mappedType != null) {
				if(mappedType._hx_index == 0) {
					var _g = mappedType.params;
					if(mappedType.kind == 9) {
						if(_g.length > 0) {
							targetArgTypes = _g.slice(0,_g.length - 1);
						}
					}
				}
			}
		}
		var hasName = arrowOpts == null && this.linter.peek() == 4;
		if(hasName) {
			this.linter.skip();
			name = this.linter.get_nextVal();
			if(isTopLevel) {
				this.linter.set_context(name);
			}
		}
		var globalDoc = isTopLevel && hasName ? gml_GmlAPI.gmlDoc[name] : null;
		var doc = new gml_GmlFuncDoc(name,"(",")",[],false);
		var nextLocalType = isTopLevel ? "local" : "sublocal";
		var procArgTypePost = function(argName,t,argTypeStr) {
			if(_gthis.linter.setLocalTypes) {
				_gthis.linter.getImports(_gthis.linter.setLocalTypes).localTypes[argName] = t;
			}
			if(t != null) {
				if(doc.argTypes == null) {
					var size = doc.args.length - 1;
					var procArgTypePost = new Array(size);
					doc.argTypes = procArgTypePost;
				}
				doc.argTypes.push(t);
			}
			if(_gthis.linter.setLocalVars) {
				_gthis.linter.editor.locals[_gthis.linter.context].add(argName,nextLocalType,((argTypeStr) && (("type " + argTypeStr))));
			}
		};
		var wantPar = null;
		var awaitArgName = true;
		if(arrowOpts != null) {
			if(arrowOpts.state == 3) {
				wantPar = false;
			} else {
				doc.args.push(arrowOpts.firstArgName);
				wantPar = arrowOpts.state != 2 && arrowOpts.state != 3;
				awaitArgName = arrowOpts.state == 1;
				if(arrowOpts.state == 0) {
					if(this.linter.readTypeName()) {
						return true;
					}
					var argTypeStr = parsers_linter_GmlLinter.readTypeName_typeStr;
					var t = gml_type_GmlTypeParser.parse(argTypeStr,null);
					procArgTypePost(arrowOpts.firstArgName,t,argTypeStr);
				} else {
					var firstTargetArgType = targetArgTypes != null ? targetArgTypes[0] : null;
					if(firstTargetArgType != null) {
						procArgTypePost(arrowOpts.firstArgName,firstTargetArgType,null);
					} else {
						procArgTypePost(arrowOpts.firstArgName,null,null);
					}
				}
			}
		}
		if(wantPar == null) {
			var cond = this.linter.peek() == 38;
			if(this.linter.skipIf(cond)) {
				wantPar = true;
			} else if(isFunc) {
				return this.linter.readExpect("function literal arguments");
			} else {
				wantPar = false;
			}
		}
		if(wantPar) {
			var depth = 1;
			var reader = this.linter.reader;
			_hx_loop1: while(reader.get_loop()) {
				var _this = this.linter;
				switch(parsers_linter_GmlLinterParser.next(_this,_this.reader)) {
				case 4:
					if(awaitArgName) {
						var argName = this.linter.get_nextVal();
						var argIndex = doc.args.length;
						awaitArgName = false;
						doc.args.push(argName);
						var argTypeStr = null;
						var t;
						var cond = this.linter.peek() == 54;
						if(this.linter.skipIf(cond)) {
							if(this.linter.readTypeName()) {
								return true;
							}
							argTypeStr = parsers_linter_GmlLinter.readTypeName_typeStr;
							t = gml_type_GmlTypeParser.parse(argTypeStr,null);
						} else if(globalDoc != null && globalDoc.argTypes != null) {
							t = globalDoc.argTypes[argIndex];
						} else if(targetArgTypes != null) {
							t = targetArgTypes[argIndex];
						} else {
							t = null;
						}
						procArgTypePost(argName,t,argTypeStr);
					}
					break;
				case 38:case 40:case 42:
					++depth;
					break;
				case 39:case 41:case 43:
					if(--depth <= 0) {
						break _hx_loop1;
					}
					break;
				case 51:
					if(depth == 1) {
						awaitArgName = true;
					}
					break;
				default:
				}
			}
		}
		var nextFuncRetStatus = 0;
		if(arrowOpts != null) {
			if(arrowOpts.state != 2) {
				var _this = this.linter;
				if(parsers_linter_GmlLinterParser.next(_this,_this.reader) != 61) {
					var ctx;
					switch(arrowOpts.state) {
					case 0:
						ctx = "because it had a (name:type)";
						break;
					case 1:
						ctx = "because it had comma-separated words";
						break;
					case 3:
						ctx = "(or maybe you just forgot to put anything in parentheses)";
						break;
					default:
						ctx = null;
					}
					return this.linter.readExpect("a => after what looked like an arrow-function" + (ctx != null ? " " + ctx : ""));
				}
			}
		} else {
			var cond = this.linter.peek() == 60;
			if(this.linter.skipIf(cond)) {
				if(this.linter.readTypeName()) {
					return true;
				}
				doc.set_returnTypeString(parsers_linter_GmlLinter.readTypeName_typeStr);
				nextFuncRetStatus = gml_type_GmlTypeTools.getKind(doc.get_returnType()) == 5 ? 3 : 2;
			}
			var tmp;
			if(isFunc) {
				var cond = this.linter.peek() == 54;
				tmp = this.linter.skipIf(cond);
			} else {
				tmp = false;
			}
			if(tmp) {
				if(this.linter.readCheckSkip(4,"a parent type name")) {
					return true;
				}
				if(this.linter.readCheckSkip(38,"opening bracket")) {
					return true;
				}
				if(this.linter.funcArgs.read(oldDepth + 1) < 0) {
					return true;
				}
			}
			if(isFunc) {
				var cond = this.linter.peek() == 4 && this.linter.get_nextVal() == "constructor";
				this.linter.skipIf(cond);
			}
		}
		var oldLocalNames = this.linter.localNamesPerDepth;
		var oldLocalKinds = this.linter.localKinds;
		var oldFuncDoc = this.linter.currFuncDoc;
		var oldFuncRetStatus = this.linter.currFuncRetStatus;
		var oldLocalTokenType = this.linter.localVarTokenType;
		this.linter.localNamesPerDepth = [];
		this.linter.localKinds = Object.create(null);
		this.linter.currFuncDoc = doc;
		this.linter.currFuncRetStatus = nextFuncRetStatus;
		this.linter.localVarTokenType = nextLocalType;
		if(this.selfOverride != null) {
			var self0z = this.linter.__selfType_set;
			var self0t = this.linter.__selfType_type;
			this.linter.__selfType_set = true;
			this.linter.__selfType_type = this.selfOverride;
			var foundError;
			if(arrowOpts == null || _gthis.linter.skipIfPeek(49) || _gthis.linter.peek() == 40) {
				foundError = _gthis.linter.readStat(0,0,null);
			} else {
				var trouble = _gthis.linter.expr.read(0,0,null,null,null);
				_gthis.linter.currFuncRetStatus = 1;
				foundError = trouble;
			}
			this.linter.__selfType_set = self0z;
			this.linter.__selfType_type = self0t;
			if(foundError) {
				return true;
			}
		} else {
			var tmp;
			if(arrowOpts == null || _gthis.linter.skipIfPeek(49) || _gthis.linter.peek() == 40) {
				tmp = _gthis.linter.readStat(0,0,null);
			} else {
				var trouble = _gthis.linter.expr.read(0,0,null,null,null);
				_gthis.linter.currFuncRetStatus = 1;
				tmp = trouble;
			}
			if(tmp) {
				return true;
			}
		}
		switch(this.linter.currFuncRetStatus) {
		case 0:
			doc.hasReturn = false;
			break;
		case 1:
			if(nextFuncRetStatus == 0) {
				doc.set_returnTypeString("");
			}
			break;
		case 2:
			this.linter.addWarning("The function is marked as having a return but does not return anything.");
			break;
		default:
		}
		this.linter.localNamesPerDepth = oldLocalNames;
		this.linter.localKinds = oldLocalKinds;
		this.linter.currFuncDoc = oldFuncDoc;
		this.linter.currFuncRetStatus = oldFuncRetStatus;
		this.linter.localVarTokenType = oldLocalTokenType;
		this.doc = doc;
		return false;
	}
	,__class__: parsers_linter_GmlLinterFuncLiteral
});
var parsers_linter_GmlLinterIdent = function() { };
$hxClasses["parsers.linter.GmlLinterIdent"] = parsers_linter_GmlLinterIdent;
parsers_linter_GmlLinterIdent.__name__ = "parsers.linter.GmlLinterIdent";
parsers_linter_GmlLinterIdent.read = function(linter,currName) {
	var currType = null;
	var currFunc = null;
	var isLocal = false;
	_hx_loop1: while(true) {
		switch(currName) {
		case "async_load":
			var ctx = linter.context;
			if(ctx.startsWith("async_")) {
				var defName = "async_load_" + ctx.substring(6);
				if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdTypedefs,defName) || Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlTypedefs,defName)) {
					currType = gml_type_GmlTypeDef.simple(defName);
					break _hx_loop1;
				}
			}
			break;
		case "false":case "true":
			currType = gml_type_GmlTypeDef.bool;
			break _hx_loop1;
		case "global":
			currType = gml_type_GmlTypeDef.global;
			break _hx_loop1;
		case "other":
			currType = linter.getOtherType();
			currFunc = gml_type_GmlTypeTools.getSelfCallDoc(currType,linter.getImports());
			break _hx_loop1;
		case "self":
			currType = linter.getSelfType();
			currFunc = gml_type_GmlTypeTools.getSelfCallDoc(currType,linter.getImports());
			break _hx_loop1;
		default:
			if(currName.startsWith("argument") && currName.length <= 10) {
				if(currName.length == 8) {
					var doc = linter.currFuncDoc;
					if(doc != null && doc.argTypes != null) {
						currType = gml_type_GmlType.TInst("tuple",doc.argTypes,41);
					}
					break _hx_loop1;
				} else {
					var i = Std.parseInt(currName.substring(8));
					if(i != null && i < 16) {
						var doc1 = linter.currFuncDoc;
						if(doc1 != null && doc1.argTypes != null) {
							currType = doc1.argTypes[i];
						}
						break _hx_loop1;
					}
				}
			}
		}
		var imp = linter.getImports();
		var locals = linter.editor.locals[linter.context];
		if(locals != null && Object.prototype.hasOwnProperty.call(locals.kind,currName)) {
			isLocal = true;
			if(imp != null) {
				currType = imp.localTypes[currName];
				currFunc = gml_type_GmlTypeTools.getSelfCallDoc(currType,imp);
			} else {
				currType = null;
				currFunc = null;
			}
			break;
		}
		var lam = linter.editor.lambdas[linter.context];
		if(lam != null && Object.prototype.hasOwnProperty.call(lam.kind,currName)) {
			currFunc = lam.docs[currName];
			break;
		}
		var kind = gml_GmlAPI.gmlKind[currName];
		if(kind != null) {
			if(kind.startsWith("asset.")) {
				kind = kind.substring(6);
				if(kind == "object") {
					currType = gml_type_GmlTypeDef.object(currName);
				} else if(kind == "script") {
					currFunc = gml_GmlAPI.gmlDoc[currName];
					currType = currFunc != null ? currFunc.getFunctionType() : null;
				} else {
					currType = gml_type_GmlTypeDef.simple(kind);
				}
				break;
			} else if(kind == "enum") {
				currType = gml_type_GmlTypeDef.type(currName);
			}
		}
		var step = imp != null ? -1 : 0;
		var result = null;
		while(++step < 2) {
			var ns = step > 0 ? gml_GmlAPI.gmlNamespaces[currName] : imp.namespaces[currName];
			if(ns == null) {
				continue;
			}
			if(ns.noTypeRef) {
				result = false;
			} else {
				currType = gml_type_GmlTypeDef.type(currName);
				currFunc = ((ns.docStaticMap[""]) || (((((gml_GmlAPI.gmlDoc[currName]) || (gml_GmlAPI.extDoc[currName]))) || (gml_GmlAPI.stdDoc[currName]))));
				result = true;
			}
			if(result) {
				break;
			}
		}
		if(result) {
			break;
		}
		if(kind != null) {
			currType = gml_GmlAPI.gmlTypes[currName];
			break;
		}
		if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.extKind,currName)) {
			currFunc = gml_GmlAPI.extDoc[currName];
			if(currType == null && currFunc != null) {
				currType = currFunc.getFunctionType();
			}
			break;
		}
		if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.stdKind,currName)) {
			currFunc = gml_GmlAPI.stdDoc[currName];
			currType = gml_GmlAPI.stdTypes[currName];
			if(currType == null && currFunc != null) {
				currType = currFunc.getFunctionType();
			}
			break;
		}
		var t = linter.getSelfType();
		if(t != null) {
			switch(t._hx_index) {
			case 0:
				var _g = t.name;
				var wantWarn = false;
				var step1 = imp != null ? -1 : 0;
				var result1 = null;
				while(++step1 < 2) {
					var ns1 = step1 > 0 ? gml_GmlAPI.gmlNamespaces[_g] : imp.namespaces[_g];
					if(ns1 == null) {
						continue;
					}
					wantWarn = true;
					if(ns1.getInstKind(currName) != null) {
						currType = ns1.getInstType(currName);
						currFunc = ns1.getInstDoc(currName);
						result1 = true;
					} else {
						result1 = false;
					}
					if(result1) {
						break;
					}
				}
				if(!result1 && wantWarn && linter.prefs.requireFields) {
					linter.addWarning("Variable " + currName + " is not part of " + _g);
				}
				break;
			case 2:
				var fd = t.inf.fields[currName];
				if(fd != null) {
					currType = fd.type;
					currFunc = fd.doc;
				} else if(linter.prefs.requireFields) {
					linter.addWarning("Variable " + currName + " is not part of anonymous struct " + gml_type_GmlTypeTools.toString(t));
				}
				break;
			default:
			}
		}
		break;
	}
	parsers_linter_GmlLinterIdent.type = currType;
	parsers_linter_GmlLinterIdent.func = currFunc;
	parsers_linter_GmlLinterIdent.isLocal = isLocal;
};
var parsers_linter_GmlLinterImports = function() { };
$hxClasses["parsers.linter.GmlLinterImports"] = parsers_linter_GmlLinterImports;
parsers_linter_GmlLinterImports.__name__ = "parsers.linter.GmlLinterImports";
parsers_linter_GmlLinterImports.proc = function(self,q,dotStart,imp,nv) {
	var dotPos = -1;
	var dotFull;
	var origPos = q.pos;
	if(q.source.charCodeAt(q.pos) == 46 && tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + 1))) {
		dotPos = q.pos;
		q.pos += 1;
		q.skipIdent1();
		dotFull = q.source.substring(dotStart,q.pos);
	} else {
		dotFull = nv;
	}
	synext_GmlExtImport.errorText = "";
	var next = synext_GmlExtImport.post_procIdent(q,imp,dotStart,dotPos,dotFull);
	if(next != null) {
		q.pos = synext_GmlExtImport.post_procIdent_p1;
		q.pushSource(next);
		return false;
	}
	q.pos = origPos;
	return null;
};
var parsers_linter_GmlLinterInit = function() { };
$hxClasses["parsers.linter.GmlLinterInit"] = parsers_linter_GmlLinterInit;
parsers_linter_GmlLinterInit.__name__ = "parsers.linter.GmlLinterInit";
parsers_linter_GmlLinterInit.keywords = function(config) {
	var q = Object.create(null);
	q["var"] = 5;
	q["globalvar"] = 6;
	q["enum"] = 11;
	q["undefined"] = 3;
	q["not"] = 23;
	q["and"] = 20;
	q["or"] = 21;
	q["xor"] = 22;
	q["div"] = 28;
	q["mod"] = 29;
	q["begin"] = 40;
	q["end"] = 41;
	q["if"] = 64;
	q["then"] = 65;
	q["else"] = 66;
	q["return"] = 67;
	q["exit"] = 68;
	q["for"] = 80;
	q["while"] = 82;
	q["do"] = 81;
	q["until"] = 83;
	q["repeat"] = 84;
	q["with"] = 87;
	q["break"] = 85;
	q["continue"] = 86;
	q["switch"] = 69;
	q["case"] = 71;
	q["default"] = 70;
	q["try"] = 72;
	q["catch"] = 73;
	q["finally"] = 74;
	q["throw"] = 75;
	var kws = config.additionalKeywords;
	if(kws != null) {
		if(kws.indexOf("in") >= 0) {
			q["in"] = 96;
		}
		if(kws.indexOf("wait") >= 0) {
			q["wait"] = 97;
		}
		if(kws.indexOf("new") >= 0) {
			q["new"] = 78;
		}
		if(kws.indexOf("delete") >= 0) {
			q["delete"] = 79;
		}
		if(kws.indexOf("function") >= 0) {
			q["function"] = 76;
		}
		if(kws.indexOf("static") >= 0) {
			q["static"] = 77;
		}
	}
	return q;
};
var parsers_linter_GmlLinterKindSet = {};
parsers_linter_GmlLinterKindSet._new = function(set) {
	var this1 = new Array(98);
	var _g = 0;
	while(_g < set.length) this1[set[_g++]] = true;
	return this1;
};
var parsers_linter_GmlLinterKind = {};
parsers_linter_GmlLinterKind.getName = function(this1) {
	switch(this1) {
	case 0:
		return "KEOF";
	case 1:
		return "KString";
	case 2:
		return "KNumber";
	case 3:
		return "KUndefined";
	case 4:
		return "KIdent";
	case 5:
		return "KVar";
	case 6:
		return "KGlobalVar";
	case 7:
		return "KConst";
	case 8:
		return "KLet";
	case 9:
		return "KGhostVar";
	case 10:
		return "KMacro";
	case 11:
		return "KEnum";
	case 12:
		return "KSet";
	case 13:
		return "KSetOp";
	case 14:
		return "KEQ";
	case 15:
		return "KNE";
	case 16:
		return "KLT";
	case 17:
		return "KLE";
	case 18:
		return "KGT";
	case 19:
		return "KGE";
	case 20:
		return "KBoolAnd";
	case 21:
		return "KBoolOr";
	case 22:
		return "KBoolXor";
	case 23:
		return "KNot";
	case 24:
		return "KAdd";
	case 25:
		return "KSub";
	case 26:
		return "KMul";
	case 27:
		return "KDiv";
	case 28:
		return "KIntDiv";
	case 29:
		return "KMod";
	case 30:
		return "KAnd";
	case 31:
		return "KOr";
	case 32:
		return "KXor";
	case 33:
		return "KShl";
	case 34:
		return "KShr";
	case 35:
		return "KBitNot";
	case 36:
		return "KInc";
	case 37:
		return "KDec";
	case 38:
		return "KParOpen";
	case 39:
		return "KParClose";
	case 40:
		return "KCubOpen";
	case 41:
		return "KCubClose";
	case 42:
		return "KSqbOpen";
	case 43:
		return "KSqbClose";
	case 44:
		return "KCall";
	case 45:
		return "KField";
	case 46:
		return "KArray";
	case 47:
		return "KNullField";
	case 48:
		return "KNullArray";
	case 49:
		return "KSemico";
	case 50:
		return "KDot";
	case 51:
		return "KComma";
	case 52:
		return "KHash";
	case 53:
		return "KQMark";
	case 54:
		return "KColon";
	case 55:
		return "KAtSign";
	case 56:
		return "KDollar";
	case 57:
		return "KNullCoalesce";
	case 58:
		return "KNullDot";
	case 59:
		return "KNullSqb";
	case 60:
		return "KArrow";
	case 61:
		return "KArrowFunc";
	case 62:
		return "KCast";
	case 63:
		return "KAs";
	case 64:
		return "KIf";
	case 65:
		return "KThen";
	case 66:
		return "KElse";
	case 67:
		return "KReturn";
	case 68:
		return "KExit";
	case 69:
		return "KSwitch";
	case 70:
		return "KDefault";
	case 71:
		return "KCase";
	case 72:
		return "KTry";
	case 73:
		return "KCatch";
	case 74:
		return "KFinally";
	case 75:
		return "KThrow";
	case 76:
		return "KFunction";
	case 77:
		return "KStatic";
	case 78:
		return "KNew";
	case 79:
		return "KDelete";
	case 80:
		return "KFor";
	case 81:
		return "KDo";
	case 82:
		return "KWhile";
	case 83:
		return "KUntil";
	case 84:
		return "KRepeat";
	case 85:
		return "KBreak";
	case 86:
		return "KContinue";
	case 87:
		return "KWith";
	case 88:
		return "KMFuncDecl";
	case 89:
		return "KArgs";
	case 90:
		return "KLambda";
	case 91:
		return "KLamDef";
	case 92:
		return "KImport";
	case 93:
		return "KYield";
	case 94:
		return "KLabel";
	case 95:
		return "KGoto";
	case 96:
		return "KLiveIn";
	case 97:
		return "KLiveWait";
	case 98:
		return "KMaxKind";
	default:
		return "unknown[" + this1 + "]";
	}
};
parsers_linter_GmlLinterKind.getMaxBinPriority = function() {
	return 7;
};
var parsers_linter_GmlLinterLocalNullSafetyItems = {};
parsers_linter_GmlLinterLocalNullSafetyItems.mergeItems = function(this1,items) {
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var nsi2 = _g1[_g];
		++_g;
		var result = null;
		var _g2 = 0;
		while(_g2 < this1.length) {
			var v = this1[_g2];
			++_g2;
			if(v.name == nsi2.name) {
				result = v;
				break;
			}
		}
		var nsi = result;
		if(nsi != null) {
			if(nsi.status != null && nsi.status != nsi2.status) {
				nsi.status = null;
			}
		} else {
			this1.push(nsi2);
		}
	}
};
parsers_linter_GmlLinterLocalNullSafetyItems.prepatch = function(this1,linter) {
	var imp = linter.getImports();
	if(imp == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var item = this1[_g];
		++_g;
		if(item.status == null) {
			continue;
		}
		var t = imp.localTypes[item.name];
		if(gml_type_GmlTypeTools.getKind(t) == 3) {
			item.hasType = true;
			item.type = t;
			imp.localTypes[item.name] = item.status ? gml_type_GmlTypeTools.unwrapParam(t) : gml_type_GmlTypeDef.undefined;
		}
	}
};
parsers_linter_GmlLinterLocalNullSafetyItems.elsepatch = function(this1,linter) {
	var imp = linter.getImports();
	if(imp == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var item = this1[_g];
		++_g;
		if(item.hasType) {
			if(item.status) {
				imp.localTypes[item.name] = gml_type_GmlTypeDef.undefined;
			} else {
				imp.localTypes[item.name] = gml_type_GmlTypeTools.unwrapParam(item.type);
			}
		}
	}
};
parsers_linter_GmlLinterLocalNullSafetyItems.postpatch = function(this1,linter) {
	var imp = linter.getImports();
	if(imp == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var item = this1[_g];
		++_g;
		if(item.hasType) {
			imp.localTypes[item.name] = item.type;
			item.hasType = false;
			item.type = null;
		}
	}
};
var parsers_linter_GmlLinterLocalNullSafetyItem = function(name,status) {
	this.name = name;
	this.status = status;
	this.hasType = false;
	this.type = null;
};
$hxClasses["parsers.linter.GmlLinterLocalNullSafetyItem"] = parsers_linter_GmlLinterLocalNullSafetyItem;
parsers_linter_GmlLinterLocalNullSafetyItem.__name__ = "parsers.linter.GmlLinterLocalNullSafetyItem";
parsers_linter_GmlLinterLocalNullSafetyItem.prototype = {
	__class__: parsers_linter_GmlLinterLocalNullSafetyItem
};
var parsers_linter_GmlLinterMFunc = function() { };
$hxClasses["parsers.linter.GmlLinterMFunc"] = parsers_linter_GmlLinterMFunc;
parsers_linter_GmlLinterMFunc.__name__ = "parsers.linter.GmlLinterMFunc";
parsers_linter_GmlLinterMFunc.read = function(self,q,mfName) {
	var mf = gml_GmlAPI.gmlMFuncs[mfName];
	q.skipSpaces0();
	if(q.source.charCodeAt(q.pos++) != 40) {
		return self.readExpect("a `(` after an #mfunc " + mfName);
	}
	self.seqStart.setTo(q);
	var mcArgStart = [];
	var mcArgTill = [];
	var mcArgString = [];
	var mcArgRow = [];
	var mcArgRowStart = [];
	var mcArgSource = q.source;
	var mcArgContext = q.name;
	q.skipSpaces0();
	if(q.source.charCodeAt(q.pos) == 41) {
		q.pos += 1;
	} else {
		var mcArgDone = false;
		var argPos = q.pos;
		var depth = 1;
		_hx_loop1: while(q.pos < q.length) {
			var p = q.pos;
			switch(q.source.charCodeAt(q.pos++)) {
			case 44:
				if(depth == 1) {
					mcArgStart.push(argPos);
					mcArgTill.push(p);
					mcArgString.push(null);
					mcArgRow.push(q.row);
					mcArgRowStart.push(q.rowStart);
					argPos = q.pos;
				}
				break;
			case 40:case 91:case 123:
				++depth;
				break;
			case 41:case 93:case 125:
				if(--depth <= 0) {
					mcArgStart.push(argPos);
					mcArgTill.push(p);
					mcArgString.push(null);
					mcArgRow.push(q.row);
					mcArgRowStart.push(q.rowStart);
					mcArgDone = true;
					break _hx_loop1;
				}
				break;
			}
		}
		if(!mcArgDone) {
			return self.readSeqStartError("Unclosed () after an #mfunc " + mfName);
		}
	}
	var mcArgc = mcArgStart.length;
	var mfArgc = mf.args.length;
	if(mcArgc > mfArgc) {
		if(mf.hasRest) {
			mcArgTill[mfArgc - 1] = mcArgTill.pop();
			mcArgStart.length = mfArgc;
			mcArgTill.length = mfArgc;
			mcArgRow.length = mfArgc;
			mcArgRowStart.length = mfArgc;
			mcArgString.length = mfArgc;
		} else {
			return self.readError("Too many arguments (" + mcArgc + "/" + mfArgc + ") for #mfunc " + mfName);
		}
	} else if(mcArgc < mfArgc) {
		return self.readError("Too few arguments (" + mcArgc + "/" + mfArgc + ") for #mfunc " + mfName);
	}
	var order = mf.order;
	var i = order.length;
	var mfPre = mfName + "_mf";
	while(--i >= 0) {
		var mfPre_i = mfPre + (i + 1);
		q.pushSource(mfPre_i,mfPre_i);
		q.showOnStack = false;
		var ord = order[i];
		var ai;
		if(typeof(ord) == "number") {
			ai = ord;
			q.pushSourceExt(mcArgSource,mcArgStart[ai],mcArgTill[ai],mcArgRow[ai],mcArgRowStart[ai],mcArgContext);
		} else {
			switch(ord[0]) {
			case 0:
				break;
			case 1:
				q.pushSource("\"`magic`\"",mcArgContext);
				break;
			case 2:
				q.pushSource(synext_GmlExtMFunc.magicMap[ord[1]](self.editor,q),"magic[" + Std.string(ord[1]) + "] in " + mfName + " in " + mcArgContext);
				break;
			case 3:case 4:case 5:
				ai = ord[1];
				var av = mcArgString[ai];
				if(av == null) {
					av = mcArgSource.substring(mcArgStart[ai],mcArgTill[ai]);
					mcArgString[ai] = av;
				}
				switch(ord[0]) {
				case 3:
					av = tools_NativeString.insertAtPadLeft(av,ord[2]);
					break;
				case 4:
					av = tools_NativeString.insertAtPadRight(av,ord[2]);
					break;
				case 5:
					av = tools_NativeString.insertAtPadBoth(av,ord[2],ord[3]);
					break;
				default:
				}
				q.pushSourceExt(av,0,av.length,mcArgRow[ai],mcArgRowStart[ai] - mcArgStart[ai],"Concat in " + mfName + " in " + mcArgContext);
				break;
			}
		}
		q.showOnStack = false;
	}
	q.pushSource(mfPre + "0",mfPre + "0");
	q.showOnStack = false;
	return false;
};
var parsers_linter_GmlLinterParser = function() { };
$hxClasses["parsers.linter.GmlLinterParser"] = parsers_linter_GmlLinterParser;
parsers_linter_GmlLinterParser.__name__ = "parsers.linter.GmlLinterParser";
parsers_linter_GmlLinterParser.next = function(l,q) {
	var nv;
	var _src;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 10:
			q.markLine();
			break;
		case 33:
			if(q.source.charCodeAt(q.pos) == 61) {
				q.pos += 1;
				return l.__next_retv(15,"!=");
			} else {
				return l.__next_retv(23,"!");
			}
			break;
		case 35:
			c = q.source.charCodeAt(q.pos);
			if(tools_CharCode.isHex(c)) {
				var i = 0;
				var ci;
				while(++i < 6) {
					var offset = i;
					if(offset == null) {
						offset = 0;
					}
					ci = q.source.charCodeAt(q.pos + offset);
					if(!tools_CharCode.isHex(ci)) {
						break;
					}
				}
				if(i >= 6) {
					var offset1 = i;
					if(offset1 == null) {
						offset1 = 0;
					}
					ci = q.source.charCodeAt(q.pos + offset1);
					if(!tools_CharCode.isHex(ci)) {
						q.pos += 6;
						return l.__next_retv(2,q.source.substr(p,7));
					}
				}
			}
			if(c == 34 && l.isProperties) {
				q.pos += 1;
				q.skipString2();
				return l.__next_retv(1,q.source.substr(p,q.pos));
			} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				++p;
				q.skipIdent1();
				nv = q.source.substring(p,q.pos);
				switch(nv) {
				case "action":case "define":case "event":case "moment":case "target":
					if(p - 2 <= 0 || q.source.charCodeAt(p - 2) == 10) {
						q.pos = p;
						if(nv != "action") {
							l.set_context(q.readContextName(null));
							l.localNamesPerDepth = [];
							l.localKinds = Object.create(null);
							l.isProperties = nv == "event" && l.context == "properties";
						}
						q.skipLine();
					} else {
						q.pos = p;
						return l.__next_retv(52,"#");
					}
					break;
				case "args":
					return l.__next_retv(89,"#args");
				case "gmcr":
					if(l.keywords["yield"] == null) {
						l.keywords["yield"] = 93;
						l.keywords["label"] = 94;
						l.keywords["goto"] = 95;
					}
					break;
				case "hyper":case "import":
					q.skipLine();
					break;
				case "lambda":
					return l.__next_retv(90,"#lambda");
				case "lamdef":
					return l.__next_retv(91,"#lamdef");
				case "macro":case "mfunc":
					_src = q.source;
					while(q.pos < q.length) {
						q.skipLine();
						var offset2 = -1;
						if(offset2 == null) {
							offset2 = 0;
						}
						if(q.source.charCodeAt(q.pos + offset2) != 92) {
							break;
						}
						q.skipLineEnd();
						q.markLine();
					}
					return l.__next_ret(nv == "macro" ? 10 : 88,_src,p,q.pos);
				case "pragma":
					if(l.version.config.hasPragma) {
						q.skipLine();
					} else {
						q.pos = p;
						return l.__next_retv(52,"#");
					}
					break;
				case "endregion":case "region":case "section":
					q.skipLine();
					break;
				default:
					q.pos = p;
					return l.__next_retv(52,"#");
				}
			} else {
				return l.__next_retv(52,"#");
			}
			break;
		case 36:
			var version = l.version;
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				_src = q.source;
				var num = 1;
				if(num == null) {
					num = 1;
				}
				q.pos += num;
				var rows = q.skipStringTemplate(l.version,true);
				if(rows > 0) {
					q.row += rows;
					q.rowStart = q.source.lastIndexOf("\n",q.pos) + 1;
				}
				return l.__next_ret(1,_src,p,q.pos);
			}
			var offset3 = -2;
			if(offset3 == null) {
				offset3 = 0;
			}
			if(q.source.charCodeAt(q.pos + offset3) == 91) {
				return l.__next_retv(56,"$");
			}
			_src = q.source;
			if(tools_CharCode.isHex(q.source.charCodeAt(q.pos))) {
				q.skipHex();
				return l.__next_ret(2,_src,p,q.pos);
			} else {
				return l.__next_retv(56,"$");
			}
			break;
		case 37:
			if(q.source.charCodeAt(q.pos) == 61) {
				q.pos += 1;
				return l.__next_retv(13,"%=");
			} else {
				return l.__next_retv(29,"%");
			}
			break;
		case 38:
			switch(q.source.charCodeAt(q.pos)) {
			case 38:
				q.pos += 1;
				return l.__next_retv(20,"&&");
			case 61:
				q.pos += 1;
				return l.__next_retv(13,"&=");
			default:
				return l.__next_retv(30,"&");
			}
			break;
		case 40:
			return l.__next_retv(38,"(");
		case 41:
			return l.__next_retv(39,")");
		case 42:
			if(q.source.charCodeAt(q.pos) == 61) {
				q.pos += 1;
				return l.__next_retv(13,"*=");
			} else {
				return l.__next_retv(26,"*");
			}
			break;
		case 43:
			switch(q.source.charCodeAt(q.pos)) {
			case 43:
				q.pos += 1;
				return l.__next_retv(36,"++");
			case 61:
				q.pos += 1;
				return l.__next_retv(13,"+=");
			default:
				return l.__next_retv(24,"+");
			}
			break;
		case 44:
			return l.__next_retv(51,",");
		case 45:
			switch(q.source.charCodeAt(q.pos)) {
			case 45:
				q.pos += 1;
				return l.__next_retv(37,"--");
			case 61:
				q.pos += 1;
				return l.__next_retv(13,"-=");
			case 62:
				q.pos += 1;
				return l.__next_retv(60,"->");
			default:
				return l.__next_retv(25,"-");
			}
			break;
		case 46:
			c = q.source.charCodeAt(q.pos);
			if(c >= 48 && c <= 57) {
				_src = q.source;
				q.skipNumber(false);
				return l.__next_ret(2,_src,p,q.pos);
			} else {
				return l.__next_retv(50,".");
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.pos += 1;
				if(q.source.charCodeAt(q.pos) == 47) {
					q.pos += 1;
					q.skipSpaces0_local();
					var tmp;
					if(q.source.substr(q.pos,5) == "@lint") {
						var offset4 = 5;
						if(offset4 == null) {
							offset4 = 0;
						}
						var this1 = q.source.charCodeAt(q.pos + offset4);
						tmp = this1 == 32 || this1 == 9;
					} else {
						tmp = false;
					}
					if(tmp) {
						var num1 = 5;
						if(num1 == null) {
							num1 = 1;
						}
						q.pos += num1;
						q.skipSpaces0_local();
						var prop = q.readIdent();
						q.skipSpaces0_local();
						var val;
						switch(q.readIdent()) {
						case "false":
							val = false;
							break;
						case "true":
							val = true;
							break;
						default:
							val = null;
						}
						var f = parsers_linter_misc_GmlLinterJSDocFlag.map[prop];
						if(f != null) {
							f(l,val);
						}
					}
				}
				q.skipLine();
				break;
			default:
				if(q.source.charCodeAt(q.pos) == 61) {
					q.pos += 1;
					return l.__next_retv(13,"/=");
				} else {
					return l.__next_retv(27,"/");
				}
			}
			break;
		case 58:
			if(q.source.charCodeAt(q.pos) == 61) {
				q.pos += 1;
				return l.__next_retv(12,":=");
			} else {
				return l.__next_retv(54,":");
			}
			break;
		case 59:
			return l.__next_retv(49,";");
		case 60:
			switch(q.source.charCodeAt(q.pos)) {
			case 60:
				q.pos += 1;
				return l.__next_retv(33,"<<");
			case 61:
				q.pos += 1;
				return l.__next_retv(17,"<=");
			case 62:
				q.pos += 1;
				return l.__next_retv(15,"<>");
			default:
				return l.__next_retv(16,"<");
			}
			break;
		case 61:
			switch(q.source.charCodeAt(q.pos)) {
			case 61:
				q.pos += 1;
				return l.__next_retv(14,"==");
			case 62:
				q.pos += 1;
				return l.__next_retv(61,"=>");
			default:
				return l.__next_retv(12,"=");
			}
			break;
		case 62:
			switch(q.source.charCodeAt(q.pos)) {
			case 61:
				q.pos += 1;
				return l.__next_retv(19,">=");
			case 62:
				q.pos += 1;
				return l.__next_retv(34,">>");
			default:
				return l.__next_retv(18,">");
			}
			break;
		case 63:
			switch(q.source.charCodeAt(q.pos)) {
			case 46:
				var offset5 = 1;
				if(offset5 == null) {
					offset5 = 0;
				}
				c = q.source.charCodeAt(q.pos + offset5);
				if(!(c >= 48 && c <= 57)) {
					q.pos += 1;
					return l.__next_retv(58,"?.");
				} else {
					return l.__next_retv(53,"?");
				}
				break;
			case 63:
				var offset6 = 1;
				if(offset6 == null) {
					offset6 = 0;
				}
				if(q.source.charCodeAt(q.pos + offset6) == 61) {
					var num2 = 2;
					if(num2 == null) {
						num2 = 1;
					}
					q.pos += num2;
					return l.__next_retv(12,"??=");
				} else {
					var num3 = 1;
					if(num3 == null) {
						num3 = 1;
					}
					q.pos += num3;
					return l.__next_retv(57,"??");
				}
				break;
			case 91:
				q.pos += 1;
				return l.__next_retv(59,"?[");
			default:
				return l.__next_retv(53,"?");
			}
			break;
		case 64:
			if(l.version.hasLiteralStrings()) {
				c = q.source.charCodeAt(q.pos);
				if(c == 34 || c == 39) {
					_src = q.source;
					q.pos += 1;
					q.skipString1(c);
					return l.__next_ret(1,_src,p,q.pos);
				}
			}
			return l.__next_retv(55,"@");
		case 91:
			return l.__next_retv(42,"[");
		case 93:
			return l.__next_retv(43,"]");
		case 94:
			switch(q.source.charCodeAt(q.pos)) {
			case 61:
				q.pos += 1;
				return l.__next_retv(13,"^=");
			case 94:
				q.pos += 1;
				return l.__next_retv(22,"^^");
			default:
				return l.__next_retv(32,"^");
			}
			break;
		case 34:case 39:case 96:
			_src = q.source;
			var rows1 = q.skipStringAuto(c,l.version);
			if(rows1 > 0) {
				q.row += rows1;
				q.rowStart = q.source.lastIndexOf("\n",q.pos) + 1;
			}
			return l.__next_ret(1,_src,p,q.pos);
		case 123:
			return l.__next_retv(40,"{");
		case 124:
			switch(q.source.charCodeAt(q.pos)) {
			case 61:
				q.pos += 1;
				return l.__next_retv(13,"|=");
			case 124:
				q.pos += 1;
				return l.__next_retv(21,"||");
			default:
				return l.__next_retv(31,"|");
			}
			break;
		case 125:
			return l.__next_retv(41,"}");
		case 126:
			return l.__next_retv(35,"~");
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				nv = q.source.substring(p,q.pos);
				while(true) {
					if(nv != "var") {
						var imp = l.editor.imports[l.context];
						if(imp != null) {
							var ir = parsers_linter_GmlLinterImports.proc(l,q,p,imp,nv);
							if(ir) {
								return 0;
							}
							if(ir != null) {
								return parsers_linter_GmlLinterParser.next(l,q);
							}
						}
					}
					if(gml_GmlAPI.gmlMFuncs[nv] != null) {
						if(parsers_linter_GmlLinterMFunc.read(l,q,nv)) {
							return 0;
						}
						break;
					}
					var mcr = gml_GmlAPI.gmlMacros[nv];
					if(mcr != null) {
						if(q.oldSource.length > 128) {
							l.setError("Macro stack overflow");
							return 0;
						}
						if(mcr.expr == "var") {
							switch(mcr.name) {
							case "const":
								return l.__next_retv(7,nv);
							case "let":
								return l.__next_retv(8,nv);
							}
						}
						var expr = l.macroCache[nv];
						if(expr == null) {
							var imp1 = synext_GmlExtImport.inst;
							var _on = imp1.enabled;
							imp1.enabled = false;
							expr = synext_SyntaxExtension.preprocArray(l.editor,mcr.expr,file_kind_KGml.syntaxExtensions);
							imp1.enabled = _on;
							l.macroCache[nv] = expr;
						}
						q.pushSource(expr,mcr.name);
						break;
					}
					switch(nv) {
					case "as":
						if(ui_Preferences.current.castOperators) {
							return l.__next_retv(63,nv);
						}
						break;
					case "cast":
						if(ui_Preferences.current.castOperators) {
							return l.__next_retv(62,nv);
						}
						break;
					}
					return l.__next_retv(tools_Dictionary.defget(l.keywords,nv,4),nv);
				}
			} else if(c >= 48 && c <= 57) {
				_src = q.source;
				if(c == 48 && q.source.charCodeAt(q.pos) == 120) {
					q.pos += 1;
					q.skipHex();
				} else if(c == 48 && q.source.charCodeAt(q.pos) == 98) {
					q.pos += 1;
					q.skipBinary();
				} else {
					q.skipNumber();
				}
				return l.__next_ret(2,_src,p,q.pos);
			} else if(c > 32) {
				l.setError("Can't parse `" + String.fromCodePoint(c) + "`");
				return 0;
			}
		}
	}
	_src = q.source;
	return l.__next_retv(0,"");
};
var parsers_linter_GmlLinterPrefs = {};
var parsers_linter_misc_GmlLinterBufferAutoType = function() { };
$hxClasses["parsers.linter.misc.GmlLinterBufferAutoType"] = parsers_linter_misc_GmlLinterBufferAutoType;
parsers_linter_misc_GmlLinterBufferAutoType.__name__ = "parsers.linter.misc.GmlLinterBufferAutoType";
var parsers_linter_misc_GmlLinterJSDocFlag = function() { };
$hxClasses["parsers.linter.misc.GmlLinterJSDocFlag"] = parsers_linter_misc_GmlLinterJSDocFlag;
parsers_linter_misc_GmlLinterJSDocFlag.__name__ = "parsers.linter.misc.GmlLinterJSDocFlag";
parsers_linter_misc_GmlLinterJSDocFlag.init = function() {
	var map = Object.create(null);
	var add = function(key,fn,desc) {
		map[key] = fn;
		parsers_linter_misc_GmlLinterJSDocFlag.comp.push({ name : key, value : key, score : 0, meta : "variable", doc : desc});
	};
	add("all",function(l,val) {
		l.prefs.suppressAll = val == null ? false : !val;
	},"Suppresses all non-syntax-error flags if disabled");
	add("nullToAny",function(l,val) {
		gml_type_GmlTypeCanCastTo.allowNullToAny = val;
	},"Allows casting `undefined` to anything");
	return map;
};
var parsers_seeker_GmlSeekerImpl = function(fullPath,code,main,out,locals,kind) {
	this.__objectName = null;
	this.commentLineJumps = Object.create(null);
	this.jsDoc = new parsers_seeker_GmlSeekerJSDoc();
	this.subLocalDepth = null;
	this.withStartsAtCurlyDepth = -1;
	this.curlyDepth = 0;
	this.start = 0;
	this.docIsAutoFunc = false;
	this.doc = null;
	this.sub = null;
	this.src = code;
	this.orig = fullPath;
	this.main = main;
	this.out = out;
	this.locals = locals;
	this.kind = kind;
	this.mainTop = main;
	this.project = gml_Project.current;
	this.version = this.project.version;
	this.reader = new parsers_GmlReaderExt(code,this.version);
	this.swapReader = new parsers_GmlReaderExt(code,this.version);
	this.notLam = !((kind) instanceof file_kind_gml_KGmlLambdas);
	var tmp;
	if(!this.notLam) {
		var _this = this.project;
		tmp = !_this.isGMS23 && ui_Preferences.current.lambdaMagic && (_this.lambdaGml != null || _this.properties.lambdaMode == 2);
	} else {
		tmp = false;
	}
	this.canLam = tmp;
	this.canDefineComp = ((kind) instanceof file_kind_KGml) && kind.canDefineComp;
	this.funcsAreGlobal = ((kind) instanceof file_kind_gml_KGmlScript) && kind.isScript;
	this.isObject = ((kind) instanceof file_kind_gml_KGmlEvents);
	this.isCreateEvent = this.isObject && (locals.name == "create" || /\/\/\/\s*@init\b/.test(this.src));
	var additionalKeywordsMap = this.version.config.additionalKeywordsMap;
	this.hasFunctionLiterals = Object.prototype.hasOwnProperty.call(additionalKeywordsMap,"function");
	this.hasTryCatch = Object.prototype.hasOwnProperty.call(additionalKeywordsMap,"catch");
	this.specTypeInst = parsers_linter_GmlLinter.getOption(function(p) {
		return p.specTypeInst;
	});
	this.specTypeInstSubTopLevel = parsers_linter_GmlLinter.getOption(function(p) {
		return p.specTypeInstSubTopLevel;
	});
	this.strictStaticJSDoc = parsers_linter_GmlLinter.getOption(function(p) {
		return p.strictStaticJSDoc;
	});
	this.localKind = this.notLam ? "local" : "sublocal";
	if(this.project.properties.lambdaMode == 2) {
		if(this.orig.includes("/" + "__lf_")) {
			this.canLam = true;
			this.localKind = "sublocal";
		}
	}
	this.privateFieldRegex = parsers_seeker_GmlSeekerImpl.privateFieldRC.update(this.project.properties.privateFieldRegex);
	this.privateGlobalRegex = parsers_seeker_GmlSeekerImpl.privateGlobalRC.update(this.project.properties.privateGlobalRegex);
};
$hxClasses["parsers.seeker.GmlSeekerImpl"] = parsers_seeker_GmlSeekerImpl;
parsers_seeker_GmlSeekerImpl.__name__ = "parsers.seeker.GmlSeekerImpl";
parsers_seeker_GmlSeekerImpl.prototype = {
	saveReader: function() {
		if(this.swapReader == null) {
			this.swapReader = new parsers_GmlReaderExt(this.src);
		}
		this.swapReader.setTo(this.reader);
	}
	,getObjectName: function() {
		if(this.__objectName == null) {
			var p = new haxe_io_Path(this.orig);
			p.dir = null;
			if(p.ext.toLowerCase() == "gmx") {
				this.__objectName = haxe_io_Path.withoutExtension(p.file);
			} else {
				this.__objectName = p.file;
			}
		}
		return this.__objectName;
	}
	,setLookup: function(s,eol,meta) {
		var row = this.reader.row;
		if(!Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlLookup,s)) {
			if(s != this.mainTop) {
				gml_GmlAPI.gmlLookupItems.push({ value : s, meta : meta});
			}
		}
		var lookup = { path : this.orig, sub : this.sub, row : row, col : eol ? null : 0};
		if(this.project.isGMS23 && s == this.mainTop) {
			lookup.sub = null;
			lookup.row = 0;
		}
		gml_GmlAPI.gmlLookup[s] = lookup;
	}
	,linkDoc: function() {
		if(this.doc != null) {
			this.out.docs.set(this.main,this.doc);
		}
	}
	,doLoop: function(exitAtCubDepth) {
		var q = this.reader;
		while(q.get_loop()) {
			var flags = 15;
			if(exitAtCubDepth != null || this.funcsAreGlobal || this.withStartsAtCurlyDepth >= 0) {
				flags = 79;
			}
			var s = parsers_seeker_GmlSeekerParser.find(this,flags);
			if(s == null) {
				continue;
			}
			if(s.charCodeAt(0) == 47) {
				this.jsDoc.proc(this,s);
				continue;
			}
			switch(s) {
			case "#macro":
				parsers_seeker_GmlSeekerProcMacro.proc(this);
				break;
			case "catch":
				if(this.hasTryCatch) {
					var name = parsers_seeker_GmlSeekerParser.find(this,1);
					this.locals.add(name,this.localKind,"try-catch");
				} else {
					parsers_seeker_GmlSeekerProcIdent.proc(this,s);
				}
				break;
			case "enum":
				parsers_seeker_GmlSeekerProcEnum.proc(this);
				break;
			case "#define":case "#target":case "function":
				parsers_seeker_GmlSeekerProcDefine.proc(this,s);
				break;
			case "global":
				if(parsers_seeker_GmlSeekerParser.find(this,257) == ".") {
					s = parsers_seeker_GmlSeekerParser.find(this,1);
					if(s != null && !Object.prototype.hasOwnProperty.call(this.out.globalFields.map,s)) {
						var gfd = gml_GmlAPI.gmlGlobalFieldMap[s];
						var hide = this.privateGlobalRegex != null && this.privateGlobalRegex.test(s);
						if(gfd == null) {
							gfd = new gml_GmlGlobalField(s);
							gfd.hidden = hide;
							gml_GmlAPI.gmlGlobalFieldMap[s] = gfd;
						}
						this.out.globalFields.set(s,gfd);
						if(!hide) {
							this.out.globalFieldComp.push(gfd.comp);
						}
					}
				}
				break;
			case "globalvar":
				while(q.get_loop()) {
					this.saveReader();
					q.skipSpaces1();
					if(!tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos))) {
						break;
					}
					var name1 = q.readIdent();
					if(Object.prototype.hasOwnProperty.call(gml_GmlAPI.kwFlow,name1)) {
						this.reader.setTo(this.swapReader);
						break;
					}
					var g = new gml_GmlGlobalVar(name1,this.orig);
					this.out.globalVars.set(name1,g);
					if(this.privateGlobalRegex == null || !this.privateGlobalRegex.test(name1)) {
						this.out.comps.set(name1,g.comp);
					}
					this.out.kindList.push(name1);
					this.out.kindMap[name1] = "globalvar";
					this.setLookup(name1,false,"globalvar");
					this.saveReader();
					q.skipSpaces1();
					if(q.source.charCodeAt(q.pos) == 47 && q.source.charCodeAt(q.pos + 1) == 42 && q.source.charCodeAt(q.pos + 2) == 58) {
						var typeStart = q.pos += 3;
						q.skipComment();
						var type = gml_type_GmlTypeParser.parse(q.source.substring(typeStart,q.pos - 2),"globalvar");
						this.out.globalVarTypes.set(name1,type);
						this.saveReader();
						q.skipSpaces1();
					}
					if(q.source.charCodeAt(q.pos) != 44) {
						this.reader.setTo(this.swapReader);
						break;
					} else {
						q.pos += 1;
					}
				}
				break;
			case "static":case "var":
				parsers_seeker_GmlSeekerProcVar.proc(this,s);
				break;
			case "with":
				parsers_seeker_GmlSeekerProcWith.proc(this);
				break;
			case "}":
				if(this.curlyDepth <= 0 && this.funcsAreGlobal && this.docIsAutoFunc) {
					parsers_seeker_GmlSeekerProcDoc.flush(this);
					this.main = null;
				}
				if(this.withStartsAtCurlyDepth >= 0 && this.curlyDepth < this.withStartsAtCurlyDepth) {
					this.withStartsAtCurlyDepth = -1;
				}
				if(exitAtCubDepth != null && this.curlyDepth <= exitAtCubDepth) {
					return;
				}
				break;
			default:
				parsers_seeker_GmlSeekerProcIdent.proc(this,s);
			}
		}
	}
	,run: function() {
		if(this.main != null) {
			this.setLookup(this.main,false,null);
		}
		this.mainComp = this.main != null ? gml_GmlAPI.gmlAssetComp[this.main] : null;
		this.doLoop();
		parsers_seeker_GmlSeekerProcDoc.flush(this);
		if(this.project.hasGMLive) {
			var tmp = this.out.hasGMLive || ui_ext_GMLive.check(this.src);
			this.out.hasGMLive = tmp;
		}
	}
	,__class__: parsers_seeker_GmlSeekerImpl
};
var parsers_seeker_GmlSeekerJSDoc = function() {
	this.redirectCount = 0;
	this.isStatic = false;
	this.templateItems = null;
	this.implementsNames = null;
	this.interfaceName = null;
	this.isInterface = false;
	this.returns = null;
	this.self = null;
	this.rest = false;
	this.types = null;
	this.args = null;
};
$hxClasses["parsers.seeker.GmlSeekerJSDoc"] = parsers_seeker_GmlSeekerJSDoc;
parsers_seeker_GmlSeekerJSDoc.__name__ = "parsers.seeker.GmlSeekerJSDoc";
parsers_seeker_GmlSeekerJSDoc.prototype = {
	reset: function(resetInterf) {
		if(resetInterf == null) {
			resetInterf = true;
		}
		this.args = null;
		this.types = null;
		this.rest = null;
		this.self = null;
		this.returns = null;
		if(resetInterf) {
			this.isInterface = false;
			this.interfaceName = null;
			this.implementsNames = null;
			this.templateItems = null;
		}
	}
	,typesFlush: function(pre,ctx) {
		var tpl = pre != null && this.templateItems != null ? pre.concat(this.templateItems) : ((pre) || (this.templateItems));
		var rt = [];
		if(tpl != null) {
			var _g = 0;
			var _g1 = this.types;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				s = gml_type_GmlTypeTools.patchTemplateItems(s,tpl);
				rt.push(gml_type_GmlTypeParser.parse(s,ctx));
			}
		} else {
			var _g = 0;
			var _g1 = this.types;
			while(_g < _g1.length) rt.push(gml_type_GmlTypeParser.parse(_g1[_g++],ctx));
		}
		return rt;
	}
	,proc: function(seeker,s) {
		var out = seeker.out;
		var q = seeker.reader;
		var mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_implements.exec(s);
		if(mt != null) {
			var nsi = mt[1];
			if(nsi == null) {
				var lineMatch = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_implements_line.exec(q.source.substring(q.source.lastIndexOf("\n",q.pos - 1) + 1,q.pos));
				if(lineMatch == null) {
					return;
				}
				nsi = lineMatch[1];
			}
			if(this.implementsNames == null) {
				this.implementsNames = [];
			}
			this.implementsNames.push(nsi);
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_is.exec(s);
		if(mt != null) {
			var typeStr = mt[1];
			var doc = mt[2];
			var lineMatch = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_is_line.exec(q.source.substring(q.source.lastIndexOf("\n",q.pos - 1) + 1,q.pos));
			if(lineMatch == null) {
				return;
			}
			var name;
			var type = gml_type_GmlTypeParser.parse(typeStr,mt[0]);
			if(lineMatch[1] != null) {
				var rx = /\w+/g;
				var s1 = lineMatch[1];
				var till = -1;
				till = s1.length;
				rx.lastIndex = 0;
				var mt1 = rx.exec(s1);
				while(mt1 != null && mt1.index < till) {
					name = mt1[0];
					out.globalVarTypes.set(name,type);
					var comp = out.comps.map[name];
					if(comp != null) {
						ace_extern_AceAutoCompleteItem.setDocTag(comp,"type",typeStr);
						if(doc != null && doc.trim() != "") {
							ace_extern_AceAutoCompleteItem.setDocTag(comp,"ℹ",doc);
						}
					}
					mt1 = rx.exec(s1);
				}
			} else if(lineMatch[2] != null) {
				name = lineMatch[2];
				out.globalTypes.set(name,type);
				var globalField = out.globalFields.map[name];
				if(globalField != null) {
					var comp = globalField.comp;
					if(comp != null) {
						ace_extern_AceAutoCompleteItem.setDocTag(comp,"type",typeStr);
						if(doc != null && doc.trim() != "") {
							ace_extern_AceAutoCompleteItem.setDocTag(comp,"ℹ",doc);
						}
					}
				}
			} else {
				name = lineMatch[3];
				var namespace;
				if(seeker.isCreateEvent) {
					namespace = seeker.getObjectName();
				} else if(seeker.doc != null) {
					namespace = seeker.doc.name;
					if(namespace == null) {
						return;
					}
				} else {
					return;
				}
				var hint = out.fieldHints.map[namespace + ":" + name];
				if(hint != null) {
					hint.type = type;
					var comp = hint.comp;
					if(comp != null) {
						ace_extern_AceAutoCompleteItem.setDocTag(comp,"type",typeStr);
						if(doc != null && doc.trim() != "") {
							ace_extern_AceAutoCompleteItem.setDocTag(comp,"ℹ",doc);
						}
					}
				}
			}
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_template.exec(s);
		if(mt != null) {
			var tc = mt[1];
			var names = mt[2];
			if(this.templateItems == null) {
				this.templateItems = [];
			}
			var _g = 0;
			var _g1 = names.split(",");
			while(_g < _g1.length) this.templateItems.push(new gml_type_GmlTypeTemplateItem(_g1[_g++],tc));
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_typedef.exec(s);
		if(mt != null) {
			var typeStr = mt[1];
			var name = mt[2];
			var paramsStr = mt[3];
			var params = paramsStr != null ? gml_type_GmlTypeTemplateItem.parseSplit(paramsStr) : null;
			if(params != null) {
				typeStr = gml_type_GmlTypeTools.patchTemplateItems(typeStr,params);
			}
			var type = gml_type_GmlTypeParser.parse(typeStr,null);
			out.typedefs.set(name,type);
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_hint_extimpl.exec(s);
		if(mt != null) {
			var name = mt[1];
			var target = mt[3];
			if(mt[2] == "implements") {
				var arr = out.namespaceImplements[name];
				if(arr == null) {
					arr = [];
					out.namespaceImplements[name] = arr;
				}
				if(arr.indexOf(target) < 0) {
					arr.push(target);
				}
			} else {
				var imp = out.namespaceHints.map[name];
				if(imp != null) {
					imp.parentSpace = target;
				} else {
					imp = new parsers_GmlSeekDataNamespaceHint(name,target,null);
					out.namespaceHints.set(name,imp);
				}
			}
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_hint.exec(s);
		if(mt != null) {
			var typeStr = mt[1];
			var isNew = mt[2] != null;
			var hr = new parsers_GmlReader(mt[3],seeker.version);
			var hp;
			hr.skipSpaces0_local();
			var templateSelf = null;
			var templateItems = null;
			var nsName = hr.readIdent();
			var ctrReturn = null;
			if(nsName != null) {
				if(isNew) {
					ctrReturn = nsName;
				}
				hr.skipSpaces0_local();
				if(hr.source.charCodeAt(hr.pos) == 60) {
					hp = hr.pos;
					if(hr.skipTypeParams()) {
						templateItems = gml_type_GmlTypeTemplateItem.parseSplit(hr.source.substring(hp + 1,hr.pos - 1));
						if(isNew) {
							ctrReturn += gml_type_GmlTypeTemplateItem.joinTemplateString(templateItems,false);
						}
						templateSelf = gml_type_GmlTypeTemplateItem.toTemplateSelf(templateItems);
						hr.skipSpaces0_local();
					} else {
						return;
					}
				}
			}
			if(nsName == null && seeker.doc != null && seeker.doc.templateItems != null) {
				templateSelf = gml_type_GmlTypeTemplateItem.toTemplateSelf(seeker.doc.templateItems);
				templateItems = seeker.doc.templateItems.slice();
			}
			if(templateItems != null && typeStr != null) {
				typeStr = gml_type_GmlTypeTools.patchTemplateItems(typeStr,templateItems);
			}
			var isInst = false;
			var fdName = null;
			var c = hr.source.charCodeAt(hr.pos);
			if(c == 46 || c == 58) {
				isInst = c == 58;
				if(!isInst) {
					templateSelf = null;
				}
				hr.pos += 1;
				hr.skipSpaces0_local();
				fdName = hr.readIdent();
				if(fdName != null) {
					hr.skipSpaces0_local();
					if(hr.source.charCodeAt(hr.pos) == 60) {
						hp = hr.pos;
						if(hr.skipTypeParams()) {
							templateItems = tools_NativeArray.nzcct(templateItems,gml_type_GmlTypeTemplateItem.parseSplit(hr.source.substring(hp + 1,hr.pos - 1)));
							hr.skipSpaces0_local();
						} else {
							return;
						}
					}
				}
			}
			var args = null;
			if(hr.source.charCodeAt(hr.pos) == 40) {
				hp = hr.pos;
				hr.pos += 1;
				var depth = 1;
				_hx_loop3: while(hr.pos < hr.length) {
					c = hr.source.charCodeAt(hr.pos++);
					switch(c) {
					case 40:
						++depth;
						break;
					case 41:
						if(--depth <= 0) {
							break _hx_loop3;
						}
						break;
					}
				}
				if(depth > 0) {
					return;
				}
				if(hr.source.substr(hr.pos,2) == "->") {
					hr.pos += 2;
					gml_type_GmlTypeParser.skipTypeName(hr,null);
				}
				args = hr.source.substring(hp,hr.pos);
				if(templateItems != null) {
					args = gml_type_GmlTypeTools.patchTemplateItems(args,templateItems);
				}
				hr.skipSpaces0_local();
			}
			parsers_seeker_GmlSeekerProcField.addFieldHint(seeker,isNew,nsName,isInst,fdName,args,hr.source.substring(hr.pos),gml_type_GmlTypeParser.parse(typeStr,mt[0]),null,false);
			var addFieldHint_doc = parsers_seeker_GmlSeekerProcField.addFieldHint_doc;
			if(addFieldHint_doc != null) {
				if(ctrReturn != null) {
					addFieldHint_doc.set_returnTypeString(ctrReturn);
				}
				if(templateSelf != null) {
					addFieldHint_doc.templateSelf = templateSelf;
				}
				if(templateItems != null) {
					addFieldHint_doc.templateItems = templateItems;
				}
			}
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_self.exec(s);
		if(mt != null) {
			this.self = mt[1];
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_return.exec(s);
		if(mt != null) {
			this.returns = mt[1];
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_interface.exec(s);
		if(mt != null) {
			this.isInterface = true;
			this.interfaceName = mt[1];
			if(this.interfaceName == null) {
				if(seeker.isObject) {
					this.interfaceName = seeker.getObjectName();
				} else if(!seeker.hasFunctionLiterals) {
					this.interfaceName = seeker.main;
				}
			}
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_param.exec(s);
		if(mt != null) {
			if(this.args == null) {
				this.args = [];
				this.types = [];
			}
			var argType = mt[1];
			var argValueWrap = mt[4];
			var showArgTypes = ui_Preferences.current.showArgTypesInStatusBar;
			var argNameArr = mt[3].split(",");
			var _g_current = 0;
			while(_g_current < argNameArr.length) {
				var _g_value = argNameArr[_g_current];
				var _g_key = _g_current++;
				var arg = _g_value;
				if(_g_value.includes("...")) {
					this.rest = true;
				}
				if(argValueWrap != null && _g_key == argNameArr.length - 1) {
					if(_g_value.endsWith("]")) {
						arg = _g_value.substring(0,_g_value.length - 1);
						if(showArgTypes) {
							arg += ":" + argType;
						}
						arg += argValueWrap + "]";
					} else {
						if(showArgTypes) {
							arg = _g_value + (":" + argType);
						}
						arg += argValueWrap;
					}
				} else if(showArgTypes) {
					if(_g_value.endsWith("]")) {
						arg = _g_value.substring(0,_g_value.length - 1) + ":" + argType + "]";
					} else if(argType != null) {
						arg = _g_value + (":" + argType);
					}
				}
				this.args.push(arg);
				this.types.push(argType);
			}
			return;
		}
		if(seeker.hasFunctionLiterals) {
			mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_func.exec(s);
			if(mt != null) {
				var fn = mt[1];
				var fa = mt[2];
				var pre = fn + "(";
				var post = mt[3];
				var rest = fa.includes("...");
				var jsd = new gml_GmlFuncDoc(fn,pre,post,tools_NativeString.splitNonEmpty(fa,","),rest);
				out.docs.set(fn,jsd);
				out.comps.set(fn,{ name : fn, value : fn, score : 0, meta : pre + fa + post, doc : null});
				if(!Object.prototype.hasOwnProperty.call(out.kindMap,fn)) {
					out.kindMap[fn] = "asset.script";
					out.kindList.push(fn);
				}
				seeker.setLookup(fn,false,"asset.script");
				return;
			}
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_static.exec(s);
		if(mt != null) {
			this.isStatic = true;
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_index_redirect.exec(s);
		if(mt != null) {
			var code;
			var rel = mt[1];
			if(rel != null && ++this.redirectCount > 32) {
				console.error("More than 32 layers of @index_redirect in file \"" + seeker.orig);
				rel = null;
			}
			if(rel != null) {
				var full;
				if(rel.startsWith("/")) {
					full = gml_Project.current.fullPath(rel.substring(1));
				} else {
					var dir = haxe_io_Path.directory(seeker.orig);
					full = tools_PathTools.ptJoin(dir,rel);
				}
				if(electron_FileWrap.existsSync(full)) {
					try {
						code = electron_FileWrap.readTextFileSync(full);
					} catch( _g ) {
						var _g1 = haxe_Exception.caught(_g).unwrap();
						console.error("Error loading @index_redirect file \"" + rel + "\" requested from \"" + seeker.orig,_g1);
						code = null;
					}
				} else {
					console.error("Specified @index_redirect file \"" + rel + "\" requested from \"" + seeker.orig + " doesn't exist");
					code = null;
				}
			} else {
				code = null;
			}
			var reader = seeker.reader;
			var oldName = reader.name;
			if(code != null) {
				reader.setTo(new parsers_GmlReaderExt(code,reader.version));
			} else {
				reader.clear();
			}
			reader.name = oldName;
			return;
		}
		if(seeker.main == null) {
			return;
		}
		mt = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_full.exec(s);
		if(mt != null) {
			if(!Object.prototype.hasOwnProperty.call(out.docs.map,seeker.main)) {
				seeker.doc = gml_funcdoc_GmlFuncDocParser.parse(seeker.main + mt[1],null);
				seeker.linkDoc();
				if(seeker.mainComp != null && seeker.mainComp.doc == null) {
					seeker.mainComp.doc = s;
				}
			}
			return;
		}
		if(seeker.version.hasScriptArgs()) {
			s = s.substring(3).trimLeft();
			seeker.doc = out.docs.map[seeker.main];
			if(seeker.doc == null) {
				if(parsers_seeker_GmlSeekerJSDocRegex.gmlDoc_full.test(s)) {
					seeker.doc = gml_funcdoc_GmlFuncDocParser.parse(s,null);
					seeker.doc.name = seeker.main;
					seeker.doc.pre = seeker.main + "(";
				} else {
					seeker.doc = gml_GmlFuncDoc.createRest(seeker.main);
				}
				seeker.linkDoc();
			} else if(parsers_seeker_GmlSeekerJSDocRegex.gmlDoc_full.test(s)) {
				gml_funcdoc_GmlFuncDocParser.parse(s,seeker.doc);
				seeker.doc.name = seeker.main;
				seeker.doc.pre = seeker.main + "(";
			} else {
				seeker.doc.post += " " + s;
			}
			if(seeker.mainComp != null) {
				seeker.mainComp.doc = seeker.doc.getAcText();
			}
			return;
		}
		s = s.substring(3).trim();
		if(seeker.mainComp != null) {
			seeker.mainComp.doc = tools_NativeString.nzcct(seeker.mainComp.doc,"\n",s);
		}
	}
	,__class__: parsers_seeker_GmlSeekerJSDoc
};
var parsers_seeker_GmlSeekerJSDocRegex = function() { };
$hxClasses["parsers.seeker.GmlSeekerJSDocRegex"] = parsers_seeker_GmlSeekerJSDocRegex;
parsers_seeker_GmlSeekerJSDocRegex.__name__ = "parsers.seeker.GmlSeekerJSDocRegex";
var parsers_seeker_GmlSeekerParser = function() { };
$hxClasses["parsers.seeker.GmlSeekerParser"] = parsers_seeker_GmlSeekerParser;
parsers_seeker_GmlSeekerParser.__name__ = "parsers.seeker.GmlSeekerParser";
parsers_seeker_GmlSeekerParser.find = function(seeker,flags) {
	var q = seeker.reader;
	var out = seeker.out;
	while(q.get_loop()) {
		var start = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		var s;
		switch(c) {
		case 10:
			q.row += 1;
			if((flags & 2048) != 0) {
				return "\n";
			}
			break;
		case 13:
			if((flags & 2048) != 0) {
				return "\n";
			}
			break;
		case 35:
			q.skipIdent1();
			if(q.pos > start + 1) {
				s = q.source.substring(start,q.pos);
				switch(s) {
				case "#endregion":case "#region":
					q.skipLine();
					break;
				case "#macro":
					if((flags & 4) != 0) {
						return s;
					}
					break;
				case "#define":case "#target":
					if((flags & 2) != 0) {
						if(start == 0) {
							return s;
						}
						c = q.source.charCodeAt(start - 1);
						if(c == 13 || c == 10) {
							return s;
						}
					}
					break;
				default:
				}
			}
			break;
		case 36:
			var version = seeker.version;
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(seeker.version,true);
			} else {
				while(q.pos < q.length) {
					c = q.source.charCodeAt(q.pos);
					if(tools_CharCode.isHex(c)) {
						q.pos += 1;
					} else {
						break;
					}
				}
			}
			break;
		case 40:
			if((flags & 4096) != 0) {
				return "(";
			}
			break;
		case 41:
			if((flags & 8192) != 0) {
				return ")";
			}
			break;
		case 44:
			if((flags & 128) != 0) {
				return ",";
			}
			break;
		case 46:
			if((flags & 256) != 0) {
				return ".";
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				if((flags & 16) != 0) {
					return q.source.substring(start,q.pos);
				}
				break;
			case 47:
				q.pos += 1;
				q.skipLine();
				seeker.commentLineJumps[q.pos - 1] = start;
				if(q.source.charCodeAt(start + 2) == 33 && q.source.charCodeAt(start + 3) == 35) {
					if(q.source.substring(start + 4,start + 9) == "mfunc") {
						do {
							var c1 = q.source.charCodeAt(start + 9);
							if(!(c1 == 32 || c1 == 9)) {
								break;
							}
							var line = q.source.substring(start + 10,q.pos);
							var sp = line.indexOf(" ");
							var name = line.substring(0,sp);
							var json;
							try {
								json = JSON.parse(line.substring(sp + 1));
							} catch( _g ) {
								break;
							}
							var mf = new synext_GmlExtMFunc(name,json);
							seeker.setLookup(name,false,"macro");
							out.mfuncs.set(name,mf);
							out.comps.set(name,mf.comp);
							out.kindList.push(name);
							var tokenType = (json.token || "macro.function");
							out.kindMap[name] = tokenType;
							out.docs.set(name,new gml_GmlFuncDoc(name,name + "(",")",mf.args,false));
						} while(false);
					}
				} else if((flags & 8) != 0 && q.source.charCodeAt(start + 2) == 47) {
					return q.source.substring(start,q.pos);
				}
				break;
			default:
			}
			break;
		case 58:
			if((flags & 65536) != 0) {
				return ":";
			}
			break;
		case 59:
			if((flags & 512) != 0) {
				return ";";
			}
			break;
		case 61:
			if((flags & 1024) != 0 && q.source.charCodeAt(q.pos) != 61) {
				return "=";
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,seeker.version);
			break;
		case 91:
			if((flags & 16384) != 0) {
				return "[";
			}
			break;
		case 93:
			if((flags & 32768) != 0) {
				return "]";
			}
			break;
		case 123:
			seeker.curlyDepth++;
			if((flags & 32) != 0) {
				return "{";
			}
			break;
		case 125:
			seeker.curlyDepth--;
			if(seeker.subLocalDepth != null && seeker.curlyDepth <= seeker.subLocalDepth) {
				seeker.localKind = "local";
				seeker.subLocalDepth = null;
			}
			if((flags & 64) != 0) {
				return "}";
			}
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var id = q.source.substring(start,q.pos);
				var m = (out.macros.map[id] || gml_GmlAPI.gmlMacros[id]);
				if(m != null) {
					if(q.oldSource.length < 16) {
						q.pushSource(m.expr);
						return parsers_seeker_GmlSeekerParser.find(seeker,flags);
					} else {
						return null;
					}
				} else if((flags & 1) != 0) {
					switch(id) {
					case "const":case "let":
						var k = q.pos;
						while(q.pos < q.length) {
							c = q.source.charCodeAt(k);
							if(c > 8 && c < 14 || c == 32) {
								++k;
							} else {
								break;
							}
						}
						c = q.source.charCodeAt(k);
						if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
							id = "var";
						}
						break;
					}
				}
				if(seeker.hasFunctionLiterals && (flags & 2) != 0 && id == "function") {
					return id;
				}
				if((flags & 131072) != 0 && id == "static") {
					return id;
				}
				if((flags & 1) != 0) {
					return id;
				}
			} else if(c >= 48 && c <= 57) {
				if(q.source.charCodeAt(q.pos) == 120) {
					q.pos += 1;
					while(q.pos < q.length) {
						c = q.source.charCodeAt(q.pos);
						if(tools_CharCode.isHex(c)) {
							q.pos += 1;
						} else {
							break;
						}
					}
				} else {
					var seenDot = false;
					while(q.pos < q.length) {
						c = q.source.charCodeAt(q.pos);
						if(c == 46) {
							if(!seenDot) {
								seenDot = true;
								q.pos += 1;
							} else {
								break;
							}
						} else if(c >= 48 && c <= 57) {
							q.pos += 1;
						} else {
							break;
						}
					}
				}
			}
		}
	}
	return null;
};
var parsers_seeker_GmlSeekerProcDefine = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcDefine"] = parsers_seeker_GmlSeekerProcDefine;
parsers_seeker_GmlSeekerProcDefine.__name__ = "parsers.seeker.GmlSeekerProcDefine";
parsers_seeker_GmlSeekerProcDefine.procFuncLiteralRetArrow = function(seeker) {
	var q = seeker.reader;
	if(q.get_loop()) {
		var orig = q.pos;
		q.skipSpaces1_local();
		if(q.source.substr(q.pos,4) == "/*->") {
			var typeStart = q.pos += 4;
			q.skipComment();
			var typeEnd = q.pos - 2;
			q.pos = typeStart;
			if(gml_type_GmlTypeParser.skipTypeName(q,typeEnd)) {
				var result = q.source.substring(typeStart,q.pos);
				seeker.jsDoc.returns = result;
				q.pos = typeEnd + 2;
				return result;
			} else {
				q.pos = orig;
			}
		} else {
			q.pos = orig;
		}
	}
	return null;
};
parsers_seeker_GmlSeekerProcDefine.procFuncLiteralArgs = function(seeker,out,argNames) {
	if(parsers_seeker_GmlSeekerParser.find(seeker,4096) != "(") {
		if(out) {
			parsers_seeker_GmlSeekerProcDefine.procFuncLiteralArgs_returnType = null;
		}
		return null;
	}
	var q = seeker.reader;
	var start = q.pos - 1;
	var argStart = q.pos;
	var wantArgName = true;
	var depth = 1;
	_hx_loop1: while(q.get_loop()) {
		var s = parsers_seeker_GmlSeekerParser.find(seeker,12417);
		if(s == null) {
			break;
		} else {
			switch(s) {
			case "(":
				++depth;
				break;
			case ")":
				if(--depth <= 0) {
					if(argNames != null) {
						argNames.push(q.source.substring(argStart,q.pos - 1).trim());
					}
					break _hx_loop1;
				}
				break;
			case ",":
				if(depth == 1 && !wantArgName) {
					wantArgName = true;
					if(argNames != null) {
						argNames.push(q.source.substring(argStart,q.pos - 1).trim());
						argStart = q.pos;
					}
				}
				break;
			default:
				if(wantArgName) {
					wantArgName = false;
					seeker.locals.add(s,seeker.localKind);
				}
			}
		}
	}
	var result = out ? q.source.substring(start,q.pos) : null;
	var returnType = parsers_seeker_GmlSeekerProcDefine.procFuncLiteralRetArrow(seeker);
	if(out) {
		parsers_seeker_GmlSeekerProcDefine.procFuncLiteralArgs_returnType = returnType;
	}
	return result;
};
parsers_seeker_GmlSeekerProcDefine.patchMissingArgs = function(args,litArgs) {
	var rx = parsers_seeker_GmlSeekerProcDefine.patchMissingArgs_rx;
	var _g = 0;
	var _g1 = litArgs.length;
	while(_g < _g1) {
		var i = _g++;
		var litArg = litArgs[i];
		var arg = args[i];
		if(arg == null) {
			args[i] = litArg;
			continue;
		}
		var mt = rx.exec(litArg);
		if(mt == null) {
			continue;
		}
		if(arg.includes("?") || arg.includes("=")) {
			continue;
		}
		var argName = arg.trim();
		if(mt[1] == argName) {
			args[i] = litArg;
			continue;
		}
		args[i] += mt[2];
	}
};
parsers_seeker_GmlSeekerProcDefine.proc = function(seeker,s) {
	var q = seeker.reader;
	var isDefine = s == "#define";
	var isFunc = s == "function";
	if(isFunc && seeker.funcsAreGlobal && seeker.curlyDepth == 0) {
		isDefine = true;
	}
	var jsDoc = seeker.jsDoc;
	var curlyDepth = seeker.curlyDepth;
	var funcsAreGlobal = seeker.funcsAreGlobal;
	var out = seeker.out;
	var fname;
	if(isFunc) {
		q.skipSpaces0();
		if(tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos))) {
			var p = q.pos;
			q.skipIdent1();
			fname = q.source.substring(p,q.pos);
		} else {
			fname = null;
		}
	} else {
		fname = parsers_seeker_GmlSeekerParser.find(seeker,1);
	}
	if(isFunc && (!isDefine || fname == null)) {
		if(curlyDepth > 0 || !funcsAreGlobal) {
			if(!funcsAreGlobal && curlyDepth == 0 && fname != null) {
				parsers_seeker_GmlSeekerProcField.addInstVar(seeker,fname);
			}
			seeker.subLocalDepth = curlyDepth;
			seeker.localKind = "sublocal";
		}
		if(seeker.isCreateEvent && curlyDepth == 0 && fname != null) {
			var litArgs = parsers_linter_GmlLinter.getOption(function(p) {
				return p.addMissingArgsToJSDoc;
			}) ? [] : null;
			var args = parsers_seeker_GmlSeekerProcDefine.procFuncLiteralArgs(seeker,true,litArgs);
			if(args == null) {
				args = "()";
			}
			var argTypes = null;
			if(jsDoc.args != null) {
				if(litArgs != null) {
					parsers_seeker_GmlSeekerProcDefine.patchMissingArgs(jsDoc.args,litArgs);
				}
				args = "(" + jsDoc.args.join(", ") + ")";
				argTypes = jsDoc.typesFlush(null,fname);
				jsDoc.args = null;
				jsDoc.types = null;
			}
			if(jsDoc.returns != null) {
				args += "➜" + jsDoc.returns;
				jsDoc.returns = null;
			}
			s = parsers_seeker_GmlSeekerParser.find(seeker,67617);
			parsers_seeker_GmlSeekerProcField.addFieldHint(seeker,s == ":" || s == "constructor",seeker.getObjectName(),true,fname,args,null,null,argTypes,true);
		} else {
			parsers_seeker_GmlSeekerProcDefine.procFuncLiteralArgs(seeker,false);
		}
		jsDoc.reset(false);
		return;
	}
	if(isFunc) {
		seeker.doc = null;
		seeker.docIsAutoFunc = false;
	} else {
		parsers_seeker_GmlSeekerProcDoc.flush(seeker);
	}
	var main = fname;
	seeker.main = main;
	if(jsDoc.isInterface && jsDoc.interfaceName == null) {
		jsDoc.interfaceName = main;
	}
	seeker.start = q.pos;
	seeker.sub = main;
	seeker.reader.row = isFunc ? -1 : 0;
	seeker.setLookup(main,true,"asset.script");
	var locals = new gml_GmlLocals(main);
	seeker.locals = locals;
	out.locals[main] = locals;
	if(isFunc || isDefine && seeker.version.hasScriptArgs()) {
		s = parsers_seeker_GmlSeekerParser.find(seeker,isFunc ? 4096 : 6144);
		if(s == "(") {
			var depth = 1;
			var awaitArgName = true;
			var checkJsDocArgs = isDefine && jsDoc.args != null;
			var litArgs = checkJsDocArgs && parsers_linter_GmlLinter.getOption(function(p) {
				return p.addMissingArgsToJSDoc;
			}) ? [] : null;
			var argStart = q.pos;
			_hx_loop1: while(q.get_loop()) {
				var c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 36:
					var version = q.version;
					if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
						q.pos += 1;
						q.skipStringTemplate(q.version,true);
					} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						if(awaitArgName) {
							awaitArgName = false;
							q.pos--;
							locals.add(q.readIdent(),seeker.localKind);
						}
					}
					break;
				case 44:
					if(depth == 1 && !awaitArgName) {
						if(litArgs != null) {
							litArgs.push(q.source.substring(argStart,q.pos - 1).trim());
							argStart = q.pos;
						}
						awaitArgName = true;
					}
					break;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					default:
					}
					break;
				case 40:case 91:case 123:
					++depth;
					break;
				case 41:case 93:case 125:
					if(--depth <= 0) {
						if(litArgs != null) {
							litArgs.push(q.source.substring(argStart,q.pos - 1).trim());
						}
						break _hx_loop1;
					}
					break;
				case 34:case 39:case 64:case 96:
					q.skipStringAuto(c,q.version);
					break;
				default:
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						if(awaitArgName) {
							awaitArgName = false;
							q.pos--;
							locals.add(q.readIdent(),seeker.localKind);
						}
					}
				}
			}
			if(checkJsDocArgs) {
				if(litArgs != null) {
					parsers_seeker_GmlSeekerProcDefine.patchMissingArgs(jsDoc.args,litArgs);
				}
				var doc = gml_GmlFuncDoc.create(main,jsDoc.args,jsDoc.rest);
				doc.argTypes = jsDoc.typesFlush(null,main);
				seeker.doc = doc;
				jsDoc.args = null;
				jsDoc.types = null;
				jsDoc.rest = false;
			} else {
				var docStart = main;
				if(jsDoc.templateItems != null) {
					docStart = main + gml_type_GmlTypeTemplateItem.joinTemplateString(jsDoc.templateItems,true);
				}
				var doc = gml_funcdoc_GmlFuncDocParser.parse(docStart + q.source.substring(seeker.start,q.pos),null);
				doc.trimArgs();
				seeker.doc = doc;
			}
			parsers_seeker_GmlSeekerProcDefine.procFuncLiteralRetArrow(seeker);
			if(jsDoc.returns != null) {
				seeker.doc.set_returnTypeString(jsDoc.returns);
				jsDoc.returns = null;
			}
			seeker.doc.templateItems = jsDoc.templateItems;
			jsDoc.templateItems = null;
			seeker.docIsAutoFunc = isFunc;
			seeker.linkDoc();
		}
	}
	if(isDefine && seeker.canDefineComp) {
		seeker.mainComp = { name : main, value : main, score : 0, meta : "script", doc : seeker.doc != null ? seeker.doc.getAcText() : q.pos > seeker.start ? main + q.source.substring(seeker.start,q.pos) : null};
		out.comps.set(main,seeker.mainComp);
		out.kindList.push(main);
		out.kindMap[main] = "asset.script";
	}
	if(isFunc) {
		s = parsers_seeker_GmlSeekerParser.find(seeker,67617);
		if(s == ":" || s == "constructor") {
			var doc = seeker.doc;
			if(doc == null) {
				doc = gml_GmlFuncDoc.create(main);
				seeker.doc = doc;
				seeker.linkDoc();
			}
			doc.isConstructor = true;
			doc.set_returnTypeString(doc.getConstructorType());
			if(s == ":") {
				s = parsers_seeker_GmlSeekerParser.find(seeker,2081);
				if(s != null && tools_CharCode.isIdent0_ni(s.charCodeAt(0))) {
					doc.parentName = s;
				}
			}
			out.namespaceHints.set(main,new parsers_GmlSeekDataNamespaceHint(main,doc.parentName,false));
		}
	}
};
var parsers_seeker_GmlSeekerProcDoc = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcDoc"] = parsers_seeker_GmlSeekerProcDoc;
parsers_seeker_GmlSeekerProcDoc.__name__ = "parsers.seeker.GmlSeekerProcDoc";
parsers_seeker_GmlSeekerProcDoc.flush = function(seeker) {
	var q = seeker.reader;
	var jsDoc = seeker.jsDoc;
	var doc = seeker.doc;
	var main = seeker.main;
	var out = seeker.out;
	var updateComp = false;
	if(doc == null && (main != null && main != "")) {
		doc = out.docs.map[main];
		if(doc == null) {
			doc = gml_GmlFuncDoc.create(main);
			seeker.doc = doc;
			seeker.linkDoc();
		}
		updateComp = true;
	}
	if(doc != null) {
		if(jsDoc.args != null) {
			doc.args = jsDoc.args;
			doc.argTypes = jsDoc.typesFlush(null,doc.name);
			doc.templateItems = jsDoc.templateItems;
			if(jsDoc.rest) {
				doc.rest = jsDoc.rest;
			}
			var from = seeker.start;
			if(from == null) {
				from = 0;
			}
			gml_funcdoc_GmlFuncDocArgsRet.proc(doc,seeker.src,from,q.pos,seeker.docIsAutoFunc,null);
		} else if(doc.args.length != 0 || doc.hasReturn) {
			var from = seeker.start;
			if(from == null) {
				from = 0;
			}
			gml_funcdoc_GmlFuncDocArgsRet.proc(doc,seeker.src,from,q.pos,seeker.docIsAutoFunc,doc.args);
		} else {
			var from = seeker.start;
			if(from == null) {
				from = 0;
			}
			gml_funcdoc_GmlFuncDocFromCode.proc(doc,seeker.src,from,q.pos);
			updateComp = true;
		}
		if(jsDoc.returns != null) {
			doc.set_returnTypeString(jsDoc.returns);
			updateComp = true;
		}
		if(jsDoc.isInterface) {
			if(jsDoc.interfaceName == null) {
				jsDoc.interfaceName = main;
			}
			if(!Object.prototype.hasOwnProperty.call(out.namespaceHints.map,jsDoc.interfaceName)) {
				out.namespaceHints.set(jsDoc.interfaceName,new parsers_GmlSeekDataNamespaceHint(jsDoc.interfaceName,null,null));
			}
		}
		if(jsDoc.self != null) {
			doc.selfType = gml_type_GmlTypeParser.parse(jsDoc.self,doc.name);
		} else if(jsDoc.interfaceName != null) {
			doc.selfType = gml_type_GmlTypeParser.parse(jsDoc.interfaceName,doc.name);
		} else {
			doc.selfType = null;
		}
		if(updateComp) {
			var mainComp = seeker.mainComp;
			if(mainComp != null) {
				mainComp.doc = doc.getAcText();
			}
		}
	}
	if(jsDoc.implementsNames != null) {
		var ownType;
		if(seeker.isObject) {
			ownType = seeker.getObjectName();
		} else {
			ownType = main;
		}
		var arr = out.namespaceImplements[ownType];
		if(arr == null) {
			arr = [];
			out.namespaceImplements[ownType] = arr;
		}
		if(ownType == null) {
			console.warn("Trying to add @implements without a known self-type",arr);
		} else {
			var _g = 0;
			var _g1 = jsDoc.implementsNames;
			while(_g < _g1.length) {
				var nsi = _g1[_g];
				++_g;
				if(arr.indexOf(nsi) < 0) {
					arr.push(nsi);
				}
			}
		}
	}
	seeker.doc = null;
	seeker.docIsAutoFunc = false;
	jsDoc.reset();
};
var parsers_seeker_GmlSeekerProcEnum = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcEnum"] = parsers_seeker_GmlSeekerProcEnum;
parsers_seeker_GmlSeekerProcEnum.__name__ = "parsers.seeker.GmlSeekerProcEnum";
parsers_seeker_GmlSeekerProcEnum.parseConst = function(s) {
	var mt = parsers_seeker_GmlSeekerProcEnum.parseConst_rx10.exec(s);
	if(mt != null) {
		return Std.parseInt(s);
	}
	mt = parsers_seeker_GmlSeekerProcEnum.parseConst_rx16.exec(s);
	if(mt != null) {
		return Std.parseInt("0x" + mt[1]);
	}
	return null;
};
parsers_seeker_GmlSeekerProcEnum.proc = function(seeker) {
	var name = parsers_seeker_GmlSeekerParser.find(seeker,1);
	if(name == null) {
		return;
	}
	if(parsers_seeker_GmlSeekerParser.find(seeker,32) == null) {
		return;
	}
	var out = seeker.out;
	var q = seeker.reader;
	var orig = seeker.orig;
	var sub = seeker.sub;
	var en = new gml_GmlEnum(name,orig);
	out.enums.set(name,en);
	out.comps.set(name,{ name : name, value : name, score : 0, meta : "enum", doc : null});
	seeker.setLookup(name,false,"enum");
	var checkDoc = function(s) {
		if(s == null || !s.startsWith("///")) {
			return false;
		}
		var isMatch = parsers_seeker_GmlSeekerJSDocRegex.jsDoc_is.exec(s);
		if(isMatch == null) {
			return true;
		}
		var type = gml_type_GmlTypeParser.parse(isMatch[1],"@is in enum at line " + q.row);
		var lineMatch = parsers_seeker_GmlSeekerProcEnum.jsDoc_enumField_is_line.exec(q.source.substring(q.source.lastIndexOf("\n",q.pos - 1) + 1,q.pos));
		if(lineMatch == null) {
			return true;
		}
		var rx = /\w+/g;
		var s = lineMatch[1];
		var till = -1;
		till = s.length;
		rx.lastIndex = 0;
		var mt = rx.exec(s);
		while(mt != null && mt.index < till) {
			var ac = en.compMap[mt[0]];
			if(ac != null) {
				var ind = Std.parseInt(ac.doc);
				if(ind != null) {
					if(en.tupleTypes == null) {
						en.tupleTypes = [];
					}
					if(ind < parsers_seeker_GmlSeekerProcEnum.maxTupleTypes) {
						en.tupleTypes[ind] = type;
					} else if(en.tupleTypes.length < parsers_seeker_GmlSeekerProcEnum.maxTupleTypes) {
						en.tupleTypes[parsers_seeker_GmlSeekerProcEnum.maxTupleTypes - 1] = gml_type_GmlTypeDef.rest([gml_type_GmlTypeDef.any]);
					}
				}
			}
			mt = rx.exec(s);
		}
		return true;
	};
	var next = function(flags) {
		flags |= 8;
		while(q.get_loop()) {
			var s = parsers_seeker_GmlSeekerParser.find(seeker,flags);
			if(checkDoc(s)) {
				continue;
			}
			return s;
		}
		return null;
	};
	var nextVal = 0;
	while(q.get_loop()) {
		var s = next(65);
		if(s == null || s == "}") {
			break;
		}
		en.lastItem = s;
		en.names.push(s);
		en.items[s] = true;
		var name1 = name + "." + s;
		var ac = { name : name1, value : name1, score : 0, meta : "enum", doc : null};
		var acf = { name : s, value : s, score : 0, meta : "enum", doc : null};
		en.compList.push(ac);
		en.fieldComp.push(acf);
		en.compMap[s] = ac;
		en.fieldLookup[s] = { path : orig, sub : sub, row : q.row, col : 0};
		s = next(1216);
		if(s == "=") {
			var doc = null;
			var vp = q.pos;
			_hx_loop2: while(vp < q.length) {
				var c = q.source.charCodeAt(vp++);
				switch(c) {
				case 10:case 13:
					break _hx_loop2;
				case 47:
					if(q.source.charCodeAt(vp) == 47) {
						var docStart = ++vp;
						while(vp < q.length) {
							c = q.source.charCodeAt(vp);
							if(c == 13 || c == 10) {
								break;
							}
							++vp;
						}
						doc = q.source.substring(docStart,vp).trim();
					}
					break;
				}
			}
			vp = q.pos;
			s = next(192);
			var val = parsers_seeker_GmlSeekerProcEnum.parseConst(q.source.substring(vp,q.pos - 1).trim());
			if(val != null) {
				acf.doc = ac.doc = "" + val;
				nextVal = val + 1;
			} else {
				nextVal = null;
			}
			if(doc != null) {
				acf.doc = acf.doc != null ? acf.doc + "\t" + doc : doc;
				ac.doc = acf.doc;
			}
		} else if(nextVal != null) {
			acf.doc = ac.doc = "" + nextVal++;
		}
		if(s == null || s == "}") {
			break;
		}
	}
	if(en.tupleTypes != null) {
		do {
			var ac = en.compMap[en.lastItem];
			if(ac == null) {
				break;
			}
			var ind = Std.parseInt(ac.doc);
			if(ind == null) {
				break;
			}
			--ind;
			if(ind < parsers_seeker_GmlSeekerProcEnum.maxTupleTypes && en.tupleTypes.length < ind) {
				en.tupleTypes[ind] = null;
			}
		} while(false);
	}
};
var parsers_seeker_GmlSeekerProcExpr = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcExpr"] = parsers_seeker_GmlSeekerProcExpr;
parsers_seeker_GmlSeekerProcExpr.__name__ = "parsers.seeker.GmlSeekerProcExpr";
parsers_seeker_GmlSeekerProcExpr.reset = function() {
	parsers_seeker_GmlSeekerProcExpr.args = null;
	parsers_seeker_GmlSeekerProcExpr.argTypes = null;
	parsers_seeker_GmlSeekerProcExpr.isConstructor = false;
	parsers_seeker_GmlSeekerProcExpr.templateSelf = null;
	parsers_seeker_GmlSeekerProcExpr.templateItems = null;
	parsers_seeker_GmlSeekerProcExpr.fieldType = null;
	parsers_seeker_GmlSeekerProcExpr.isFunction = false;
};
parsers_seeker_GmlSeekerProcExpr.proc = function(seeker,s,asStatic) {
	parsers_seeker_GmlSeekerProcExpr.reset();
	var q = seeker.reader;
	q.skipSpaces1();
	var c = q.source.charCodeAt(q.pos);
	if(c == 47) {
		switch(q.source.charCodeAt(q.pos + 1)) {
		case 42:
			q.pos += 2;
			q.skipComment();
			q.skipSpaces1();
			c = q.source.charCodeAt(q.pos);
			break;
		case 47:
			q.skipLine();
			q.skipSpaces1();
			c = q.source.charCodeAt(q.pos);
			break;
		}
	}
	var specTypeInst = seeker.specTypeInst;
	var procAs = function() {
		q.skipSpaces1_local();
		if(q.skipIfStrEquals("/*#as ")) {
			var start = q.pos;
			q.skipComment();
			parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeParser.parse(q.source.substring(start,q.pos - 2),seeker.mainTop + " offset " + start);
			return true;
		} else {
			return false;
		}
	};
	switch(c) {
	case 34:
		if(specTypeInst) {
			parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.string;
		}
		return;
	case 39:
		if(!seeker.version.hasLiteralStrings()) {
			if(specTypeInst) {
				parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.string;
			}
			return;
		} else if(c >= 48 && c <= 57) {
			if(specTypeInst) {
				parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.number;
			}
			return;
		} else if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			return;
		}
		break;
	case 43:case 45:
		if(specTypeInst) {
			parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.number;
			var start = q.pos++;
			q.skipSpaces1_local();
			var tmp;
			if(c == 45) {
				var this1 = q.source.charCodeAt(q.pos);
				tmp = this1 >= 48 && this1 <= 57;
			} else {
				tmp = false;
			}
			if(tmp) {
				q.skipDigits();
				if(q.skipIfEquals(46)) {
					q.skipDigits();
				}
				if(parseFloat(q.source.substring(start,q.pos)) == -1) {
					procAs();
				}
			}
		}
		return;
	case 64:
		if(seeker.version.hasLiteralStrings() && (q.source.charCodeAt(q.pos + 1) == 34 || q.source.charCodeAt(q.pos + 1) == 39)) {
			if(specTypeInst) {
				parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.string;
			}
			return;
		} else if(c >= 48 && c <= 57) {
			if(specTypeInst) {
				parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.number;
			}
			return;
		} else if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			return;
		}
		break;
	case 91:
		if(specTypeInst) {
			parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.anyArray;
			q.pos += 1;
			q.skipBalancedParenExpr();
			procAs();
		}
		return;
	default:
		if(c >= 48 && c <= 57) {
			if(specTypeInst) {
				parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.number;
			}
			return;
		} else if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			return;
		}
	}
	if(!tools_CharCode.isIdent0_ni(c)) {
		return;
	}
	var start = q.pos;
	q.skipIdent1();
	var ident = q.source.substring(start,q.pos);
	var normalIdent = false;
	switch(ident) {
	case "false":case "true":
		if(specTypeInst) {
			parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.bool;
		}
		return;
	case "function":
		parsers_seeker_GmlSeekerProcExpr.isFunction = true;
		break;
	case "new":
		if(seeker.hasFunctionLiterals) {
			if(specTypeInst) {
				q.skipSpaces1();
				var ctr = q.readIdent();
				if(ctr != null) {
					parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeDef.simple(ctr);
				}
			}
			return;
		} else {
			normalIdent = true;
		}
		break;
	case "noone":case "undefined":
		if(specTypeInst) {
			procAs();
		}
		return;
	default:
		normalIdent = true;
	}
	if(normalIdent) {
		if(!specTypeInst) {
			return;
		}
		var doc = gml_GmlAPI.stdDoc[ident];
		q.skipSpaces1_local();
		if(doc != null) {
			if(q.skipIfEquals(40)) {
				parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeTools.mapTemplateTypes(doc.get_returnType(),[]);
				q.skipBalancedParenExpr();
			} else {
				parsers_seeker_GmlSeekerProcExpr.fieldType = doc.getFunctionType();
			}
		} else {
			switch(q.source.charCodeAt(q.pos)) {
			case 40:
				q.pos += 1;
				q.skipBalancedParenExpr();
				break;
			case 10:case 13:case 59:
				var _g = 0;
				while(_g < 1) {
					++_g;
					var loopDoc = seeker.doc;
					var found = false;
					var _g1 = 0;
					while(_g1 < 128) {
						++_g1;
						if(loopDoc == null) {
							break;
						}
						var hint = seeker.out.fieldHints.map[loopDoc.name + ":" + ident];
						if(hint != null) {
							found = true;
							var hdoc = hint.doc;
							if(hdoc != null) {
								parsers_seeker_GmlSeekerProcExpr.args = hdoc.getNamelessAcText();
								parsers_seeker_GmlSeekerProcExpr.argTypes = hdoc.argTypes;
								parsers_seeker_GmlSeekerProcExpr.isConstructor = hdoc.isConstructor;
								parsers_seeker_GmlSeekerProcExpr.templateSelf = hdoc.templateSelf;
								parsers_seeker_GmlSeekerProcExpr.templateItems = hdoc.templateItems;
							}
							parsers_seeker_GmlSeekerProcExpr.fieldType = hint.type;
							break;
						}
						var ns = gml_GmlAPI.gmlNamespaces[loopDoc.name];
						if(ns != null && Object.prototype.hasOwnProperty.call(ns.instKind,ident)) {
							found = true;
							var hdoc1 = ns.docInstMap[ident];
							if(hdoc1 != null) {
								parsers_seeker_GmlSeekerProcExpr.args = hdoc1.getNamelessAcText();
								parsers_seeker_GmlSeekerProcExpr.argTypes = hdoc1.argTypes;
								parsers_seeker_GmlSeekerProcExpr.isConstructor = hdoc1.isConstructor;
								parsers_seeker_GmlSeekerProcExpr.templateSelf = hdoc1.templateSelf;
								parsers_seeker_GmlSeekerProcExpr.templateItems = hdoc1.templateItems;
							}
							parsers_seeker_GmlSeekerProcExpr.fieldType = ns.instTypes[ident];
							break;
						}
						var parentName = loopDoc.parentName;
						loopDoc = seeker.out.docs.map[parentName];
						if(loopDoc == null) {
							loopDoc = gml_GmlAPI.gmlDoc[parentName];
						}
					}
					if(found) {
						break;
					}
					parsers_seeker_GmlSeekerProcExpr.fieldType = gml_GmlAPI.stdTypes[ident];
					if(parsers_seeker_GmlSeekerProcExpr.fieldType != null) {
						break;
					}
					var resType = gml_Project.current.resourceTypes[ident];
					if(resType != null) {
						parsers_seeker_GmlSeekerProcExpr.fieldType = gml_type_GmlTypeParser.parse(resType,null);
						break;
					}
				}
				break;
			default:
			}
		}
		procAs();
		return;
	}
	q.skipSpaces1();
	if(tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos))) {
		start = q.pos;
		q.skipIdent1();
		q.skipSpaces1();
	}
	start = q.pos;
	if(q.source.charCodeAt(q.pos++) != 40) {
		return;
	}
	if(asStatic) {
		q.pos--;
		parsers_seeker_GmlSeekerProcExpr.args = parsers_seeker_GmlSeekerProcDefine.procFuncLiteralArgs(seeker,true);
	} else {
		while(q.get_loop()) if(q.source.charCodeAt(q.pos) == 41) {
			q.pos += 1;
			break;
		} else if(q.skipCommon() < 0) {
			q.pos += 1;
		}
	}
	var doc = seeker.doc;
	var jsDoc = seeker.jsDoc;
	if(jsDoc.args != null) {
		parsers_seeker_GmlSeekerProcExpr.args = "(" + jsDoc.args.join(", ") + ")";
		parsers_seeker_GmlSeekerProcExpr.argTypes = jsDoc.typesFlush(((doc) && (doc.templateItems)),s);
		jsDoc.args = null;
		jsDoc.types = null;
	} else if(!asStatic) {
		parsers_seeker_GmlSeekerProcExpr.args = q.source.substring(start,q.pos);
	}
	var returnType = null;
	if(!asStatic) {
		if(q.skipIfStrEquals("/*->")) {
			var p = q.pos;
			q.skipComment();
			if(q.source.substr((q.pos + (-2)),2) == "*/") {
				returnType = q.source.substring(p,q.pos - 2);
			}
		}
	}
	parsers_seeker_GmlSeekerProcExpr.templateItems = jsDoc.templateItems;
	jsDoc.templateItems = null;
	if(doc != null && doc.templateItems != null) {
		parsers_seeker_GmlSeekerProcExpr.templateSelf = gml_type_GmlTypeTemplateItem.toTemplateSelf(doc.templateItems);
		parsers_seeker_GmlSeekerProcExpr.templateItems = parsers_seeker_GmlSeekerProcExpr.templateItems != null ? doc.templateItems.concat(parsers_seeker_GmlSeekerProcExpr.templateItems) : doc.templateItems.slice();
	}
	if(jsDoc.returns != null) {
		parsers_seeker_GmlSeekerProcExpr.args += "➜" + jsDoc.returns;
		jsDoc.returns = null;
	} else if(returnType != null) {
		parsers_seeker_GmlSeekerProcExpr.args += "➜" + returnType;
	}
	q.skipSpaces1();
	if(q.source.charCodeAt(q.pos) == 58) {
		parsers_seeker_GmlSeekerProcExpr.isConstructor = true;
	} else if(q.source.charCodeAt(q.pos) == 99) {
		var ctStart = q.pos;
		q.skipIdent1();
		parsers_seeker_GmlSeekerProcExpr.isConstructor = q.source.substring(ctStart,q.pos) == "constructor";
	}
};
var parsers_seeker_GmlSeekerProcField = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcField"] = parsers_seeker_GmlSeekerProcField;
parsers_seeker_GmlSeekerProcField.__name__ = "parsers.seeker.GmlSeekerProcField";
parsers_seeker_GmlSeekerProcField.addFieldHint = function(seeker,isConstructor,namespace,isInst,field,args,info,type,argTypes,isAuto) {
	var parentSpace = null;
	if(namespace == null) {
		if(seeker.isCreateEvent) {
			namespace = seeker.getObjectName();
			parentSpace = seeker.project.objectParents[namespace];
		} else if(seeker.doc != null) {
			namespace = seeker.doc.name;
			parentSpace = seeker.doc.parentName;
			if(namespace == null) {
				return;
			}
		} else {
			return;
		}
	}
	field = ((field) || (""));
	var isField = field != "";
	var name = isField ? field : namespace;
	var hintDoc = null;
	if(args != null) {
		hintDoc = gml_funcdoc_GmlFuncDocParser.parse(name + StringTools.replace(args,"->","➜"),null);
		hintDoc.trimArgs();
		hintDoc.isConstructor = isConstructor;
		if(argTypes != null) {
			hintDoc.argTypes = argTypes;
		}
		if(type == null) {
			type = hintDoc.getFunctionType();
		}
		info = tools_NativeString.nzcct(hintDoc.getAcText(),"\n",info);
	}
	parsers_seeker_GmlSeekerProcField.addFieldHint_doc = hintDoc;
	info = tools_NativeString.nzcct(info,"\n","from " + namespace);
	if(type != null) {
		info = tools_NativeString.nzcct(info,"\n","type " + gml_type_GmlTypeTools.toString(type));
	}
	var privateFieldRegex = seeker.privateFieldRegex;
	var comp = privateFieldRegex == null || !privateFieldRegex.test(name) ? { name : name, value : name, score : 0, meta : isField ? args != null ? "function" : "variable" : "namespace", doc : info} : null;
	var hint = new parsers_GmlSeekDataHint(namespace,isInst,field,comp,hintDoc,parentSpace,type);
	var out = seeker.out;
	var lastHint = out.fieldHints.map[hint.key];
	if(lastHint == null) {
		out.fieldHints.set(hint.key,hint);
	} else {
		lastHint.merge(hint,isAuto);
	}
	if(!isField) {
		if(!isInst) {
			out.comps.set(name,comp);
			if(!Object.prototype.hasOwnProperty.call(out.kindMap,name)) {
				out.kindList.push(name);
			}
			out.kindMap[name] = "namespace";
			if(hintDoc != null) {
				out.docs.set(name,hintDoc);
			}
		}
	}
};
parsers_seeker_GmlSeekerProcField.addInstVar = function(seeker,s) {
	var out = seeker.out;
	var privateFieldRegex = seeker.privateFieldRegex;
	if(out.instFieldMap[s] == null && (privateFieldRegex == null || !privateFieldRegex.test(s))) {
		var fd = gml_GmlAPI.gmlInstFieldMap[s];
		if(fd == null) {
			fd = new gml_GmlField(s,"variable");
			gml_GmlAPI.gmlInstFieldMap[s] = fd;
		}
		out.instFieldList.push(fd);
		out.instFieldMap[s] = fd;
		out.instFieldComp.push(fd.comp);
	}
};
var parsers_seeker_GmlSeekerProcIdent = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcIdent"] = parsers_seeker_GmlSeekerProcIdent;
parsers_seeker_GmlSeekerProcIdent.__name__ = "parsers.seeker.GmlSeekerProcIdent";
parsers_seeker_GmlSeekerProcIdent.proc = function(seeker,s) {
	var q = seeker.reader;
	var commentLineJumps = seeker.commentLineJumps;
	var isDotSelf = false;
	var isDot = false;
	var dp = q.pos - s.length;
	while(--dp >= 0) {
		var jump = commentLineJumps[dp];
		if(jump != null) {
			dp = jump;
			continue;
		}
		var c = q.source.charCodeAt(dp);
		if(c == 46) {
			isDot = true;
			while(--dp >= 0) {
				c = q.source.charCodeAt(dp);
				if(!(c > 8 && c < 14 || c == 32)) {
					break;
				}
			}
			if(c == 102 && dp >= 3 && q.source.substr((dp - 3),4) == "self" && (dp == 3 || !tools_CharCode.isIdent1_ni(q.source.charCodeAt(dp - 4)))) {
				isDotSelf = true;
			}
		} else if(!(c > 8 && c < 14 || c == 32)) {
			break;
		}
	}
	if(!isDot) {
		if(seeker.locals.kind[s] != null) {
			return;
		}
		if(seeker.canLam && s.startsWith("__lf_")) {
			parsers_seeker_GmlSeekerProcVar.procLambdaIdent(seeker,s,seeker.locals);
			return;
		}
		if(gml_GmlAPI.gmlKind[s] != null || gml_GmlAPI.extKind[s] != null) {
			return;
		}
	}
	var isConstructorField;
	if(!isDot || isDotSelf) {
		if(seeker.jsDoc.isInterface) {
			var minDepth = seeker.hasFunctionLiterals && seeker.funcsAreGlobal ? 1 : 0;
			if(seeker.specTypeInstSubTopLevel) {
				isConstructorField = seeker.curlyDepth >= minDepth;
			} else {
				isConstructorField = seeker.curlyDepth == minDepth;
			}
		} else if(seeker.isCreateEvent) {
			isConstructorField = seeker.specTypeInstSubTopLevel || seeker.curlyDepth == 0;
		} else if(seeker.doc != null && seeker.doc.isConstructor) {
			if(seeker.specTypeInstSubTopLevel) {
				isConstructorField = seeker.curlyDepth >= 1;
			} else {
				isConstructorField = seeker.curlyDepth == 1;
			}
		} else {
			isConstructorField = false;
		}
		if(seeker.specTypeInstSubTopLevel && seeker.withStartsAtCurlyDepth >= 0) {
			isConstructorField = false;
		}
	} else {
		isConstructorField = false;
	}
	var kind = gml_GmlAPI.stdKind[s];
	var addInstField;
	if(kind != null) {
		if(kind == "keyword") {
			return;
		} else {
			var ns = gml_GmlAPI.gmlNamespaces[s];
			addInstField = ns == null || ns.noTypeRef;
		}
	} else {
		addInstField = true;
	}
	if(!addInstField && (seeker.isCreateEvent || !isConstructorField || kind != "variable")) {
		return;
	}
	var skip = false;
	var arrayAccessors = [];
	seeker.saveReader();
	_hx_loop3: while(q.get_loop()) switch(q.source.charCodeAt(q.pos++)) {
	case 9:case 10:case 13:case 32:
		break;
	case 61:
		skip = q.source.charCodeAt(q.pos) == 61;
		break _hx_loop3;
	case 91:
		var arrayLoop = true;
		do {
			var arrayAccessor = 0;
			switch(q.source.charCodeAt(q.pos)) {
			case 35:
				arrayAccessor = 4;
				break;
			case 36:
				arrayAccessor = 2;
				break;
			case 63:
				arrayAccessor = 5;
				q.pos += 1;
				q.skipSpaces1();
				var c = q.source.charCodeAt(q.pos);
				if(c >= 48 && c <= 57 || c == 46) {
					arrayAccessor = 6;
				} else if(c == 64) {
					switch(q.source.charCodeAt(q.pos + 1)) {
					case 34:case 39:
						arrayAccessor = 7;
						break;
					}
				}
				break;
			case 124:
				arrayAccessor = 3;
				break;
			}
			arrayAccessors.push(arrayAccessor);
			var sqbDepth = 1;
			while(q.get_loop()) {
				_hx_loop6: while(q.get_loop()) if(q.skipCommon_inline() < 0) {
					switch(q.source.charCodeAt(q.pos++)) {
					case 44:
						if(arrayAccessor == 0) {
							arrayAccessor = 1;
							arrayAccessors.push(0);
						}
						break;
					case 91:
						++sqbDepth;
						break;
					case 93:
						if(--sqbDepth <= 0) {
							q.skipSpaces1();
							arrayLoop = q.skipIfEquals(91);
							break _hx_loop6;
						}
						break;
					}
				}
				q.skipSpaces1();
				if(!q.skipIfEquals(91)) {
					break;
				}
			}
		} while(arrayLoop && q.get_loop());
		if(q.skipIfEquals(61)) {
			skip = q.source.charCodeAt(q.pos) == 61;
		} else {
			skip = true;
		}
		break _hx_loop3;
	default:
		skip = true;
		break _hx_loop3;
	}
	if(skip) {
		seeker.reader.setTo(seeker.swapReader);
		return;
	}
	if(addInstField) {
		parsers_seeker_GmlSeekerProcField.addInstVar(seeker,s);
	}
	if(isConstructorField) {
		parsers_seeker_GmlSeekerProcExpr.proc(seeker,s);
		var args = parsers_seeker_GmlSeekerProcExpr.args;
		var argTypes = parsers_seeker_GmlSeekerProcExpr.argTypes;
		var isConstructor = parsers_seeker_GmlSeekerProcExpr.isConstructor;
		var templateSelf = parsers_seeker_GmlSeekerProcExpr.templateSelf;
		var templateItems = parsers_seeker_GmlSeekerProcExpr.templateItems;
		var fieldType = parsers_seeker_GmlSeekerProcExpr.fieldType;
		var arrayAccInd = arrayAccessors.length;
		while(--arrayAccInd >= 0) switch(arrayAccessors[arrayAccInd]) {
		case 0:
			fieldType = gml_type_GmlType.TInst("array",[fieldType],32);
			break;
		case 2:
			fieldType = gml_type_GmlTypeParser.parse("struct",null);
			break;
		case 3:
			fieldType = gml_type_GmlType.TInst("ds_list",[fieldType],33);
			break;
		case 4:
			fieldType = gml_type_GmlType.TInst("ds_grid",[fieldType],35);
			break;
		case 5:
			fieldType = gml_type_GmlType.TInst("ds_map",[null,fieldType],34);
			break;
		case 6:
			fieldType = gml_type_GmlType.TInst("ds_map",[gml_type_GmlTypeDef.number,fieldType],34);
			break;
		case 7:
			fieldType = gml_type_GmlType.TInst("ds_map",[gml_type_GmlTypeDef.string,fieldType],34);
			break;
		default:
		}
		parsers_seeker_GmlSeekerProcField.addFieldHint(seeker,isConstructor,seeker.jsDoc.interfaceName,true,s,args,null,fieldType,argTypes,true);
		var addFieldHint_doc = parsers_seeker_GmlSeekerProcField.addFieldHint_doc;
		if(templateSelf != null && addFieldHint_doc != null) {
			addFieldHint_doc.templateSelf = templateSelf;
			addFieldHint_doc.templateItems = templateItems;
		}
	}
	seeker.reader.setTo(seeker.swapReader);
};
var parsers_seeker_GmlSeekerProcMacro = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcMacro"] = parsers_seeker_GmlSeekerProcMacro;
parsers_seeker_GmlSeekerProcMacro.__name__ = "parsers.seeker.GmlSeekerProcMacro";
parsers_seeker_GmlSeekerProcMacro.proc = function(seeker) {
	var q = seeker.reader;
	q.skipSpaces0();
	var c = q.source.charCodeAt(q.pos);
	if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
		return;
	}
	var p = q.pos;
	q.skipIdent1();
	var name = q.source.substring(p,q.pos);
	var cfg;
	if(q.source.charCodeAt(q.pos) == 58) {
		q.pos += 1;
		c = q.source.charCodeAt(q.pos);
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			p = q.pos;
			q.skipIdent1();
			cfg = name;
			name = q.source.substring(p,q.pos);
		} else {
			cfg = null;
		}
	} else {
		cfg = null;
	}
	q.skipSpaces0();
	p = q.pos;
	var expr = "";
	do {
		q.skipLine();
		if(q.source.charCodeAt(q.pos + (-1)) == 92) {
			expr += q.source.substring(p,q.pos - 1) + "\n";
			q.skipLineEnd();
			p = q.pos;
			q.row += 1;
		} else {
			break;
		}
	} while(q.pos < q.length);
	expr += q.source.substring(p,q.pos);
	if(cfg == null || cfg == seeker.project.config) {
		var m = new gml_GmlMacro(name,seeker.orig,expr,cfg);
		var out = seeker.out;
		if(Object.prototype.hasOwnProperty.call(out.macros.map,name)) {
			out.comps.remove(name);
		} else {
			out.kindList.push(name);
			if(gml_GmlAPI.stdKind[m.expr] == "keyword") {
				out.kindMap[name] = "keyword";
			} else {
				out.kindMap[name] = "macro";
			}
		}
		var i = name.indexOf("_mf");
		if(i < 0 || !Object.prototype.hasOwnProperty.call(out.mfuncs.map,name.substring(0,i))) {
			out.comps.set(name,m.comp);
			seeker.setLookup(name,true,"macro");
		} else {
			q.row -= 1;
		}
		out.macros.set(name,m);
	}
};
var parsers_seeker_GmlSeekerProcVar = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcVar"] = parsers_seeker_GmlSeekerProcVar;
parsers_seeker_GmlSeekerProcVar.__name__ = "parsers.seeker.GmlSeekerProcVar";
parsers_seeker_GmlSeekerProcVar.procLambdaIdent = function(seeker,s,locals) {
	var seekData = synext_GmlExtLambda.seekData;
	var lfLocals = seekData.locals[s];
	var project = seeker.project;
	if(lfLocals == null && project.properties.lambdaMode == 2) {
		var rel = "scripts/" + s + "/" + s + ".gml";
		var full = project.fullPath(rel);
		var lgml;
		try {
			lgml = project.readTextFileSync(rel);
		} catch( _g ) {
			lgml = null;
		}
		if(lgml == null) {
			console.warn("Lambda missing: " + s);
			lgml = "";
		}
		parsers_GmlSeeker.runSync(full,lgml,"",file_kind_gml_KGmlLambdas.inst);
		var d = parsers_GmlSeekData.map[full];
		if(d == null) {
			console.warn("We just asked to index a lambda script and it's not there..?");
			lfLocals = new gml_GmlLocals(s);
		} else {
			lfLocals = d.locals[""];
		}
		seekData.locals[s] = lfLocals;
	}
	if(lfLocals != null) {
		locals.addLocals(lfLocals);
	}
};
parsers_seeker_GmlSeekerProcVar.proc = function(seeker,kind) {
	var q = seeker.reader;
	var locals = seeker.locals;
	var localKind = seeker.localKind;
	var hasFunctionLiterals = seeker.hasFunctionLiterals;
	var funcsAreGlobal = seeker.funcsAreGlobal;
	var canLam = seeker.canLam;
	var isStatic = kind == "static";
	var isConstructor = seeker.doc != null && seeker.doc.isConstructor;
	var isStaticCtr = isStatic && isConstructor;
	var add = q.version.hasScriptDotStatic();
	if(add) {
		if(isStaticCtr && seeker.strictStaticJSDoc) {
			if(seeker.jsDoc.isStatic) {
				seeker.jsDoc.isStatic = false;
			} else {
				add = false;
			}
		}
	}
	var addStaticHint = add;
	_hx_loop1: while(q.get_loop()) {
		q.skipSpaces1();
		var c = q.source.charCodeAt(q.pos);
		var name;
		if(c == 47) {
			switch(q.source.charCodeAt(q.pos + 1)) {
			case 42:
				q.pos += 2;
				q.skipComment();
				continue;
			case 47:
				q.pos += 2;
				q.skipLine();
				continue;
			default:
				break _hx_loop1;
			}
		} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			name = q.readIdent();
		} else {
			break;
		}
		if(name == null) {
			break;
		}
		if(name == (isStatic ? "static" : "var")) {
			name = parsers_seeker_GmlSeekerParser.find(seeker,1);
		} else if(gml_GmlAPI.kwFlow[name]) {
			break;
		}
		if(!isStaticCtr) {
			locals.add(name,localKind);
		}
		seeker.saveReader();
		var s = [parsers_seeker_GmlSeekerParser.find(seeker,1681)];
		if(s[0] != null && s[0].startsWith("/*")) {
			parsers_seeker_GmlSeekerProcVar.localType.exec(s[0]);
			s[0] = parsers_seeker_GmlSeekerParser.find(seeker,1681);
		}
		var skipBalancedExpr = (function(s) {
			return function() {
				var depth = 0;
				var exit = false;
				_hx_loop1: while(q.get_loop()) {
					seeker.saveReader();
					s[0] = parsers_seeker_GmlSeekerParser.find(seeker,62177);
					if(s[0] == null) {
						exit = true;
						break;
					}
					switch(s[0]) {
					case ",":
						if(depth == 0) {
							break _hx_loop1;
						}
						break;
					case ";":
						exit = true;
						break _hx_loop1;
					case "(":case "[":case "{":
						++depth;
						break;
					case ")":case "]":case "}":
						--depth;
						if(depth < 0) {
							if(s[0] == "}") {
								seeker.curlyDepth++;
							}
							q.pos--;
							break _hx_loop1;
						}
						break;
					default:
						if(hasFunctionLiterals && s[0] == "function") {
							var oldLocalKind = seeker.localKind;
							if(seeker.curlyDepth > 0 || !funcsAreGlobal) {
								seeker.localKind = "sublocal";
							}
							parsers_seeker_GmlSeekerProcDefine.procFuncLiteralArgs(seeker,false);
							seeker.doLoop(seeker.curlyDepth);
							seeker.localKind = oldLocalKind;
						} else if(gml_GmlAPI.kwFlow[s[0]]) {
							seeker.reader.setTo(seeker.swapReader);
							exit = true;
							break _hx_loop1;
						} else if(canLam && s[0].startsWith("__lf_")) {
							parsers_seeker_GmlSeekerProcVar.procLambdaIdent(seeker,s[0],locals);
							continue;
						}
					}
				}
				return exit;
			};
		})(s);
		if(s[0] != ",") {
			if(s[0] == "=" && isStatic) {
				var oldLocalKind = seeker.localKind;
				seeker.localKind = "sublocal";
				parsers_seeker_GmlSeekerProcExpr.proc(seeker,name,true);
				var exprIsFunction = parsers_seeker_GmlSeekerProcExpr.isFunction;
				if(exprIsFunction) {
					seeker.doLoop(seeker.curlyDepth);
				}
				var args = parsers_seeker_GmlSeekerProcExpr.args;
				var argTypes = parsers_seeker_GmlSeekerProcExpr.argTypes;
				var exprIsConstructor = parsers_seeker_GmlSeekerProcExpr.isConstructor;
				var templateSelf = parsers_seeker_GmlSeekerProcExpr.templateSelf;
				var templateItems = parsers_seeker_GmlSeekerProcExpr.templateItems;
				var fieldType = parsers_seeker_GmlSeekerProcExpr.fieldType;
				if(isConstructor) {
					parsers_seeker_GmlSeekerProcField.addFieldHint(seeker,exprIsConstructor,seeker.jsDoc.interfaceName,true,name,args,null,fieldType,argTypes,true);
					var addFieldHint_doc = parsers_seeker_GmlSeekerProcField.addFieldHint_doc;
					if(templateSelf != null && addFieldHint_doc != null) {
						addFieldHint_doc.templateSelf = templateSelf;
						addFieldHint_doc.templateItems = templateItems;
					}
				}
				if(addStaticHint) {
					parsers_seeker_GmlSeekerProcField.addFieldHint(seeker,exprIsConstructor,seeker.jsDoc.interfaceName,false,name,args,null,fieldType,argTypes,true);
					var addFieldHint_doc1 = parsers_seeker_GmlSeekerProcField.addFieldHint_doc;
					if(templateSelf != null && addFieldHint_doc1 != null) {
						addFieldHint_doc1.templateSelf = templateSelf;
						addFieldHint_doc1.templateItems = templateItems;
					}
				}
				seeker.localKind = oldLocalKind;
				if(exprIsFunction) {
					q.skipSpaces1_local();
					var c1 = q.source.charCodeAt(q.pos);
					if(c1 == 44) {
						continue;
					}
					if(c1 == 59) {
						break;
					}
					if(c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90) {
						break;
					}
				}
				if(skipBalancedExpr()) {
					break;
				}
			} else if(s[0] == "=") {
				if(skipBalancedExpr()) {
					break;
				}
			} else {
				seeker.reader.setTo(seeker.swapReader);
				break;
			}
		}
	}
};
var parsers_seeker_GmlSeekerProcWith = function() { };
$hxClasses["parsers.seeker.GmlSeekerProcWith"] = parsers_seeker_GmlSeekerProcWith;
parsers_seeker_GmlSeekerProcWith.__name__ = "parsers.seeker.GmlSeekerProcWith";
parsers_seeker_GmlSeekerProcWith.proc = function(seeker) {
	var q = seeker.reader;
	seeker.locals.hasWith = true;
	q.skipSpaces1();
	if(q.skipIfEquals(40)) {
		q.skipBalancedParenExpr();
	} else {
		q.skipVarExpr(q.version,123);
	}
	q.skipSpaces1();
	if(q.source.charCodeAt(q.pos) == 123) {
		if(seeker.withStartsAtCurlyDepth < 0) {
			seeker.withStartsAtCurlyDepth = seeker.curlyDepth + 1;
		}
	}
};
var ui_Sidebar = function() { };
$hxClasses["ui.Sidebar"] = ui_Sidebar;
ui_Sidebar.__name__ = "ui.Sidebar";
ui_Sidebar.sync = function() {
	var n = ui_Sidebar.list.length;
	var v = n == 0 ? "none" : "";
	if(ui_Sidebar.sizer.style.display != v) {
		ui_Sidebar.sizer.style.display = v;
		ui_Sidebar.outer.style.display = v;
		GMEdit_Splitter.syncMain();
		var e = document.createEvent("UIEvents");
		e.initUIEvent("resize",true,false,window,0);
		window.dispatchEvent(e);
	}
	ui_Sidebar.select.style.display = n <= 1 ? "none" : "";
};
ui_Sidebar.set = function(name) {
	var item = ui_Sidebar.map[name];
	if(item == null) {
		return;
	}
	var curr = ui_Sidebar.panel.children[0];
	if(curr == item.el) {
		return;
	}
	var fn = ui_Sidebar.select.onchange;
	ui_Sidebar.select.onchange = null;
	ui_Sidebar.select.value = name;
	if(curr != null) {
		ui_Sidebar.panel.removeChild(curr);
	}
	ui_Sidebar.panel.appendChild(item.el);
	ui_Sidebar.select.onchange = fn;
};
ui_Sidebar.add = function(name,el) {
	var item = ui_Sidebar.map[name];
	if(item != null) {
		HxOverrides.remove(ui_Sidebar.list,item);
	}
	item = new ui__$Sidebar_SidebarItem(name,el);
	ui_Sidebar.map[name] = item;
	ui_Sidebar.list.push(item);
	ui_Sidebar.select.appendChild(item.opt);
	if(ui_Sidebar.panel.children[0] == null) {
		ui_Sidebar.set(name);
	}
	ui_Sidebar.sync();
};
ui_Sidebar.remove = function(name,el) {
	var item = ui_Sidebar.map[name];
	if(item == null) {
		return false;
	}
	if(el != null && item.el != el) {
		return false;
	}
	delete ui_Sidebar.map[name];
	HxOverrides.remove(ui_Sidebar.list,item);
	ui_Sidebar.select.removeChild(item.opt);
	if(ui_Sidebar.panel.children[0] == item.el) {
		ui_Sidebar.panel.removeChild(item.el);
		if(ui_Sidebar.list.length > 0) {
			ui_Sidebar.set(ui_Sidebar.list[0].name);
		}
	}
	ui_Sidebar.sync();
	return true;
};
ui_Sidebar.init = function() {
	ui_Sidebar.select = document.querySelector("#misc-select");
	ui_Sidebar.panel = document.querySelector("#misc-panel");
	ui_Sidebar.sizer = document.querySelector("#misc-splitter-td");
	ui_Sidebar.outer = document.querySelector("#misc-td");
	ui_Sidebar.select.onchange = function(_) {
		ui_Sidebar.set(ui_Sidebar.select.value);
	};
};
var plugins_PluginAPI = $hx_exports["GMEdit"] = function() { };
$hxClasses["plugins.PluginAPI"] = plugins_PluginAPI;
plugins_PluginAPI.__name__ = "plugins.PluginAPI";
plugins_PluginAPI.extend = function(proto,fields) {
	throw haxe_Exception.thrown("Hooked at runtime!");
};
plugins_PluginAPI.register = function(pluginName,data) {
	var state = plugins_PluginManager.registerMap[pluginName];
	if(state == null) {
		throw haxe_Exception.thrown("There's no plugin named " + pluginName);
	}
	state.data = data;
};
plugins_PluginAPI._emit = function(eventName,e) {
	throw haxe_Exception.thrown("Failed to hook EventEmitter for PluginAPI");
};
plugins_PluginAPI._signal = function(eventName,e) {
	throw haxe_Exception.thrown("Failed to hook EventEmitter for PluginAPI");
};
var plugins_PluginManager = function() { };
$hxClasses["plugins.PluginManager"] = plugins_PluginManager;
plugins_PluginManager.__name__ = "plugins.PluginManager";
plugins_PluginManager.load = function(name,cb) {
	var state = plugins_PluginManager.pluginMap[name];
	if(state != null) {
		if(state.ready) {
			cb(state.error);
		} else {
			state.listeners.push(cb);
		}
		return;
	}
	var dir = plugins_PluginManager.pluginDir[name];
	if(dir == null) {
		if(cb != null) {
			cb(new Error("Plugin " + name + " does not exist"));
		}
		return;
	}
	var state = new plugins_PluginState(name,dir + "/" + name);
	if(cb != null) {
		state.listeners.push(cb);
	}
	plugins_PluginManager.pluginMap[name] = state;
	var callback = function(err,conf) {
		if(err != null) {
			state.finish(err);
			return;
		}
		if(conf.name == null) {
			state.finish(new Error("Plugin's config.json has no name"));
			return;
		} else {
			state.config = conf;
			plugins_PluginManager.registerMap[conf.name] = state;
		}
		var loadResources = function() {
			var queue = [];
			if(conf.stylesheets != null) {
				var _g = 0;
				var _g1 = conf.stylesheets;
				while(_g < _g1.length) queue.push({ kind : 1, rel : _g1[_g++]});
			}
			if(conf.scripts != null) {
				var _g = 0;
				var _g1 = conf.scripts;
				while(_g < _g1.length) queue.push({ kind : 0, rel : _g1[_g++]});
			}
			var loadNextResource = null;
			loadNextResource = function() {
				var pair = queue.shift();
				var rel = pair.rel;
				switch(pair.kind) {
				case 0:
					var script = document.createElement("script");
					script.setAttribute("plugin",conf.name);
					script.onload = function(_) {
						if(queue.length > 0) {
							loadNextResource();
						} else {
							state.finish();
						}
					};
					script.onerror = function(e) {
						state.finish(e.error);
					};
					script.src = "" + dir + "/" + name + "/" + rel;
					document.head.appendChild(script);
					break;
				case 1:
					var style = document.createElement("link");
					style.setAttribute("plugin",conf.name);
					style.onload = function(_) {
						if(queue.length > 0) {
							loadNextResource();
						} else {
							state.finish();
						}
					};
					style.onerror = function(e) {
						state.finish(e.error);
					};
					style.rel = "stylesheet";
					style.href = "" + dir + "/" + name + "/" + rel;
					document.head.appendChild(style);
					break;
				}
			};
			if(queue.length > 0) {
				loadNextResource();
			} else {
				state.finish();
			}
		};
		var deps = conf.dependencies;
		if(deps != null && deps.length > 0) {
			var depc = deps.length;
			var _g = 0;
			while(_g < deps.length) plugins_PluginManager.load(deps[_g++],function(e) {
				if(e != null) {
					state.finish(e);
				} else if(!state.ready) {
					if((depc -= 1) <= 0) {
						loadResources();
					}
				}
			});
		} else {
			loadResources();
		}
	};
	Electron_FS.readFile("" + dir + "/" + name + "/config.json","utf8",function(e,d) {
		if(d != null) {
			try {
				d = JSON.parse(d);
			} catch( _g ) {
				d = null;
				e = haxe_Exception.caught(_g).unwrap();
			}
		}
		callback(e,d);
	});
};
plugins_PluginManager.init = function(cb) {
	try {
		$hxClasses["Main"];
		window.$hxClasses = $hxClasses;
		window.$gmedit = $hxClasses;
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.error("Couldn't expose hxClasses:",_g1);
	}
	try {
		plugins_PluginAPI.extend = $extend;
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.error("Couldn't expose $extend:",_g1);
	}
	try {
		var EventEmitter = ace.require("ace/lib/event_emitter").EventEmitter;
		AceOOP.implement(plugins_PluginAPI,EventEmitter);
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.error("Couldn't add event emitting:",_g1);
	}
	var list;
	if(Electron_FS.existsSync != null) {
		list = [];
		var dir = electron_FileWrap.userPath + "/plugins";
		if(Electron_FS.existsSync(dir)) {
			var _g = 0;
			var _g1 = Electron_FS.readdirSync(dir);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(Electron_FS.existsSync("" + dir + "/" + name + "/config.json") && list.indexOf(name) < 0) {
					list.push(name);
					plugins_PluginManager.pluginDir[name] = dir;
				}
			}
		}
		var dir = haxe_io_Path.join([Main.modulePath,"plugins"]);
		if(Electron_FS.existsSync(dir)) {
			var _g = 0;
			var _g1 = Electron_FS.readdirSync(dir);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(Electron_FS.existsSync("" + dir + "/" + name + "/config.json") && list.indexOf(name) < 0) {
					list.push(name);
					plugins_PluginManager.pluginDir[name] = dir;
				}
			}
		}
	} else {
		list = ["outline-view","image-viewer","ini-editor","gen-enum-names","show-aside"];
		var _g = 0;
		while(_g < list.length) plugins_PluginManager.pluginDir[list[_g++]] = "plugins";
	}
	var pluginsLeft = 1;
	var next = function(_) {
		if((pluginsLeft -= 1) <= 0) {
			cb();
		}
	};
	var _g = 0;
	while(_g < list.length) {
		pluginsLeft += 1;
		plugins_PluginManager.load(list[_g++],next);
	}
	next(null);
	plugins_PluginManager.ready = true;
};
plugins_PluginManager.dispatchInitCallbacks = function() {
	var _g = 0;
	var _g1 = plugins_PluginManager.pluginList;
	while(_g < _g1.length) {
		var pluginState = plugins_PluginManager.pluginMap[_g1[_g++]];
		if(pluginState.error == null && pluginState.data.init != null) {
			pluginState.data.init(pluginState);
		}
	}
};
var plugins_PluginState = function(name,dir) {
	this.elements = [];
	this.data = null;
	this.listeners = [];
	this.error = null;
	this.ready = false;
	this.name = name;
	this.dir = dir;
};
$hxClasses["plugins.PluginState"] = plugins_PluginState;
plugins_PluginState.__name__ = "plugins.PluginState";
plugins_PluginState.prototype = {
	destroy: function() {
		if(this.data != null && this.data.cleanup != null) {
			this.data.cleanup();
		}
		var _g = 0;
		var _g1 = this.elements;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			var p = el.parentElement;
			if(p != null) {
				p.removeChild(el);
			}
		}
		delete plugins_PluginManager.pluginMap[this.name];
		delete plugins_PluginManager.registerMap[this.config.name];
	}
	,finish: function(error) {
		this.ready = true;
		if(error == null && this.data == null) {
			error = new Error("Plugin did not call register()");
		}
		if(error != null) {
			console.error("Plugin load failed for " + this.name + ":",error);
		} else {
			console.log("Plugin loaded: " + this.name);
		}
		if(plugins_PluginManager.pluginList.indexOf(this.name) < 0) {
			plugins_PluginManager.pluginList.push(this.name);
		}
		this.error = error;
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) _g1[_g++](error);
		this.listeners.length = 0;
	}
	,__class__: plugins_PluginState
};
var raw_RawLoader = function() { };
$hxClasses["raw.RawLoader"] = raw_RawLoader;
raw_RawLoader.__name__ = "raw.RawLoader";
raw_RawLoader.loadDirRec = function(project,out,dirPath) {
	var gmlExtensions = project.version.config.gmlExtensions;
	var dirPairs = project.readdirSync(dirPath);
	var assetThumbs = ui_Preferences.current.assetThumbs;
	var _g = 0;
	while(_g < 2) {
		var dirPass = _g++;
		var _g1 = 0;
		while(_g1 < dirPairs.length) {
			var pair = dirPairs[_g1];
			++_g1;
			if(pair.isDirectory != (dirPass == 0)) {
				continue;
			}
			var item = pair.fileName;
			var rel = haxe_io_Path.join([dirPath,item]);
			if(pair.isDirectory) {
				var nd = ui_treeview_TreeView.makeAssetDir(item,rel,"file");
				raw_RawLoader.loadDirRec(project,nd.treeItems,rel);
				out.appendChild(nd);
			} else {
				var full = project.fullPath(rel);
				var item1 = ui_treeview_TreeView.makeAssetItem(item,rel,full,"file");
				out.appendChild(item1);
				if(assetThumbs || gmlExtensions != null) {
					var ext = haxe_io_Path.extension(full).toLowerCase();
					if(gmlExtensions != null && gmlExtensions.indexOf(ext) >= 0) {
						item1.yyOpenAs = file_kind_KGml.inst;
					} else if(assetThumbs) {
						switch(ext) {
						case "bmp":case "gif":case "jpeg":case "jpg":case "png":
							ui_treeview_TreeView.setThumb(full,full,item1);
							break;
						}
					}
				}
			}
		}
	}
};
raw_RawLoader.run = function(project) {
	ui_treeview_TreeView.clear();
	var topLevel = ui_treeview_TreeView.makeAssetDir(project.displayName,"","file");
	tools_HtmlTools.setTokenFlag(topLevel.classList,"open",true);
	topLevel.treeHeader.classList.add("hidden");
	ui_treeview_TreeView.element.appendChild(topLevel);
	raw_RawLoader.loadDirRec(project,topLevel.treeItems,"");
	parsers_GmlSeeker.start();
	gml_GmlAPI.gmlClear();
	gml_GmlAPI.extClear();
	var wantIndex = project.version.config.indexingMode == "directory";
	var _g = 0;
	var _g1 = topLevel.querySelectorAll("div." + "item");
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		var full = item.getAttribute("data-full-path");
		if(full == null) {
			continue;
		}
		var rel = item.getAttribute("data-rel-path");
		gml_GmlAPI.gmlLookup[rel] = { path : full, sub : null, row : 0};
		gml_GmlAPI.gmlLookupItems.push({ value : rel});
		if(!wantIndex || haxe_io_Path.extension(full).toLowerCase() != "gml") {
			continue;
		}
		var name = haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(full));
		parsers_GmlSeeker.run(full,name,file_kind_gml_KGmlScript.inst);
		gml_GmlAPI.gmlKind[name] = "asset.script";
		var comp = { name : name, value : name, score : 0, meta : "script", doc : null};
		gml_GmlAPI.gmlComp.push(comp);
		gml_GmlAPI.gmlAssetComp[name] = comp;
	}
};
var raw_RawSearcher = function() { };
$hxClasses["raw.RawSearcher"] = raw_RawSearcher;
raw_RawSearcher.__name__ = "raw.RawSearcher";
raw_RawSearcher.run = function(pj,fn,done,opt) {
	var filesLeft = 1;
	var searchRec = null;
	searchRec = function(dirPath) {
		var _g = 0;
		var _g1 = pj.readdirSync(dirPath);
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			var relPath = [pair.relPath];
			var fullPath = pair.fullPath;
			if(pair.isDirectory) {
				searchRec(relPath[0]);
			} else if(haxe_io_Path.extension(fullPath).toLowerCase() == "gml") {
				filesLeft += 1;
				pj.readTextFile(relPath[0],(function(relPath) {
					return function(err,code) {
						if(err == null) {
							var name;
							if(pj.version.config.indexingMode == "local") {
								name = relPath[0];
							} else {
								name = haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(relPath[0]));
							}
							var gml1 = fn(name,relPath[0],code);
							if(gml1 != null && gml1 != code) {
								pj.writeTextFileSync(relPath[0],gml1);
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(relPath));
			}
		}
	};
	searchRec("");
	if((filesLeft -= 1) <= 0) {
		done();
	}
};
var resource_SpriteManipulator = function() {
	this.onReady = new tools_EventHandler();
	this.canvas = document.createElement("canvas");
	this.canvasContext = this.canvas.getContext("2d",null);
};
$hxClasses["resource.SpriteManipulator"] = resource_SpriteManipulator;
resource_SpriteManipulator.__name__ = "resource.SpriteManipulator";
resource_SpriteManipulator.MeasureSpriteAsync = function(spritePath) {
	return new Promise(function(resolve,reject) {
		var image = new Image();
		image.onload = function() {
			resolve({ width : image.width, height : image.height});
			return image.src = "";
		};
		image.onerror = function() {
			reject("Image failed to load");
		};
		image.src = spritePath;
	});
};
resource_SpriteManipulator.prototype = {
	setSprite: function(spritePath) {
		this.canvasContext.clearRect(0,0,this.canvas.width,this.canvas.height);
		this.image = new Image();
		this.imageHasLoaded = false;
		this.image.onload = $bind(this,this.onImageLoad);
		this.image.src = spritePath;
	}
	,onImageLoad: function() {
		this.imageHasLoaded = true;
		this.canvas.width = this.image.width;
		this.canvas.height = this.image.height;
		this.canvasContext.drawImage(this.image,0,0);
		this.onReady.invoke(null);
	}
	,getBoundingBox: function(tolerance) {
		var imageData = this.canvasContext.getImageData(0,0,this.canvas.width,this.canvas.height);
		var width = this.canvas.width;
		var height = this.canvas.height;
		var minX = width;
		var minY = height;
		var maxX = 0;
		var maxY = 0;
		var _g = 0;
		while(_g < height) {
			var y = _g++;
			var _g1 = 0;
			while(_g1 < width) {
				var x = _g1++;
				if(imageData.data[(y * width + x) * 4 + 3] > tolerance) {
					maxX = Math.max(maxX,x);
					maxY = Math.max(maxY,y);
					minX = Math.min(minX,x);
					minY = Math.min(minY,y);
				}
			}
		}
		if(minX == width && minY == height && maxX == 0 && maxY == 0) {
			minX = 0;
			minY = 0;
			maxX = 0;
			maxY = 0;
		}
		return { left : minX, top : minY, right : maxX, bottom : maxY};
	}
	,__class__: resource_SpriteManipulator
};
var shaders_ShaderHighlight = $hx_exports["AceShaderHighlight"] = function() {
	ace_extern_AceHighlight.call(this);
	this.$rules = shaders_ShaderHighlight.makeRules(this,shaders_ShaderHighlight.nextKind);
	this.normalizeRules();
};
$hxClasses["shaders.ShaderHighlight"] = shaders_ShaderHighlight;
shaders_ShaderHighlight.__name__ = "shaders.ShaderHighlight";
shaders_ShaderHighlight.makeRules = function(hl,kind) {
	var rules = { };
	var pkg;
	var identFunc;
	switch(kind) {
	case 1:
		identFunc = function(s) {
			return (shaders_ShaderAPI.glslKind[s] || "identifier");
		};
		pkg = "glsl";
		break;
	case 2:
		identFunc = function(s) {
			return (shaders_ShaderAPI.hlslKind[s] || "identifier");
		};
		pkg = "hlsl";
		break;
	default:
		identFunc = function(s) {
			return "identifier";
		};
		pkg = "shader";
	}
	rules["start"] = [tools_HighlightTools.rule("comment.line","//.*$",null),tools_HighlightTools.rpush("comment","/\\*",pkg + ".comment"),tools_HighlightTools.rule("numeric","0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",null),tools_HighlightTools.rule("numeric","[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",null),tools_HighlightTools.rule(identFunc,"\\w+",null),tools_HighlightTools.rule("preproc","#(\\w+.+)",null),tools_HighlightTools.rule("set.operator","=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=",null),tools_HighlightTools.rule("operator","!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|==|!=|<=|>=|<>|<|>|!|&&|\\|\\|",null),tools_HighlightTools.rule("punctuation.operator","\\?|:|,|;|\\.",null),tools_HighlightTools.rule("curly.paren.lparen","\\{",null),tools_HighlightTools.rule("curly.paren.rparen","\\}",null),tools_HighlightTools.rule("paren.lparen","[\\[(]",null),tools_HighlightTools.rule("paren.rparen","[\\])]",null),tools_HighlightTools.rule("text","\\s+",null)];
	rules[pkg + ".comment"] = [tools_HighlightTools.rule("comment",".*?\\*/","pop"),tools_HighlightTools.rdef("comment")];
	return rules;
};
shaders_ShaderHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(shaders_ShaderHighlight,TextHighlightRules);
	exports.ShaderHighlightRules = shaders_ShaderHighlight;
};
shaders_ShaderHighlight.init = function() {
	ace.define("ace/mode/shader_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],shaders_ShaderHighlight.define);
};
shaders_ShaderHighlight.__super__ = ace_extern_AceHighlight;
shaders_ShaderHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: shaders_ShaderHighlight
});
var synext_GmlExtArgs = function() { };
$hxClasses["synext.GmlExtArgs"] = synext_GmlExtArgs;
synext_GmlExtArgs.__name__ = "synext.GmlExtArgs";
synext_GmlExtArgs.rxOpt_init = function() {
	var rx;
	var rsOpt0 = "argument_count" + " " + ">" + " " + "(\\d+)";
	var rsOpt1 = "argument" + "\\[" + "" + "(\\d+)" + "" + "\\]";
	rx = new RegExp("^var" + " " + "(\\w+)" + "(?:" + ("(?:" + ("(?=\\/\\*" + "[ \t]*:[ \t]*" + "\\w+(?:[ \t]*<.*?>)?" + "\\*\\/)\\/\\*|") + ("(?!" + "[ \t]*:[ \t]*" + "\\w+(?:[ \t]*<.*?>)?" + "\\*\\/)") + (")" + "[ \t]*:[ \t]*" + "(" + "\\w+(?:[ \t]*<.*?>)?" + ")(?:\\*\\/)?")) + ")?" + "(?:" + "" + (";" + " " + "if" + " " + "\\(" + "" + rsOpt0 + "" + "\\)" + " ") + ("(\\w+)" + " " + "=" + " " + rsOpt1 + "" + ";" + " ") + ("else" + " " + "(\\w+)" + " " + "=") + "|" + " " + ("=" + " " + rsOpt0 + " " + "\\?" + " " + rsOpt1 + " " + "\\:") + (")" + " " + "([^;]+);"),"g");
	synext_GmlExtArgs.rxOptStrict = rx;
	var rsOpt0 = "argument_count" + "\\s*" + ">" + "\\s*" + "(\\d+)";
	var rsOpt1 = "argument" + "\\s*" + "\\[" + "\\s*" + "(\\d+)" + "\\s*" + "\\]";
	rx = new RegExp("^var" + "\\s+" + "(\\w+)" + "(?:" + ("(?:" + ("(?=\\/\\*" + "[ \t]*:[ \t]*" + "\\w+(?:[ \t]*<.*?>)?" + "\\*\\/)\\/\\*|") + ("(?!" + "[ \t]*:[ \t]*" + "\\w+(?:[ \t]*<.*?>)?" + "\\*\\/)") + (")" + "[ \t]*:[ \t]*" + "(" + "\\w+(?:[ \t]*<.*?>)?" + ")(?:\\*\\/)?")) + ")?" + "(?:" + "\\s*" + (";" + "\\s*" + "if" + "\\s*" + "\\(" + "\\s*" + rsOpt0 + "\\s*" + "\\)" + "\\s*") + ("(\\w+)" + "\\s*" + "=" + "\\s*" + rsOpt1 + "\\s*" + ";" + "\\s*") + ("else" + "\\s*" + "(\\w+)" + "\\s*" + "=") + "|" + "\\s*" + ("=" + "\\s*" + rsOpt0 + "\\s*" + "\\?" + "\\s*" + rsOpt1 + "\\s*" + "\\:") + (")" + "\\s*" + "([^;]+);"),"g");
	return rx;
};
synext_GmlExtArgs.pre = function(code,strict) {
	var version = gml_GmlAPI.version;
	if(!ui_Preferences.current.argsMagic) {
		return code;
	}
	if(strict == null) {
		strict = ui_Preferences.current.argsStrict;
	}
	var hasFunctionLiterals = gml_Project.current.version.hasFunctionLiterals();
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	var rxOpt = strict ? synext_GmlExtArgs.rxOptStrict : synext_GmlExtArgs.rxOpt;
	var proc = function() {
		var args = "#args";
		var argv = false;
		var found = 0;
		var c;
		var s;
		var spStart;
		var pos = q.pos;
		q.skipLine();
		rxOpt.lastIndex = 0;
		var hasReq = !rxOpt.test(q.source.substring(pos,q.pos));
		q.pos = pos + (hasReq ? 3 : 0);
		if(hasReq) {
			_hx_loop1: while(q.get_loop()) {
				spStart = q.pos;
				q.skipSpaces0();
				if(strict && q.pos - spStart != 1) {
					return null;
				}
				if(q.get_eof()) {
					return null;
				}
				pos = q.pos;
				c = q.source.charCodeAt(q.pos);
				if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
					return null;
				}
				q.skipIdent1();
				s = q.source.substring(pos,q.pos);
				if(found > 0) {
					args += ",";
				}
				args += " " + s;
				spStart = q.pos;
				q.skipSpaces0();
				if(q.source.charCodeAt(q.pos) == 47 && q.source.charCodeAt(q.pos + 1) == 42) {
					if(strict && q.pos != spStart) {
						return null;
					}
					var typePos = q.pos;
					q.pos += 2;
					q.skipComment();
					var type = synext_GmlExtImport.rxLocalType.exec(q.source.substring(typePos,q.pos));
					if(type != null) {
						args += ":" + type[1];
					}
					q.skipSpaces0();
				} else if(q.source.charCodeAt(q.pos) == 58) {
					if(strict && q.pos != spStart) {
						return null;
					}
					var typePos1 = q.pos;
					q.pos += 1;
					q.skipSpaces0();
					c = q.source.charCodeAt(q.pos);
					if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
						return null;
					}
					q.skipIdent1();
					if(q.source.charCodeAt(q.pos) == 60) {
						while(q.get_loop()) if(q.source.charCodeAt(q.pos++) == 62) {
							break;
						}
					}
					args += q.source.substring(typePos1,q.pos);
					q.skipSpaces0();
				} else if(strict && q.pos != spStart + 1) {
					return null;
				}
				if(q.get_eof() || q.source.charCodeAt(q.pos) != 61) {
					return null;
				}
				q.pos += 1;
				spStart = q.pos;
				q.skipSpaces0();
				if(strict && q.pos - spStart != 1) {
					return null;
				}
				if(q.get_eof() || q.source.charCodeAt(q.pos) != 97) {
					return null;
				}
				pos = q.pos;
				q.skipIdent1();
				s = q.source.substring(pos,q.pos);
				if(s == "argument") {
					spStart = q.pos;
					q.skipSpaces0();
					if(strict && q.pos - spStart != 0) {
						return null;
					}
					if(q.get_eof() || q.source.charCodeAt(q.pos) != 91) {
						return null;
					}
					q.pos += 1;
					spStart = q.pos;
					q.skipSpaces0();
					if(strict && q.pos - spStart != 0) {
						return null;
					}
					if(q.get_eof()) {
						return null;
					}
					pos = q.pos;
					q.skipIdent1();
					if(q.source.substring(pos,q.pos) != "" + found) {
						return null;
					}
					spStart = q.pos;
					q.skipSpaces0();
					if(strict && q.pos - spStart != 0) {
						return null;
					}
					if(q.get_eof() || q.source.charCodeAt(q.pos) != 93) {
						return null;
					}
					q.pos += 1;
					argv = true;
				} else if(s != "argument" + found) {
					return null;
				}
				++found;
				q.skipSpaces0();
				if(q.get_eof()) {
					break;
				}
				c = q.source.charCodeAt(q.pos);
				switch(c) {
				case 44:
					q.pos += 1;
					break;
				case 59:
					q.pos += 1;
					q.skipSpaces0();
					var proc;
					if(q.pos < q.length) {
						var this1 = q.source.charCodeAt(q.pos);
						proc = !(this1 > 8 && this1 < 14 || this1 == 32);
					} else {
						proc = false;
					}
					if(proc) {
						return null;
					}
					break _hx_loop1;
				default:
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						break _hx_loop1;
					} else {
						return null;
					}
				}
			}
		}
		var req = found;
		var till = q.pos;
		while(q.get_loop()) {
			q.skipSpaces1();
			pos = q.pos;
			q.skipIdent1();
			s = q.source.substring(pos,q.pos);
			if(s != "var") {
				q.pos = till;
				break;
			}
			q.skipLine();
			rxOpt.lastIndex = 0;
			var mt = rxOpt.exec(q.source.substring(pos,q.pos));
			if(mt == null) {
				q.pos = till;
				break;
			}
			q.pos = pos + rxOpt.lastIndex;
			var name = mt[1];
			var type = mt[2];
			var fs = "" + found;
			if(mt[3] != null ? mt[3] != fs || mt[4] != name || mt[5] != fs || mt[6] != name : mt[7] != fs || mt[8] != fs) {
				q.pos = till;
				break;
			}
			var val = mt[9];
			if(found > 0) {
				args += ",";
			}
			var isOpt = val == "undefined";
			args += (isOpt ? " ?" : " ") + name + (type != null ? ":" + type : "") + (isOpt ? "" : " = " + val);
			++found;
			till = q.pos;
		}
		if(req == found && argv) {
			args += ",";
		}
		if(!hasFunctionLiterals) {
			var trailEnd = code.indexOf("\n#define",q.pos);
			var trailCode;
			if(trailEnd >= 0) {
				trailCode = code.substring(q.pos,trailEnd);
			} else {
				trailCode = code.substring(q.pos);
			}
			synext_GmlExtArgs.rxNotMagic.lastIndex = 0;
			if(synext_GmlExtArgs.rxNotMagic.test(trailCode)) {
				return null;
			}
		}
		if(args == "#args") {
			return null;
		}
		return args;
	};
	var checkArgs = true;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				if(q.source.substring(p,p + 7) == "#define") {
					checkArgs = true;
				}
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			} else if(checkArgs && (c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
				q.skipIdent1();
				var id = q.source.substring(p,q.pos);
				if(id == "var") {
					var p1 = q.pos;
					q.pos = p;
					var s = proc();
					if(s != null) {
						out += q.source.substring(start,p);
						out += s;
						start = q.pos;
						checkArgs = false;
					} else {
						q.pos = p1;
					}
				} else if(hasFunctionLiterals && id == "function") {
					checkArgs = true;
				} else if(synext_GmlExtArgs.argKeywords[id]) {
					checkArgs = false;
				}
			} else if(hasFunctionLiterals && c == 102) {
				q.skipIdent1();
				if(q.source.substring(p,q.pos) == "function") {
					checkArgs = true;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		case 123:
			break;
		case 125:
			break;
		default:
			if(checkArgs && (c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
				q.skipIdent1();
				var id1 = q.source.substring(p,q.pos);
				if(id1 == "var") {
					var p11 = q.pos;
					q.pos = p;
					var s1 = proc();
					if(s1 != null) {
						out += q.source.substring(start,p);
						out += s1;
						start = q.pos;
						checkArgs = false;
					} else {
						q.pos = p11;
					}
				} else if(hasFunctionLiterals && id1 == "function") {
					checkArgs = true;
				} else if(synext_GmlExtArgs.argKeywords[id1]) {
					checkArgs = false;
				}
			} else if(hasFunctionLiterals && c == 102) {
				q.skipIdent1();
				if(q.source.substring(p,q.pos) == "function") {
					checkArgs = true;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtArgs.post = function(code) {
	var version = gml_GmlAPI.version;
	synext_GmlExtArgs.argData = null;
	if(!ui_Preferences.current.argsMagic || code.indexOf("#args") < 0) {
		return code;
	}
	var data = Object.create(null);
	var argNames = [];
	var argTypes = [];
	var argTexts = [];
	var curr = { names : argNames, texts : argTexts, types : argTypes};
	data[""] = curr;
	var q = new parsers_GmlReader(code);
	var row = 0;
	var out = "";
	var start = 0;
	var flush = function(till) {
		out += q.source.substring(start,till);
	};
	var proc = function() {
		var reqDone = null;
		var found = 0;
		var p = q.pos;
		q.skipLine();
		var line = q.source.substring(p,q.pos);
		var hasTail = synext_GmlExtArgs.rxHasTail.test(line);
		var hasOpt = hasTail || synext_GmlExtArgs.rxHasOpt.test(line);
		q.pos = p;
		_hx_loop1: while(q.get_loop()) {
			q.skipSpaces0();
			var val;
			var docName = "";
			var docText = "";
			if(q.source.charCodeAt(q.pos) == 63) {
				q.pos += 1;
				q.skipSpaces0();
				val = "undefined";
				docName = "?";
			} else {
				val = null;
			}
			p = q.pos;
			q.skipIdent1();
			var name = q.source.substring(p,q.pos);
			var type = "";
			var docType = "";
			if(name == "") {
				synext_GmlExtArgs.errorText = "[row " + row + "]: " + "Expected an argument name";
				return true;
			}
			docName += name;
			p = q.pos;
			q.skipSpaces0();
			if(q.source.charCodeAt(q.pos) == 58) {
				q.pos += 1;
				q.skipSpaces0();
				var typePos = q.pos;
				q.skipIdent1();
				if(q.pos > typePos) {
					if(q.source.charCodeAt(q.pos) == 60) {
						q.skipTypeParams();
					}
					docType = q.source.substring(typePos,q.pos);
					type = "/*:" + docType + "*/";
					q.skipSpaces0();
				}
			}
			if(q.source.charCodeAt(q.pos) == 61) {
				if(val != null) {
					synext_GmlExtArgs.errorText = "[row " + row + "]: " + ("?" + name + " means that default value is undefined, why assign another default value after that");
					return true;
				}
				q.pos += 1;
				q.skipSpaces0();
				p = q.pos;
				var depth = 0;
				_hx_loop2: while(q.get_loop()) {
					var c = q.source.charCodeAt(q.pos++);
					switch(c) {
					case 10:case 13:
						q.pos -= 1;
						break _hx_loop2;
					case 36:
						if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
							var row1 = row;
							q.pos += 1;
							row = row1 + q.skipStringTemplate(version,true);
						}
						break;
					case 44:
						if(depth <= 0) {
							q.pos -= 1;
							break _hx_loop2;
						}
						break;
					case 47:
						switch(q.source.charCodeAt(q.pos)) {
						case 42:
							q.pos += 1;
							row += q.skipComment();
							break;
						case 47:
							q.skipLine();
							break;
						default:
						}
						break;
					case 34:case 39:case 64:case 96:
						row += q.skipStringAuto(c,version);
						break;
					case 40:case 91:case 123:
						++depth;
						break;
					case 41:case 93:case 125:
						--depth;
						break;
					default:
					}
				}
				if(depth != 0) {
					synext_GmlExtArgs.errorText = "[row " + row + "]: " + ("Unbalanced expression for value of " + name);
					return true;
				}
				val = q.source.substring(p,q.pos);
			}
			if(val != null) {
				docText = "= " + val;
				if(reqDone == false) {
					reqDone = true;
					out += ";\r\n";
				}
				if(version.hasTernaryOperator()) {
					out += "var " + name + type + " = argument_count > " + found + (" ? argument[" + found + "] : " + val + ";\r\n");
				} else {
					out += "var " + name + type + "; if (argument_count > " + found + ")" + (" " + name + " = argument[" + found + "]; else " + name + " = " + val + ";\r\n");
				}
			} else {
				if(reqDone) {
					synext_GmlExtArgs.errorText = "[row " + row + "]: " + "Can't have required arguments after optional arguments.";
					return true;
				}
				reqDone = false;
				if(found == 0) {
					out += "var ";
				} else if(found > 0) {
					out += ", ";
				}
				out += "" + name + type + " = argument" + (hasOpt ? "[" + found + "]" : "" + found);
			}
			argNames.push(docName);
			argTypes.push(docType);
			argTexts.push(docText);
			++found;
			q.skipSpaces0();
			if(q.get_loop()) {
				switch(q.source.charCodeAt(q.pos)) {
				case 10:case 13:
					q.skipLineEnd();
					break _hx_loop1;
				case 44:
					q.pos += 1;
					q.skipSpaces0();
					switch(q.source.charCodeAt(q.pos)) {
					case 10:case 13:
						q.skipLineEnd();
						break _hx_loop1;
					}
					break;
				default:
					synext_GmlExtArgs.errorText = "[row " + row + "]: " + ("Expected a comma or end of line after " + name);
					return true;
				}
			}
		}
		if(hasTail) {
			argNames.push("...");
			argTypes.push("");
			argTexts.push("");
		}
		if(found > 0 && reqDone == false) {
			out += ";\r\n";
		}
		return false;
	};
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.source.substring(p,p + 5) == "#args") {
				flush(p);
				q.pos += 4;
				if(proc()) {
					return null;
				}
				start = q.pos;
			} else if((p == 0 || q.source.charCodeAt(p - 1) == 10) && q.source.substring(p,p + 7) == "#define") {
				flush(p);
				start = p;
				q.pos += 6;
				q.skipSpaces0();
				p = q.pos;
				q.skipIdent1();
				argNames = [];
				argTypes = [];
				argTexts = [];
				curr = { names : argNames, texts : argTexts, types : argTypes};
				data[q.source.substring(p,q.pos)] = curr;
				q.skipLine();
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				var row1 = row;
				q.pos += 1;
				row = row1 + q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				row += q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			row += q.skipStringAuto(c,version);
			break;
		}
	}
	flush(q.pos);
	synext_GmlExtArgs.argData = data;
	return out;
};
var synext_GmlExtArgsAce = function() { };
$hxClasses["synext.GmlExtArgsAce"] = synext_GmlExtArgsAce;
synext_GmlExtArgsAce.__name__ = "synext.GmlExtArgsAce";
synext_GmlExtArgsAce.getHiddenLines = function(args) {
	var i = 0;
	var depth = 0;
	var state = 0;
	var found = 0;
	var seenOpt = false;
	while(i < args.length) {
		var c = args.charCodeAt(i++);
		switch(c) {
		case 34:
			while(i < args.length) {
				c = args.charCodeAt(i++);
				if(c == 92) {
					++i;
				} else if(c == 34) {
					break;
				}
			}
			break;
		case 39:
			while(i < args.length) {
				c = args.charCodeAt(i++);
				if(c == 39) {
					break;
				}
			}
			break;
		case 44:
			if(depth == 0) {
				state = 0;
				seenOpt = false;
			}
			break;
		case 61:
			if(state == 1) {
				state = 2;
				++found;
			}
			break;
		case 63:
			if(state == 0 && !seenOpt) {
				seenOpt = true;
				++found;
			}
			break;
		case 40:case 91:case 123:
			++depth;
			break;
		case 41:case 93:case 125:
			--depth;
			break;
		default:
			if(depth == 0 && state == 0 && (c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
				while(i < args.length) {
					c = args.charCodeAt(i);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						++i;
					} else {
						break;
					}
				}
				state = 1;
			}
		}
	}
	return found;
};
var synext_GmlExtArgsDoc = function() { };
$hxClasses["synext.GmlExtArgsDoc"] = synext_GmlExtArgsDoc;
synext_GmlExtArgsDoc.__name__ = "synext.GmlExtArgsDoc";
synext_GmlExtArgsDoc.proc1 = function(file) {
	var session = file.getAceSession();
	if(session.getValue().indexOf("#args") < 0) {
		return false;
	}
	var document = session.doc;
	var argData = synext_GmlExtArgs.argData;
	var curr = argData[""];
	var scriptName = file.name;
	var replace = [];
	var iter = new AceTokenIterator(session,0,0);
	var tk = iter.getCurrentToken();
	var foundDoc = false;
	var hasArgs = false;
	var nextItem = null;
	var rx = synext_GmlExtArgsDoc.rxGmDoc;
	var startRow = 0;
	var getArgs = function() {
		var doc = "";
		var _g = 0;
		var _g1 = curr.names.length;
		while(_g < _g1) {
			var i = _g++;
			if(i > 0) {
				doc += ", ";
			}
			doc += curr.names[i];
			var text = curr.texts[i];
			if(StringTools.startsWith(text,"=")) {
				if(HxOverrides.cca(text,1) == 32) {
					doc += " ";
				}
				doc += text;
			}
		}
		return doc;
	};
	var flush = function() {
		if(!hasArgs) {
			return;
		}
		if(foundDoc) {
			if(nextItem != null) {
				replace.unshift(nextItem);
			}
		} else {
			replace.unshift({ range : ace_extern_AceRange.fromPos({ column : 0, row : startRow}), text : "/// " + scriptName + "(" + getArgs() + ")\n"});
		}
	};
	while(tk != null) {
		switch(tk.type) {
		case "comment.doc.line":
			if(!foundDoc) {
				var mt = rx.exec(tk.value);
				if(mt != null) {
					var args = getArgs();
					if(mt[2] != args) {
						var pos = iter.getCurrentTokenPosition();
						var col = pos.column + mt[1].length;
						var row = pos.row;
						nextItem = { range : ace_extern_AceRange._new(col,row,col + mt[2].length,row), text : args};
					}
					foundDoc = true;
				}
			}
			break;
		case "preproc.args":
			hasArgs = true;
			break;
		case "preproc.define":
			tk = iter.stepForward();
			if(tk != null) {
				flush();
				scriptName = tk.value;
				curr = argData[scriptName];
				foundDoc = false;
				hasArgs = false;
				nextItem = null;
				startRow = iter.getCurrentTokenRow() + 1;
			}
			break;
		}
		tk = iter.stepForward();
	}
	flush();
	var _g = 0;
	while(_g < replace.length) {
		var pair = replace[_g];
		++_g;
		document.replace(pair.range,pair.text);
	}
	return replace.length > 0;
};
synext_GmlExtArgsDoc.proc2 = function(file,meta) {
	var session = file.getAceSession();
	if(session.getValue().indexOf("#args") < 0) {
		return false;
	}
	var beforeMeta = " ";
	var afterMeta = " ";
	var rxTrim = null;
	var s = gml_Project.current.properties.argNameRegex;
	if(s != null && StringTools.trim(s) != "") {
		try {
			rxTrim = new RegExp(s);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			console.error("Error parsing argument regex: ",_g1);
		}
	}
	var rxSimpleVal = synext_GmlExtArgsDoc.rxSimpleVal;
	var names;
	var types;
	var texts;
	var count;
	var sync = function(curr) {
		names = curr.names;
		texts = curr.texts;
		types = curr.types;
		count = names.length;
		if(rxTrim != null) {
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var mt = rxTrim.exec(names[i]);
				if(mt != null && mt[1] != null) {
					names[i] = mt[1];
				}
			}
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var mt = rxSimpleVal.exec(texts[i]);
			if(mt != null) {
				if(names[i].charCodeAt(0) != 63 || mt[1] != "undefined") {
					names[i] += "=" + mt[1];
				}
				texts[i] = "";
			}
		}
	};
	var argData = synext_GmlExtArgs.argData;
	sync(argData[""]);
	var aceDoc = session.doc;
	var iter = new AceTokenIterator(session,0,0);
	var tk = iter.getCurrentToken();
	var lastRow = -1;
	var rows = [];
	var remove = [];
	var replace = [];
	var insert = [];
	var changed = false;
	var addOffset = 0;
	var delOffset = 0;
	var hasArgs = false;
	rows.length = count;
	var flush = function() {
		if(!hasArgs) {
			return;
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var row = rows[i];
			if(row == null) {
				row = lastRow + 1;
				var text = texts[i];
				if(text != "") {
					text = " " + text;
				}
				text = " " + names[i] + text;
				var type = types[i];
				if(type != "" && type != null) {
					text = " {" + type + "}" + text;
				}
				insert.push({ row : row, text : "/// " + meta + text});
				addOffset += 1;
				changed = true;
			} else {
				row += addOffset;
			}
			lastRow = row;
		}
	};
	while(tk != null) {
		var next = true;
		switch(tk.type) {
		case "comment.doc.line":
			var val = tk.value;
			var tkRow = iter.getCurrentTokenRow();
			var tkCol = iter.getCurrentTokenColumn();
			if(synext_GmlExtArgsDoc.rxGmDocStart.test(val)) {
				tk = iter.stepForward();
				next = false;
				if(tk.type == "comment.meta") {
					val += tk.value;
					tk = iter.stepForward();
					if(tk.type == "comment.doc.line") {
						val += tk.value;
					}
				}
			}
			if(synext_GmlExtArgsDoc.rxAfter.test(val)) {
				lastRow = iter.getCurrentTokenRow();
			} else {
				var mt = synext_GmlExtArgsDoc.rxArg.exec(val);
				if(mt != null) {
					beforeMeta = mt[2];
					meta = mt[3];
					afterMeta = mt[4];
					var type = mt[5];
					if(type == null) {
						type = "";
					}
					var afterType = mt[6];
					if(afterType == null) {
						afterType = " ";
					}
					var name = mt[7];
					var afterName = mt[8];
					if(afterName == "") {
						afterName = " ";
					}
					var text = mt[9];
					var index = names.indexOf(name);
					var row = iter.getCurrentTokenRow() - delOffset;
					if(index < 0) {
						remove.push(ace_extern_AceRange._new(0,row,0,row + 1));
						++delOffset;
					} else {
						rows[index] = row;
						var updateDoc = false;
						if(text != texts[index] && (text == "" || StringTools.startsWith(text,"= "))) {
							text = texts[index];
							updateDoc = true;
						}
						if(types[index] != "" && type != types[index]) {
							type = types[index];
							updateDoc = true;
						}
						if(updateDoc) {
							var range = iter.getCurrentTokenRange();
							if(!next) {
								range = range.extend(tkRow,tkCol);
							}
							replace.push({ range : range, next : "///" + beforeMeta + meta + afterMeta + (type != "" && type != null ? "{" + type + "}" + afterType : "") + name + (text != "" ? afterName + text : "")});
						}
					}
				}
			}
			break;
		case "preproc.args":
			hasArgs = true;
			break;
		case "preproc.define":
			tk = iter.stepForward();
			if(tk != null) {
				flush();
				lastRow = iter.getCurrentTokenRow() + addOffset;
				sync(argData[tk.value]);
				rows.length = 0;
				rows.length = count;
				hasArgs = false;
			}
			break;
		}
		if(next) {
			tk = iter.stepForward();
		}
	}
	flush();
	var _g = 0;
	while(_g < replace.length) {
		var repl = replace[_g];
		++_g;
		aceDoc.replace(repl.range,repl.next);
	}
	var _g = 0;
	while(_g < remove.length) aceDoc.remove(remove[_g++]);
	var _g = 0;
	while(_g < insert.length) {
		var q = insert[_g];
		++_g;
		aceDoc.insertMergedLines({ row : q.row, column : 0},[q.text,""]);
	}
	if(!(replace.length > 0 || remove.length > 0)) {
		return insert.length > 0;
	} else {
		return true;
	}
};
synext_GmlExtArgsDoc.proc = function(file) {
	if(gml_Project.current.version.config.hasJSDoc) {
		return synext_GmlExtArgsDoc.proc2(file,ui_Preferences.current.argsFormat);
	} else {
		return synext_GmlExtArgsDoc.proc1(file);
	}
};
var synext_SyntaxExtension = function(name,displayName) {
	this.enabled = true;
	this.name = name;
	this.displayName = displayName;
};
$hxClasses["synext.SyntaxExtension"] = synext_SyntaxExtension;
synext_SyntaxExtension.__name__ = "synext.SyntaxExtension";
synext_SyntaxExtension.handleArray = function(editor,code,sxs,func,forward) {
	var index = forward ? 0 : sxs.length - 1;
	while(forward ? index < sxs.length : index >= 0) {
		var sx;
		if(forward) {
			++index;
			sx = index - 1;
		} else {
			--index;
			sx = index + 1;
		}
		var sx1 = sxs[sx];
		if(!sx1.enabled) {
			continue;
		}
		try {
			var tmp;
			if(sx1.check(editor,code)) {
				code = func(sx1,editor,code);
				if(code == null) {
					var e = ((sx1.message) || ("(unspecified error)"));
					electron_Dialog.showError("An error occurred in " + sx1.displayName + " preprocessor:\n" + e);
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				break;
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			electron_Dialog.showError("An error occurred in " + sx1.displayName + " preprocessor:\n" + Std.string(_g1));
			break;
		}
	}
	return code;
};
synext_SyntaxExtension.preprocArray = function(editor,code,sxs) {
	var code1 = code;
	var index = 0;
	while(index < sxs.length) {
		var sx = sxs[index++];
		if(!sx.enabled) {
			continue;
		}
		try {
			var tmp;
			if(sx.check(editor,code1)) {
				code1 = sx.preproc(editor,code1);
				if(code1 == null) {
					var e = ((sx.message) || ("(unspecified error)"));
					electron_Dialog.showError("An error occurred in " + sx.displayName + " preprocessor:\n" + e);
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				break;
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			electron_Dialog.showError("An error occurred in " + sx.displayName + " preprocessor:\n" + Std.string(_g1));
			break;
		}
	}
	return code1;
};
synext_SyntaxExtension.postprocArray = function(editor,code,sxs) {
	var code1 = code;
	var index = sxs.length - 1;
	while(index >= 0) {
		var sx = sxs[index--];
		if(!sx.enabled) {
			continue;
		}
		try {
			var tmp;
			if(sx.check(editor,code1)) {
				code1 = sx.postproc(editor,code1);
				if(code1 == null) {
					var e = ((sx.message) || ("(unspecified error)"));
					electron_Dialog.showError("An error occurred in " + sx.displayName + " preprocessor:\n" + e);
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				break;
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			electron_Dialog.showError("An error occurred in " + sx.displayName + " preprocessor:\n" + Std.string(_g1));
			break;
		}
	}
	return code1;
};
synext_SyntaxExtension.postprocForLinterArray = function(editor,code,sxs) {
	var code1 = code;
	var index = sxs.length - 1;
	while(index >= 0) {
		var sx = sxs[index--];
		if(!sx.enabled) {
			continue;
		}
		try {
			var tmp;
			if(sx.check(editor,code1)) {
				code1 = sx.postprocForLinter(editor,code1);
				if(code1 == null) {
					var e = ((sx.message) || ("(unspecified error)"));
					electron_Dialog.showError("An error occurred in " + sx.displayName + " preprocessor:\n" + e);
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				break;
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			electron_Dialog.showError("An error occurred in " + sx.displayName + " preprocessor:\n" + Std.string(_g1));
			break;
		}
	}
	return code1;
};
synext_SyntaxExtension.prototype = {
	check: function(editor,code) {
		return true;
	}
	,preproc: function(editor,code) {
		return code;
	}
	,postproc: function(editor,code) {
		return code;
	}
	,postprocForLinter: function(editor,code) {
		return code;
	}
	,__class__: synext_SyntaxExtension
};
var synext_GmlExtArrowFunctions = function() {
	synext_SyntaxExtension.call(this,"()=>","arrow functions");
};
$hxClasses["synext.GmlExtArrowFunctions"] = synext_GmlExtArrowFunctions;
synext_GmlExtArrowFunctions.__name__ = "synext.GmlExtArrowFunctions";
synext_GmlExtArrowFunctions.__super__ = synext_SyntaxExtension;
synext_GmlExtArrowFunctions.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		return ui_Preferences.current.arrowFunctions;
	}
	,preproc: function(editor,code) {
		var q = new parsers_GmlReader(code);
		var start = 0;
		var out = "";
		while(q.pos < q.length) {
			if(q.skipCommon() >= 0) {
				continue;
			}
			var p = q.pos;
			if(q.source.charCodeAt(q.pos++) != 102 || !q.skipIfIdentEquals("unction")) {
				continue;
			}
			q.skipSpaces1_local();
			var parStart = q.pos;
			if(q.source.charCodeAt(q.pos++) != 40) {
				continue;
			}
			var depth = 1;
			_hx_loop2: while(q.pos < q.length) {
				if(q.skipCommon() >= 0) {
					continue;
				}
				switch(q.source.charCodeAt(q.pos++)) {
				case 40:
					++depth;
					break;
				case 41:
					if(--depth <= 0) {
						break _hx_loop2;
					}
					break;
				}
			}
			if(depth > 0) {
				continue;
			}
			var parEnd = q.pos;
			var beforeSpStart = q.pos;
			q.skipSpaces1_local();
			var beforeSpEnd = q.pos;
			if(!q.skipIfStrEquals("/*=>*/")) {
				continue;
			}
			var afterSpStart = q.pos;
			q.skipSpaces1_local();
			var afterSpEnd = q.pos;
			if(!q.skipIfEquals(123)) {
				continue;
			}
			if(q.skipIfEquals(59)) {
				var statStart = q.pos;
				q.skipComplexStatement(editor);
				var stat = q.source.substring(statStart,q.pos);
				if(!q.skipIfEquals(125)) {
					continue;
				}
				stat = this.preproc(editor,stat);
				out += q.source.substring(start,p);
				out += q.source.substring(parStart,parEnd) + q.source.substring(beforeSpStart,beforeSpEnd) + "=>" + q.source.substring(afterSpStart,afterSpEnd) + ";" + stat;
			} else if(q.skipIfIdentEquals("return")) {
				q.skipIfEquals(32);
				var exprStart = q.pos;
				q.skipComplexExpr(editor);
				var exprEnd = q.pos;
				if(!q.skipIfEquals(125)) {
					continue;
				}
				var expr = q.source.substring(exprStart,exprEnd);
				expr = this.preproc(editor,expr);
				out += q.source.substring(start,p);
				out += q.source.substring(parStart,parEnd) + q.source.substring(beforeSpStart,beforeSpEnd) + "=>" + q.source.substring(afterSpStart,afterSpEnd) + expr;
			} else {
				out += q.source.substring(start,p);
				out += q.source.substring(parStart,parEnd) + q.source.substring(beforeSpStart,beforeSpEnd) + "=>" + q.source.substring(afterSpStart,afterSpEnd) + q.source.substring(afterSpEnd,q.pos);
			}
			start = q.pos;
		}
		if(start == 0) {
			return code;
		}
		out += q.source.substring(start,q.pos);
		return out;
	}
	,postproc_sub: function(q,editor) {
		var start = q.pos - 1;
		var out = "";
		var found = false;
		_hx_loop1: while(q.pos < q.length) {
			if(q.skipCommon() >= 0) {
				continue;
			}
			switch(q.source.charCodeAt(q.pos++)) {
			case 40:
				var p = q.pos - 1;
				var sub = this.postproc_sub(q,editor);
				if(sub != null) {
					out += q.source.substring(start,p);
					out += sub;
					start = q.pos;
				}
				break;
			case 41:
				found = true;
				break _hx_loop1;
			}
		}
		var parEnd = q.pos;
		if(!found) {
			if(out == "") {
				return null;
			}
			out += q.source.substring(start,q.pos);
			return out;
		}
		var beforeSpStart = q.pos;
		q.skipSpaces1_local();
		var beforeSpEnd = q.pos;
		if(!q.skipIfStrEquals("=>")) {
			if(out == "") {
				return null;
			}
			out += q.source.substring(start,q.pos);
			return out;
		}
		var afterSpStart = q.pos;
		q.skipSpaces1_local();
		out += q.source.substring(start,parEnd);
		out = "function" + out + q.source.substring(beforeSpStart,beforeSpEnd) + "/*=>*/" + q.source.substring(afterSpStart,q.pos);
		if(q.skipIfEquals(59)) {
			var statStart = q.pos;
			q.skipComplexStatement(editor);
			var stat = q.source.substring(statStart,q.pos);
			stat = this.postproc(editor,stat);
			return out + "{;" + stat + "}";
		} else if(!q.skipIfEquals(123)) {
			var exprStart = q.pos;
			q.skipComplexExpr(editor);
			var expr = q.source.substring(exprStart,q.pos);
			expr = this.postproc(editor,expr);
			return out + "{return " + expr + "}";
		} else {
			return out + "{";
		}
	}
	,postproc: function(editor,code) {
		var q = new parsers_GmlReader(code);
		var start = 0;
		var out = "";
		while(q.pos < q.length) {
			if(q.skipCommon() >= 0) {
				continue;
			}
			if(q.source.charCodeAt(q.pos++) == 40) {
				var p = q.pos - 1;
				var sub = this.postproc_sub(q,editor);
				if(sub != null) {
					out += q.source.substring(start,p);
					out += sub;
					start = q.pos;
				}
			}
		}
		if(start == 0) {
			return code;
		}
		out += q.source.substring(start,q.pos);
		return out;
	}
	,__class__: synext_GmlExtArrowFunctions
});
var synext_GmlExtCast = function() {
	synext_SyntaxExtension.call(this,"cast/as","cast/as operators");
};
$hxClasses["synext.GmlExtCast"] = synext_GmlExtCast;
synext_GmlExtCast.__name__ = "synext.GmlExtCast";
synext_GmlExtCast.__super__ = synext_SyntaxExtension;
synext_GmlExtCast.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		return ui_Preferences.current.castOperators;
	}
	,preproc: function(editor,code) {
		var q = new parsers_GmlReader(code);
		var v = q.version;
		var start = 0;
		var out = "";
		while(q.pos < q.length) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if(q.skipIfIdentEquals("import")) {
					q.skipLine();
				} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					q.readContextName(null);
				}
				break;
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && v.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(v,true);
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					var isHash = q.source.charCodeAt(q.pos) == 35;
					q.skipComment();
					if(!isHash) {
						continue;
					}
					if(p > 0) {
						c = q.source.charCodeAt(p - 1);
						if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
							continue;
						}
					}
					c = q.source.charCodeAt(q.pos);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						continue;
					}
					var len = q.pos - 5 - p;
					if(len == 4 && q.source.substr((p + 3),4) == "cast") {
						out += q.source.substring(start,p);
						out += "cast";
						start = q.pos;
					} else if(len >= 3 && q.source.substr((p + 3),2) == "as" && !tools_CharCode.isIdent1_ni(q.source.charCodeAt(p + 5))) {
						var cmtEnd = q.pos;
						q.pos = p + 5;
						if(!gml_type_GmlTypeParser.skipTypeName(q,null) || q.pos != cmtEnd - 2) {
							q.pos = cmtEnd;
						} else {
							out += q.source.substring(start,p);
							out += q.source.substring(p + 3,q.pos);
							start = cmtEnd;
						}
					}
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,v);
				break;
			default:
			}
		}
		out += q.source.substring(start,q.pos);
		return out;
	}
	,postproc: function(editor,code) {
		var q = new parsers_GmlReader(code);
		var v = q.version;
		var start = 0;
		var out = "";
		while(q.pos < q.length) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if(q.skipIfIdentEquals("import")) {
					q.skipLine();
				} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					q.readContextName(null);
				}
				break;
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && v.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(v,true);
				} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					var p1 = q.pos - 1;
					q.skipIdent1();
					var id = q.source.substring(p1,q.pos);
					if(id == "cast" || id == "as" && gml_type_GmlTypeParser.skipTypeName(q,null)) {
						out += q.source.substring(start,p1);
						out += "/*#" + q.source.substring(p1,q.pos) + "*/";
						start = q.pos;
					}
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,v);
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					var p2 = q.pos - 1;
					q.skipIdent1();
					var id1 = q.source.substring(p2,q.pos);
					if(id1 == "cast" || id1 == "as" && gml_type_GmlTypeParser.skipTypeName(q,null)) {
						out += q.source.substring(start,p2);
						out += "/*#" + q.source.substring(p2,q.pos) + "*/";
						start = q.pos;
					}
				}
			}
		}
		out += q.source.substring(start,q.pos);
		return out;
	}
	,__class__: synext_GmlExtCast
});
var synext_GmlExtCoroutines = function() { };
$hxClasses["synext.GmlExtCoroutines"] = synext_GmlExtCoroutines;
synext_GmlExtCoroutines.__name__ = "synext.GmlExtCoroutines";
synext_GmlExtCoroutines.ensureScript = function() {
	var scr = document.getElementById("gmcr_script");
	if(scr.src == null || scr.src == "") {
		scr.src = "./misc/gmcr.js";
	}
};
synext_GmlExtCoroutines.pre = function(gml) {
	if(!ui_Preferences.current.coroutineMagic) {
		return gml;
	}
	var pos0 = gml.indexOf("/*//!#gmcr");
	if(pos0 < 0) {
		return gml;
	}
	var pos1 = gml.indexOf("//!#gmcr*/");
	if(pos1 < 0) {
		pos1 = gml.length;
	}
	pos0 += "/*//!#gmcr".length;
	if(gml.charCodeAt(pos0) == 13) {
		++pos0;
	}
	if(gml.charCodeAt(pos0) == 10) {
		++pos0;
	}
	if(gml.charCodeAt(pos1 - 1) == 10) {
		--pos1;
	}
	if(gml.charCodeAt(pos1 - 1) == 13) {
		--pos1;
	}
	gml = gml.substring(pos0,pos1);
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(gml);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 42 && q.source.charCodeAt(q.pos) == 92 && q.source.charCodeAt(q.pos + 1) == 47) {
						out += q.source.substring(start,q.pos);
						start = ++q.pos;
						q.pos += 1;
						break;
					}
				}
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtCoroutines.post = function(code) {
	if(!ui_Preferences.current.coroutineMagic) {
		return code;
	}
	if(!synext_GmlExtCoroutines.markRx.test(code)) {
		return code;
	}
	var found = false;
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if((p == 0 || q.source.charCodeAt(p - 1) == 10) && q.source.substr(p,5) == "#gmcr") {
				found = true;
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				var num = 1;
				if(num == null) {
					num = 1;
				}
				q.pos += num;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 42 && q.source.charCodeAt(q.pos) == 47) {
						out += q.source.substring(start,q.pos);
						out += "\\";
						start = q.pos;
						break;
					}
				}
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	if(!found) {
		return code;
	}
	out += q.source.substring(start,q.pos);
	var proc = window.gmcr_proc;
	if(proc == null) {
		synext_GmlExtCoroutines.errorText = "GMCR is unavailable or didn't load up yet.\n" + "If you are compiling GMEdit from source code, you'll want to copy it from an itch.io release";
		return null;
	}
	var pair = proc(out,{ version : version});
	if(pair.code == null) {
		synext_GmlExtCoroutines.errorText = "Coroutine compilation failed:\n" + pair.error;
		return null;
	}
	return pair.code + "\r\n" + "/*//!#gmcr" + "\r\n" + out + "\r\n" + "//!#gmcr*/" + "\r\n";
};
var synext_GmlExtHashColorLiterals = function() {
	synext_SyntaxExtension.call(this,"#color","#color literals");
};
$hxClasses["synext.GmlExtHashColorLiterals"] = synext_GmlExtHashColorLiterals;
synext_GmlExtHashColorLiterals.__name__ = "synext.GmlExtHashColorLiterals";
synext_GmlExtHashColorLiterals.__super__ = synext_SyntaxExtension;
synext_GmlExtHashColorLiterals.prototype = $extend(synext_SyntaxExtension.prototype,{
	preproc: function(editor,code) {
		var q = new parsers_GmlReader(code);
		var out = "";
		var rx = /#\*\/(?:0x|\$)([0-9a-fA-F]{6,6})\b/;
		var start = 0;
		while(q.pos < q.length) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					q.readContextName(null);
				}
				break;
			case 36:
				var version = q.version;
				if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(q.version,true);
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					var mt = rx.exec(q.source.substr(q.pos,12));
					if(mt != null) {
						out += q.source.substring(start,p);
						var c1 = mt[1];
						out += "#" + HxOverrides.substr(c1,4,2) + HxOverrides.substr(c1,2,2) + HxOverrides.substr(c1,0,2);
						var num = mt[0].length;
						if(num == null) {
							num = 1;
						}
						q.pos += num;
						start = q.pos;
					} else {
						q.skipComment();
					}
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,q.version);
				break;
			default:
			}
		}
		out += q.source.substring(start,q.pos);
		return out;
	}
	,postproc: function(editor,code) {
		if(gml_Project.current.version.hasColorLiterals()) {
			return code;
		}
		var q = new parsers_GmlReader(code);
		var v = q.version;
		var v2 = v.hasLiteralStrings();
		var out = "";
		var rx = /([0-9a-fA-F]{6,6})\b/;
		var start = 0;
		while(q.pos < q.length) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if((p == 0 || q.source.charCodeAt(p - 1) != 91) && rx.test(q.source.substr(q.pos,7))) {
					out += q.source.substring(start,p);
					out += "/*#*/" + (v2 ? "0x" : "$") + q.source.substr((q.pos + 4),2) + q.source.substr((q.pos + 2),2) + q.source.substr(q.pos,2);
					q.pos += 6;
					start = q.pos;
				} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					q.readContextName(null);
				}
				break;
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && v.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(v,true);
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,v);
				break;
			default:
			}
		}
		out += q.source.substring(start,q.pos);
		return out;
	}
	,__class__: synext_GmlExtHashColorLiterals
});
var synext_GmlExtHyper = function() {
	synext_SyntaxExtension.call(this,"#hyper","#hyper magic");
};
$hxClasses["synext.GmlExtHyper"] = synext_GmlExtHyper;
synext_GmlExtHyper.__name__ = "synext.GmlExtHyper";
synext_GmlExtHyper.pre = function(code) {
	if(!ui_Preferences.current.hyperMagic) {
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && q.source.substr((p + 4),5) == "hyper") {
					out += q.source.substring(start,p);
					out += q.source.substring(p + 3,q.pos);
					start = q.pos;
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtHyper.post = function(code) {
	if(!ui_Preferences.current.hyperMagic) {
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.source.substr((p + 1),5) == "hyper") {
				q.skipLine();
				out += q.source.substring(start,p);
				out += "//!" + q.source.substring(p,q.pos);
				start = q.pos;
			} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtHyper.__super__ = synext_SyntaxExtension;
synext_GmlExtHyper.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		return editor.kind.canHyper;
	}
	,preproc: function(editor,code) {
		code = synext_GmlExtHyper.pre(code);
		if(code == null) {
			this.message = synext_GmlExtHyper.errorText;
		}
		return code;
	}
	,postproc: function(editor,code) {
		code = synext_GmlExtHyper.post(code);
		if(code == null) {
			this.message = synext_GmlExtHyper.errorText;
		}
		return code;
	}
	,__class__: synext_GmlExtHyper
});
var synext_GmlExtImportWrap = function() {
	synext_SyntaxExtension.call(this,"#import","#import magic");
};
$hxClasses["synext.GmlExtImportWrap"] = synext_GmlExtImportWrap;
synext_GmlExtImportWrap.__name__ = "synext.GmlExtImportWrap";
synext_GmlExtImportWrap.__super__ = synext_SyntaxExtension;
synext_GmlExtImportWrap.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		if(editor.file.path != null) {
			return editor.kind.canImport;
		} else {
			return false;
		}
	}
	,preproc: function(editor,code) {
		code = synext_GmlExtImport.pre(code,editor);
		if(code == null) {
			this.message = synext_GmlExtImport.errorText;
		}
		return code;
	}
	,postproc: function(editor,code) {
		var pair = editor.postpImport(code);
		if(pair == null) {
			return null;
		}
		code = pair.val;
		if(pair.sessionChanged) {
			editor.kind.saveSessionChanged = true;
		}
		return code;
	}
	,__class__: synext_GmlExtImportWrap
});
var synext_GmlExtImport = function() { };
$hxClasses["synext.GmlExtImport"] = synext_GmlExtImport;
synext_GmlExtImport.__name__ = "synext.GmlExtImport";
synext_GmlExtImport.parseRules = function(imp,mt,out) {
	var path = mt[1];
	var alias = mt[2];
	var nsOnly = mt[3] == ":";
	var flat;
	var flen;
	var short;
	var add_cache;
	if(path == "_") {
		var field = mt[4];
		if(field != null) {
			var comp = { name : field, value : field, score : 0, meta : "field", doc : null};
			var ns = alias;
			if(out != null) {
				add_cache = { };
				out.push(synext__$GmlExtImport_GmlExtImportRule.FieldHint(field,comp,null,ns,nsOnly,add_cache));
			} else {
				add_cache = null;
			}
			imp.addFieldHint(field,comp,null,ns,nsOnly,add_cache);
		} else if(alias != null) {
			imp.ensureNamespace(alias);
			if(out != null) {
				out.push(synext__$GmlExtImport_GmlExtImportRule.EnsureNS(alias));
			}
		}
	} else if(path.endsWith("*")) {
		flat = path.substring(0,path.length - 1).replace(synext_GmlExtImport.rxPeriod,"_");
		flen = flat.length;
		var check = function(kind,autoCompleteItems,docs) {
			var q = kind;
			var fd = null;
			var has = Object.prototype.hasOwnProperty;
			for (fd in q) {
			if(has.call(q,fd)) {
				if(fd.startsWith(flat) && fd != flat) {
					var autoCompleteItem = null;
					var _g = 0;
					var _g1 = autoCompleteItems;
					while(_g < _g1.length) {
						var item = _g1[_g];
						++_g;
						if(item.name == fd) {
							autoCompleteItem = item;
							break;
						}
					}
					short = fd.substring(flen);
					var kind1 = kind[fd];
					var doc = docs[fd];
					if(out != null) {
						add_cache = { };
						out.push(synext__$GmlExtImport_GmlExtImportRule.Import(fd,short,kind1,autoCompleteItem,doc,alias,nsOnly,add_cache));
					} else {
						add_cache = null;
					}
					imp.add(fd,short,kind1,autoCompleteItem,doc,alias,nsOnly,add_cache);
				}
			}
			}
		};
		check(gml_GmlAPI.stdKind,gml_GmlAPI.stdComp,gml_GmlAPI.stdDoc);
		check(gml_GmlAPI.extKind,gml_GmlAPI.extComp,gml_GmlAPI.extDoc);
		check(gml_GmlAPI.gmlKind,gml_GmlAPI.gmlComp,gml_GmlAPI.gmlDoc);
	} else if(path.startsWith("global.")) {
		flat = path.substring(7);
		var ns = null;
		if(alias == null) {
			alias = flat;
		} else if(mt[3] != null) {
			ns = alias;
			alias = mt[3];
		}
		var comp = { name : path, value : path, score : 0, meta : "global", doc : null};
		var doc = null;
		var spaceOnly = null;
		if(out != null) {
			add_cache = { };
			out.push(synext__$GmlExtImport_GmlExtImportRule.Import(path,alias,"globalfield",comp,doc,ns,spaceOnly,add_cache));
		} else {
			add_cache = null;
		}
		imp.add(path,alias,"globalfield",comp,doc,ns,spaceOnly,add_cache);
	} else {
		flat = path.replace(synext_GmlExtImport.rxPeriod,"_");
		var ns = null;
		if(alias == null) {
			var p = path.lastIndexOf(".");
			if(p < 0) {
				return;
			}
			alias = flat.substring(p + 1);
		} else if(mt[4] != null) {
			ns = alias;
			alias = mt[4];
		}
		var check1 = function(kind,comp,docs) {
			var fdk = kind[flat];
			if(fdk == null) {
				return false;
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = comp;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(v.name == flat) {
					_g.push(v);
				}
			}
			var comp = _g[0];
			var doc = docs[flat];
			if(out != null) {
				add_cache = { };
				out.push(synext__$GmlExtImport_GmlExtImportRule.Import(flat,alias,fdk,comp,doc,ns,nsOnly,add_cache));
			} else {
				add_cache = null;
			}
			imp.add(flat,alias,fdk,comp,doc,ns,nsOnly,add_cache);
			return true;
		};
		!check1(gml_GmlAPI.stdKind,gml_GmlAPI.stdComp,gml_GmlAPI.stdDoc) && !check1(gml_GmlAPI.extKind,gml_GmlAPI.extComp,gml_GmlAPI.extDoc) && !check1(gml_GmlAPI.gmlKind,gml_GmlAPI.gmlComp,gml_GmlAPI.gmlDoc);
	}
};
synext_GmlExtImport.parseFile = function(imp,rel,found,cache) {
	var fp = haxe_io_Path.withoutExtension(rel.toLowerCase());
	if(found[fp]) {
		return true;
	}
	var rules;
	if(cache != null) {
		rules = cache[rel];
		if(rules != null) {
			var _g = 0;
			while(_g < rules.length) {
				var rule = rules[_g];
				++_g;
				switch(rule._hx_index) {
				case 0:
					imp.ensureNamespace(rule.name);
					break;
				case 1:
					imp.add(rule.long,rule.short,rule.kind,rule.comp,rule.doc,rule.space,rule.spaceOnly,rule.cache);
					break;
				case 2:
					imp.addFieldHint(rule.field,rule.comp,rule.doc,rule.space,rule.isInst,rule.cache);
					break;
				}
			}
			return true;
		} else {
			rules = [];
			cache[rel] = rules;
		}
	} else {
		rules = null;
	}
	var full = haxe_io_Path.join([gml_Project.current.dir,"#import",rel]);
	if(!electron_FileWrap.existsSync(full)) {
		full += ".gml";
		if(!electron_FileWrap.existsSync(full)) {
			return false;
		}
	}
	var code = electron_FileWrap.readTextFileSync(full);
	found[fp] = true;
	var q = new parsers_GmlReader(code);
	var version = gml_GmlAPI.version;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && q.source.substr((p + 4),6) == "import") {
					synext_GmlExtImport.parseLine(imp,q.source.substring(p + 3,q.pos),found,cache,rules);
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	return true;
};
synext_GmlExtImport.parseLine = function(imp,txt,found,cache,rules) {
	var mt = synext_GmlExtImport.rxImport.exec(txt);
	if(mt != null) {
		synext_GmlExtImport.parseRules(imp,mt,rules);
		return true;
	}
	mt = synext_GmlExtImport.rxImportFile.exec(txt);
	if(mt != null) {
		var rel = mt[1];
		synext_GmlExtImport.parseFile(imp,rel.substring(1,rel.length - 1),found,cache);
		return true;
	}
	return false;
};
synext_GmlExtImport.pre_mapIdent_local = function(q,imp,ident,typeName,p0) {
	var ns = imp.namespaces[typeName];
	var e;
	if(ns == null) {
		e = gml_GmlAPI.gmlEnums[typeName];
		if(e == null) {
			return null;
		}
	} else {
		e = null;
	}
	q.skipSpaces0();
	if(q.source.charCodeAt(q.pos++) != 91) {
		return null;
	}
	var acc = q.source.charCodeAt(q.pos) == 64;
	if(acc) {
		q.pos += 1;
	}
	q.skipSpaces0();
	var posIndexStart = q.pos;
	q.skipIdent1();
	var index1 = q.source.substring(posIndexStart,q.pos);
	var indexField;
	if(ns != null) {
		indexField = ns.shorten[index1];
		if(indexField == null) {
			if(q.source.charCodeAt(q.pos++) != 46) {
				return null;
			}
			q.skipIdent1();
			indexField = ns.shorten[q.source.substring(posIndexStart,q.pos)];
			if(indexField == null) {
				return null;
			}
		}
	} else {
		if(index1 != typeName) {
			return null;
		}
		if(q.source.charCodeAt(q.pos++) != 46) {
			return null;
		}
		var indexDot = q.pos;
		q.skipIdent1();
		indexField = q.source.substring(indexDot,q.pos);
		if(!Object.prototype.hasOwnProperty.call(e.items,indexField)) {
			return null;
		}
	}
	if(q.source.charCodeAt(q.pos++) != 93) {
		return null;
	}
	if(acc != q.checkWrites(p0,q.pos)) {
		return null;
	}
	return ident + "." + indexField;
};
synext_GmlExtImport.pre_mapIdent = function(imp,q,ident,p0) {
	var next = null;
	var p1 = q.pos;
	var tn = gml_type_GmlTypeTools.getNamespace(imp.localTypes[ident]);
	if(tn != null) {
		next = synext_GmlExtImport.pre_mapIdent_local(q,imp,ident,tn,p0);
		if(next == null) {
			q.pos = p1;
		}
	} else if(ident != "global") {
		next = imp.shorten[ident];
		while(true) {
			q.skipSpaces1();
			if(q.source.charCodeAt(q.pos++) != 40) {
				break;
			}
			if(next != null && next.endsWith(".create")) {
				return "new " + next.substring(0,next.length - 7) + "(";
			}
			q.skipSpaces1();
			var this1 = q.source.charCodeAt(q.pos);
			if(!(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90)) {
				break;
			}
			var selfPos = q.pos;
			q.skipIdent1();
			if(q.source.charCodeAt(q.pos) == 91) {
				break;
			}
			var self = q.source.substring(selfPos,q.pos);
			var selfType = imp.localTypes[self];
			if(selfType == null) {
				if(ident != "array_create") {
					break;
				}
				var selfEnumName = self;
				var selfEnum = gml_GmlAPI.gmlEnums[self];
				if(selfEnum == null) {
					selfEnumName = imp.shorten[self];
					selfEnum = gml_GmlAPI.gmlEnums[selfEnumName];
				}
				if(selfEnum == null) {
					break;
				}
				if(q.source.charCodeAt(q.pos++) != 46) {
					break;
				}
				var selfDot = q.pos;
				q.skipIdent1();
				if(q.source.substring(selfDot,q.pos) != selfEnum.lastItem) {
					break;
				}
				q.skipSpaces1();
				if(q.source.charCodeAt(q.pos++) != 41) {
					break;
				}
				return ((imp.shorten[selfEnumName]) || (selfEnumName)) + "()";
			}
			var stn = gml_type_GmlTypeTools.getNamespace(selfType);
			if(stn == null) {
				break;
			}
			var selfNs = imp.namespaces[stn];
			if(selfNs == null) {
				break;
			}
			var selfFunc = selfNs.shorten[ident];
			if(selfFunc == null) {
				break;
			}
			var selfEnd = q.pos;
			q.skipSpaces1();
			if(q.source.charCodeAt(q.pos++) == 44) {
				q.skipSpaces1();
			} else {
				q.pos = selfEnd;
			}
			return self + "." + selfFunc + "(";
		}
		q.pos = p1;
	} else if(imp.hasGlobal) {
		q.skipSpaces0();
		if(q.source.charCodeAt(q.pos) == 46) {
			q.pos += 1;
			q.skipSpaces0();
			p1 = q.pos;
			q.skipIdent1();
			next = imp.shortenGlobal[q.source.substring(p1,q.pos)];
		}
	}
	return next;
};
synext_GmlExtImport.pre = function(code,editor) {
	var path = editor.file.path;
	var seekData = parsers_GmlSeekData.map[path];
	if(!ui_Preferences.current.importMagic) {
		if(seekData != null) {
			seekData.imports = null;
		}
		return code;
	}
	var globalPath = haxe_io_Path.join([gml_Project.current.dir,"#import","global.gml"]);
	var globalExists = Electron_FS.existsSync != null && electron_FileWrap.existsSync(globalPath);
	if(code.indexOf("//!#import") < 0 && !synext_GmlExtImport.rxHasTypePre.test(code) && !globalExists && !synext_GmlExtImport.rxHasHint.test(code)) {
		if(seekData != null) {
			seekData.imports = null;
		}
		return code;
	}
	var needsCache = synext_GmlExtImport.pre_needsCache.test(code);
	var cache = needsCache ? Object.create(null) : null;
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	var imp = new gml_GmlImports();
	var cubDepth = 0;
	var imps = Object.create(null);
	var files = Object.create(null);
	if(globalExists) {
		synext_GmlExtImport.parseFile(imp,"global.gml",files,cache);
	}
	imps[""] = imp;
	var hasFunctionLiterals = version.hasFunctionLiterals();
	var kind = editor.kind;
	var functionsAreGlobal = ((kind) instanceof file_kind_gml_KGmlScript) && kind.isScript;
	var procFunc = null;
	var procSegment = function(segStart,segEnd,isType) {
		q.pos = segStart;
		start = segStart;
		var canFn = hasFunctionLiterals && !isType;
		while(q.pos < segEnd) {
			var p0 = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(version,true);
				} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					var id = q.source.substring(p0,q.pos);
					if(canFn && id == "function") {
						procFunc(cubDepth == 0);
					} else {
						var idn = synext_GmlExtImport.pre_mapIdent(imp,q,id,p0);
						if(idn != null) {
							out += q.source.substring(start,p0);
							out += idn;
							start = q.pos;
						}
					}
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,version);
				break;
			case 123:
				cubDepth += 1;
				break;
			case 125:
				cubDepth -= 1;
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					var id1 = q.source.substring(p0,q.pos);
					if(canFn && id1 == "function") {
						procFunc(cubDepth == 0);
					} else {
						var idn1 = synext_GmlExtImport.pre_mapIdent(imp,q,id1,p0);
						if(idn1 != null) {
							out += q.source.substring(start,p0);
							out += idn1;
							start = q.pos;
						}
					}
				}
			}
		}
		out += q.source.substring(start,segEnd);
		start = segEnd;
	};
	var _procFunc_pre = function(isTopLevel) {
		q.skipSpaces1();
		var c = q.source.charCodeAt(q.pos);
		var p;
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			p = q.pos;
			q.skipIdent1();
			if(isTopLevel && functionsAreGlobal) {
				var funcName = q.source.substring(p,q.pos);
				imp = imp.createLink();
				imps[funcName] = imp;
			}
			q.skipSpaces1_local();
			c = q.source.charCodeAt(q.pos);
		}
		if(c == 40) {
			q.pos += 1;
			var argName = null;
			_hx_loop1: while(q.get_loop()) {
				c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 36:
					if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
						q.pos += 1;
						q.skipStringTemplate(version,true);
					} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						p = q.pos - 1;
						q.skipIdent1();
						argName = q.source.substring(p,q.pos);
					}
					break;
				case 41:
					q.skipSpaces1_local();
					if(q.source.substr(q.pos,4) == "/*->") {
						var tcStart = q.pos;
						q.skipComment();
						var tcEnd = q.pos;
						if(q.source.substr((tcEnd - 2),2) == "*/") {
							out += q.source.substring(start,tcStart);
							procSegment(tcStart + 2,tcEnd - 2,true);
							start = tcEnd;
						}
					}
					break _hx_loop1;
				case 44:
					argName = null;
					break;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						p = q.source.charCodeAt(q.pos) == 58 ? q.pos + 1 : -1;
						q.skipComment();
						if(p < 0 || argName == null) {
							continue;
						}
						var cmtEnd = q.pos;
						q.pos = p;
						gml_type_GmlTypeParser.skipTypeName(q,null);
						q.skipSpaces1x(cmtEnd);
						if(q.pos == cmtEnd - 2) {
							var typeStr = q.source.substring(p,cmtEnd - 2);
							var this1 = q.getPos(p);
							var type = gml_type_GmlTypeParser.parse(typeStr,"[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]");
							if(type != null) {
								out += q.source.substring(start,p - 3);
								out += ":";
								procSegment(p,cmtEnd - 2,true);
								imp.localTypes[argName] = type;
								start = cmtEnd;
							}
						}
						q.pos = cmtEnd;
						break;
					case 47:
						q.skipLine();
						break;
					default:
					}
					break;
				case 34:case 39:case 64:case 96:
					q.skipStringAuto(c,version);
					break;
				default:
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						p = q.pos - 1;
						q.skipIdent1();
						argName = q.source.substring(p,q.pos);
					}
				}
			}
		}
	};
	procFunc = _procFunc_pre;
	var svd = null;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				var ctx = q.readContextName(null);
				if(ctx != null) {
					imp = new gml_GmlImports();
					imps[ctx] = imp;
					files = Object.create(null);
					if(globalExists) {
						synext_GmlExtImport.parseFile(imp,"global.gml",files,cache);
					}
				} else {
					q.pos = p + 1;
				}
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var p1 = q.pos;
				var ident = q.source.substring(p,p1);
				var next = null;
				if(hasFunctionLiterals && ident == "function") {
					procFunc(cubDepth == 0);
					continue;
				}
				var mcr = gml_GmlAPI.gmlMacros[ident];
				if(mcr != null && mcr.expr == "var") {
					ident = "var";
				}
				if(ident == "var" || ident == "globalvar" || ident == "args" && q.source.charCodeAt(p - 1) == 35) {
					var isVar = ident != "args";
					next = isVar ? imp.shorten[ident] : null;
					if(next != null) {
						out += q.source.substring(start,p);
						out += next;
						start = q.pos;
						next = null;
					}
					if(svd == null) {
						svd = new parsers_SkipVarsData();
					}
					q.skipVars((function(isGlobalVar) {
						return function(d) {
							var p = q.pos;
							out += q.source.substring(start,d.rawTypeStart);
							if(d.typeStr != null) {
								out += ":";
								procSegment(d.typeStart,d.typeEnd,true);
								if(!isGlobalVar[0]) {
									var typeString = d.typeStr;
									var this1 = q.getPos(q.pos);
									var varType = gml_type_GmlTypeParser.parse(typeString,"[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]");
									imp.localTypes[d.name] = varType;
									var tn = gml_type_GmlTypeTools.getNamespace(varType);
									if(imp.kind[tn] == "enum") {
										imp.ensureNamespace(tn);
									}
								}
							}
							out += q.source.substring(d.rawTypeEnd,d.exprStart);
							procSegment(d.exprStart,d.exprEnd,false);
							q.pos = p;
						};
					})([ident == "globalvar"]),version,!isVar,svd);
				} else {
					next = synext_GmlExtImport.pre_mapIdent(imp,q,ident,p1);
				}
				if(next != null) {
					out += q.source.substring(start,p);
					out += next;
					start = q.pos;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				var cmtEnd = q.pos;
				if(q.source.charCodeAt(p + 2) == 47) {
					var cp = p + 3;
					while(cp < cmtEnd) {
						c = q.source.charCodeAt(cp);
						if(c == 32 || c == 9) {
							++cp;
						} else {
							break;
						}
					}
					if(q.source.charCodeAt(cp) == 64) {
						if(q.source.substring(cp + 1,cp + 5) == "hint" && !tools_CharCode.isIdent1_ni(q.source.charCodeAt(cp + 5))) {
							out += q.source.substring(start,cp + 5);
							procSegment(cp + 5,cmtEnd,true);
						} else if(tools_CharCode.isIdent0_ni(q.source.charCodeAt(cp + 1))) {
							q.pos = cp + 1;
							q.skipIdent1();
							var rx = /\{.+?\}/g;
							var pos = q.pos;
							var till = cmtEnd;
							if(cmtEnd == null) {
								till = -1;
							}
							if(pos == null) {
								pos = 0;
							}
							if(till < 0) {
								till = code.length;
							}
							rx.lastIndex = pos;
							var mt = rx.exec(code);
							while(mt != null && mt.index < till) {
								var mtStart = mt.index;
								out += q.source.substring(start,mtStart);
								procSegment(mtStart,mtStart + mt[0].length,true);
								mt = rx.exec(code);
							}
						}
						q.pos = cmtEnd;
					}
				} else if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && q.source.substr((p + 4),6) == "import") {
					var txt = q.source.substring(p + 3,q.pos);
					if(synext_GmlExtImport.parseLine(imp,txt,files,cache,null)) {
						out += q.source.substring(start,p);
						out += txt;
						start = q.pos;
					}
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		case 123:
			cubDepth += 1;
			break;
		case 125:
			cubDepth -= 1;
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var p11 = q.pos;
				var ident1 = q.source.substring(p,p11);
				var next1 = null;
				if(hasFunctionLiterals && ident1 == "function") {
					procFunc(cubDepth == 0);
					continue;
				}
				var mcr1 = gml_GmlAPI.gmlMacros[ident1];
				if(mcr1 != null && mcr1.expr == "var") {
					ident1 = "var";
				}
				if(ident1 == "var" || ident1 == "globalvar" || ident1 == "args" && q.source.charCodeAt(p - 1) == 35) {
					var isVar1 = ident1 != "args";
					next1 = isVar1 ? imp.shorten[ident1] : null;
					if(next1 != null) {
						out += q.source.substring(start,p);
						out += next1;
						start = q.pos;
						next1 = null;
					}
					if(svd == null) {
						svd = new parsers_SkipVarsData();
					}
					q.skipVars((function(isGlobalVar) {
						return function(d) {
							var p = q.pos;
							out += q.source.substring(start,d.rawTypeStart);
							if(d.typeStr != null) {
								out += ":";
								procSegment(d.typeStart,d.typeEnd,true);
								if(!isGlobalVar[0]) {
									var typeString = d.typeStr;
									var this1 = q.getPos(q.pos);
									var varType = gml_type_GmlTypeParser.parse(typeString,"[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]");
									imp.localTypes[d.name] = varType;
									var tn = gml_type_GmlTypeTools.getNamespace(varType);
									if(imp.kind[tn] == "enum") {
										imp.ensureNamespace(tn);
									}
								}
							}
							out += q.source.substring(d.rawTypeEnd,d.exprStart);
							procSegment(d.exprStart,d.exprEnd,false);
							q.pos = p;
						};
					})([ident1 == "globalvar"]),version,!isVar1,svd);
				} else {
					next1 = synext_GmlExtImport.pre_mapIdent(imp,q,ident1,p11);
				}
				if(next1 != null) {
					out += q.source.substring(start,p);
					out += next1;
					start = q.pos;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	if(seekData == null && version.config.indexingMode == "local") {
		seekData = new parsers_GmlSeekData(null);
		parsers_GmlSeekData.map[path] = seekData;
	}
	if(seekData != null) {
		seekData.imports = imps;
	}
	return out;
};
synext_GmlExtImport.post_procIdent = function(reader,imp,p0,dot,full) {
	if(imp == null) {
		return null;
	}
	var p1 = reader.pos;
	var one = dot != -1 ? reader.source.substring(p0,dot) : null;
	var peeker = synext_GmlExtImport.post_procIdent_peeker;
	var onePrefix = "";
	if(full == "new") {
		peeker.setTo(reader);
		peeker.skipSpaces1();
		var typePos = peeker.pos;
		var typeFirst = peeker.source.charCodeAt(peeker.pos++);
		if(typeFirst == 95 || typeFirst >= 97 && typeFirst <= 122 || typeFirst >= 65 && typeFirst <= 90) {
			peeker.skipIdent1();
			one = peeker.source.substring(typePos,peeker.pos);
			onePrefix = peeker.source.substring(p0,typePos);
			reader.setTo(peeker);
			full = one + ".create";
			dot = reader.pos;
			p1 = reader.pos;
		}
	}
	var tn = gml_type_GmlTypeTools.getNamespace(dot != -1 ? imp.localTypes[one] : null);
	if(tn != null) {
		var ns = imp.namespaces[tn];
		var en;
		var ind = null;
		var fd = reader.source.substring(dot + 1,p1);
		if(ns != null) {
			ind = ns.longen[fd];
			en = null;
		} else {
			en = gml_GmlAPI.gmlEnums[tn];
			if(en != null && Object.prototype.hasOwnProperty.call(en.items,fd)) {
				ind = tn + "." + fd;
			}
		}
		if(ind != null) {
			peeker.setTo(reader);
			peeker.skipSpaces1();
			if(peeker.source.charCodeAt(peeker.pos++) == 40) {
				reader.setTo(peeker);
				peeker.skipSpaces0();
				var argPre = peeker.source.charCodeAt(peeker.pos) != 41 ? ", " : "";
				synext_GmlExtImport.post_procIdent_p1 = reader.pos;
				return ind + "(" + one + argPre;
			} else {
				synext_GmlExtImport.post_procIdent_p1 = p1;
				return one + (reader.checkWrites(p0,p1) ? "[@" : "[") + ind + "]";
			}
		} else if(en != null || ns != null && ns.isSealed) {
			if(synext_GmlExtImport.errorText != "") {
				synext_GmlExtImport.errorText += "\n";
			}
			var tmp = synext_GmlExtImport.errorText;
			var this1 = reader.getPos(dot + 1);
			synext_GmlExtImport.errorText = tmp + ("[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + (" Could not find field " + fd + " in ") + (ns != null ? "namespace" : en != null ? "enum" : "unknown type") + " " + tn + ".");
			return null;
		}
	}
	var id = imp.longen[full];
	var en = dot == -1 ? gml_GmlAPI.gmlEnums[((id) || (full))] : null;
	if(en != null) {
		while(true) {
			peeker.setTo(reader);
			peeker.skipSpaces1();
			if(peeker.source.charCodeAt(peeker.pos++) != 40) {
				break;
			}
			peeker.skipSpaces1();
			if(peeker.source.charCodeAt(peeker.pos++) != 41) {
				break;
			}
			reader.setTo(peeker);
			synext_GmlExtImport.post_procIdent_p1 = reader.pos;
			return "array_create(" + en.name + "." + en.lastItem + ")";
		}
	}
	if(id != null) {
		synext_GmlExtImport.post_procIdent_p1 = p1;
		return id;
	}
	if(one != null) {
		id = imp.longen[one];
		if(id != null) {
			synext_GmlExtImport.post_procIdent_p1 = dot;
			return onePrefix + id;
		}
	}
	return null;
};
synext_GmlExtImport.post = function(code,editor) {
	synext_GmlExtImport.errorText = "";
	if(!ui_Preferences.current.importMagic) {
		synext_GmlExtImport.post_numImports = 0;
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReaderExt(code);
	var out = "";
	var start = 0;
	var data = parsers_GmlSeekData.map[editor.file.path];
	var imps = data != null ? data.imports : null;
	var imp = imps != null ? imps[""] : null;
	var impc = 0;
	var mayHaveType = imps != null || synext_GmlExtImport.rxHasTypePost.test(code);
	if(imp == null && mayHaveType) {
		imp = new gml_GmlImports();
	}
	var cubDepth = 0;
	var hasFunctionLiterals = version.hasFunctionLiterals();
	var kind = editor.kind;
	var functionsAreGlobal = ((kind) instanceof file_kind_gml_KGmlScript) && kind.isScript;
	var procFunc = null;
	var dotStart;
	var dotPos;
	var dotFull;
	var readDotPair = function() {
		dotStart = q.pos;
		dotPos = -1;
		while(q.get_loop()) {
			var c = q.source.charCodeAt(q.pos);
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
				q.pos += 1;
			} else if(c == 46) {
				if(dotPos == -1) {
					dotPos = q.pos;
					q.pos += 1;
				} else {
					break;
				}
			} else {
				break;
			}
		}
		dotFull = q.source.substring(dotStart,q.pos);
	};
	var procIdent_next;
	var procSegment = function(segStart,segEnd,isType) {
		var canFunc = hasFunctionLiterals && !isType;
		q.pos = segStart;
		start = segStart;
		while(q.pos < segEnd) {
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(version,true);
				} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.pos -= 1;
					readDotPair();
					if(dotFull == "function" && canFunc) {
						procFunc(cubDepth == 0);
					} else {
						procIdent_next = synext_GmlExtImport.post_procIdent(q,imp,dotStart,dotPos,dotFull);
						if(procIdent_next != null) {
							out += q.source.substring(start,dotStart);
							out += procIdent_next;
							start = synext_GmlExtImport.post_procIdent_p1;
						}
					}
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,version);
				break;
			case 123:
				cubDepth += 1;
				break;
			case 125:
				cubDepth -= 1;
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.pos -= 1;
					readDotPair();
					if(dotFull == "function" && canFunc) {
						procFunc(cubDepth == 0);
					} else {
						procIdent_next = synext_GmlExtImport.post_procIdent(q,imp,dotStart,dotPos,dotFull);
						if(procIdent_next != null) {
							out += q.source.substring(start,dotStart);
							out += procIdent_next;
							start = synext_GmlExtImport.post_procIdent_p1;
						}
					}
				}
			}
		}
	};
	var _procFunc_post = function(isTopLevel) {
		q.skipSpaces1_local();
		var c = q.source.charCodeAt(q.pos);
		if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
			var nameStart = q.pos;
			q.skipIdent1();
			if(isTopLevel && functionsAreGlobal) {
				imp = imps != null ? imps[q.source.substring(nameStart,q.pos)] : null;
				if(imp == null && mayHaveType) {
					imp = new gml_GmlImports();
				}
			}
			q.skipSpaces1_local();
			c = q.source.charCodeAt(q.pos);
		}
		if(c == 40) {
			_hx_loop1: while(q.pos < q.length) {
				c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 36:
					if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
						q.pos += 1;
						q.skipStringTemplate(version,true);
					}
					break;
				case 41:
					q.skipSpaces1_local();
					if(q.source.substr(q.pos,2) == "->") {
						var typeStart = q.pos;
						q.pos += 2;
						if(gml_type_GmlTypeParser.skipTypeName(q,null)) {
							out += q.source.substring(start,typeStart);
							out += "/*->";
							procSegment(typeStart + 2,q.pos,true);
							out += q.source.substring(start,q.pos);
							out += "*/";
							start = q.pos;
						} else {
							q.pos = typeStart;
						}
					}
					break _hx_loop1;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					default:
					}
					break;
				case 58:
					var typeStart1 = q.pos - 1;
					if(!gml_type_GmlTypeParser.skipTypeName(q,null)) {
						continue;
					}
					out += q.source.substring(start,typeStart1);
					out += "/*:";
					procSegment(typeStart1 + 1,q.pos,true);
					out += q.source.substring(start,q.pos);
					out += "*/";
					start = q.pos;
					break;
				case 34:case 39:case 64:case 96:
					q.skipStringAuto(c,version);
					break;
				}
			}
		}
	};
	procFunc = _procFunc_post;
	var svd = null;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.source.substr((p + 1),6) == "import") {
				q.skipLine();
				var txt = q.source.substring(p,q.pos);
				if(synext_GmlExtImport.rxImport.test(txt) || synext_GmlExtImport.rxImportFile.test(txt)) {
					out = (out += q.source.substring(start,p)) + ("//!" + txt);
					start = q.pos;
					impc += 1;
				}
			} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				var ctx = q.readContextName(null);
				if(ctx != null) {
					imp = imps != null ? imps[ctx] : null;
					if(imp == null && mayHaveType) {
						imp = new gml_GmlImports();
					}
				} else {
					q.pos = p + 1;
				}
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			} else if((c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) && imp != null) {
				q.pos -= 1;
				readDotPair();
				if(hasFunctionLiterals && dotFull == "function") {
					procFunc(cubDepth == 0);
					continue;
				}
				var mcr = gml_GmlAPI.gmlMacros[dotFull];
				if(mcr != null && mcr.expr == "var") {
					dotFull = "var";
				}
				if(dotFull == "var" || dotFull == "globalvar" || dotFull == "args" && q.source.charCodeAt(p - 1) == 35) {
					var isVar = [dotFull != "args"];
					if(svd == null) {
						svd = new parsers_SkipVarsData();
					}
					q.skipVars((function(isGlobalVar,isVar) {
						return function(d) {
							var skipVarOldPos = q.pos;
							out += q.source.substring(start,d.rawTypeStart);
							if(d.typeStr != null) {
								out += isVar[0] ? "/*:" : ":";
								procSegment(d.typeStart,d.typeEnd,true);
								out += q.source.substring(start,d.typeEnd);
								if(isVar[0]) {
									out += "*/";
								}
								if(!isGlobalVar[0]) {
									impc += 1;
								}
							}
							out += q.source.substring(d.rawTypeEnd,d.exprStart);
							procSegment(d.exprStart,d.exprEnd,false);
							q.pos = skipVarOldPos;
						};
					})([dotFull == "globalvar"],isVar),version,!isVar[0],svd);
				} else {
					procIdent_next = synext_GmlExtImport.post_procIdent(q,imp,dotStart,dotPos,dotFull);
					if(procIdent_next != null) {
						out += q.source.substring(start,dotStart);
						out += procIdent_next;
						start = synext_GmlExtImport.post_procIdent_p1;
					}
				}
				if(synext_GmlExtImport.errorText != "") {
					return null;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				var cmtEnd = q.pos;
				if(q.source.charCodeAt(p + 2) == 47) {
					var cp = p + 3;
					while(cp < cmtEnd) {
						c = q.source.charCodeAt(cp);
						if(c == 32 || c == 9) {
							++cp;
						} else {
							break;
						}
					}
					if(q.source.charCodeAt(cp) == 64) {
						if(q.source.substring(cp + 1,cp + 5) == "hint" && !tools_CharCode.isIdent1_ni(q.source.charCodeAt(cp + 5))) {
							out += q.source.substring(start,cp + 5);
							procSegment(cp + 5,cmtEnd,true);
						} else if(tools_CharCode.isIdent0_ni(q.source.charCodeAt(cp + 1))) {
							q.pos = cp + 1;
							q.skipIdent1();
							var rx = /\{.+?\}/g;
							var pos = q.pos;
							var till = cmtEnd;
							if(cmtEnd == null) {
								till = -1;
							}
							if(pos == null) {
								pos = 0;
							}
							if(till < 0) {
								till = code.length;
							}
							rx.lastIndex = pos;
							var mt = rx.exec(code);
							while(mt != null && mt.index < till) {
								var mtStart = mt.index;
								out += q.source.substring(start,mtStart);
								procSegment(mtStart,mtStart + mt[0].length,true);
								mt = rx.exec(code);
							}
						}
						q.pos = cmtEnd;
					}
				} else if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && q.source.substr((p + 4),6) == "import") {
					out += q.source.substring(start,p + 3);
					out += " ";
					start = p + 3;
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		case 123:
			cubDepth += 1;
			break;
		case 125:
			cubDepth -= 1;
			break;
		default:
			if((c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) && imp != null) {
				q.pos -= 1;
				readDotPair();
				if(hasFunctionLiterals && dotFull == "function") {
					procFunc(cubDepth == 0);
					continue;
				}
				var mcr1 = gml_GmlAPI.gmlMacros[dotFull];
				if(mcr1 != null && mcr1.expr == "var") {
					dotFull = "var";
				}
				if(dotFull == "var" || dotFull == "globalvar" || dotFull == "args" && q.source.charCodeAt(p - 1) == 35) {
					var isVar1 = [dotFull != "args"];
					if(svd == null) {
						svd = new parsers_SkipVarsData();
					}
					q.skipVars((function(isGlobalVar,isVar) {
						return function(d) {
							var skipVarOldPos = q.pos;
							out += q.source.substring(start,d.rawTypeStart);
							if(d.typeStr != null) {
								out += isVar[0] ? "/*:" : ":";
								procSegment(d.typeStart,d.typeEnd,true);
								out += q.source.substring(start,d.typeEnd);
								if(isVar[0]) {
									out += "*/";
								}
								if(!isGlobalVar[0]) {
									impc += 1;
								}
							}
							out += q.source.substring(d.rawTypeEnd,d.exprStart);
							procSegment(d.exprStart,d.exprEnd,false);
							q.pos = skipVarOldPos;
						};
					})([dotFull == "globalvar"],isVar1),version,!isVar1[0],svd);
				} else {
					procIdent_next = synext_GmlExtImport.post_procIdent(q,imp,dotStart,dotPos,dotFull);
					if(procIdent_next != null) {
						out += q.source.substring(start,dotStart);
						out += procIdent_next;
						start = synext_GmlExtImport.post_procIdent_p1;
					}
				}
				if(synext_GmlExtImport.errorText != "") {
					return null;
				}
			}
		}
	}
	synext_GmlExtImport.post_numImports = impc;
	out += q.source.substring(start,q.pos);
	return out;
};
var synext__$GmlExtImport_GmlExtImportRule = $hxEnums["synext._GmlExtImport.GmlExtImportRule"] = { __ename__:true,__constructs__:null
	,EnsureNS: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"synext._GmlExtImport.GmlExtImportRule",toString:$estr}; },$_._hx_name="EnsureNS",$_.__params__ = ["name"],$_)
	,Import: ($_=function(long,short,kind,comp,doc,space,spaceOnly,cache) { return {_hx_index:1,long:long,short:short,kind:kind,comp:comp,doc:doc,space:space,spaceOnly:spaceOnly,cache:cache,__enum__:"synext._GmlExtImport.GmlExtImportRule",toString:$estr}; },$_._hx_name="Import",$_.__params__ = ["long","short","kind","comp","doc","space","spaceOnly","cache"],$_)
	,FieldHint: ($_=function(field,comp,doc,space,isInst,cache) { return {_hx_index:2,field:field,comp:comp,doc:doc,space:space,isInst:isInst,cache:cache,__enum__:"synext._GmlExtImport.GmlExtImportRule",toString:$estr}; },$_._hx_name="FieldHint",$_.__params__ = ["field","comp","doc","space","isInst","cache"],$_)
};
synext__$GmlExtImport_GmlExtImportRule.__constructs__ = [synext__$GmlExtImport_GmlExtImportRule.EnsureNS,synext__$GmlExtImport_GmlExtImportRule.Import,synext__$GmlExtImport_GmlExtImportRule.FieldHint];
var synext_GmlExtLambdaWrap = function() {
	synext_SyntaxExtension.call(this,"#lambda","#lambda magic");
};
$hxClasses["synext.GmlExtLambdaWrap"] = synext_GmlExtLambdaWrap;
synext_GmlExtLambdaWrap.__name__ = "synext.GmlExtLambdaWrap";
synext_GmlExtLambdaWrap.__super__ = synext_SyntaxExtension;
synext_GmlExtLambdaWrap.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		if(editor.file.path != null) {
			return editor.kind.canLambda;
		} else {
			return false;
		}
	}
	,preproc: function(editor,code) {
		code = synext_GmlExtLambda.pre(editor,code);
		if(code == null) {
			this.message = synext_GmlExtLambda.errorText;
		}
		return code;
	}
	,postproc: function(editor,code) {
		code = synext_GmlExtLambda.post(editor,code);
		if(code == null) {
			this.message = synext_GmlExtLambda.errorText;
		}
		return code;
	}
	,__class__: synext_GmlExtLambdaWrap
});
var yy_YyJson = function() { };
$hxClasses["yy.YyJson"] = yy_YyJson;
yy_YyJson.__name__ = "yy.YyJson";
yy_YyJson.isExtJson = function(src) {
	var p = src.length - 1;
	_hx_loop1: while(p >= 0) switch(src.charCodeAt(p)) {
	case 9:case 10:case 13:case 32:
		--p;
		break;
	case 93:case 125:
		--p;
		break _hx_loop1;
	default:
		return false;
	}
	while(p >= 0) switch(src.charCodeAt(p)) {
	case 9:case 10:case 13:case 32:
		--p;
		break;
	case 44:
		return true;
	default:
		return false;
	}
	return false;
};
yy_YyJson.parse = function(src,isExt) {
	if(isExt == null) {
		isExt = yy_YyJson.isExtJson(src);
	}
	if(isExt) {
		return new yy_YyJsonParser(src).doParse();
	} else {
		return JSON.parse(src);
	}
};
yy_YyJson.stringify = function(obj,extJson) {
	if(extJson == null) {
		extJson = false;
	}
	return yy_YyJsonPrinter.stringify(obj,extJson);
};
var yy_YyJsonParser = function(str) {
	this.str = str;
	this.pos = 0;
};
$hxClasses["yy.YyJsonParser"] = yy_YyJsonParser;
yy_YyJsonParser.__name__ = "yy.YyJsonParser";
yy_YyJsonParser.prototype = {
	doParse: function() {
		var result = this.parseRec();
		var c;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			if(!(c == c)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	,parseRec: function() {
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var c1 = c;
				var start = this.pos - 1;
				var minus = c == 45;
				var digit = !minus;
				var zero = c == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				do {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
				} while(!end);
				var numstr = HxOverrides.substr(this.str,start,this.pos - start);
				var f = parseFloat(numstr);
				var i = f | 0;
				if(i == f) {
					return i;
				} else if(!point && Std.string(f) != numstr) {
					var i64 = haxe_Int64Helper.parseString(numstr);
					if((i64 == null ? "null" : haxe_Int64.toString(i64)) == numstr) {
						i64.__int64 = true;
						return i64;
					} else {
						return f;
					}
				} else {
					return f;
				}
				break;
			case 91:
				var arr = [];
				var comma = null;
				while(true) switch(this.str.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 44:
					if(comma) {
						comma = false;
					} else {
						this.invalidChar();
					}
					break;
				case 93:
					return arr;
				default:
					if(comma) {
						this.invalidChar();
					}
					this.pos--;
					arr.push(this.parseRec());
					comma = true;
				}
				break;
			case 102:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				var save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				var obj = { hxOrder : []};
				var field = null;
				var comma1 = null;
				var hxOrder = obj.hxOrder;
				while(true) switch(this.str.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 34:
					if(field != null || comma1) {
						this.invalidChar();
					}
					field = this.parseString();
					break;
				case 44:
					if(comma1) {
						comma1 = false;
					} else {
						this.invalidChar();
					}
					break;
				case 58:
					if(field == null) {
						this.invalidChar();
					}
					hxOrder.push(field);
					var val = this.parseRec();
					if(Object.prototype.hasOwnProperty.call(obj,field)) {
						console.log("Duplicate field definition: " + field,val);
					} else {
						obj[field] = val;
					}
					field = null;
					comma1 = true;
					break;
				case 125:
					return obj;
				default:
					this.invalidChar();
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		var prev = -1;
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.str;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				if(c != 117 && prev != -1) {
					buf.b += String.fromCodePoint(65533);
					prev = -1;
				}
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					if(prev != -1) {
						if(uc < 56320 || uc > 57343) {
							buf.b += String.fromCodePoint(65533);
							prev = -1;
						} else {
							buf.b += String.fromCodePoint(((prev - 55296 << 10) + (uc - 56320) + 65536));
							prev = -1;
						}
					} else if(uc >= 55296 && uc <= 56319) {
						prev = uc;
					} else {
						buf.b += String.fromCodePoint(uc);
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid escape sequence \\" + String.fromCodePoint(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw haxe_Exception.thrown("Unclosed string");
			}
		}
		if(prev != -1) {
			buf.b += String.fromCodePoint(65533);
			prev = -1;
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			var s = this.str;
			var len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	,invalidChar: function() {
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	,invalidNumber: function(start) {
		throw haxe_Exception.thrown("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
	,__class__: yy_YyJsonParser
};
var yy_YyGUID = {};
yy_YyGUID.create = function() {
	var result = "";
	var _g = 0;
	while(_g < 32) {
		var j = _g++;
		if(j == 8 || j == 12 || j == 16 || j == 20) {
			result += "-";
		}
		if(j == 12) {
			result += "4";
		} else if(j == 16) {
			result += "89ab".charAt(tools_Random.integer(4));
		} else {
			result += "0123456789abcdef".charAt(tools_Random.integer(16));
		}
	}
	return result;
};
yy_YyGUID.createNum = function(count,pj) {
	var out = [];
	var taken_h = Object.create(null);
	if(pj != null) {
		var _g = 0;
		var _g1 = pj.resources;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			taken_h[pair.Key] = true;
			taken_h[pair.Value.id] = true;
		}
	}
	var _g = 0;
	while(_g < count) {
		++_g;
		var id;
		do id = yy_YyGUID.create(); while(Object.prototype.hasOwnProperty.call(taken_h,id));
		out.push(id);
	}
	return out;
};
yy_YyGUID.isValid = function(this1) {
	if(this1 != null && this1 != "") {
		return this1 != "00000000-0000-0000-0000-000000000000";
	} else {
		return false;
	}
};
var tools_Random = function() { };
$hxClasses["tools.Random"] = tools_Random;
tools_Random.__name__ = "tools.Random";
tools_Random.range = function(start,end) {
	return Std.random(end - start) + start;
};
tools_Random.bool = function() {
	return Std.random(2) == 0;
};
tools_Random.integer = function(size) {
	return Std.random(size);
};
tools_Random.letterString = function(length) {
	var s = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		_g++;
		var code = tools_Random.bool() ? tools_Random.range(65,90) : tools_Random.range(97,122);
		s += String.fromCodePoint(code);
	}
	return s;
};
var yy_YyJsonMeta = {};
yy_YyJsonMeta.initByModelName = function() {
	var q = Object.create(null);
	var base = ["configDeltas","id","modelName","mvc","name"];
	q["GMProject"] = { order : base.concat(["IsDnDProject","configs","option_ecma","parentProject","resources","script_order","tutorial"]), types : { resources : "GMProjectResourcePair"}};
	q["GMProjectParent"] = { order : base.concat(["alteredResources","hiddenResources","projectPath"]), types : { alteredResources : "GMProjectResourcePair", hiddenResources : "GMProjectResourcePair"}};
	q["GMProjectResourcePair"] = { order : base.concat(["Key","Value"]), types : { Value : "GMProjectResource"}};
	q["GMProjectResource"] = { order : base.concat(["resourcePath","resourceType"])};
	return q;
};
yy_YyJsonMeta.initByResourceType2023 = function() {
	var q = Object.create(null);
	var base = ["resourceType","resourceVersion","name"];
	var withBase = function(fields) {
		return base.concat(fields);
	};
	q["GMProjectConfig"] = { order : ["children","name"], types : { children : "GMProjectConfig"}};
	q["GMProject"] = { order : withBase([]), types : { configs : "GMProjectConfig"}};
	return q;
};
yy_YyJsonMeta.initByResourceType = function() {
	var q = Object.create(null);
	var base = ["parent","resourceVersion","name","tags","resourceType"];
	var td1 = function(fields) {
		var r = { };
		var _g = 0;
		while(_g < fields.length) r[fields[_g++]] = 1;
		return r;
	};
	q["GMScript"] = { order : (function(fields) {
		return fields.concat(base);
	})(["isDnD","isCompatibility"])};
	q["GMObject"] = { order : ["spriteId","solid","visible","managed","spriteMaskId","persistent","parentObjectId","physicsObject","physicsSensor","physicsShape","physicsGroup","physicsDensity","physicsRestitution","physicsLinearDamping","physicsAngularDamping","physicsFriction","physicsStartAwake","physicsKinematic","physicsShapePoints","eventList","properties","overriddenProperties"].concat(base), digits : td1(["physicsDensity","physicsRestitution","physicsLinearDamping","physicsAngularDamping","physicsFriction"])};
	q["GMEvent"] = { order : ["isDnD","eventNum","eventType","collisionObjectId"].concat(base)};
	q["GMMoment"] = { order : ["moment","evnt"].concat(base)};
	q["GMRoom"] = { order : ["isDnd","volume","parentRoom","views","layers","inheritLayers","creationCodeFile","inheritCode","instanceCreationOrder","inheritCreationOrder","sequenceId","roomSettings","viewSettings","physicsSettings"].concat(base), types : { views : "GMRoomView", instanceCreationOrder : "GMRoomCreationOrder", roomSettings : "GMRoomSettings", viewSettings : "GMRoomViewSettings", physicsSettings : "GMRoomPhysicsSettings"}, digits : { volume : 1}};
	q["GMRoomView"] = { order : ["inherit","visible","xview","yview","wview","hview","xport","yport","wport","hport","hborder","vborder","hspeed","vspeed","objectId"]};
	q["GMRoomCreationOrder"] = { order : ["name","path"]};
	q["GMRoomSettings"] = { order : ["inheritRoomSettings","Width","Height","persistent"]};
	q["GMRoomViewSettings"] = { order : ["inheritViewSettings","enableViews","clearViewBackground","clearDisplayBuffer"]};
	q["GMRoomPhysicsSettings"] = { order : ["inheritPhysicsSettings","PhysicsWorld","PhysicsWorldGravityX","PhysicsWorldGravityY","PhysicsWorldPixToMetres"], digits : td1(["PhysicsWorldGravityX","PhysicsWorldGravityY","PhysicsWorldPixToMetres"])};
	var layerBase = ["visible","depth","userdefinedDepth","inheritLayerDepth","inheritLayerSettings","gridX","gridY","layers","hierarchyFrozen"].concat(base);
	q["GMRInstanceLayer"] = { order : ["instances"].concat(layerBase)};
	q["GMRBackgroundLayer"] = { order : ["spriteId","colour","x","y","htiled","vtiled","hspeed","vspeed","stretch","animationFPS","animationSpeedType","userdefinedAnimFPS"].concat(layerBase), digits : td1(["hspeed","vspeed","animationFPS"])};
	return q;
};
var yy_YyJsonPrinter = function() { };
$hxClasses["yy.YyJsonPrinter"] = yy_YyJsonPrinter;
yy_YyJsonPrinter.__name__ = "yy.YyJsonPrinter";
yy_YyJsonPrinter.stringify_string = function(s) {
	var r = "\"";
	var start = 0;
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		var esc;
		switch(s.charCodeAt(i)) {
		case 8:
			esc = "\\b";
			break;
		case 9:
			esc = "\\t";
			break;
		case 10:
			esc = "\\n";
			break;
		case 12:
			esc = "\\f";
			break;
		case 13:
			esc = "\\r";
			break;
		case 34:
			esc = "\\\"";
			break;
		case 47:
			esc = yy_YyJsonPrinter.isExt ? "/" : "\\/";
			break;
		case 92:
			esc = "\\\\";
			break;
		default:
			esc = null;
		}
		if(esc != null) {
			if(i > start) {
				r += s.substring(start,i) + esc;
			} else {
				r += esc;
			}
			start = i + 1;
		}
	}
	if(start == 0) {
		return "\"" + s + "\"";
	}
	if(start < s.length) {
		return r + s.substring(start) + "\"";
	} else {
		return r + "\"";
	}
};
yy_YyJsonPrinter.stringify_rec = function(obj,indent,compact,digits) {
	var nt = yy_YyJsonPrinter.nextType;
	yy_YyJsonPrinter.nextType = null;
	if(obj == null) {
		return "null";
	} else if(typeof(obj) == "string") {
		return yy_YyJsonPrinter.stringify_string(obj);
	} else if(((obj) instanceof Array)) {
		var indentString = yy_YyJsonPrinter.indentString;
		var arr = obj;
		var wantedCompact = yy_YyJsonPrinter.wantCompact;
		if(arr.length == 0 && wantedCompact) {
			return "[]";
		}
		var count = indent += 1;
		var r = "[\r\n" + indentString.repeat(count);
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			yy_YyJsonPrinter.nextType = nt;
			if(wantedCompact) {
				if(i > 0) {
					r += "\r\n" + indentString.repeat(indent);
				}
				r += yy_YyJsonPrinter.stringify_rec(arr[i],indent,true) + ",";
			} else {
				if(i > 0) {
					r += ",\r\n" + indentString.repeat(indent);
				}
				r += yy_YyJsonPrinter.stringify_rec(arr[i],indent,compact);
			}
		}
		var count = indent -= 1;
		return r + "\r\n" + indentString.repeat(count) + "]";
	} else if(Reflect.isObject(obj)) {
		if(obj.__int64) {
			var tmp = obj;
			return "" + (tmp == null ? "null" : haxe_Int64.toString(tmp));
		}
		if(yy_YyJsonPrinter._Int64 != null && ((obj) instanceof yy_YyJsonPrinter._Int64)) {
			var tmp = obj;
			return "" + (tmp == null ? "null" : haxe_Int64.toString(tmp));
		}
		var indentString = yy_YyJsonPrinter.indentString;
		indent += 1;
		var r = compact ? "{" : "{\r\n" + indentString.repeat(indent);
		var orderedFields = obj.hxOrder;
		var fieldDigits = obj.hxDigits;
		var fieldTypes = null;
		var found = 0;
		var sep = false;
		var meta;
		var _2023 = yy_YyJsonPrinter.isExt && (gml_Project.current != null && gml_Project.current.isGM2023);
		if(nt != null) {
			meta = yy_YyJsonPrinter.isExt ? _2023 ? yy_YyJsonPrinter.metaByResourceType2023[nt] : yy_YyJsonPrinter.metaByResourceType[nt] : yy_YyJsonPrinter.metaByModelName[nt];
			if(meta == null) {
				console.warn("Unknown type " + nt);
			}
		} else if(yy_YyJsonPrinter.isExt) {
			nt = obj.resourceType;
			meta = ((nt) && ((_2023 ? yy_YyJsonPrinter.metaByResourceType2023[nt] : yy_YyJsonPrinter.metaByResourceType[nt])));
		} else {
			nt = obj.modelName;
			meta = ((nt) && (yy_YyJsonPrinter.metaByModelName[nt]));
		}
		if(meta != null) {
			orderedFields = meta.order;
			fieldTypes = meta.types;
			fieldDigits = meta.digits;
		} else if(orderedFields == null) {
			if(Object.prototype.hasOwnProperty.call(obj,"mvc")) {
				orderedFields = yy_YyJsonPrinter.orderByModelName[obj.modelName];
			}
			if(orderedFields == null) {
				orderedFields = yy_YyJsonPrinter.isExt ? yy_YyJsonPrinter.mvcOrder23 : yy_YyJsonPrinter.mvcOrder22;
			}
		} else if(Object.prototype.hasOwnProperty.call(obj,"mvc") || Object.prototype.hasOwnProperty.call(obj,"resourceType")) {
			found += 1;
		}
		var isOrdered = yy_YyJsonPrinter.isOrderedCache.h[orderedFields.__id__];
		if(isOrdered == null) {
			isOrdered = Object.create(null);
			isOrdered["hxOrder"] = true;
			isOrdered["hxDigits"] = true;
			var _g = 0;
			while(_g < orderedFields.length) isOrdered[orderedFields[_g++]] = true;
			yy_YyJsonPrinter.isOrderedCache.set(orderedFields,isOrdered);
		}
		var tcs = yy_YyJsonPrinter.trailingCommas;
		var orderedFieldsAfter = yy_YyJsonPrinter.isExt && !_2023;
		var addField = function(field) {
			if(!tcs) {
				if(sep) {
					r += ",\r\n" + indentString.repeat(indent);
				} else {
					sep = true;
				}
			} else if(!compact) {
				if(sep) {
					r += "\r\n" + indentString.repeat(indent);
				} else {
					sep = true;
				}
			}
			found += 1;
			r += yy_YyJsonPrinter.stringify_string(field) + (compact ? ":" : ": ");
			yy_YyJsonPrinter.nextType = fieldTypes != null ? fieldTypes[field] : null;
			r += yy_YyJsonPrinter.stringify_rec(Reflect.field(obj,field),indent,compact,fieldDigits != null ? fieldDigits[field] : null);
			if(tcs) {
				r += ",";
			}
		};
		if(yy_YyJsonPrinter.wantPrefixFields) {
			var _g = 0;
			var _g1 = yy_YyJsonPrinter.rv1_6_prefixFieldList;
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(!Object.prototype.hasOwnProperty.call(obj,field)) {
					continue;
				}
				addField(field);
			}
		}
		var rOrig;
		var rAfter;
		if(orderedFieldsAfter) {
			rOrig = r;
			r = "";
		} else {
			rOrig = null;
		}
		var _g = 0;
		while(_g < orderedFields.length) {
			var field = orderedFields[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(obj,field)) {
				continue;
			}
			if(yy_YyJsonPrinter.wantPrefixFields && Object.prototype.hasOwnProperty.call(yy_YyJsonPrinter.rv1_6_prefixFieldMap,field)) {
				continue;
			}
			addField(field);
		}
		if(orderedFieldsAfter) {
			rAfter = r;
			r = rOrig;
		} else {
			rAfter = null;
		}
		var allFields = Reflect.fields(obj);
		if(allFields.length > found) {
			allFields.sort(yy_YyJsonPrinter.fieldComparator);
			if(orderedFieldsAfter) {
				sep = false;
			}
			var _g = 0;
			while(_g < allFields.length) {
				var field = allFields[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(isOrdered,field)) {
					continue;
				}
				addField(field);
			}
			if(orderedFieldsAfter && rAfter != "") {
				if(!tcs) {
					if(sep) {
						r += ",\r\n" + indentString.repeat(indent);
					} else {
						sep = true;
					}
				} else if(!compact) {
					if(sep) {
						r += "\r\n" + indentString.repeat(indent);
					} else {
						sep = true;
					}
				}
				r += rAfter;
			}
		} else if(orderedFieldsAfter) {
			r += rAfter;
		}
		indent -= 1;
		return r + (compact ? "}" : "\r\n" + indentString.repeat(indent) + "}");
	} else if(digits != null && (typeof(obj) == "number" && ((obj | 0) === obj))) {
		return Std.string(obj) + "." + "0".repeat(digits);
	} else {
		return JSON.stringify(obj);
	}
};
yy_YyJsonPrinter.stringify = function(obj,extJson) {
	if(extJson == null) {
		extJson = false;
	}
	yy_YyJsonPrinter.wantCompact = extJson;
	yy_YyJsonPrinter.trailingCommas = extJson;
	yy_YyJsonPrinter.isExt = extJson;
	var project = gml_Project.current;
	if(project != null) {
		yy_YyJsonPrinter.isGM2023 = project.isGM2023;
		yy_YyJsonPrinter.wantPrefixFields = !yy_YyJsonPrinter.isGM2023 && project.yyResourceVersion >= 1.6;
	} else {
		yy_YyJsonPrinter.wantPrefixFields = false;
		yy_YyJsonPrinter.isGM2023 = false;
	}
	yy_YyJsonPrinter.indentString = extJson ? "  " : "    ";
	return yy_YyJsonPrinter.stringify_rec(obj,0,false);
};
yy_YyJsonPrinter.init = function() {
	yy_YyJsonPrinter._Int64 = $hxClasses["haxe._Int64.___Int64"];
	if(yy_YyJsonPrinter._Int64 == null) {
		console.error("Couldn't find Int64 implementation!");
	}
};
var synext_GmlExtLambda = function() {
	this.remap = Object.create(null);
	this.docs = Object.create(null);
	this.kind = Object.create(null);
	this.comp = [];
};
$hxClasses["synext.GmlExtLambda"] = synext_GmlExtLambda;
synext_GmlExtLambda.__name__ = "synext.GmlExtLambda";
synext_GmlExtLambda.rxExtScript = function(name) {
	if(gml_Project.current.properties.lambdaMode == 1) {
		name = name.replace(synext_GmlExtLambda.rxlfPrefix,"__lc_");
	}
	return new RegExp("((?:^|\n)#define " + name + "\r?\n)([\\s\\S]*?)($|\r?\n#define)");
};
synext_GmlExtLambda.preImpl = function(code,data) {
	var project = data.project;
	var lambdaMap = project.lambdaMap;
	var version = data.version;
	var list = data.list;
	var map = data.map;
	var scope = data.scope;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	var proc = function(s,def,p) {
		var impl;
		var mt;
		if(data.useScripts) {
			var path = "scripts/" + s + "/" + s + ".gml";
			if(!data.project.existsSync(path)) {
				return false;
			}
			try {
				impl = data.project.readTextFileSync(path);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				console.error("Failed to fetch lambda from " + path,_g1);
				return false;
			}
		} else {
			if(data.gml == null) {
				data.gml = electron_FileWrap.readTextFileSync(project.lambdaGml);
			}
			mt = synext_GmlExtLambda.rxExtScript(s).exec(data.gml);
			if(mt == null) {
				return false;
			}
			impl = mt[2];
		}
		impl = synext_GmlExtArgs.pre(impl,false);
		mt = synext_GmlExtLambda.rxLambdaPre.exec(impl);
		if(mt == null) {
			return false;
		}
		out += q.source.substring(start,p);
		var laName = mt[3];
		if(mt[5] != null && mt[7] == null) {
			mt[7] = "";
		}
		var laArgs = mt[7] != null ? "(" + mt[5] + mt[7] + mt[6] + ")" : "";
		if(laName != "$") {
			scope.remap[s] = laName;
			scope.kind[laName] = "lambda.function";
			scope.comp.push({ name : laName, value : laName, score : 0, meta : "lambda", doc : laArgs != "" ? laName + laArgs : null});
			scope.docs[laName] = gml_funcdoc_GmlFuncDocParser.parse(laName + laArgs,null);
		}
		var laCode = mt[8];
		laCode = synext_GmlExtLambda.preImpl(laCode,data);
		out += def + mt[2] + (laName != "$" ? laName : "") + mt[4] + laArgs + laCode;
		list.push(s);
		map[s] = laCode;
		return true;
	};
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			var ctx = q.readContextName(null);
			if(ctx != null) {
				scope = new synext_GmlExtLambda();
				data.scopes[ctx] = scope;
				data.scope = scope;
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(version,true);
			} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var s = q.source.substring(p,q.pos);
				if(!lambdaMap[s]) {
					continue;
				}
				var rs = scope.remap[s];
				if(rs != null) {
					out += q.source.substring(start,p);
					out += rs;
					start = q.pos;
					continue;
				}
				if(proc(s,"#lambda",p)) {
					start = q.pos;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		case 123:
			if(q.source.substring(q.pos,q.pos + 10) == "/*!#lamdef") {
				var p1 = q.source.indexOf("}",q.pos);
				if(p1 < 0) {
					continue;
				}
				var mt = synext_GmlExtLambda.rxLambdaDef.exec(q.source.substring(p + 1,p1));
				if(mt == null) {
					continue;
				}
				if(proc(mt[1],"#lamdef",p)) {
					q.pos = p1 + 1;
					start = q.pos;
				}
			}
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var s1 = q.source.substring(p,q.pos);
				if(!lambdaMap[s1]) {
					continue;
				}
				var rs1 = scope.remap[s1];
				if(rs1 != null) {
					out += q.source.substring(start,p);
					out += rs1;
					start = q.pos;
					continue;
				}
				if(proc(s1,"#lambda",p)) {
					start = q.pos;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtLambda.preInit = function(pj) {
	var scopes = Object.create(null);
	var scope = new synext_GmlExtLambda();
	scopes[""] = scope;
	return { project : pj, version : pj.version, list : [], map : Object.create(null), scopes : scopes, scope : scope, useScripts : pj.properties.lambdaMode == 2, gml : null};
};
synext_GmlExtLambda.pre = function(edit,code) {
	var pj = gml_Project.current;
	if(!(!pj.isGMS23 && ui_Preferences.current.lambdaMagic && (pj.lambdaGml != null || pj.properties.lambdaMode == 2))) {
		return code;
	}
	if(edit.file.path != null && edit.file.path == pj.lambdaGml) {
		return code;
	}
	var d = synext_GmlExtLambda.preInit(pj);
	var out = synext_GmlExtLambda.preImpl(code,d);
	edit.lambdaList = d.list;
	edit.lambdaMap = d.map;
	edit.lambdas = d.scopes;
	return out;
};
synext_GmlExtLambda.post_1 = function(fileName,code,prefix,data,parent) {
	if(parent == null) {
		parent = "";
	}
	var project = data.project;
	var version = data.version;
	var map0 = data.map0;
	var list1 = data.list1;
	var parent1 = data.parent1;
	var map1 = data.map1;
	var scope = data.scope;
	var q = new parsers_GmlReader(code);
	var row = 0;
	var out = "";
	var start = 0;
	var flush = function(till) {
		out += q.source.substring(start,till);
	};
	var proc = function() {
		var p0 = q.pos;
		q.skipSpaces1();
		var p;
		var laName = null;
		var laNamePre = "";
		var this1 = q.source.charCodeAt(q.pos);
		if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90) {
			p = q.pos;
			q.skipIdent1();
			laNamePre = q.source.substring(p0,p);
			if(laNamePre.indexOf("\n") != -1) {
				synext_GmlExtLambda.errorText = "[row " + row + "]: " + "You can't have a linebreak between #lambda and name";
				return null;
			}
			laName = q.source.substring(p,q.pos);
			p0 = q.pos;
			q.skipSpaces1();
		}
		var laArgs = null;
		var laArgsPre = "";
		if(q.source.charCodeAt(q.pos) == 40) {
			p = q.pos + 1;
			var depth = 0;
			_hx_loop1: while(q.get_loop()) {
				var c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 10:case 13:
					synext_GmlExtLambda.errorText = "[row " + row + "]: " + "Expected a closing `)`";
					return null;
				case 36:
					if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
						var row1 = row;
						q.pos += 1;
						row = row1 + q.skipStringTemplate(version,true);
					}
					break;
				case 40:
					++depth;
					break;
				case 41:
					if(--depth <= 0) {
						q.pos -= 1;
						break _hx_loop1;
					}
					break;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					default:
					}
					break;
				case 34:case 39:case 64:case 96:
					row += q.skipStringAuto(c,version);
					break;
				default:
				}
			}
			if(q.get_loop()) {
				laArgsPre = q.source.substring(p0,p - 1);
				laArgs = q.source.substring(p,q.pos);
				q.pos += 1;
				p0 = q.pos;
				q.skipSpaces1();
			} else {
				synext_GmlExtLambda.errorText = "[row " + row + "]: " + "Expected a closing `)`";
				return null;
			}
		}
		if(q.source.charCodeAt(q.pos) != 123) {
			var opts = ["{code}"];
			if(laName != null) {
				opts.push("name");
			}
			if(laArgs != null) {
				opts.push("(args)");
			}
			if(opts.length > 1) {
				var optl = opts.pop();
				var s = "Expected a " + opts.join(", ") + " or " + optl + ".";
				synext_GmlExtLambda.errorText = "[row " + row + "]: " + s;
				return null;
			} else {
				synext_GmlExtLambda.errorText = "[row " + row + "]: " + ("Expected a " + opts[0] + ".");
				return null;
			}
		} else {
			var depth = 0;
			_hx_loop2: while(q.get_loop()) {
				var c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 36:
					if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
						var row1 = row;
						q.pos += 1;
						row = row1 + q.skipStringTemplate(version,true);
					}
					break;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					default:
					}
					break;
				case 34:case 39:case 64:case 96:
					row += q.skipStringAuto(c,version);
					break;
				case 123:
					++depth;
					break;
				case 125:
					if(--depth <= 0) {
						q.pos -= 1;
						break _hx_loop2;
					}
					break;
				default:
				}
			}
			if(!q.get_loop()) {
				synext_GmlExtLambda.errorText = "[row " + row + "]: " + "Expected a closing `}`";
				return null;
			}
			q.pos += 1;
			var laCode = q.source.substring(p0,q.pos);
			var laArgsMt;
			var laArgsDoc;
			if(laArgs != null) {
				laArgsMt = synext_GmlExtLambda.rxLambdaArgsSp.exec(laArgs);
				if(laArgsMt[2] != "") {
					laCode = "#args " + laArgs + "\n" + laCode;
					laCode = synext_GmlExtArgs.post(laCode);
				}
				laArgsDoc = laArgs;
				if(laCode == null) {
					synext_GmlExtLambda.errorText = "[row " + row + "]: " + ("Arguments error:\n" + synext_GmlExtArgs.errorText);
					return null;
				}
			} else {
				laArgsMt = null;
				laArgsDoc = gml_funcdoc_GmlFuncDocCheapArgs.parse(laCode);
			}
			var laFull_0 = "__lf_" + prefix + "_" + (laName != null ? laName : "");
			var laFull_i = 0;
			var laFull;
			do {
				laFull = laFull_0;
				if(laFull_i > 0) {
					laFull = laFull_0 + laFull_i;
				}
				++laFull_i;
			} while(Object.prototype.hasOwnProperty.call(map1,laFull) || !Object.prototype.hasOwnProperty.call(map0,laFull) && Object.prototype.hasOwnProperty.call(project.lambdaMap,laFull));
			laCode = "/// " + laFull + "(" + laArgsDoc + ")\r\n" + "//!#lambda" + laNamePre + (laName != null ? laName : "$") + laArgsPre + (laArgsMt != null ? "(" + laArgsMt[1] + "$" + laArgsMt[3] + ")" : "") + "\r\n" + laCode;
			if(laName != null) {
				if(Object.prototype.hasOwnProperty.call(scope.remap,laName)) {
					synext_GmlExtLambda.errorText = "[row " + row + "]: " + ("There's already a lambda named " + laName + " in this scope!");
					return null;
				}
				scope.remap[laName] = laFull;
				scope.kind[laName] = "lambda.function";
				scope.comp.push({ name : laName, value : laName, score : 0, meta : "lambda", doc : laArgs != null ? "" + laName + "(" + laArgs + ")" : null});
				scope.docs[laName] = gml_funcdoc_GmlFuncDocParser.parse(laName + ("(" + (laArgs != null ? laArgs : "") + ")"),null);
			}
			laCode = synext_GmlExtLambda.post_1(fileName,laCode,laFull.substring("__lf_".length),data,laFull);
			if(laCode == null) {
				return null;
			}
			list1.push(laFull);
			map1[laFull] = laCode;
			parent1[laFull] = parent;
			return laFull;
		}
	};
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			q.skipIdent1();
			var hash = q.source.substring(p,q.pos);
			var isDef = hash == "#lamdef";
			if(isDef || hash == "#lambda") {
				var full = proc();
				if(full == null) {
					return null;
				}
				flush(p);
				if(isDef) {
					out += "{/*!#lamdef " + full + "*/}";
				} else {
					out += full;
				}
				start = q.pos;
			} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				switch(hash) {
				case "#define":case "#event":case "#moment":case "#target":
					q.skipSpaces0();
					var p1 = q.pos;
					var ct;
					scope = new synext_GmlExtLambda();
					data.scope = scope;
					switch(hash) {
					case "#define":
						q.skipIdent1();
						ct = q.source.substring(p1,q.pos);
						prefix = ct;
						break;
					case "#event":
						q.skipEventName();
						ct = q.source.substring(p1,q.pos);
						prefix = fileName + "_" + StringTools.replace(ct,":","_");
						break;
					case "#moment":case "#target":
						q.skipIdent1();
						ct = q.source.substring(p1,q.pos);
						prefix = fileName + "_" + ct;
						break;
					default:
						ct = null;
					}
					data.scopes[ct] = scope;
					break;
				default:
					q.pos = p + 1;
				}
			} else {
				q.pos = p + 1;
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				var row1 = row;
				q.pos += 1;
				row = row1 + q.skipStringTemplate(version,true);
			} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var rs = scope.remap[q.source.substring(p,q.pos)];
				if(rs != null) {
					var z = true;
					var p11 = p;
					_hx_loop2: while(--p11 >= 0) switch(q.source.charCodeAt(p11)) {
					case 9:case 10:case 13:case 32:
						break;
					case 46:
						z = false;
						break _hx_loop2;
					default:
						break _hx_loop2;
					}
					if(z) {
						flush(p);
						out += rs;
						start = q.pos;
					}
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				row += q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			row += q.skipStringAuto(c,version);
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var rs1 = scope.remap[q.source.substring(p,q.pos)];
				if(rs1 != null) {
					var z1 = true;
					var p12 = p;
					_hx_loop3: while(--p12 >= 0) switch(q.source.charCodeAt(p12)) {
					case 9:case 10:case 13:case 32:
						break;
					case 46:
						z1 = false;
						break _hx_loop3;
					default:
						break _hx_loop3;
					}
					if(z1) {
						flush(p);
						out += rs1;
						start = q.pos;
					}
				}
			}
		}
	}
	flush(q.pos);
	return out;
};
synext_GmlExtLambda.postGMS1 = function(d) {
	var pj = d.project;
	var ext = electron_FileWrap.readGmxFileSync(pj.lambdaExt);
	var file = null;
	var _g = ext.find("files").findAll("file");
	while(0 < _g.length) {
		file = _g[0];
		break;
	}
	var fns = file.find("functions");
	var mcs = file.find("constants");
	var extz = false;
	var useVars = gml_Project.current.properties.lambdaMode == 1;
	var _g = 0;
	var _g1 = d.list0;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(d.map1,s)) {
			extz = true;
			if(useVars) {
				var _g2 = 0;
				var _g3 = mcs.findAll("constant");
				while(_g2 < _g3.length) {
					var mc = _g3[_g2];
					++_g2;
					if(mc.findText("name") == s) {
						HxOverrides.remove(mcs.children,mc);
						break;
					}
				}
				s = s.replace(synext_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			var _g4 = 0;
			var _g5 = fns.findAll("function");
			while(_g4 < _g5.length) {
				var f = _g5[_g4];
				++_g4;
				if(f.findText("name") == s) {
					HxOverrides.remove(fns.children,f);
					break;
				}
			}
		}
	}
	var makeFn = function(s) {
		var fn = new gmx_SfGmx("function");
		fn.addTextChild("name",s);
		fn.addTextChild("externalName",s);
		fn.addTextChild("kind","11");
		fn.addTextChild("help","");
		fn.addTextChild("returnType","2");
		fn.addTextChild("argCount","-1");
		fn.children.push(new gmx_SfGmx("args"));
		return fn;
	};
	var _g = 0;
	var _g1 = d.list1;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(d.map0,s)) {
			var skip = false;
			if(useVars) {
				var _g2 = 0;
				var _g3 = mcs.findAll("constant");
				while(_g2 < _g3.length) if(_g3[_g2++].findText("name") == s) {
					skip = true;
					break;
				}
				if(skip) {
					continue;
				}
				var mc = new gmx_SfGmx("constant");
				mc.addTextChild("name",s);
				mc.addTextChild("value","global.g" + s);
				mc.addTextChild("hidden","-1");
				mcs.children.push(mc);
				s = s.replace(synext_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			var _g4 = 0;
			var _g5 = fns.findAll("function");
			while(_g4 < _g5.length) if(_g5[_g4++].findText("name") == s) {
				skip = true;
				break;
			}
			if(skip) {
				continue;
			}
			extz = true;
			var q = makeFn(s);
			fns.children.push(q);
		}
	}
	if(file.findText("init") == "") {
		file.find("init").text = "__lf_";
		fns.children.unshift(makeFn("__lf_"));
		extz = true;
		d.checkInit = true;
	}
	if(extz) {
		electron_FileWrap.writeTextFileSync(pj.lambdaExt,ext.toGmxString());
	}
};
synext_GmlExtLambda.postGMS2 = function(d) {
	var pj = d.project;
	var ext = electron_FileWrap.readYyFileSync(pj.lambdaExt);
	var file = ext.files[0];
	var fns = file.functions;
	var mcs = file.constants;
	var order = file.order;
	var extz = false;
	var i;
	var useVars = gml_Project.current.properties.lambdaMode == 1;
	var _g = 0;
	var _g1 = d.list0;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(d.map1,s)) {
			extz = true;
			if(useVars) {
				i = mcs.length;
				while(--i >= 0) {
					if(mcs[i].constantName != s) {
						continue;
					}
					mcs.splice(i,1);
					break;
				}
				s = s.replace(synext_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			i = fns.length;
			while(--i >= 0) {
				var fn = fns[i];
				if(fn.name != s) {
					continue;
				}
				HxOverrides.remove(order,fn.id);
				fns.splice(i,1);
				break;
			}
		}
	}
	var makeFn = function(s) {
		return { id : yy_YyGUID.create(), modelName : "GMExtensionFunction", mvc : "1.0", argCount : -1, args : [], externalName : s, help : "", hidden : true, kind : 11, name : s, returnType : 2};
	};
	var _g = 0;
	var _g1 = d.list1;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(d.map0,s)) {
			var skip = false;
			if(useVars) {
				var _g2 = 0;
				while(_g2 < mcs.length) if(mcs[_g2++].constantName == s) {
					skip = true;
					break;
				}
				if(skip) {
					continue;
				}
				mcs.push({ id : yy_YyGUID.create(), modelName : "GMExtensionConstant", mvc : "1.0", constantName : s, hidden : true, value : "global.g" + s});
				s = s.replace(synext_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			var _g3 = 0;
			while(_g3 < fns.length) if(fns[_g3++].name == s) {
				skip = true;
				break;
			}
			if(skip) {
				continue;
			}
			extz = true;
			var fn = makeFn(s);
			order.push(fn.id);
			fns.push(fn);
		}
	}
	if(file.init == "") {
		file.init = "__lf_";
		var fn = makeFn("__lf_");
		order.unshift(fn.id);
		fns.unshift(fn);
		extz = true;
		d.checkInit = true;
	}
	if(extz) {
		electron_FileWrap.writeYyFileSync(pj.lambdaExt,ext);
	}
};
synext_GmlExtLambda.postGMS2_scripts = function(d) {
	var pj = d.project;
	var py = d.project.readYyFileSync(pj.name);
	var ry = py.resources;
	var saveProject = false;
	if(pj.lambdaView == null) {
		var tv = ui_treeview_TreeView.find(false,{ rel : "Scripts/"});
		ui_treeview_TreeViewItemMenus.updatePrefix(tv);
		var td = ui_treeview_TreeViewItemMenus.getItemData(tv);
		var md = { prefix : td.prefix, plural : td.plural, single : td.single, last : td.last, tvDir : tv, tvRef : tv, chain : ["Scripts"], order : 0, mkdir : true, name : "#gmedit-lambda", kind : "script", pj : pj, py : py};
		yy_v22_YyManipV22.add(md);
		pj.lambdaView = "views\\" + (md.outGUID == null ? "null" : md.outGUID) + ".yy";
		saveProject = true;
	}
	var pyBefore = null;
	var _g = 0;
	var _g1 = py.resources;
	while(_g < _g1.length) {
		var r = _g1[_g];
		++_g;
		if(r.Value.resourcePath != pj.lambdaView) {
			continue;
		}
		pyBefore = r;
		break;
	}
	var ltv = ui_treeview_TreeView.find(false,{ rel : "Scripts/#gmedit-lambda/"});
	ui_treeview_TreeViewItemMenus.updatePrefix(ltv);
	var saveView = false;
	var lview = null;
	var _g = 0;
	var _g1 = d.list0;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(d.map1,s)) {
			var path = "scripts\\" + s + "\\" + s + ".yy";
			var _g2 = 0;
			var _g3 = ry.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var r = ry[i];
				if(r.Value.resourcePath != path) {
					continue;
				}
				delete pj.yyResourceGUIDs[s];
				delete pj.yyResources[r.Value.id];
				if(lview == null) {
					lview = pj.readYyFileSync(pj.lambdaView);
				}
				if(HxOverrides.remove(lview.children,r.Key)) {
					saveView = true;
				}
				ry.splice(i,1);
				saveProject = true;
				break;
			}
			pj.unlinkSyncSafe(path);
			pj.unlinkSyncSafe("scripts\\" + s + "\\" + s + ".gml");
			pj.rmdirSync("scripts\\" + s);
			var stv = ui_treeview_TreeView.find(true,{ rel : "Scripts/#gmedit-lambda/" + s});
			if(stv != null) {
				stv.parentElement.removeChild(stv);
			}
		}
	}
	if(saveView) {
		pj.writeYyFileSync(pj.lambdaView,lview);
	}
	var _g = 0;
	var _g1 = d.list1;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(d.map0,s)) {
			var td = ui_treeview_TreeViewItemMenus.getItemData(ltv);
			yy_v22_YyManipV22.add({ prefix : td.prefix, plural : td.plural, single : td.single, last : td.last, tvDir : ltv, tvRef : ltv, chain : ["Scripts","#gmedit-lambda"], order : -2, mkdir : false, name : s, kind : "script", py : py, pj : pj, pyBefore : pyBefore, openFile : false, showInTree : false});
			saveProject = true;
		}
	}
	var _g = 0;
	var _g1 = d.list1;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		pj.writeTextFileSync("scripts\\" + s + "\\" + s + ".gml",d.map1[s]);
	}
	if(saveProject) {
		pj.writeYyFileSync(pj.name,py);
	}
};
synext_GmlExtLambda.postImpl = function(code,data) {
	if(!ui_Preferences.current.lambdaMagic) {
		return code;
	}
	var hasLambda = data.hasLambda;
	if(hasLambda == null) {
		hasLambda = code.indexOf("#lambda") != -1 || code.indexOf("#lamdef") != -1;
		data.hasLambda = hasLambda;
	}
	if(!hasLambda && data.list0.length == 0) {
		return code;
	}
	var out = hasLambda ? synext_GmlExtLambda.post_1(data.name,code,data.name,data) : code;
	if(out == null) {
		return null;
	}
	var pj = data.project;
	if(data.list0.length == 0 && data.list1.length == 0) {
		return out;
	}
	var postFunc = synext_GmlExtLambda.postMap[pj.version.config.projectMode];
	if(postFunc == null) {
		synext_GmlExtLambda.errorText = "Lambdas are not supported for this version of GM.";
		return null;
	}
	var isScripts = pj.properties.lambdaMode == 2;
	var remList = [];
	var setList = [];
	var indexList = [];
	var indexForce = isScripts ? Object.create(null) : null;
	var _g = 0;
	var _g1 = data.list0;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(data.map1,s)) {
			remList.push(s);
		}
	}
	var _g = 0;
	var _g1 = data.list0;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(data.map1[s] == null) {
			remList.push(s);
		}
	}
	var _g = 0;
	var _g1 = data.list1;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var changed = data.map1[s] != data.map0[s];
		if(changed) {
			setList.push(s);
		}
		if(isScripts) {
			if(changed || indexForce[s]) {
				indexList.push(s);
			}
			if(changed) {
				var p = data.parent1[s];
				var depth = 0;
				while(p != "" && ++depth <= 128) {
					indexForce[p] = true;
					p = data.parent1[p];
				}
			}
		} else if(changed) {
			indexList.push(s);
		}
	}
	var changed = remList.length > 0 || setList.length > 0;
	var _g = 0;
	while(_g < remList.length) {
		var s = remList[_g];
		++_g;
		delete pj.lambdaMap[s];
		if(isScripts) {
			delete gml_GmlAPI.gmlDoc[s];
		} else {
			delete gml_GmlAPI.extDoc[s];
		}
		delete synext_GmlExtLambda.seekData.locals[s];
	}
	var _g = 0;
	while(_g < setList.length) pj.lambdaMap[setList[_g++]] = true;
	var _g = 0;
	while(_g < indexList.length) {
		var s = indexList[_g];
		++_g;
		var lgml = data.map1[s];
		var locals = new gml_GmlLocals(s);
		synext_GmlExtLambda.seekData.locals[s] = locals;
		parsers_GmlSeeker.runSyncImpl(isScripts ? pj.fullPath("scripts/" + s + "/" + s + ".gml") : synext_GmlExtLambda.seekPath,lgml,s,synext_GmlExtLambda.seekData,locals,file_kind_gml_KGmlLambdas.inst);
		synext_GmlExtLambda.readDefs_1(lgml);
	}
	if(isScripts) {
		synext_GmlExtLambda.postGMS2_scripts(data);
		return out;
	}
	if(pj.lambdaExt == null || pj.lambdaGml == null) {
		synext_GmlExtLambda.errorText = "Please add an extension called `" + "gmedit_lambda" + "` to the project," + " add a placeholder GML file to it, and reload (Ctrl+R) in GMEdit.";
		if(pj.version.config.projectMode == "gms1") {
			synext_GmlExtLambda.errorText += "\n\nAs this is GMS1, you'll also need to reload the project after you save a file with lambdas for the first time. Sorry about that.";
		}
		return null;
	}
	var gml = null;
	if(changed) {
		postFunc(data);
	}
	if(data.checkInit) {
		gml = electron_FileWrap.readTextFileSync(pj.lambdaGml);
		if(!new RegExp("^#define " + "__lf_" + "$","m").test(gml)) {
			gml = "#define " + "__lf_" + "\n" + "// https://bugs.yoyogames.com/view.php?id=29984" + (gml != "" ? "\n" + gml : "");
		}
	}
	if(changed) {
		if(gml == null) {
			gml = electron_FileWrap.readTextFileSync(pj.lambdaGml);
		}
		var _g = 0;
		while(_g < remList.length) {
			var s = remList[_g];
			++_g;
			var what = synext_GmlExtLambda.rxExtScript(s);
			gml = gml.replace(what,"$3");
			var what1 = new RegExp("\n" + s + " = .+");
			gml = gml.replace(what1,"");
		}
		var useVars = gml_Project.current.properties.lambdaMode == 1;
		var _g = 0;
		while(_g < setList.length) {
			var s = setList[_g];
			++_g;
			var scr = [data.map1[s]];
			var add = [true];
			var what = synext_GmlExtLambda.rxExtScript(s);
			gml = gml.replace(what,(function(add,scr) {
				return function(_,s0,c,s1) {
					add[0] = false;
					return s0 + scr[0] + s1;
				};
			})(add,scr));
			if(add[0]) {
				var scrName = s;
				if(useVars) {
					scrName = s.replace(synext_GmlExtLambda.rxlfPrefix,"__lc_");
					var p = gml.indexOf("\n#define",gml.indexOf("#define " + "__lf_") + 1);
					if(gml.charCodeAt(p - 1) == 13) {
						--p;
					} else if(p < 0) {
						p = gml.length;
					}
					gml = tools_NativeString.insert(gml,p,"\n" + s + " = asset_get_index(\"" + scrName + "\");");
				}
				gml += "\n#define " + scrName + "\n" + scr[0];
			}
		}
		electron_FileWrap.writeTextFileSync(pj.lambdaGml,gml);
	}
	return out;
};
synext_GmlExtLambda.postInit = function(name,pj,lambdaList,lambdaMap) {
	var scopes = Object.create(null);
	var scope = new synext_GmlExtLambda();
	scopes[""] = scope;
	return { name : name, project : pj, version : pj.version, list0 : lambdaList, map0 : lambdaMap, list1 : [], map1 : Object.create(null), parent1 : Object.create(null), scopes : scopes, scope : scope, checkInit : false, hasLambda : null};
};
synext_GmlExtLambda.post = function(edit,code) {
	if(!ui_Preferences.current.lambdaMagic) {
		return code;
	}
	var _this = gml_Project.current;
	if(!(!_this.isGMS23 && ui_Preferences.current.lambdaMagic && (_this.lambdaGml != null || _this.properties.lambdaMode == 2))) {
		return code;
	}
	var hasLambda = code.indexOf("#lambda") != -1 || code.indexOf("#lamdef") != -1;
	if(!hasLambda && edit.lambdaList.length == 0) {
		return code;
	}
	var data = synext_GmlExtLambda.postInit(edit.file.name,gml_Project.current,edit.lambdaList,edit.lambdaMap);
	data.hasLambda = hasLambda;
	var out = synext_GmlExtLambda.postImpl(code,data);
	if(out == null) {
		return null;
	}
	edit.lambdas = data.scopes;
	edit.lambdaList = data.list1;
	edit.lambdaMap = data.map1;
	return out;
};
synext_GmlExtLambda.readDefs_1 = function(code) {
	var rx = synext_GmlExtLambda.readDefs_rx;
	rx.lastIndex = 0;
	var mt = rx.exec(code);
	while(mt != null) {
		var this1 = gml_GmlAPI.extDoc;
		var v = gml_funcdoc_GmlFuncDocParser.parse(mt[1],null);
		this1[mt[2]] = v;
		mt = rx.exec(code);
	}
};
synext_GmlExtLambda.readDefs = function(path) {
	try {
		var code = electron_FileWrap.readTextFileSync(path);
		var props = gml_Project.current.properties;
		if(code.indexOf("//!usevars") >= 0) {
			var _g = props.lambdaMode;
			if(_g == null) {
				props.lambdaMode = 1;
			} else if(_g == 0) {
				props.lambdaMode = 1;
			}
		}
		parsers_GmlSeeker.runSync(path,code,"",file_kind_gml_KGmlLambdas.inst);
		synext_GmlExtLambda.seekPath = path;
		synext_GmlExtLambda.seekData = parsers_GmlSeekData.map[path];
		if(gml_Project.current.properties.lambdaMode == 1) {
			var locals = synext_GmlExtLambda.seekData.locals;
			var _g = 0;
			var _g1 = Reflect.fields(locals);
			while(_g < _g1.length) {
				var fd = _g1[_g];
				++_g;
				if(StringTools.startsWith(fd,"__lc_")) {
					var v = locals[fd];
					delete locals[fd];
					locals["__lf_" + fd.substring("__lc_".length)] = v;
				}
			}
		}
	} catch( _g ) {
	}
	electron_FileWrap.readTextFile(path,function(e,code) {
		if(e != null) {
			return;
		}
		synext_GmlExtLambda.readDefs_1(code);
	});
};
synext_GmlExtLambda.prototype = {
	__class__: synext_GmlExtLambda
};
var synext_GmlExtMFuncWrap = function() {
	synext_SyntaxExtension.call(this,"#mfunc","#mfunc magic");
};
$hxClasses["synext.GmlExtMFuncWrap"] = synext_GmlExtMFuncWrap;
synext_GmlExtMFuncWrap.__name__ = "synext.GmlExtMFuncWrap";
synext_GmlExtMFuncWrap.__super__ = synext_SyntaxExtension;
synext_GmlExtMFuncWrap.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		return editor.kind.canMFunc;
	}
	,preproc: function(editor,code) {
		code = synext_GmlExtMFunc.pre(editor,code);
		if(code == null) {
			this.message = synext_GmlExtMFunc.errorText;
		}
		return code;
	}
	,postproc: function(editor,code) {
		code = synext_GmlExtMFunc.post(editor,code);
		if(code == null) {
			this.message = synext_GmlExtMFunc.errorText;
		}
		return code;
	}
	,__class__: synext_GmlExtMFuncWrap
});
var synext_GmlExtMFunc = function(name,json) {
	this.name = name;
	this.args = json.args;
	this.order = json.order;
	this.comp = { name : name, value : name, score : 0, meta : "macro", doc : name + "(" + this.args.join(",") + ")"};
	this.hasRest = this.args.length > 0 && this.args[this.args.length - 1].trim() == "...";
};
$hxClasses["synext.GmlExtMFunc"] = synext_GmlExtMFunc;
synext_GmlExtMFunc.__name__ = "synext.GmlExtMFunc";
synext_GmlExtMFunc.__magicMap_init = function() {
	var map = Object.create(null);
	var rx = "(@@)(__(?:";
	var rxSep = false;
	var add = function(name,fn) {
		if(rxSep) {
			rx += "|";
		} else {
			rxSep = true;
		}
		rx += name + "__";
		map["__" + name + "__"] = fn;
	};
	add("FILE",function(e,_) {
		return JSON.stringify(e.file.name);
	});
	add("HERE",function(e,_) {
		return e.file.name;
	});
	add("DATE",function(e,_) {
		return JSON.stringify(DateTools.format(new Date(),"%F"));
	});
	add("TIME",function(e,_) {
		return JSON.stringify(DateTools.format(new Date(),"%T"));
	});
	var getLine = function(q) {
		var n = 0;
		var i = q.pos;
		while(i >= 0) {
			++n;
			i = q.source.lastIndexOf("\n",i - 1);
		}
		return n;
	};
	add("LINE",function(e,q) {
		return "" + getLine(q);
	});
	add("LINE_STR",function(e,q) {
		return "\"" + getLine(q) + "\"";
	});
	map["argument"] = function(e,q) {
		return "argument";
	};
	map["argument_count"] = function(e,q) {
		return "argument_count";
	};
	var makeArgFun = function(i) {
		return function(e,q) {
			return "argument" + i;
		};
	};
	var v = makeArgFun(0);
	map["argument" + 0] = v;
	var v = makeArgFun(1);
	map["argument" + 1] = v;
	var v = makeArgFun(2);
	map["argument" + 2] = v;
	var v = makeArgFun(3);
	map["argument" + 3] = v;
	var v = makeArgFun(4);
	map["argument" + 4] = v;
	var v = makeArgFun(5);
	map["argument" + 5] = v;
	var v = makeArgFun(6);
	map["argument" + 6] = v;
	var v = makeArgFun(7);
	map["argument" + 7] = v;
	var v = makeArgFun(8);
	map["argument" + 8] = v;
	var v = makeArgFun(9);
	map["argument" + 9] = v;
	var v = makeArgFun(10);
	map["argument" + 10] = v;
	var v = makeArgFun(11);
	map["argument" + 11] = v;
	var v = makeArgFun(12);
	map["argument" + 12] = v;
	var v = makeArgFun(13);
	map["argument" + 13] = v;
	var v = makeArgFun(14);
	map["argument" + 14] = v;
	var v = makeArgFun(15);
	map["argument" + 15] = v;
	rx += "))";
	synext_GmlExtMFunc.magicRegex = rx;
	return map;
};
synext_GmlExtMFunc.pre = function(editor,code) {
	if(!ui_Preferences.current.mfuncMagic) {
		return code;
	}
	var q = new parsers_GmlReader(code);
	var v = q.version;
	var proc = null;
	proc = function(mf,pre) {
		if(mf.order.length == 0) {
			return mf.name + "()";
		}
		var orig_pos = q.pos;
		var c = q.source.charCodeAt(q.pos);
		var beforeParOpen = "";
		if(c == 32 || c == 9) {
			q.pos += 1;
		} else if(c == 47 && q.source.charCodeAt(q.pos + 1) == 42) {
			q.pos = q.source.indexOf("*/",q.pos);
			if(q.pos < 0) {
				q.pos = orig_pos;
				return pre + "0";
			} else {
				beforeParOpen = q.source.substring(orig_pos + 2,q.pos);
				q.pos += 2;
			}
		}
		var start = q.pos;
		var ind = 1;
		var next = pre + 1;
		var args = new Array(mf.args.length);
		var order = mf.order;
		var out = "";
		_hx_loop1: while(q.get_loop()) {
			var p = q.pos;
			c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					q.readContextName(null);
				}
				break;
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && v.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(v,true);
				} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					if(q.source.charCodeAt(q.pos + (-4)) == 95 && q.source.charCodeAt(q.pos + (-3)) == 109 && q.source.charCodeAt(q.pos + (-2)) == 102 && q.source.charCodeAt(q.pos + (-1)) == 48) {
						var mf1 = gml_GmlAPI.gmlMFuncs[q.source.substring(p,q.pos - 4)];
						if(mf1 != null) {
							out += q.source.substring(start,p) + proc(mf1,q.source.substring(p,q.pos - 1));
							start = q.pos;
						}
					} else if(q.source.substring(p,q.pos) == next) {
						c = q.source.charCodeAt(p - 1);
						if(c == 32 || c == 9) {
							--p;
						}
						var arg = out + q.source.substring(start,p);
						out = "";
						var ai;
						var s;
						var pad;
						var trim;
						var ord = order[ind - 1];
						if(typeof(ord) == "number") {
							ai = ord;
						} else {
							switch(ord[0]) {
							case 0:
								ai = ord[1];
								break;
							case 1:
								ai = ord[1];
								try {
									arg = JSON.parse(arg);
								} catch( _g ) {
									console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "] `" + arg + "` is invalid JSON."));
									break _hx_loop1;
								}
								break;
							case 2:
								ai = -1;
								break;
							case 3:case 4:case 5:
								ai = ord[1];
								s = ord[2];
								if(ord[0] != 4) {
									trim = arg.trimLeft();
									pad = arg.substring(0,arg.length - trim.length);
									if(trim.startsWith(s)) {
										arg = pad + trim.substring(s.length);
									} else {
										console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "] `" + arg + "` is supposed " + ("to start with `" + s + "` but does not.")));
										break _hx_loop1;
									}
								}
								if(ord[0] == 5) {
									s = ord[3];
								}
								if(ord[0] != 3) {
									trim = arg.trimRight();
									pad = arg.substring(trim.length);
									if(trim.endsWith(s)) {
										arg = trim.substring(0,trim.length - s.length) + pad;
									} else {
										console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "] `" + arg + "` is supposed " + ("to end with `" + s + "` but does not.")));
										break _hx_loop1;
									}
								}
								break;
							}
						}
						if(ai >= 0) {
							var oldArg = args[ai];
							if(oldArg != null) {
								if(oldArg != arg) {
									console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "]" + (" is already set to `" + oldArg + "` but new value is `" + arg + "`")));
									break _hx_loop1;
								}
							} else {
								args[ai] = arg;
							}
						}
						if(++ind > order.length) {
							ai = args.length;
							while(--ai >= 0) if(args[ai] == null) {
								args[ai] = "undefined";
							}
							var proc1 = mf.name + beforeParOpen + "(";
							var b_b = "";
							var len = args.length;
							var _g1 = 0;
							while(_g1 < len) {
								var i = _g1++;
								b_b += Std.string(Std.string(args[i]));
								if(i < len - 1) {
									b_b += ",";
								}
							}
							return proc1 + b_b + ")";
						} else {
							c = q.source.charCodeAt(q.pos);
							if(c == 32 || c == 9) {
								q.pos += 1;
							}
							start = q.pos;
							next = pre + ind;
						}
					}
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,v);
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					if(q.source.charCodeAt(q.pos + (-4)) == 95 && q.source.charCodeAt(q.pos + (-3)) == 109 && q.source.charCodeAt(q.pos + (-2)) == 102 && q.source.charCodeAt(q.pos + (-1)) == 48) {
						var mf2 = gml_GmlAPI.gmlMFuncs[q.source.substring(p,q.pos - 4)];
						if(mf2 != null) {
							out += q.source.substring(start,p) + proc(mf2,q.source.substring(p,q.pos - 1));
							start = q.pos;
						}
					} else if(q.source.substring(p,q.pos) == next) {
						c = q.source.charCodeAt(p - 1);
						if(c == 32 || c == 9) {
							--p;
						}
						var arg1 = out + q.source.substring(start,p);
						out = "";
						var ai1;
						var s1;
						var pad1;
						var trim1;
						var ord1 = order[ind - 1];
						if(typeof(ord1) == "number") {
							ai1 = ord1;
						} else {
							switch(ord1[0]) {
							case 0:
								ai1 = ord1[1];
								break;
							case 1:
								ai1 = ord1[1];
								try {
									arg1 = JSON.parse(arg1);
								} catch( _g2 ) {
									console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai1 + "] `" + arg1 + "` is invalid JSON."));
									break _hx_loop1;
								}
								break;
							case 2:
								ai1 = -1;
								break;
							case 3:case 4:case 5:
								ai1 = ord1[1];
								s1 = ord1[2];
								if(ord1[0] != 4) {
									trim1 = arg1.trimLeft();
									pad1 = arg1.substring(0,arg1.length - trim1.length);
									if(trim1.startsWith(s1)) {
										arg1 = pad1 + trim1.substring(s1.length);
									} else {
										console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai1 + "] `" + arg1 + "` is supposed " + ("to start with `" + s1 + "` but does not.")));
										break _hx_loop1;
									}
								}
								if(ord1[0] == 5) {
									s1 = ord1[3];
								}
								if(ord1[0] != 3) {
									trim1 = arg1.trimRight();
									pad1 = arg1.substring(trim1.length);
									if(trim1.endsWith(s1)) {
										arg1 = trim1.substring(0,trim1.length - s1.length) + pad1;
									} else {
										console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai1 + "] `" + arg1 + "` is supposed " + ("to end with `" + s1 + "` but does not.")));
										break _hx_loop1;
									}
								}
								break;
							}
						}
						if(ai1 >= 0) {
							var oldArg1 = args[ai1];
							if(oldArg1 != null) {
								if(oldArg1 != arg1) {
									console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai1 + "]" + (" is already set to `" + oldArg1 + "` but new value is `" + arg1 + "`")));
									break _hx_loop1;
								}
							} else {
								args[ai1] = arg1;
							}
						}
						if(++ind > order.length) {
							ai1 = args.length;
							while(--ai1 >= 0) if(args[ai1] == null) {
								args[ai1] = "undefined";
							}
							var proc2 = mf.name + beforeParOpen + "(";
							var b_b1 = "";
							var len1 = args.length;
							var _g3 = 0;
							while(_g3 < len1) {
								var i1 = _g3++;
								b_b1 += Std.string(Std.string(args[i1]));
								if(i1 < len1 - 1) {
									b_b1 += ",";
								}
							}
							return proc2 + b_b1 + ")";
						} else {
							c = q.source.charCodeAt(q.pos);
							if(c == 32 || c == 9) {
								q.pos += 1;
							}
							start = q.pos;
							next = pre + ind;
						}
					}
				}
			}
		}
		console.error("Unclosed mfunc " + mf.name);
		q.pos = orig_pos;
		return pre + "0";
	};
	var start = 0;
	var out = "";
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.source.charCodeAt(q.pos) == 109 && q.source.charCodeAt(q.pos + 1) == 97 && q.source.charCodeAt(q.pos + 2) == 99 && q.source.charCodeAt(q.pos + 3) == 114 && q.source.charCodeAt(q.pos + 4) == 111 && tools_CharCode.isSpace1_ni(q.source.charCodeAt(q.pos + 5))) {
				q.pos += 5;
				q.skipSpaces1();
				q.skipIdent();
				q.skipSpaces1();
				if(q.source.charCodeAt(q.pos) == 58) {
					q.pos += 1;
					q.skipSpaces1();
					q.skipIdent();
				}
			} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && v.hasQuoteTemplateStrings()) {
				q.pos += 1;
				q.skipStringTemplate(v,true);
			} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				if(q.source.charCodeAt(q.pos + (-4)) == 95 && q.source.charCodeAt(q.pos + (-3)) == 109 && q.source.charCodeAt(q.pos + (-2)) == 102 && q.source.charCodeAt(q.pos + (-1)) == 48) {
					var mf = gml_GmlAPI.gmlMFuncs[q.source.substring(p,q.pos - 4)];
					if(mf != null) {
						out += q.source.substring(start,p);
						out += proc(mf,q.source.substring(p,q.pos - 1));
						start = q.pos;
					}
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && q.source.substr((p + 4),6) == "mfunc ") {
					out += q.source.substring(start,p);
					var line = q.source.substring(p + 10,q.pos);
					var nameEnd = line.indexOf(" ");
					var name = line.substring(0,nameEnd);
					var json = JSON.parse(line.substring(nameEnd + 1));
					var args = json.args;
					var order = json.order;
					var mf1 = "#mfunc " + name + "(" + args.join(",") + ")";
					if(json.token != null) {
						mf1 += " as " + JSON.stringify(json.token);
					}
					var i = 0;
					var n = order.length;
					var pre = "#macro " + name + "_mf";
					while(i <= n) {
						q.skipSpaces1();
						var cpre = pre + i + " ";
						if(q.source.substring(q.pos,q.pos + cpre.length) != cpre) {
							break;
						}
						var cvp = q.pos += cpre.length;
						q.skipLine();
						while(q.source.charCodeAt(q.pos + (-1)) == 92 && q.get_loop()) {
							q.skipLineEnd();
							q.skipLine();
						}
						var cval = q.source.substring(cvp,q.pos);
						if(cval.endsWith("//")) {
							cval = cval.substring(0,cval.length - 2);
						}
						mf1 += cval;
						if(i < n) {
							var ord = order[i];
							var ai;
							if(ord == null) {
								ai = -1;
							} else if(typeof(ord) == "number") {
								ai = ord;
							} else {
								switch(ord[0]) {
								case 0:
									ai = ord[1];
									break;
								case 1:
									ai = ord[1];
									mf1 += "@@";
									break;
								case 2:
									mf1 += "@@" + Std.string(ord[1]);
									ai = -1;
									break;
								case 3:
									mf1 += Std.string(ord[2]) + "##";
									ai = ord[1];
									break;
								case 4:
									ai = -1;
									mf1 += args[ord[1]].trim() + "##" + Std.string(ord[2]);
									break;
								case 5:
									ai = -1;
									mf1 += Std.string(ord[2]) + "##" + args[ord[1]].trim() + "##" + Std.string(ord[3]);
									break;
								}
							}
							if(ai >= 0) {
								mf1 += args[ai].trim();
							}
						}
						++i;
					}
					if(i > n) {
						out += mf1;
						start = q.pos;
					}
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,v);
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				if(q.source.charCodeAt(q.pos + (-4)) == 95 && q.source.charCodeAt(q.pos + (-3)) == 109 && q.source.charCodeAt(q.pos + (-2)) == 102 && q.source.charCodeAt(q.pos + (-1)) == 48) {
					var mf2 = gml_GmlAPI.gmlMFuncs[q.source.substring(p,q.pos - 4)];
					if(mf2 != null) {
						out += q.source.substring(start,p);
						out += proc(mf2,q.source.substring(p,q.pos - 1));
						start = q.pos;
					}
				}
			}
		}
	}
	if(start == 0) {
		return code;
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtMFunc.post = function(editor,code) {
	if(!ui_Preferences.current.mfuncMagic) {
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var nextMap = Object.create(null);
	var proc = null;
	proc = function(mf) {
		var orig_pos = q.pos;
		var name = mf.name;
		var start = q.pos;
		q.skipSpaces0();
		var spacesBeforeParOpen = q.source.substring(start,q.pos);
		if(q.source.charCodeAt(q.pos++) != 40) {
			synext_GmlExtMFunc.errorText = "Expected a `(` after " + name;
			return null;
		}
		start = q.pos;
		var depth = 1;
		var args = [];
		var out = "";
		while(q.get_loop()) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
					var num = 1;
					if(num == null) {
						num = 1;
					}
					q.pos += num;
					q.skipStringTemplate(version,true);
				} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					var name1 = q.source.substring(p,q.pos);
					var mf1 = nextMap[name1];
					if(mf1 == null) {
						mf1 = gml_GmlAPI.gmlMFuncs[name1];
					}
					if(mf1 != null) {
						out += q.source.substring(start,p);
						var call = proc(mf1);
						if(call == null) {
							return null;
						}
						out += call;
						start = q.pos;
					}
				}
				break;
			case 44:
				if(depth == 1) {
					args.push(out + q.source.substring(start,p));
					out = "";
					start = q.pos;
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,version);
				break;
			case 40:case 91:case 123:
				++depth;
				break;
			case 41:case 93:case 125:
				if(--depth <= 0) {
					args.push(out + q.source.substring(start,p));
					out = "";
					var mfl = mf.args.length;
					if(mfl == 0 && args.length == 1 && args[0].trimRight() == "") {
						args.pop();
					}
					if(mf.hasRest) {
						if(args.length < mfl) {
							synext_GmlExtMFunc.errorText = "" + name + " requires at least " + mf.args.length + " arguments" + (", " + args.length + " provided.");
							return null;
						}
						if(args.length > mf.args.length) {
							var i = mfl - 1;
							var rest = args[i];
							while(++i < args.length) rest += "," + args[i];
							args.splice(mfl,args.length - mfl);
							args[mfl - 1] = rest;
						}
					} else if(args.length != mfl) {
						synext_GmlExtMFunc.errorText = "" + name + " requires " + mf.args.length + " arguments" + (", " + args.length + " provided.");
						return null;
					}
					var pre = name + "_mf";
					var out1 = pre + "0";
					var order = mf.order;
					var nosep = spacesBeforeParOpen != "";
					if(nosep) {
						out1 += "/*" + spacesBeforeParOpen + "*/";
					}
					var _g = 0;
					var _g1 = order.length;
					while(_g < _g1) {
						var i1 = _g++;
						if(nosep) {
							nosep = false;
						} else {
							out1 += " ";
						}
						var ord = order[i1];
						if(typeof(ord) == "number") {
							out1 += args[ord];
						} else {
							switch(ord[0]) {
							case 0:
								break;
							case 1:
								out1 += JSON.stringify(args[ord[1]]);
								break;
							case 2:
								var _q_pos = q.pos;
								q.pos = orig_pos;
								out1 += synext_GmlExtMFunc.magicMap[ord[1]](editor,q);
								q.pos = _q_pos;
								break;
							case 3:
								out1 += tools_NativeString.insertAtPadLeft(args[ord[1]],ord[2]);
								break;
							case 4:
								out1 += tools_NativeString.insertAtPadRight(args[ord[1]],ord[2]);
								break;
							case 5:
								out1 += tools_NativeString.insertAtPadBoth(args[ord[1]],ord[2],ord[3]);
								break;
							}
						}
						out1 += " " + pre + (i1 + 1);
					}
					c = q.source.charCodeAt(q.pos);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						out1 += " ";
					}
					return out1;
				}
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					var name2 = q.source.substring(p,q.pos);
					var mf11 = nextMap[name2];
					if(mf11 == null) {
						mf11 = gml_GmlAPI.gmlMFuncs[name2];
					}
					if(mf11 != null) {
						out += q.source.substring(start,p);
						var call1 = proc(mf11);
						if(call1 == null) {
							return null;
						}
						out += call1;
						start = q.pos;
					}
				}
			}
		}
		synext_GmlExtMFunc.errorText = "Unclosed() after " + name;
		return null;
	};
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			var tmp;
			if(q.source.substr((p + 1),5) == "mfunc") {
				var this1 = q.source.charCodeAt(p + 6);
				tmp = !(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90 || this1 >= 48 && this1 <= 57);
			} else {
				tmp = false;
			}
			if(tmp) {
				out += q.source.substring(start,p);
				var num = 6;
				if(num == null) {
					num = 1;
				}
				q.pos += num;
				q.skipSpaces0();
				var nameStart = q.pos;
				q.skipIdent();
				var name = q.source.substring(nameStart,q.pos);
				if(name == "") {
					synext_GmlExtMFunc.errorText = "No name provided";
					return null;
				}
				q.skipSpaces0();
				if(q.source.charCodeAt(q.pos++) != 40) {
					synext_GmlExtMFunc.errorText = "Expected a `(` after " + name;
					return null;
				}
				var argFulls = [];
				var argMap = Object.create(null);
				var argsOK = false;
				var seenRest = false;
				q.skipSpaces0();
				if(q.source.charCodeAt(q.pos) == 41) {
					q.pos += 1;
					argsOK = true;
				} else {
					_hx_loop2: while(q.get_loop()) {
						var argStart = q.pos;
						q.skipSpaces0();
						var argNameStart = q.pos;
						if(seenRest) {
							synext_GmlExtMFunc.errorText = "Can't have arguments after `...`" + (" argument in " + name);
							return null;
						}
						var tmp1;
						var tmp2;
						if(q.source.charCodeAt(q.pos) == 46) {
							var offset = 1;
							if(offset == null) {
								offset = 0;
							}
							tmp2 = q.source.charCodeAt(q.pos + offset) == 46;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							var offset1 = 2;
							if(offset1 == null) {
								offset1 = 0;
							}
							tmp1 = q.source.charCodeAt(q.pos + offset1) == 46;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							var num1 = 3;
							if(num1 == null) {
								num1 = 1;
							}
							q.pos += num1;
							seenRest = true;
						} else {
							q.skipIdent();
						}
						var argName = q.source.substring(argNameStart,q.pos);
						if(argName == "") {
							synext_GmlExtMFunc.errorText = "Expected an argument name for argument[" + argFulls.length + ("] in " + name);
							return null;
						}
						q.skipSpaces0();
						var argFull = q.source.substring(argStart,q.pos);
						if(Object.prototype.hasOwnProperty.call(argMap,argName)) {
							synext_GmlExtMFunc.errorText = "Argument redefinition for `" + argName + "` in `" + name + "`";
							return null;
						} else {
							argMap[argName] = argFulls.length;
						}
						argFulls.push(argFull);
						switch(q.source.charCodeAt(q.pos++)) {
						case 41:
							argsOK = true;
							break _hx_loop2;
						case 44:
							break;
						default:
							var offset2 = -1;
							if(offset2 == null) {
								offset2 = 0;
							}
							var code = q.source.charCodeAt(q.pos + offset2);
							synext_GmlExtMFunc.errorText = "Unexpected character `" + String.fromCodePoint(code) + ("` in arguments for " + name);
							return null;
						}
					}
				}
				if(!argsOK) {
					synext_GmlExtMFunc.errorText = "Expected a `)` after " + name + "'s arguments";
					return null;
				}
				var tokenType = null;
				do {
					var ttp = q.pos;
					var ttl = q.length;
					var ttc;
					while(ttp < ttl) {
						ttc = q.source.charCodeAt(ttp);
						if(ttc == 32 || ttc == 9) {
							++ttp;
						} else {
							break;
						}
					}
					if(q.source.charCodeAt(ttp++) != 97) {
						break;
					}
					if(q.source.charCodeAt(ttp++) != 115) {
						break;
					}
					if(tools_CharCode.isIdent1_ni(q.source.charCodeAt(ttp))) {
						break;
					}
					while(ttp < ttl) {
						ttc = q.source.charCodeAt(ttp);
						if(ttc == 32 || ttc == 9) {
							++ttp;
						} else {
							break;
						}
					}
					if(q.source.charCodeAt(ttp++) != 34) {
						break;
					}
					var ttStart = ttp;
					var ttEnd = ttStart;
					_hx_loop6: while(ttp < ttl) {
						ttc = q.source.charCodeAt(ttp++);
						switch(ttc) {
						case 10:case 13:
							synext_GmlExtMFunc.errorText = "Unclosed token type for #mfunc " + name;
							return null;
						case 34:
							ttEnd = ttp - 1;
							break _hx_loop6;
						}
					}
					if(ttEnd == ttStart) {
						synext_GmlExtMFunc.errorText = "Unclosed token type for #mfunc " + name;
						return null;
					}
					tokenType = q.source.substring(ttStart,ttEnd);
					q.pos = ttp;
				} while(false);
				var argStart1 = q.pos;
				var mfArgs = "";
				var order = [];
				var argFlush_arg;
				_hx_loop7: while(q.get_loop()) {
					p = q.pos;
					c = q.source.charCodeAt(q.pos++);
					var s1;
					var s2;
					var s3;
					switch(c) {
					case 10:case 13:
						switch(q.source.charCodeAt(p - 1)) {
						case 13:
							break;
						case 92:
							break;
						default:
							q.pos--;
							break _hx_loop7;
						}
						break;
					case 36:
						if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
							var num2 = 1;
							if(num2 == null) {
								num2 = 1;
							}
							q.pos += num2;
							q.skipStringTemplate(version,true);
						} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
							q.skipIdent1();
							s1 = q.source.substring(p,q.pos);
							var i = argMap[s1];
							if(i != null) {
								argFlush_arg = q.source.substring(argStart1,p);
								if(argFlush_arg.trimRight() == "") {
									argFlush_arg += "//";
								}
								mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
								var tmp3;
								var tmp4;
								if(q.source.charCodeAt(q.pos) == 35) {
									var offset3 = 1;
									if(offset3 == null) {
										offset3 = 0;
									}
									tmp4 = q.source.charCodeAt(q.pos + offset3) == 35;
								} else {
									tmp4 = false;
								}
								if(tmp4) {
									var offset4 = 2;
									if(offset4 == null) {
										offset4 = 0;
									}
									tmp3 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset4));
								} else {
									tmp3 = false;
								}
								if(tmp3) {
									var num3 = 2;
									if(num3 == null) {
										num3 = 1;
									}
									q.pos += num3;
									p = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p,q.pos);
									if(Object.prototype.hasOwnProperty.call(argMap,s2)) {
										synext_GmlExtMFunc.errorText = "Argument concatenation" + (" (" + s1 + "##" + s2 + ", in " + name + ") is not supported.");
										return null;
									}
									var tmp5;
									var tmp6;
									if(q.source.charCodeAt(q.pos) == 35) {
										var offset5 = 1;
										if(offset5 == null) {
											offset5 = 0;
										}
										tmp6 = q.source.charCodeAt(q.pos + offset5) == 35;
									} else {
										tmp6 = false;
									}
									if(tmp6) {
										var offset6 = 2;
										if(offset6 == null) {
											offset6 = 0;
										}
										tmp5 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset6));
									} else {
										tmp5 = false;
									}
									if(tmp5) {
										synext_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in #name)");
										return null;
									}
									order.push([4,i,s2]);
								} else {
									order.push(i);
								}
								argStart1 = q.pos;
							} else {
								var tmp7;
								var tmp8;
								if(q.source.charCodeAt(q.pos) == 35) {
									var offset7 = 1;
									if(offset7 == null) {
										offset7 = 0;
									}
									tmp8 = q.source.charCodeAt(q.pos + offset7) == 35;
								} else {
									tmp8 = false;
								}
								if(tmp8) {
									var offset8 = 2;
									if(offset8 == null) {
										offset8 = 0;
									}
									tmp7 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset8));
								} else {
									tmp7 = false;
								}
								if(tmp7) {
									argFlush_arg = q.source.substring(argStart1,p);
									if(argFlush_arg.trimRight() == "") {
										argFlush_arg += "//";
									}
									mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
									var num4 = 2;
									if(num4 == null) {
										num4 = 1;
									}
									q.pos += num4;
									p = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p,q.pos);
									i = argMap[s2];
									if(i == null) {
										synext_GmlExtMFunc.errorText = "One of the concat arguments" + (" should be a variable (" + s1 + "##" + s2 + ", in " + name + ").");
										return null;
									}
									var tmp9;
									var tmp10;
									if(q.source.charCodeAt(q.pos) == 35) {
										var offset9 = 1;
										if(offset9 == null) {
											offset9 = 0;
										}
										tmp10 = q.source.charCodeAt(q.pos + offset9) == 35;
									} else {
										tmp10 = false;
									}
									if(tmp10) {
										var offset10 = 2;
										if(offset10 == null) {
											offset10 = 0;
										}
										tmp9 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset10));
									} else {
										tmp9 = false;
									}
									if(tmp9) {
										var num5 = 2;
										if(num5 == null) {
											num5 = 1;
										}
										q.pos += num5;
										p = q.pos;
										q.skipIdent1();
										s3 = q.source.substring(p,q.pos);
										if(Object.prototype.hasOwnProperty.call(argMap,s3)) {
											synext_GmlExtMFunc.errorText = "Can only concat prefix+var+suffix" + (" (" + s1 + "##" + s2 + "##" + s3 + ", in " + name + ")");
											return null;
										}
										var tmp11;
										var tmp12;
										if(q.source.charCodeAt(q.pos) == 35) {
											var offset11 = 1;
											if(offset11 == null) {
												offset11 = 0;
											}
											tmp12 = q.source.charCodeAt(q.pos + offset11) == 35;
										} else {
											tmp12 = false;
										}
										if(tmp12) {
											var offset12 = 2;
											if(offset12 == null) {
												offset12 = 0;
											}
											tmp11 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset12));
										} else {
											tmp11 = false;
										}
										if(tmp11) {
											synext_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in " + name + ")");
											return null;
										}
										order.push([5,i,s1,s3]);
									} else {
										order.push([3,i,s1]);
									}
									argStart1 = q.pos;
								}
							}
						}
						break;
					case 46:
						var tmp13;
						if(q.source.charCodeAt(q.pos) == 46) {
							var offset13 = 1;
							if(offset13 == null) {
								offset13 = 0;
							}
							tmp13 = q.source.charCodeAt(q.pos + offset13) == 46;
						} else {
							tmp13 = false;
						}
						if(tmp13) {
							var num6 = 2;
							if(num6 == null) {
								num6 = 1;
							}
							q.pos += num6;
							argFlush_arg = q.source.substring(argStart1,p);
							if(argFlush_arg.trimRight() == "") {
								argFlush_arg += "//";
							}
							mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
							var i1 = argMap["..."];
							if(i1 != null) {
								order.push(i1);
							} else {
								synext_GmlExtMFunc.errorText = "Using a `...` argument that is not defined.";
								return null;
							}
							argStart1 = q.pos;
						} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
							q.skipIdent1();
							s1 = q.source.substring(p,q.pos);
							var i2 = argMap[s1];
							if(i2 != null) {
								argFlush_arg = q.source.substring(argStart1,p);
								if(argFlush_arg.trimRight() == "") {
									argFlush_arg += "//";
								}
								mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
								var tmp14;
								var tmp15;
								if(q.source.charCodeAt(q.pos) == 35) {
									var offset14 = 1;
									if(offset14 == null) {
										offset14 = 0;
									}
									tmp15 = q.source.charCodeAt(q.pos + offset14) == 35;
								} else {
									tmp15 = false;
								}
								if(tmp15) {
									var offset15 = 2;
									if(offset15 == null) {
										offset15 = 0;
									}
									tmp14 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset15));
								} else {
									tmp14 = false;
								}
								if(tmp14) {
									var num7 = 2;
									if(num7 == null) {
										num7 = 1;
									}
									q.pos += num7;
									p = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p,q.pos);
									if(Object.prototype.hasOwnProperty.call(argMap,s2)) {
										synext_GmlExtMFunc.errorText = "Argument concatenation" + (" (" + s1 + "##" + s2 + ", in " + name + ") is not supported.");
										return null;
									}
									var tmp16;
									var tmp17;
									if(q.source.charCodeAt(q.pos) == 35) {
										var offset16 = 1;
										if(offset16 == null) {
											offset16 = 0;
										}
										tmp17 = q.source.charCodeAt(q.pos + offset16) == 35;
									} else {
										tmp17 = false;
									}
									if(tmp17) {
										var offset17 = 2;
										if(offset17 == null) {
											offset17 = 0;
										}
										tmp16 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset17));
									} else {
										tmp16 = false;
									}
									if(tmp16) {
										synext_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in #name)");
										return null;
									}
									order.push([4,i2,s2]);
								} else {
									order.push(i2);
								}
								argStart1 = q.pos;
							} else {
								var tmp18;
								var tmp19;
								if(q.source.charCodeAt(q.pos) == 35) {
									var offset18 = 1;
									if(offset18 == null) {
										offset18 = 0;
									}
									tmp19 = q.source.charCodeAt(q.pos + offset18) == 35;
								} else {
									tmp19 = false;
								}
								if(tmp19) {
									var offset19 = 2;
									if(offset19 == null) {
										offset19 = 0;
									}
									tmp18 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset19));
								} else {
									tmp18 = false;
								}
								if(tmp18) {
									argFlush_arg = q.source.substring(argStart1,p);
									if(argFlush_arg.trimRight() == "") {
										argFlush_arg += "//";
									}
									mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
									var num8 = 2;
									if(num8 == null) {
										num8 = 1;
									}
									q.pos += num8;
									p = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p,q.pos);
									i2 = argMap[s2];
									if(i2 == null) {
										synext_GmlExtMFunc.errorText = "One of the concat arguments" + (" should be a variable (" + s1 + "##" + s2 + ", in " + name + ").");
										return null;
									}
									var tmp20;
									var tmp21;
									if(q.source.charCodeAt(q.pos) == 35) {
										var offset20 = 1;
										if(offset20 == null) {
											offset20 = 0;
										}
										tmp21 = q.source.charCodeAt(q.pos + offset20) == 35;
									} else {
										tmp21 = false;
									}
									if(tmp21) {
										var offset21 = 2;
										if(offset21 == null) {
											offset21 = 0;
										}
										tmp20 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset21));
									} else {
										tmp20 = false;
									}
									if(tmp20) {
										var num9 = 2;
										if(num9 == null) {
											num9 = 1;
										}
										q.pos += num9;
										p = q.pos;
										q.skipIdent1();
										s3 = q.source.substring(p,q.pos);
										if(Object.prototype.hasOwnProperty.call(argMap,s3)) {
											synext_GmlExtMFunc.errorText = "Can only concat prefix+var+suffix" + (" (" + s1 + "##" + s2 + "##" + s3 + ", in " + name + ")");
											return null;
										}
										var tmp22;
										var tmp23;
										if(q.source.charCodeAt(q.pos) == 35) {
											var offset22 = 1;
											if(offset22 == null) {
												offset22 = 0;
											}
											tmp23 = q.source.charCodeAt(q.pos + offset22) == 35;
										} else {
											tmp23 = false;
										}
										if(tmp23) {
											var offset23 = 2;
											if(offset23 == null) {
												offset23 = 0;
											}
											tmp22 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset23));
										} else {
											tmp22 = false;
										}
										if(tmp22) {
											synext_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in " + name + ")");
											return null;
										}
										order.push([5,i2,s1,s3]);
									} else {
										order.push([3,i2,s1]);
									}
									argStart1 = q.pos;
								}
							}
						}
						break;
					case 47:
						switch(q.source.charCodeAt(q.pos)) {
						case 42:case 47:
							synext_GmlExtMFunc.errorText = "Comments are not supported in macro-functions, for " + name;
							return null;
						default:
						}
						break;
					case 64:
						var tmp24;
						if(q.source.charCodeAt(q.pos) == 64) {
							var offset24 = 1;
							if(offset24 == null) {
								offset24 = 0;
							}
							tmp24 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset24));
						} else {
							tmp24 = false;
						}
						if(tmp24) {
							argFlush_arg = q.source.substring(argStart1,p);
							if(argFlush_arg.trimRight() == "") {
								argFlush_arg += "//";
							}
							mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
							q.pos += 1;
							p = q.pos;
							q.skipIdent1();
							s1 = q.source.substring(p,q.pos);
							var tmp25;
							var tmp26;
							if(q.source.charCodeAt(q.pos) == 35) {
								var offset25 = 1;
								if(offset25 == null) {
									offset25 = 0;
								}
								tmp26 = q.source.charCodeAt(q.pos + offset25) == 35;
							} else {
								tmp26 = false;
							}
							if(tmp26) {
								var offset26 = 2;
								if(offset26 == null) {
									offset26 = 0;
								}
								tmp25 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset26));
							} else {
								tmp25 = false;
							}
							if(tmp25) {
								synext_GmlExtMFunc.errorText = "Can't concat to a literal (@@" + s1 + "## in " + name + ")";
								return null;
							}
							var i3 = argMap[s1];
							if(i3 != null) {
								order.push([1,i3]);
							} else if(Object.prototype.hasOwnProperty.call(synext_GmlExtMFunc.magicMap,s1)) {
								order.push([2,s1]);
							} else {
								synext_GmlExtMFunc.errorText = "Unknown variable/global for literal " + ("(" + s1 + " in " + name + ")");
								return null;
							}
							argStart1 = q.pos;
						} else {
							q.skipStringAuto(c,version);
						}
						break;
					case 34:case 39:case 96:
						q.skipStringAuto(c,version);
						break;
					default:
						if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
							q.skipIdent1();
							s1 = q.source.substring(p,q.pos);
							var i4 = argMap[s1];
							if(i4 != null) {
								argFlush_arg = q.source.substring(argStart1,p);
								if(argFlush_arg.trimRight() == "") {
									argFlush_arg += "//";
								}
								mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
								var tmp27;
								var tmp28;
								if(q.source.charCodeAt(q.pos) == 35) {
									var offset27 = 1;
									if(offset27 == null) {
										offset27 = 0;
									}
									tmp28 = q.source.charCodeAt(q.pos + offset27) == 35;
								} else {
									tmp28 = false;
								}
								if(tmp28) {
									var offset28 = 2;
									if(offset28 == null) {
										offset28 = 0;
									}
									tmp27 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset28));
								} else {
									tmp27 = false;
								}
								if(tmp27) {
									var num10 = 2;
									if(num10 == null) {
										num10 = 1;
									}
									q.pos += num10;
									p = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p,q.pos);
									if(Object.prototype.hasOwnProperty.call(argMap,s2)) {
										synext_GmlExtMFunc.errorText = "Argument concatenation" + (" (" + s1 + "##" + s2 + ", in " + name + ") is not supported.");
										return null;
									}
									var tmp29;
									var tmp30;
									if(q.source.charCodeAt(q.pos) == 35) {
										var offset29 = 1;
										if(offset29 == null) {
											offset29 = 0;
										}
										tmp30 = q.source.charCodeAt(q.pos + offset29) == 35;
									} else {
										tmp30 = false;
									}
									if(tmp30) {
										var offset30 = 2;
										if(offset30 == null) {
											offset30 = 0;
										}
										tmp29 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset30));
									} else {
										tmp29 = false;
									}
									if(tmp29) {
										synext_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in #name)");
										return null;
									}
									order.push([4,i4,s2]);
								} else {
									order.push(i4);
								}
								argStart1 = q.pos;
							} else {
								var tmp31;
								var tmp32;
								if(q.source.charCodeAt(q.pos) == 35) {
									var offset31 = 1;
									if(offset31 == null) {
										offset31 = 0;
									}
									tmp32 = q.source.charCodeAt(q.pos + offset31) == 35;
								} else {
									tmp32 = false;
								}
								if(tmp32) {
									var offset32 = 2;
									if(offset32 == null) {
										offset32 = 0;
									}
									tmp31 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset32));
								} else {
									tmp31 = false;
								}
								if(tmp31) {
									argFlush_arg = q.source.substring(argStart1,p);
									if(argFlush_arg.trimRight() == "") {
										argFlush_arg += "//";
									}
									mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
									var num11 = 2;
									if(num11 == null) {
										num11 = 1;
									}
									q.pos += num11;
									p = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p,q.pos);
									i4 = argMap[s2];
									if(i4 == null) {
										synext_GmlExtMFunc.errorText = "One of the concat arguments" + (" should be a variable (" + s1 + "##" + s2 + ", in " + name + ").");
										return null;
									}
									var tmp33;
									var tmp34;
									if(q.source.charCodeAt(q.pos) == 35) {
										var offset33 = 1;
										if(offset33 == null) {
											offset33 = 0;
										}
										tmp34 = q.source.charCodeAt(q.pos + offset33) == 35;
									} else {
										tmp34 = false;
									}
									if(tmp34) {
										var offset34 = 2;
										if(offset34 == null) {
											offset34 = 0;
										}
										tmp33 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset34));
									} else {
										tmp33 = false;
									}
									if(tmp33) {
										var num12 = 2;
										if(num12 == null) {
											num12 = 1;
										}
										q.pos += num12;
										p = q.pos;
										q.skipIdent1();
										s3 = q.source.substring(p,q.pos);
										if(Object.prototype.hasOwnProperty.call(argMap,s3)) {
											synext_GmlExtMFunc.errorText = "Can only concat prefix+var+suffix" + (" (" + s1 + "##" + s2 + "##" + s3 + ", in " + name + ")");
											return null;
										}
										var tmp35;
										var tmp36;
										if(q.source.charCodeAt(q.pos) == 35) {
											var offset35 = 1;
											if(offset35 == null) {
												offset35 = 0;
											}
											tmp36 = q.source.charCodeAt(q.pos + offset35) == 35;
										} else {
											tmp36 = false;
										}
										if(tmp36) {
											var offset36 = 2;
											if(offset36 == null) {
												offset36 = 0;
											}
											tmp35 = tools_CharCode.isIdent0_ni(q.source.charCodeAt(q.pos + offset36));
										} else {
											tmp35 = false;
										}
										if(tmp35) {
											synext_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in " + name + ")");
											return null;
										}
										order.push([5,i4,s1,s3]);
									} else {
										order.push([3,i4,s1]);
									}
									argStart1 = q.pos;
								}
							}
						}
					}
				}
				if(q.get_eof()) {
					p = q.pos;
				}
				argFlush_arg = q.source.substring(argStart1,p);
				if(argFlush_arg.trimRight() == "") {
					argFlush_arg += "//";
				}
				mfArgs += "\n#macro " + name + "_mf" + order.length + (" " + argFlush_arg);
				var json = { args : argFulls, order : order};
				if(tokenType != null) {
					json.token = tokenType;
				}
				var mf = new synext_GmlExtMFunc(name,json);
				nextMap[name] = mf;
				out += "//!#mfunc " + name + " " + JSON.stringify(json) + mfArgs;
				start = q.pos;
			} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 36:
			if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
				var num13 = 1;
				if(num13 == null) {
					num13 = 1;
				}
				q.pos += num13;
				q.skipStringTemplate(version,true);
			} else if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var name1 = q.source.substring(p,q.pos);
				var mf1 = nextMap[name1];
				if(mf1 == null) {
					mf1 = gml_GmlAPI.gmlMFuncs[name1];
				}
				if(mf1 != null) {
					out += q.source.substring(start,p);
					var call = proc(mf1);
					if(call == null) {
						return null;
					}
					out += call;
					start = q.pos;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var name2 = q.source.substring(p,q.pos);
				var mf2 = nextMap[name2];
				if(mf2 == null) {
					mf2 = gml_GmlAPI.gmlMFuncs[name2];
				}
				if(mf2 != null) {
					out += q.source.substring(start,p);
					var call1 = proc(mf2);
					if(call1 == null) {
						return null;
					}
					out += call1;
					start = q.pos;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtMFunc.prototype = {
	__class__: synext_GmlExtMFunc
};
var synext_GmlExtTemplateStrings = function() {
	synext_SyntaxExtension.call(this,"`$v`","template strings");
};
$hxClasses["synext.GmlExtTemplateStrings"] = synext_GmlExtTemplateStrings;
synext_GmlExtTemplateStrings.__name__ = "synext.GmlExtTemplateStrings";
synext_GmlExtTemplateStrings.pre_format = function(fmt,args,spacing,esc) {
	var out = "";
	var start = 0;
	var p = 0;
	var n = fmt.length;
	var index = 0;
	while(p < n) {
		var c = fmt.charCodeAt(p++);
		if(c == 37) {
			out += fmt.substring(start,p - 1);
			var i = index++;
			var arg = args[i];
			if(spacing[i]) {
				out += "${" + synext_GmlExtTemplateStrings.pre(arg) + "}";
			} else if(arg == "\"%\"") {
				out += "%";
			} else if(synext_GmlExtTemplateStrings.rxWord.test(arg)) {
				out += "$" + arg;
			} else {
				out += "${" + synext_GmlExtTemplateStrings.pre(arg) + "}";
			}
			start = p;
		} else if(c == 96) {
			out += fmt.substring(start,p - 1) + "\\`";
			start = p;
		} else if(esc && c == 92 && fmt.charCodeAt(p) == 34) {
			out += fmt.substring(start,p - 1) + "\"";
			++p;
			start = p;
		}
	}
	if(p > start) {
		out += fmt.substring(start,p);
	}
	return out;
};
synext_GmlExtTemplateStrings.pre = function(code) {
	if(!gml_GmlAPI.forceTemplateStrings) {
		return code;
	}
	var tpls = gml_Project.current.properties.templateStringScript;
	if(tpls == null || tpls == "") {
		return code;
	}
	var version = gml_GmlAPI.version;
	var esc = version.hasStringEscapeCharacters();
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var startInner = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(startInner == 0 || q.source.charCodeAt(startInner - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:
			q.skipStringAuto(c,version);
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				while(q.source.substring(startInner,q.pos) == tpls) {
					q.skipSpaces1_local();
					if(q.source.charCodeAt(q.pos) == 40) {
						q.pos += 1;
					} else {
						break;
					}
					q.skipSpaces1_local();
					if(q.source.charCodeAt(q.pos) == 64) {
						q.pos += 1;
					}
					if(q.source.charCodeAt(q.pos) == 34) {
						q.pos += 1;
					} else {
						break;
					}
					var fmt;
					var fmtStart = q.pos;
					q.skipStringAuto(34,version);
					fmt = q.source.substring(fmtStart,q.pos - 1);
					if(esc) {
						fmt = StringTools.replace(fmt,"\\\"","\"");
					} else {
						while(q.pos < q.length) {
							if(q.source.charCodeAt(q.pos) != 43) {
								break;
							}
							if(q.source.substr(q.pos,"+'\"'+\"".length) != "+'\"'+\"") {
								break;
							}
							q.pos += "+'\"'+\"".length;
							fmtStart = q.pos;
							q.skipString1(34);
							fmt += "\"" + q.source.substring(fmtStart,q.pos - 1);
						}
					}
					q.skipSpaces1_local();
					var args = [];
					var spacing = [];
					if(q.source.charCodeAt(q.pos) == 44) {
						q.pos += 1;
						var hasSpace = q.source.charCodeAt(q.pos) == 32;
						if(hasSpace) {
							q.pos += 1;
						}
						var argStart = q.pos;
						var depth = 0;
						_hx_loop4: while(q.get_loop()) {
							c = q.source.charCodeAt(q.pos++);
							switch(c) {
							case 44:
								if(depth == 0) {
									args.push(q.source.substring(argStart,q.pos - 1));
									spacing.push(hasSpace);
									hasSpace = q.source.charCodeAt(q.pos) == 32;
									if(hasSpace) {
										q.pos += 1;
									}
									argStart = q.pos;
								}
								break;
							case 47:
								switch(q.source.charCodeAt(q.pos)) {
								case 42:
									q.pos += 1;
									q.skipComment();
									break;
								case 47:
									q.skipLine();
									break;
								default:
								}
								break;
							case 34:case 39:case 64:
								q.skipStringAuto(c,version);
								break;
							case 40:case 91:case 123:
								++depth;
								break;
							case 41:case 93:case 125:
								if(--depth < 0) {
									args.push(q.source.substring(argStart,q.pos - 1));
									spacing.push(hasSpace);
									break _hx_loop4;
								}
								break;
							}
						}
					} else if(q.source.charCodeAt(q.pos) == 41) {
						q.pos += 1;
					} else {
						break;
					}
					out += q.source.substring(start,startInner);
					out += "`" + synext_GmlExtTemplateStrings.pre_format(fmt,args,spacing,esc) + "`";
					start = q.pos;
					break;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtTemplateStrings.post = function(code) {
	if(!gml_GmlAPI.forceTemplateStrings) {
		return code;
	}
	var tpls = gml_Project.current.properties.templateStringScript;
	if(tpls == null || tpls == "") {
		return code;
	}
	var version = gml_GmlAPI.version;
	var esc = version.hasStringEscapeCharacters();
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:
			q.skipStringAuto(c,version);
			break;
		case 96:
			out += q.source.substring(start,p);
			var curFmt = "";
			var curArgs = "";
			var curStart = q.pos;
			var curEnd = -1;
			while(q.pos < q.length) {
				c = q.source.charCodeAt(q.pos++);
				if(c == 92) {
					switch(q.source.charCodeAt(q.pos)) {
					case 96:
						curFmt += q.source.substring(curStart,q.pos - 1) + "`";
						q.pos += 1;
						curStart = q.pos;
						break;
					case 117:
						if(esc) {
							q.pos += 5;
						}
						break;
					case 120:
						if(esc) {
							q.pos += 3;
						}
						break;
					default:
						if(esc) {
							q.pos += 1;
						}
					}
					continue;
				}
				if(c == 34) {
					if(esc) {
						curFmt += q.source.substring(curStart,q.pos - 1) + "\\\"";
					} else {
						curFmt += q.source.substring(curStart,q.pos - 1) + "\"+'\"'+\"";
					}
					curStart = q.pos;
				}
				if(c == 96) {
					curEnd = q.pos - 1;
					break;
				}
				if(c == 37) {
					curFmt += q.source.substring(curStart,q.pos - 1) + "%";
					curArgs += ",\"%\"";
					curStart = q.pos;
					continue;
				}
				if(c != 36) {
					continue;
				}
				var c1 = q.source.charCodeAt(q.pos);
				if(c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90) {
					curFmt += q.source.substring(curStart,q.pos - 1) + "%";
					var idStart = q.pos;
					q.skipIdent1();
					curArgs += "," + q.source.substring(idStart,q.pos);
					curStart = q.pos;
					continue;
				}
				if(c1 != 123) {
					continue;
				}
				curFmt += q.source.substring(curStart,q.pos - 1) + "%";
				var argStart = q.pos += 1;
				var argEnd = -1;
				var argDepth = 0;
				_hx_loop3: while(q.pos < q.length) {
					c = q.source.charCodeAt(q.pos++);
					switch(c) {
					case 36:
						if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
							q.pos += 1;
							q.skipStringTemplate(version,true);
						}
						break;
					case 47:
						switch(q.source.charCodeAt(q.pos)) {
						case 42:
							q.pos += 1;
							q.skipComment();
							break;
						case 47:
							q.skipLine();
							break;
						default:
						}
						break;
					case 34:case 39:case 64:case 96:
						q.skipStringAuto(c,version);
						break;
					case 123:
						++argDepth;
						break;
					case 125:
						if(--argDepth < 0) {
							argEnd = q.pos - 1;
							break _hx_loop3;
						}
						break;
					}
				}
				if(argEnd < 0) {
					argEnd = q.pos;
				}
				curArgs += ", " + synext_GmlExtTemplateStrings.post(q.source.substring(argStart,argEnd));
				curStart = q.pos;
			}
			if(curEnd < 0) {
				curEnd = q.pos;
			}
			curFmt += q.source.substring(curStart,curEnd);
			out += tpls + "(\"" + curFmt + "\"" + curArgs + ")";
			start = q.pos;
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlExtTemplateStrings.__super__ = synext_SyntaxExtension;
synext_GmlExtTemplateStrings.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		return editor.kind.canTemplateString;
	}
	,preproc: function(editor,code) {
		code = synext_GmlExtTemplateStrings.pre(code);
		if(code == null) {
			this.message = synext_GmlExtTemplateStrings.errorText;
		}
		return code;
	}
	,postproc: function(editor,code) {
		code = synext_GmlExtTemplateStrings.post(code);
		if(code == null) {
			this.message = synext_GmlExtTemplateStrings.errorText;
		}
		return code;
	}
	,__class__: synext_GmlExtTemplateStrings
});
var synext_GmlNullCoalescingAssignment = function() {
	synext_SyntaxExtension.call(this,"??=","null-coalescing assignment");
};
$hxClasses["synext.GmlNullCoalescingAssignment"] = synext_GmlNullCoalescingAssignment;
synext_GmlNullCoalescingAssignment.__name__ = "synext.GmlNullCoalescingAssignment";
synext_GmlNullCoalescingAssignment.pre = function(code) {
	if(!ui_Preferences.current.nullCoalescingAssignment || gml_Project.current.isGM2022) {
		return code;
	}
	var q = new parsers_GmlReader(code);
	var version = gml_GmlAPI.version;
	var out = "";
	var start = 0;
	var rx = synext_GmlNullCoalescingAssignment.rxPre;
	var stringsFrom = [];
	var stringsTill = [];
	var flush = function(till) {
		var pos = start;
		var till1 = till;
		if(till == null) {
			till1 = -1;
		}
		if(pos == null) {
			pos = 0;
		}
		if(till1 < 0) {
			till1 = code.length;
		}
		rx.lastIndex = pos;
		var mt = rx.exec(code);
		while(mt != null && mt.index < till1) {
			var sp = mt[1];
			var ex = mt[2];
			if(!(mt[3] != sp || mt[4] != sp || mt[5] != sp || mt[7] != sp || mt[6] != ex || tools_GmlCodeTools.skipDotExprBackwards(ex,ex.length) != 0)) {
				var ind = mt.index;
				var i = stringsFrom.length;
				while(--i >= 0) if(ind >= stringsFrom[i] && ind < stringsTill[i]) {
					break;
				}
				if(i < 0) {
					out += code.substring(start,ind) + ("" + ex + sp + "??=");
					start = ind + mt[0].length;
				}
			}
			mt = rx.exec(code);
		}
		out += code.substring(start,till);
		stringsFrom.length = 0;
		stringsTill.length = 0;
	};
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				flush(p);
				q.pos += 1;
				q.skipComment();
				out += code.substring(p,q.pos);
				start = q.pos;
				break;
			case 47:
				flush(p);
				q.skipLine();
				out += code.substring(p,q.pos);
				start = q.pos;
				break;
			default:
			}
			break;
		case 34:case 39:case 64:
			q.skipStringAuto(c,version);
			if(q.pos > p + 1) {
				stringsFrom.push(p);
				stringsTill.push(q.pos);
			}
			break;
		default:
		}
	}
	flush(q.length);
	return out;
};
synext_GmlNullCoalescingAssignment.post = function(code) {
	if(!ui_Preferences.current.nullCoalescingAssignment || gml_Project.current.isGM2022) {
		return code;
	}
	var q = new parsers_GmlReader(code);
	var version = gml_GmlAPI.version;
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 63:
			if(q.source.charCodeAt(q.pos) == 63 && q.source.charCodeAt(q.pos + 1) == 61) {
				var exEnd = p;
				while(exEnd >= 0) {
					c = q.source.charCodeAt(exEnd - 1);
					if(c == 32 || c == 9) {
						--exEnd;
					} else {
						break;
					}
				}
				var exStart = tools_GmlCodeTools.skipDotExprBackwards(code,exEnd);
				var ex = code.substring(exStart,exEnd);
				var sp = code.substring(exEnd,p);
				out += code.substring(start,exStart) + ("if" + sp + "(" + ex + sp + "==" + sp + "undefined)" + sp + ex + sp + "=");
				start = q.pos + 2;
			}
			break;
		case 34:case 39:case 64:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
synext_GmlNullCoalescingAssignment.__super__ = synext_SyntaxExtension;
synext_GmlNullCoalescingAssignment.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		if(((editor.kind) instanceof file_kind_KGml)) {
			return editor.kind.canNullCoalescingAssignment;
		} else {
			return false;
		}
	}
	,preproc: function(editor,code) {
		code = synext_GmlNullCoalescingAssignment.pre(code);
		if(code == null) {
			this.message = synext_GmlNullCoalescingAssignment.errorText;
		}
		return code;
	}
	,postproc: function(editor,code) {
		code = synext_GmlNullCoalescingAssignment.post(code);
		if(code == null) {
			this.message = synext_GmlNullCoalescingAssignment.errorText;
		}
		return code;
	}
	,__class__: synext_GmlNullCoalescingAssignment
});
var synext_GmlNullCoalescingOperator = function() {
	synext_SyntaxExtension.call(this,"??","null-coalescing operators");
};
$hxClasses["synext.GmlNullCoalescingOperator"] = synext_GmlNullCoalescingOperator;
synext_GmlNullCoalescingOperator.__name__ = "synext.GmlNullCoalescingOperator";
synext_GmlNullCoalescingOperator.pre = function(code) {
	var q = new parsers_GmlReader(code);
	var version = gml_GmlAPI.version;
	var out = "";
	var start = 0;
	var ncSet = gml_Project.current.properties.nullConditionalSet;
	var ncVal = gml_Project.current.properties.nullConditionalVal;
	if(ncSet == null || ncVal == null) {
		return code;
	}
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:
			q.skipStringAuto(c,version);
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				if(q.source.substring(p,q.pos) != ncSet) {
					continue;
				}
				if(q.source.charCodeAt(q.pos++) != 40) {
					continue;
				}
				var exprStart = q.pos;
				if(!q.skipBalancedParenExpr()) {
					continue;
				}
				var expr = q.source.substring(exprStart,q.pos - 1);
				var spStart = q.pos;
				q.skipSpaces0();
				var spaceStr = q.source.substring(spStart,q.pos);
				if(q.source.charCodeAt(q.pos++) != 63) {
					continue;
				}
				var skipValSpace_start = q.pos;
				q.skipSpaces0();
				if(q.source.substring(skipValSpace_start,q.pos) != spaceStr) {
					continue;
				}
				if(q.readIdent() != ncVal) {
					continue;
				}
				var c1 = q.source.charCodeAt(q.pos);
				if(c1 == 46 || c1 == 91) {
					var fdStart = q.pos += 1;
					if(c1 == 91) {
						if(!q.skipBalancedParenExpr()) {
							continue;
						}
					} else {
						q.skipSpaces0();
						if(q.readIdent() == null) {
							continue;
						}
					}
					var fdSuffix = q.source.substring(fdStart,q.pos);
					skipValSpace_start = q.pos;
					q.skipSpaces0();
					if(q.source.substring(skipValSpace_start,q.pos) != spaceStr) {
						continue;
					}
					if(q.source.charCodeAt(q.pos++) != 58) {
						continue;
					}
					skipValSpace_start = q.pos;
					q.skipSpaces0();
					if(q.source.substring(skipValSpace_start,q.pos) != spaceStr) {
						continue;
					}
					if(q.readIdent() != "undefined") {
						continue;
					}
					if(q.source.charCodeAt(q.pos++) != 41) {
						continue;
					}
					if(q.source.charCodeAt(p - 1) != 40) {
						continue;
					}
					out += code.substring(start,p - 1);
					out += synext_GmlNullCoalescingOperator.pre(expr) + spaceStr + (c1 == 91 ? "?[" : "?.") + fdSuffix;
				} else {
					skipValSpace_start = q.pos;
					q.skipSpaces0();
					if(q.source.substring(skipValSpace_start,q.pos) != spaceStr) {
						continue;
					}
					if(q.source.charCodeAt(q.pos++) != 58) {
						continue;
					}
					out += code.substring(start,p);
					out += synext_GmlNullCoalescingOperator.pre(expr) + spaceStr + "??";
				}
				start = q.pos;
			}
		}
	}
	out += code.substring(start,q.length);
	return out;
};
synext_GmlNullCoalescingOperator.post = function(code) {
	var ncSet = gml_Project.current.properties.nullConditionalSet;
	var ncVal = gml_Project.current.properties.nullConditionalVal;
	if(ncSet == null || ncVal == null) {
		return code;
	}
	var q = new parsers_GmlReader(code);
	var version = gml_GmlAPI.version;
	var segments = [];
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 63:
			var c1 = q.source.charCodeAt(q.pos);
			if(c1 == 63 || c1 == 46 || c1 == 91) {
				q.pos += 1;
				var fdSuffix;
				switch(c1) {
				case 46:
					var fdStart = q.pos;
					q.skipSpaces0();
					var this1 = q.source.charCodeAt(q.pos);
					if(!(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90)) {
						continue;
					}
					q.skipIdent1();
					fdSuffix = q.source.substring(fdStart,q.pos);
					break;
				case 91:
					var parStart = q.pos;
					if(!q.skipBalancedParenExpr()) {
						continue;
					}
					var np = q.pos;
					var isTernary = false;
					while(np < q.length) {
						var nc = q.source.charCodeAt(np++);
						if(nc > 8 && nc < 14 || nc == 32) {
							continue;
						}
						isTernary = nc == 58;
						break;
					}
					if(isTernary) {
						continue;
					}
					fdSuffix = q.source.substring(parStart,q.pos);
					break;
				default:
					fdSuffix = null;
				}
				var exprEnd = p;
				while(exprEnd > 0) {
					c = q.source.charCodeAt(exprEnd - 1);
					if(c == 32 || c == 9) {
						--exprEnd;
					} else {
						break;
					}
				}
				var exprStart = tools_GmlCodeTools.skipDotExprBackwards(code,exprEnd);
				segments.push({ full : code.substring(exprStart,q.pos), start : exprStart, end : q.pos, expr : code.substring(exprStart,exprEnd), space : code.substring(exprEnd,p), fdSuffix : fdSuffix, kind : c1, recurse : false});
			}
			break;
		case 34:case 39:case 64:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	var out = "";
	var start = 0;
	var i = segments.length;
	while(--i >= 0) {
		var seg = segments[i];
		while(i > 0) {
			var s1 = segments[i - 1];
			if(s1.start >= seg.start && s1.end <= seg.end) {
				seg.recurse = true;
				segments.splice(i - 1,1);
				--i;
			} else {
				break;
			}
		}
	}
	var _g = 0;
	while(_g < segments.length) {
		var seg = segments[_g];
		++_g;
		out += code.substring(start,seg.start);
		var sp = seg.space;
		var expr = seg.expr;
		if(seg.recurse) {
			expr = synext_GmlNullCoalescingOperator.post(expr);
		}
		switch(seg.kind) {
		case 46:
			out += "(" + ncSet + "(" + expr + ")" + sp + "?" + sp + ncVal + "." + seg.fdSuffix + sp + ":" + sp + "undefined" + ")";
			break;
		case 91:
			out += "(nc_set(" + expr + ")" + sp + "?" + sp + ncVal + "[" + seg.fdSuffix + sp + ":" + sp + "undefined" + ")";
			break;
		default:
			out += "" + ncSet + "(" + expr + ")" + sp + "?" + sp + ncVal + sp + ":";
		}
		start = seg.end;
	}
	out += code.substring(start,q.length);
	return out;
};
synext_GmlNullCoalescingOperator.__super__ = synext_SyntaxExtension;
synext_GmlNullCoalescingOperator.prototype = $extend(synext_SyntaxExtension.prototype,{
	check: function(editor,code) {
		if(((editor.kind) instanceof file_kind_KGml)) {
			return editor.kind.canNullCoalescingOperator;
		} else {
			return false;
		}
	}
	,preproc: function(editor,code) {
		code = synext_GmlNullCoalescingOperator.pre(code);
		if(code == null) {
			this.message = synext_GmlNullCoalescingOperator.errorText;
		}
		return code;
	}
	,postproc: function(editor,code) {
		code = synext_GmlNullCoalescingOperator.post(code);
		if(code == null) {
			this.message = synext_GmlNullCoalescingOperator.errorText;
		}
		return code;
	}
	,__class__: synext_GmlNullCoalescingOperator
});
var tools_ArrayMapSync = function() {
	this.changeID = 0;
	tools_ArrayMap.call(this);
	this.changeID = ++tools_ArrayMapSync.__changeID;
};
$hxClasses["tools.ArrayMapSync"] = tools_ArrayMapSync;
tools_ArrayMapSync.__name__ = "tools.ArrayMapSync";
tools_ArrayMapSync.__super__ = tools_ArrayMap;
tools_ArrayMapSync.prototype = $extend(tools_ArrayMap.prototype,{
	incChangeID: function() {
		this.changeID = ++tools_ArrayMapSync.__changeID;
	}
	,clear: function() {
		tools_ArrayMap.prototype.clear.call(this);
		this.changeID = ++tools_ArrayMapSync.__changeID;
	}
	,set: function(key,val) {
		if(Object.prototype.hasOwnProperty.call(this.map,key)) {
			HxOverrides.remove(this.array,this.map[key]);
		}
		this.map[key] = val;
		this.array.push(val);
		this.changeID = ++tools_ArrayMapSync.__changeID;
	}
	,remove: function(key) {
		var tmp;
		if(Object.prototype.hasOwnProperty.call(this.map,key)) {
			HxOverrides.remove(this.array,this.map[key]);
			delete this.map[key];
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.changeID = ++tools_ArrayMapSync.__changeID;
			return true;
		} else {
			return false;
		}
	}
	,__class__: tools_ArrayMapSync
});
var tools_BufferTools = function() { };
$hxClasses["tools.BufferTools"] = tools_BufferTools;
tools_BufferTools.__name__ = "tools.BufferTools";
tools_BufferTools.toBase64 = function(bytes,offset,length) {
	var pos = 0;
	var raw = "";
	while(pos < length) {
		var end = pos + 32768;
		if(end > length) {
			end = length;
		}
		raw += Std.string(String.fromCharCode.apply(null, haxe_io_UInt8Array.fromBytes(bytes,offset + pos,end - pos)));
		pos = end;
	}
	return window.btoa(raw);
};
tools_BufferTools.toObjectURL = function(bytes,path,type) {
	try {
		var blob = new Blob([bytes.b.bufferValue],{ type : type});
		var nav = $global.navigator;
		if(nav.msSaveBlob != null) {
			nav.msSaveBlob(blob,path);
			return null;
		}
		return URL.createObjectURL(blob);
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.error("Failed to make blob",_g1);
		return "data:" + type + ";base64," + tools_BufferTools.toBase64(bytes,0,bytes.length);
	}
};
tools_BufferTools.inflate = function(bytes) {
	if(bytes.length > 0) {
		var data = bytes.b.bufferValue;
		data = window.pako.inflateRaw(data);
		return haxe_io_Bytes.ofData(data);
	} else {
		return new haxe_io_Bytes(new ArrayBuffer(0));
	}
};
tools_BufferTools.saveAs = function(bytes,path,mimetype) {
	var url = tools_BufferTools.toObjectURL(bytes,path,mimetype);
	if(url == null) {
		return false;
	}
	var link = document.createElement("a");
	link.href = url;
	link.download = path;
	document.body.appendChild(link);
	link.click();
	window.setTimeout(function() {
		link.parentElement.removeChild(link);
		try {
			URL.revokeObjectURL(url);
		} catch( _g ) {
		}
	});
	return true;
};
var tools_ChainCall = function() {
	this.isRunning = false;
	this.queue = [];
};
$hxClasses["tools.ChainCall"] = tools_ChainCall;
tools_ChainCall.__name__ = "tools.ChainCall";
tools_ChainCall.prototype = {
	next: function() {
		var item = this.queue.shift();
		if(item != null) {
			this.isRunning = true;
			item.fn.apply(null,item.args);
		} else {
			this.isRunning = false;
		}
	}
	,call: function(fn,a,cb) {
		var _gthis = this;
		var q = { fn : fn, args : [a,function(val) {
			cb(val);
			_gthis.next();
		}]};
		this.queue.push(q);
		if(!this.isRunning) {
			this.next();
		}
		return this;
	}
	,finish: function(cb) {
		this.call(function(_,fn) {
			fn(null);
		},null,function(_) {
			cb();
		});
	}
	,__class__: tools_ChainCall
};
var tools_CharCode = {};
tools_CharCode.isSpace1_ni = function(this1) {
	if(!(this1 > 8 && this1 < 14)) {
		return this1 == 32;
	} else {
		return true;
	}
};
tools_CharCode.isIdent0_ni = function(this1) {
	if(!(this1 == 95 || this1 >= 97 && this1 <= 122)) {
		if(this1 >= 65) {
			return this1 <= 90;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
tools_CharCode.isIdent1_ni = function(this1) {
	if(!(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90)) {
		if(this1 >= 48) {
			return this1 <= 57;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
tools_CharCode.isHex = function(this1) {
	if(!(this1 >= 48 && this1 <= 57 || this1 >= 97 && this1 <= 102)) {
		if(this1 >= 65) {
			return this1 <= 70;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var tools_ERegTools = function() { };
$hxClasses["tools.ERegTools"] = tools_ERegTools;
tools_ERegTools.__name__ = "tools.ERegTools";
tools_ERegTools.each = function(r,s,f) {
	var i = 0;
	while(r.matchSub(s,i)) {
		f(r);
		var p = r.matchedPos();
		i = p.pos + p.len;
	}
};
var tools_EventHandler = function() {
	this.listeners = [];
};
$hxClasses["tools.EventHandler"] = tools_EventHandler;
tools_EventHandler.__name__ = "tools.EventHandler";
tools_EventHandler.prototype = {
	add: function(listener) {
		this.listeners.push(listener);
	}
	,remove: function(listener) {
		HxOverrides.remove(this.listeners,listener);
	}
	,invoke: function(parameter) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) _g1[_g++](parameter);
	}
	,__class__: tools_EventHandler
};
var tools_GmlCodeTools = function() { };
$hxClasses["tools.GmlCodeTools"] = tools_GmlCodeTools;
tools_GmlCodeTools.__name__ = "tools.GmlCodeTools";
tools_GmlCodeTools.mapKws = function(kws) {
	var result = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < kws.length) result.h[kws[_g++]] = true;
	return result;
};
tools_GmlCodeTools.skipDotExprBackwards = function(src,pos) {
	var depth = 0;
	var len = src.length;
	while(--pos >= 0) {
		var till = pos + 1;
		var c = src.charCodeAt(pos);
		switch(c) {
		case 34:
			while(--pos >= 0) {
				c = src.charCodeAt(pos);
				if(c == 34) {
					if(src.charCodeAt(pos - 1) != 92) {
						break;
					}
				}
			}
			if(depth == 0) {
				return pos;
			}
			break;
		case 40:
			if(--depth <= 0) {
				var np = pos;
				while(--np >= 0) {
					c = src.charCodeAt(np);
					if(!(c == 32 || c == 9)) {
						break;
					}
				}
			}
			break;
		case 91:
			--depth;
			if(pos > 0 && src.charCodeAt(pos - 1) == 63) {
				--pos;
			}
			break;
		case 123:
			if(--depth <= 0) {
				return pos;
			}
			break;
		case 41:case 93:case 125:
			++depth;
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
				while(pos > 0) {
					c = src.charCodeAt(pos - 1);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						--pos;
					} else {
						break;
					}
				}
				var np1 = pos;
				while(--np1 >= 0) {
					c = src.charCodeAt(np1);
					if(!(c == 32 || c == 9)) {
						break;
					}
				}
				if(src.charCodeAt(np1) == 46) {
					if(src.charCodeAt(np1 - 1) == 63) {
						--np1;
					}
					pos = np1;
				} else if(depth == 0) {
					return pos;
				}
			} else if(!(c > 8 && c < 14 || c == 32)) {
				if(depth == 0) {
					while(till < len) {
						c = src.charCodeAt(till);
						if(c == 32 || c == 9) {
							++till;
						} else {
							break;
						}
					}
					return till;
				}
			}
		}
	}
	return 0;
};
tools_GmlCodeTools.isDotAccessBacktrack = function(src,pos) {
	while(--pos >= 0) {
		var c = src.charCodeAt(pos);
		if(c == 46) {
			return true;
		} else if(!(c > 8 && c < 14 || c == 32)) {
			return false;
		}
	}
	return false;
};
tools_GmlCodeTools.isStatementBacktrack = function(src,pos,isInline) {
	while(--pos >= 0) {
		var c = src.charCodeAt(pos);
		switch(c) {
		case 34:case 39:
			return true;
		case 40:
			while(--pos >= 0) {
				c = src.charCodeAt(pos);
				if(c == 32 || c == 9) {
					continue;
				}
				if(pos >= 3 && c == 114 && src.charCodeAt(pos - 1) == 111 && src.charCodeAt(pos - 2) == 102) {
					if(pos != 3) {
						return !tools_CharCode.isIdent1_ni(src.charCodeAt(pos - 3));
					} else {
						return true;
					}
				} else {
					return false;
				}
			}
			return true;
		case 44:
			return false;
		case 43:case 45:
			if(src.charCodeAt(--pos) != c) {
				return false;
			}
			break;
		case 47:
			if(src.charCodeAt(--pos) == 42) {
				--pos;
				while(--pos >= 0) if(src.charCodeAt(pos) == 42 && src.charCodeAt(pos - 1) == 47) {
					--pos;
				}
			} else {
				return false;
			}
			break;
		case 37:case 38:case 42:case 60:case 61:case 62:case 94:case 124:
			return false;
		case 91:
			return false;
		case 41:case 93:case 123:case 125:
			return true;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
				var till = pos + 1;
				while(pos > 0) {
					var this1 = src.charCodeAt(pos - 1);
					if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90 || this1 >= 48 && this1 <= 57) {
						--pos;
					} else {
						break;
					}
				}
				var id = src.substring(pos,till);
				switch(id) {
				case "case":case "if":case "repeat":case "return":case "switch":case "until":case "while":
					return false;
				default:
					return !tools_GmlCodeTools.operatorKeywords.h[id];
				}
			}
		}
	}
	return !isInline;
};
tools_GmlCodeTools.isWrite = function(code,p0,p1) {
	var isStat = true;
	_hx_loop1: while(--p0 >= 0) switch(code.charCodeAt(p0)) {
	case 9:case 10:case 13:case 32:
		break;
	case 43:
		if(code.charCodeAt(--p0) == 43) {
			return true;
		} else {
			break _hx_loop1;
		}
		break;
	case 45:
		if(code.charCodeAt(--p0) == 45) {
			return true;
		} else {
			break _hx_loop1;
		}
		break;
	case 91:
		return false;
	default:
		isStat = tools_GmlCodeTools.isStatementBacktrack(code,p0 + 1,false);
		break _hx_loop1;
	}
	while(p1 < code.length) switch(code.charCodeAt(p1++)) {
	case 9:case 10:case 13:case 32:
		break;
	case 37:case 38:case 42:case 47:case 94:case 124:
		return code.charCodeAt(p1) == 61;
	case 43:
		switch(code.charCodeAt(p1)) {
		case 43:case 61:
			return true;
		default:
			return false;
		}
		break;
	case 45:
		switch(code.charCodeAt(p1)) {
		case 45:case 61:
			return true;
		default:
			return false;
		}
		break;
	case 61:
		if(code.charCodeAt(p1) != 61) {
			return isStat;
		} else {
			return false;
		}
		break;
	default:
		return false;
	}
	return false;
};
tools_GmlCodeTools.getReferenceKind = function(code,p0,p1,q) {
	var c;
	var version = q != null ? q.version : gml_Project.current.version;
	_hx_loop1: while(p0 > 0) {
		c = code.charCodeAt(p0 - 1);
		switch(c) {
		case 46:
			p0 = tools_GmlCodeTools.skipDotExprBackwards(code,p0 - 1);
			break _hx_loop1;
		case 111:
			if(p0 >= 6 && code.charCodeAt(p0 - 6) == 35 && code.substring(p0 - 6,p0) == "#macro") {
				return "d";
			} else if(c > 8 && c < 14 || c == 32) {
				--p0;
			} else {
				break _hx_loop1;
			}
			break;
		case 114:
			if(p0 >= 3 && code.charCodeAt(p0 - 2) == 97 && code.charCodeAt(p0 - 3) == 118) {
				if(p0 == 3) {
					return "d";
				}
				c = code.charCodeAt(p0 - 4);
				if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
					return "d";
				}
				if(c == 108 && p0 >= 9 && code.substring(p0 - 9,p0 - 3) == "global") {
					if(p0 == 9) {
						return "d";
					}
					c = code.charCodeAt(p0 - 10);
					if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
						return "d";
					}
				}
				break _hx_loop1;
			} else if(c > 8 && c < 14 || c == 32) {
				--p0;
			} else {
				break _hx_loop1;
			}
			break;
		default:
			if(c > 8 && c < 14 || c == 32) {
				--p0;
			} else {
				break _hx_loop1;
			}
		}
	}
	while(p1 < code.length) {
		c = code.charCodeAt(p1);
		if(c > 8 && c < 14 || c == 32) {
			++p1;
		} else {
			break;
		}
	}
	switch(code.charCodeAt(p1)) {
	case 40:
		return "c";
	case 91:
		if(q == null) {
			q = new parsers_GmlReader(code,version);
		}
		q.pos = p1;
		var depth = 0;
		_hx_loop3: while(q.pos < q.length) {
			c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 36:
				if(q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings()) {
					q.pos += 1;
					q.skipStringTemplate(version,true);
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,version);
				break;
			case 91:
				++depth;
				break;
			case 93:
				if(--depth <= 0) {
					break _hx_loop3;
				}
				break;
			default:
			}
		}
		if(tools_GmlCodeTools.isWrite(code,p0,q.pos)) {
			return "aw";
		} else {
			return "ar";
		}
		break;
	default:
		if(tools_GmlCodeTools.isWrite(code,p0,p1)) {
			return "w";
		} else {
			return "r";
		}
	}
};
var tools_GmlReferenceKind = {};
tools_GmlReferenceKind.toFullString = function(this1) {
	switch(this1) {
	case "ar":
		return "array-read";
	case "aw":
		return "array-write";
	case "c":
		return "call";
	case "d":
		return "declaration";
	case "r":
		return "read";
	case "w":
		return "write";
	default:
		return "???" + this1;
	}
};
var tools_HighlightTools = function() { };
$hxClasses["tools.HighlightTools"] = tools_HighlightTools;
tools_HighlightTools.__name__ = "tools.HighlightTools";
tools_HighlightTools.rule = function(tk,rx,next) {
	return { token : tk, regex : rx, next : next};
};
tools_HighlightTools.rtk = function(type,value) {
	return { type : type, value : value};
};
tools_HighlightTools.rdef = function(tk) {
	return { defaultToken : tk};
};
tools_HighlightTools.rpush = function(tk,rx,push) {
	return { token : tk, regex : rx, push : push};
};
tools_HighlightTools.rmatch = function(mt,rx,next) {
	return { onMatch : mt, regex : rx, next : next};
};
tools_HighlightTools.rulePairs = function(pairs_rx_tk,next) {
	var rs = "";
	var i = 0;
	var tokens = [];
	while(i < pairs_rx_tk.length) {
		rs += "(" + pairs_rx_tk[i] + ")";
		tokens.push(pairs_rx_tk[i + 1]);
		i += 2;
	}
	return { token : tokens, regex : rs, next : next};
};
tools_HighlightTools.rpushPairs = function(pairs_rx_tk,push) {
	var rs = "";
	var i = 0;
	var tokens = [];
	while(i < pairs_rx_tk.length) {
		rs += "(" + pairs_rx_tk[i] + ")";
		tokens.push(pairs_rx_tk[i + 1]);
		i += 2;
	}
	return { token : tokens, regex : rs, push : push};
};
var tools_HtmlTools = function() { };
$hxClasses["tools.HtmlTools"] = tools_HtmlTools;
tools_HtmlTools.__name__ = "tools.HtmlTools";
tools_HtmlTools.clearInner = function(el) {
	el.innerHTML = "";
};
tools_HtmlTools.setInnerText = function(el,text) {
	el.innerHTML = "";
	el.appendChild(document.createTextNode(text));
};
tools_HtmlTools.setAttributeFlag = function(el,attr,val) {
	if(val) {
		if(!el.hasAttribute(attr)) {
			el.setAttribute(attr,"");
		}
	} else if(el.hasAttribute(attr)) {
		el.removeAttribute(attr);
	}
};
tools_HtmlTools.setTokenFlag = function(tl,name,val) {
	if(tl.contains(name) != val) {
		tl.toggle(name);
	}
};
tools_HtmlTools.setDisplayFlag = function(el,visible) {
	el.style.display = visible ? "" : "none";
};
tools_HtmlTools.insertAfterEl = function(ctr,insertWhat,afterWhat) {
	var next = afterWhat.nextElementSibling;
	ctr.insertBefore(insertWhat,next);
};
tools_HtmlTools.insertBeforeSelf = function(el,insertWhat) {
	el.parentElement.insertBefore(insertWhat,el);
};
tools_HtmlTools.insertAfterSelf = function(el,insertWhat) {
	tools_HtmlTools.insertAfterEl(el.parentElement,insertWhat,el);
};
tools_HtmlTools.colIndexOf = function(col,item,start) {
	if(start == null) {
		start = 0;
	}
	var len = col.length;
	var i = start;
	if(start < 0) {
		i = start + len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(col[i] == item) {
			return i;
		}
		++i;
	}
	return -1;
};
tools_HtmlTools.scrollIntoViewIfNeeded = function(el) {
	if(el.scrollIntoViewIfNeeded) {
		el.scrollIntoViewIfNeeded();
	} else {
		el.scrollIntoView();
	}
};
tools_HtmlTools.setSelectedValue = function(element,selectedValue) {
	var value = element.querySelector("option[value=\"" + selectedValue + "\"]");
	if(value != null) {
		value.selected = true;
	}
};
tools_HtmlTools.prettifyInputRange = function(element) {
	var event = function() {
		var min = parseFloat(element.min);
		var max = parseFloat(element.max);
		var value = parseFloat(element.value);
		var percentage = (value - min) / (max - min) * 100;
		return element.style.background = "linear-gradient(to right, var(--color-primary) 0%, var(--color-primary) " + percentage + "%, rgba(128, 128, 128, 0.5) " + percentage + "%, rgba(128, 128, 128, 0.5) 100%)";
	};
	element.addEventListener("input",event);
	event();
};
tools_HtmlTools.moveOffScreen = function(element) {
	element.style.position = "absolute";
	element.style.top = "-99999px";
};
var tools_JsTools = function() { };
$hxClasses["tools.JsTools"] = tools_JsTools;
tools_JsTools.__name__ = "tools.JsTools";
tools_JsTools.setImmediate = function(fn) {
	var $l=arguments.length;
	var rest = new Array($l>1?$l-1:0);
	for(var $i=1;$i<$l;++$i){rest[$i-1]=arguments[$i];}
	var args = rest.slice();
	var dynWindow = window;
	if(dynWindow.setImmediate) {
		args.unshift(fn);
		dynWindow.setImmediate.apply(dynWindow,args);
	} else {
		args.unshift(0);
		args.unshift(fn);
		($_=window,$bind($_,$_.setTimeout)).apply(dynWindow,args);
	}
};
var tools_NativeArray = function() { };
$hxClasses["tools.NativeArray"] = tools_NativeArray;
tools_NativeArray.__name__ = "tools.NativeArray";
tools_NativeArray.create = function(size) {
	return new Array(size);
};
tools_NativeArray.from = function(content) {
	return Array.from(content);
};
tools_NativeArray.nzcct = function(a,b,copy) {
	if(a != null) {
		if(b != null) {
			return a.concat(b);
		} else if(copy) {
			return a.slice();
		} else {
			return a;
		}
	} else if(b != null) {
		if(copy) {
			return b.slice();
		} else {
			return b;
		}
	} else {
		return null;
	}
};
tools_NativeArray.clear = function(arr) {
	arr.length = 0;
};
tools_NativeArray.clearResize = function(arr,newSize) {
	arr.length = 0;
	arr.length = newSize;
};
tools_NativeArray.resize = function(arr,newSize) {
	arr.length = newSize;
};
tools_NativeArray.setTo = function(arr,to) {
	var n = to.length;
	arr.length = n;
	var i = 0;
	while(i < n) {
		arr[i] = to[i];
		++i;
	}
};
tools_NativeArray.forEach = function(arr,fn) {
	arr.forEach(fn);
};
tools_NativeArray.defaultSort = function(arr) {
	arr.sort();
};
tools_NativeArray.insertAfter = function(arr,insertWhat,afterWhat) {
	var i = arr.indexOf(afterWhat);
	if(i >= 0) {
		arr.splice(i + 1,0,insertWhat);
	} else {
		arr.push(insertWhat);
	}
};
tools_NativeArray.insertBefore = function(arr,insertWhat,beforeWhat) {
	var i = arr.indexOf(beforeWhat);
	if(i >= 0) {
		arr.splice(i,0,insertWhat);
	} else {
		arr.unshift(insertWhat);
	}
};
tools_NativeArray.insertAtRandom = function(arr,item) {
	var at = Std.random(arr.length + 1);
	arr.splice(at,0,item);
	return at;
};
tools_NativeArray.replaceOne = function(arr,replaceWhat,withWhat) {
	var i = arr.indexOf(replaceWhat);
	if(i >= 0) {
		arr[i] = withWhat;
		return true;
	} else {
		return false;
	}
};
tools_NativeArray.findFirst = function(arr,fn) {
	var result = null;
	var _g = 0;
	while(_g < arr.length) {
		var v = arr[_g];
		++_g;
		if(fn(v)) {
			result = v;
			break;
		}
	}
	return result;
};
tools_NativeArray.removeFirst = function(arr,fn) {
	var result = null;
	var _g_current = 0;
	while(_g_current < arr.length) {
		var _g_value = arr[_g_current];
		var _g_key = _g_current++;
		if(fn(_g_value)) {
			arr.splice(_g_key,1);
			result = _g_value;
			break;
		}
	}
	return result;
};
var tools_NativeObject = function() { };
$hxClasses["tools.NativeObject"] = tools_NativeObject;
tools_NativeObject.__name__ = "tools.NativeObject";
tools_NativeObject.hasFields = function(q) {
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	for (fd in q) {
	if(has.call(q,fd)) {
		return true;
	}
	}
	return false;
};
tools_NativeObject.countFields = function(q) {
	var fd = null;
	var has = Object.prototype.hasOwnProperty;
	var found = 0;
	for (fd in q) if (has.call(q,fd)) found += 1;
	return found;
};
var tools_NativeString = function() { };
$hxClasses["tools.NativeString"] = tools_NativeString;
tools_NativeString.__name__ = "tools.NativeString";
tools_NativeString.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
tools_NativeString.codePointAt = function(s,index) {
	return s.codePointAt(index);
};
tools_NativeString.fromCodePoint = function(index) {
	return String.fromCodePoint(index);
};
tools_NativeString.replaceExt = function(s,what,by) {
	return s.replace(what,by);
};
tools_NativeString.splitRx = function(s,at) {
	return s.split(at);
};
tools_NativeString.matchRx = function(s,rx) {
	return s.match(rx);
};
tools_NativeString.splitNonEmpty = function(s,del) {
	if(s != null && s.trim() != "") {
		return s.split(del);
	} else {
		return [];
	}
};
tools_NativeString.capitalize = function(s) {
	return s.charAt(0).toUpperCase() + s.substr(1);
};
tools_NativeString.decapitalize = function(s) {
	return s.charAt(0).toLowerCase() + s.substr(1);
};
tools_NativeString.fastSub = function(s,start,len) {
	return s.substr(start,len);
};
tools_NativeString.fastSubStart = function(s,start) {
	return s.substr(start);
};
tools_NativeString.repeat = function(s,count) {
	return s.repeat(count);
};
tools_NativeString.trimRight = function(s) {
	return s.trimRight();
};
tools_NativeString.trimTrailRn = function(str,count) {
	if(count == null) {
		count = 1;
	}
	while(--count >= 0) str = str.replace(tools_NativeString.trimTrailBreak_1,"$1");
	return str;
};
tools_NativeString.trimLeft = function(s) {
	return s.trimLeft();
};
tools_NativeString.trimBoth = function(s) {
	return s.trim();
};
tools_NativeString.startsWith = function(s,q) {
	return s.startsWith(q);
};
tools_NativeString.endsWith = function(s,q) {
	return s.endsWith(q);
};
tools_NativeString.trimIfEndsWith = function(s,end) {
	if(s.endsWith(end)) {
		return s.substring(0,s.length - end.length);
	} else {
		return s;
	}
};
tools_NativeString.contains = function(s,q) {
	return s.includes(q);
};
tools_NativeString.escapeRx = function(s) {
	return s.replace(tools_NativeString.escapeRx_1,"\\$1");
};
tools_NativeString.escapeProp = function(s) {
	return s.replace(tools_NativeString.escapeProp_1,"\\$1");
};
tools_NativeString.getWholeWordRegex = function(s,flags) {
	var r;
	if(/^\b/.test(s)) {
		r = "\\b" + s.replace(tools_NativeString.escapeRx_1,"\\$1");
	} else {
		r = s.replace(tools_NativeString.escapeRx_1,"\\$1");
	}
	if(/\b$/.test(s)) {
		r += "\\b";
	}
	return new RegExp(r,flags);
};
tools_NativeString.insert = function(s,i,sub) {
	return s.substring(0,i) + sub + s.substring(i);
};
tools_NativeString.getPadLeft = function(s) {
	return s.substring(0,s.length - s.trimLeft().length);
};
tools_NativeString.getPadRight = function(s) {
	return s.substring(s.trimRight().length);
};
tools_NativeString.insertAtPadLeft = function(s,what) {
	var s1 = s.trimLeft();
	return s.substring(0,s.length - s1.length) + what + s1;
};
tools_NativeString.insertAtPadRight = function(s,what) {
	var s1 = s.trimRight();
	return s1 + what + s.substring(s1.length);
};
tools_NativeString.insertAtPadBoth = function(s,atStart,atEnd) {
	var s1 = s.trimLeft();
	var p1 = s.substring(0,s.length - s1.length);
	var s2 = s1.trimRight();
	return p1 + atStart + s2 + atEnd + s1.substring(s2.length);
};
tools_NativeString.nzcct = function(s,sep,add) {
	if(s == null || s == "") {
		return add;
	}
	if(add == null || add == "") {
		return s;
	}
	return s + sep + add;
};
tools_NativeString.yyJson = function(value) {
	return yy_YyJson.stringify(value);
};
tools_NativeString.offsetToPos = function(s,ofs) {
	var rowStart = s.lastIndexOf("\n",ofs);
	var col = ofs - rowStart;
	var row = 0;
	while(rowStart >= 0) {
		++row;
		rowStart = rowStart > 0 ? s.lastIndexOf("\n",rowStart - 1) : -1;
	}
	return { column : col, row : row};
};
var tools_PathTools = function() { };
$hxClasses["tools.PathTools"] = tools_PathTools;
tools_PathTools.__name__ = "tools.PathTools";
tools_PathTools.ptDepth = function(path) {
	return StringTools.replace(haxe_io_Path.directory(path),"\\","/").split("/").length;
};
tools_PathTools.ptDetectProject = function(path) {
	var nd = haxe_io_Path.withoutDirectory(path);
	var _g = 0;
	var _g1 = gml_GmlVersion.list;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		var rx = v.config.projectRegexCached;
		if(rx == null) {
			continue;
		}
		var mt = rx.exec(nd);
		if(mt != null) {
			var s = mt[1];
			if(s == null) {
				s = haxe_io_Path.withoutDirectory(haxe_io_Path.directory(path));
			}
			return { version : v, name : s};
		}
	}
	return { version : gml_GmlVersion.none, name : nd};
};
var tools_StartupTests = function() { };
$hxClasses["tools.StartupTests"] = tools_StartupTests;
tools_StartupTests.__name__ = "tools.StartupTests";
tools_StartupTests.assert = function(value,want,desc) {
	if(value != want) {
		electron_Dialog.showError("Assertion failed for " + desc + "!" + ("\nwanted: " + Std.string(want)) + ("\ngot: " + Std.string(value)));
	}
};
tools_StartupTests.main = function() {
	var d = Object.create(null);
	d["a"] = 1;
	d["b"] = 1;
	tools_StartupTests.assert(tools_NativeObject.countFields(d),2,"Dictionary.size");
};
var tools_StringBuilder = function() {
	this.addFormat = null;
	StringBuf.call(this);
	this.addFormat = Reflect.makeVarArgs($bind(this,this.addFormatImpl));
};
$hxClasses["tools.StringBuilder"] = tools_StringBuilder;
tools_StringBuilder.__name__ = "tools.StringBuilder";
tools_StringBuilder.formatInit = function() {
	var _g = new haxe_ds_StringMap();
	_g.h["%s"] = function(b,s,i) {
		if(typeof(s) == "string") {
			b.b += Std.string(s);
		} else {
			throw haxe_Exception.thrown("Expected a string for arg#" + i);
		}
	};
	_g.h["%d"] = function(b,v,i) {
		if(typeof(v) == "number" && ((v | 0) === v)) {
			b.b += Std.string(v);
		} else {
			throw haxe_Exception.thrown("Expected an int for arg#" + i);
		}
	};
	_g.h["%c"] = function(b,v,i) {
		if(typeof(v) == "number" && ((v | 0) === v)) {
			b.b += Std.string(v);
		} else {
			throw haxe_Exception.thrown("Expected a char for arg#" + i);
		}
	};
	_g.h["%t"] = function(b,v,i) {
		if(typeof(v) == "number" && ((v | 0) === v)) {
			var _g = 0;
			var _g1 = v;
			while(_g < _g1) {
				_g++;
				b.b += String.fromCodePoint(9);
			}
		} else {
			throw haxe_Exception.thrown("Expected a tab count for arg#" + i);
		}
	};
	return _g;
};
tools_StringBuilder.__super__ = StringBuf;
tools_StringBuilder.prototype = $extend(StringBuf.prototype,{
	addFormatImpl: function(args) {
		var fmt = args[0];
		var data = tools_StringBuilder.formatCache.h[fmt];
		var i;
		var n;
		if(data == null) {
			data = [];
			var start = 0;
			i = 0;
			n = fmt.length;
			while(i < n) if(fmt.charCodeAt(i) == 37) {
				if(i > start) {
					data.push(fmt.substring(start,i));
				}
				data.push(HxOverrides.substr(fmt,i,2));
				i += 2;
				start = i;
			} else {
				++i;
			}
			if(i > start) {
				data.push(fmt.substring(start,i));
			}
			tools_StringBuilder.formatCache.h[fmt] = data;
		}
		i = -1;
		n = data.length;
		var argi = 0;
		while(++i < n) {
			var arg = data[i];
			if(arg.charCodeAt(0) == 37) {
				var fn = tools_StringBuilder.formatMap.h[arg];
				if(fn != null) {
					++argi;
					fn(this,args[argi],argi);
				} else {
					throw haxe_Exception.thrown("" + arg + " is not a known format.");
				}
			} else {
				this.b += arg == null ? "null" : "" + arg;
			}
		}
		return null;
	}
	,__class__: tools_StringBuilder
});
var ui_ChromeTabMenu = function() { };
$hxClasses["ui.ChromeTabMenu"] = ui_ChromeTabMenu;
ui_ChromeTabMenu.__name__ = "ui.ChromeTabMenu";
ui_ChromeTabMenu.show = function(el,ev) {
	ui_ChromeTabMenu.target = el;
	var file = el.gmlFile;
	var hasFile = file.path != null;
	var tabPrefs = ui_Preferences.current.chromeTabs;
	var pinned = el.classList.contains("chrome-tab-pinned");
	var pinLayers = tabPrefs.pinLayers;
	ui_ChromeTabMenu.pinItem.visible = !pinned && !pinLayers;
	ui_ChromeTabMenu.pinAsItem.visible = pinLayers;
	if(pinLayers) {
		var pinLayer = ui_ChromeTabTools.getPinLayer(el);
		var _this = ui_ChromeTabMenu.pinAsMenuItems;
		var _g_current = 0;
		while(_g_current < _this.length) {
			var _g_value = _this[_g_current];
			var _g_key = _g_current++;
			if(_g_value == null) {
				continue;
			}
			_g_value.checked = pinLayer == _g_key;
		}
	}
	ui_ChromeTabMenu.unpinItem.visible = pinned;
	ui_ChromeTabMenu.closeIdleItem.visible = tabPrefs.idleTime > 0;
	ui_ChromeTabMenu.showInDirectoryItem.enabled = hasFile;
	ui_ChromeTabMenu.openExternally.enabled = hasFile;
	var tmp = new EReg("^\\w+$","g").match(file.name) && Object.prototype.hasOwnProperty.call(gml_GmlAPI.gmlKind,file.name);
	ui_ChromeTabMenu.showInTreeItem.enabled = tmp;
	ui_ChromeTabMenu.showObjectInfo.visible = hasFile && (((file.kind) instanceof file_kind_gmx_KGmxEvents) || ((file.kind) instanceof file_kind_yy_KYyEvents));
	var bk = gml_file_GmlFileBackup.updateMenu(file);
	if(bk != null) {
		ui_ChromeTabMenu.backupsItem.enabled = bk;
		ui_ChromeTabMenu.backupsItem.visible = true;
	} else {
		ui_ChromeTabMenu.backupsItem.visible = false;
	}
	plugins_PluginAPI._signal("tabMenu",{ target : el, event : ev});
	electron_MenuFallback.contextEvent = ev;
	ui_ChromeTabMenu.menu.popup({ async : true, callback : null});
};
ui_ChromeTabMenu.init = function() {
	ui_ChromeTabMenu.menu = new Electron_Menu();
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ id : "close", label : "Close", accelerator : "CommandOrControl+W", click : function() {
		ui_ChromeTabMenu.target.querySelector(".chrome-tab-close").click();
	}}));
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ id : "close-others", label : "Close Others", accelerator : "CommandOrControl+Shift+W", click : function() {
		var _g = 0;
		var _g1 = ui_ChromeTabMenu.target.parentElement.querySelectorAll(".chrome-tab");
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			if(tab.classList.contains("chrome-tab-pinned")) {
				continue;
			}
			if(tab != ui_ChromeTabMenu.target) {
				tab.querySelector(".chrome-tab-close").click();
			}
		}
	}}));
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ id : "close-all", label : "Close All", click : function() {
		var _g = 0;
		var _g1 = ui_ChromeTabMenu.target.parentElement.querySelectorAll(".chrome-tab");
		while(_g < _g1.length) _g1[_g++].querySelector(".chrome-tab-close").click();
	}}));
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ id : "close-sep", type : "separator"}));
	ui_ChromeTabMenu.menu.append(ui_ChromeTabMenu.openExternally = new Electron_MenuItem({ id : "open-externally", label : "Open externally", click : function() {
		electron_FileWrap.openExternal(ui_ChromeTabMenu.target.gmlFile.path);
	}}));
	if(Electron_API == null) {
		ui_ChromeTabMenu.openExternally.visible = false;
	}
	ui_ChromeTabMenu.menu.append(ui_ChromeTabMenu.showInDirectoryItem = new Electron_MenuItem({ id : "show-in-directory", label : "Show in directory", icon : Main.modulePath + ("/icons/silk/" + "show_in_directory" + ".png"), click : function() {
		electron_FileWrap.showItemInFolder(ui_ChromeTabMenu.target.gmlFile.path);
	}}));
	if(Electron_API == null) {
		ui_ChromeTabMenu.showInDirectoryItem.visible = false;
	}
	ui_ChromeTabMenu.menu.append(ui_ChromeTabMenu.showInTreeItem = new Electron_MenuItem({ id : "show-in-tree", label : "Show in tree", icon : Main.modulePath + ("/icons/silk/" + "application_side_tree_show" + ".png"), click : function() {
		var item = ui_treeview_TreeView.find(true,{ path : ui_ChromeTabMenu.target.gmlFile.path});
		if(item != null) {
			ui_treeview_TreeView.showElement(item,true);
		}
	}}));
	ui_ChromeTabMenu.menu.append(ui_ChromeTabMenu.findReferences = new Electron_MenuItem({ id : "find-references", label : "Find references", icon : Main.modulePath + ("/icons/silk/" + "find_references" + ".png"), click : function() {
		ui_GlobalSearch.findReferences(ui_ChromeTabMenu.target.gmlFile.name);
	}}));
	ui_ChromeTabMenu.menu.append(ui_ChromeTabMenu.showObjectInfo = new Electron_MenuItem({ id : "object-information", label : "Object information", icon : Main.modulePath + ("/icons/silk/" + "information" + ".png"), click : function() {
		var file = ui_ChromeTabMenu.target.gmlFile;
		gml_GmlObjectInfo.showFor(file.path,file.name);
	}}));
	electron_MenuFallback.appendSep(ui_ChromeTabMenu.menu,"pin-sep");
	ui_ChromeTabMenu.pinAsMenu = new Electron_Menu();
	var _g = [];
	_g.push(null);
	_g.push(null);
	_g.push(null);
	_g.push(null);
	_g.push(null);
	_g.push(null);
	_g.push(null);
	_g.push(null);
	_g.push(null);
	_g.push(null);
	ui_ChromeTabMenu.pinAsMenuItems = _g;
	var _g = -9;
	while(_g < 1) {
		var i = [-(_g++)];
		ui_ChromeTabMenu.pinAsMenuItems[i[0]] = electron_MenuFallback.appendOpt(ui_ChromeTabMenu.pinAsMenu,{ id : "pinAs" + i[0], label : i[0] == 0 ? "Unpinned" : "Layer " + i[0], type : "checkbox", click : (function(i) {
			return function() {
				ui_ChromeTabs.impl.setTabPinLayer(ui_ChromeTabMenu.target,i[0],true);
				ui_ChromeTabs.impl.layoutTabs();
			};
		})(i)});
	}
	ui_ChromeTabMenu.pinAsItem = electron_MenuFallback.appendOpt(ui_ChromeTabMenu.menu,{ id : "pinAs", label : "Pin...", icon : Main.modulePath + ("/icons/silk/" + "pin" + ".png"), submenu : ui_ChromeTabMenu.pinAsMenu});
	var opt = { id : "pin", label : "Pin", icon : Main.modulePath + ("/icons/silk/" + "pin" + ".png"), click : function() {
		ui_ChromeTabs.impl.setTabPinLayer(ui_ChromeTabMenu.target,1);
		ui_ChromeTabs.impl.layoutTabs();
	}};
	ui_ChromeTabMenu.pinItem = electron_MenuFallback.appendOpt(ui_ChromeTabMenu.menu,opt);
	var opt = { id : "unpin", label : "Unpin", icon : Main.modulePath + ("/icons/silk/" + "pin" + ".png"), click : function() {
		ui_ChromeTabs.impl.setTabPinLayer(ui_ChromeTabMenu.target,0);
		ui_ChromeTabs.impl.layoutTabs();
	}};
	ui_ChromeTabMenu.unpinItem = electron_MenuFallback.appendOpt(ui_ChromeTabMenu.menu,opt);
	ui_ChromeTabMenu.closeIdleItem = electron_MenuFallback.appendOpt(ui_ChromeTabMenu.menu,{ id : "close-idle", label : "Close idle tabs", click : function() {
		var _g = 0;
		var _g1 = ui_ChromeTabMenu.target.parentElement.querySelectorAll(".chrome-tab." + "chrome-tab-idle");
		while(_g < _g1.length) _g1[_g++].querySelector(".chrome-tab-close").click();
	}});
	electron_MenuFallback.appendSep(ui_ChromeTabMenu.menu,"backups-sep");
	gml_file_GmlFileBackup.init();
	ui_ChromeTabMenu.menu.append(ui_ChromeTabMenu.backupsItem = new Electron_MenuItem({ id : "backups", label : "Previous versions", submenu : gml_file_GmlFileBackup.menu, type : "submenu"}));
	if(Electron_API == null) {
		ui_ChromeTabMenu.backupsItem.visible = false;
	}
};
var ui_ChromeTabs = function() { };
$hxClasses["ui.ChromeTabs"] = ui_ChromeTabs;
ui_ChromeTabs.__name__ = "ui.ChromeTabs";
ui_ChromeTabs.getTabs = function() {
	return ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
};
ui_ChromeTabs.sync = function(gmlFile,isNew) {
	var prev = gml_file_GmlFile.current;
	if(prev != ui_WelcomePage.file) {
		if(prev.tabEl != null) {
			prev.tabEl.gmlATime = Date.now();
		}
		ui_ChromeTabs.pathHistory.unshift(prev.context);
		if(ui_ChromeTabs.pathHistory.length > 32) {
			ui_ChromeTabs.pathHistory.pop();
		}
	}
	gml_file_GmlFile.set_current(gmlFile);
	if(gmlFile.tabEl != null) {
		gmlFile.tabEl.gmlATime = Date.now();
		gmlFile.tabEl.classList.remove("chrome-tab-idle");
	}
	var ctr = Main.aceEditor.container;
	if(gmlFile != ui_WelcomePage.file) {
		ctr.setAttribute("file-name",gmlFile.name);
		ctr.setAttribute("file-path",gmlFile.path);
		ctr.setAttribute("file-kind",gmlFile.kind.getName());
	} else {
		ctr.removeAttribute("file-name");
		ctr.removeAttribute("file-path");
		ctr.removeAttribute("file-kind");
	}
	prev.editor.focusLost(gmlFile.editor);
	gmlFile.focus();
	gmlFile.editor.focusGain(prev.editor);
	if(isNew) {
		if(gmlFile.path != null && gmlFile.codeEditor != null && ((gmlFile.codeEditor.kind) instanceof file_kind_KGml) && gmlFile.codeEditor.kind.canSyntaxCheck) {
			var lp = gml_Project.current.properties.linterPrefs;
			var r = null;
			var _g = 0;
			while(_g < 1) {
				++_g;
				if(lp != null) {
					r = lp.onLoad;
					if(r != null) {
						break;
					}
				}
				r = ui_Preferences.current.linterPrefs.onLoad;
				if(r != null) {
					break;
				}
				r = parsers_linter_GmlLinterPrefs.defValue.onLoad;
			}
			if(r) {
				window.setTimeout(function() {
					if(gml_file_GmlFile.current == gmlFile) {
						parsers_linter_GmlLinter.runFor(gmlFile.codeEditor);
					}
				},0);
			}
		}
		ui_ext_Bookmarks.onFileOpen(gmlFile);
		plugins_PluginAPI._signal("fileOpen",{ file : gmlFile});
	}
	plugins_PluginAPI._signal("activeFileChange",{ file : gmlFile});
};
ui_ChromeTabs.idleTick = function() {
	var idleTime = ui_Preferences.current.chromeTabs.idleTime;
	var _g = 0;
	var _g1 = ui_ChromeTabs.impl.tabEls;
	while(_g < _g1.length) {
		var tab = _g1[_g];
		++_g;
		if(tab.classList.contains("chrome-tab-current")) {
			tab.gmlATime = Date.now();
		} else if(idleTime > 0 && !tab.classList.contains("chrome-tab-idle") && !tab.classList.contains("chrome-tab-pinned")) {
			var t = tab.gmlATime;
			if(t != null && t < Date.now() - idleTime * 1000) {
				tab.classList.add("chrome-tab-idle");
			}
		}
	}
};
ui_ChromeTabs.init = function() {
	ui_ChromeTabs.element = document.querySelector("#tabs");
	if(Electron_API == null || Object.prototype.hasOwnProperty.call(Main.moduleArgs,"electron-window-frame")) {
		ui_ChromeTabs.element.classList.remove("has-system-buttons");
		var _g = 0;
		var _g1 = document.querySelectorAll(".system-button:not(.preferences)");
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			btn.parentElement.removeChild(btn);
		}
	}
	ui_ChromeTabs.impl = new ChromeTabs();
	var srcOpt = ui_Preferences.current.chromeTabs;
	var opt = { tabOverlapDistance : 14};
	Object.assign(opt,srcOpt);
	ui_ChromeTabs.impl.init(ui_ChromeTabs.element,opt);
	tools_HtmlTools.setTokenFlag(ui_ChromeTabs.element.classList,"chrome-tabs-auto-hide-close-buttons",srcOpt.autoHideCloseButtons);
	tools_HtmlTools.setTokenFlag(ui_ChromeTabs.element.classList,"chrome-tabs-lock-pinned",srcOpt.lockPinnedTabs);
	tools_HtmlTools.setTokenFlag(ui_ChromeTabs.element.classList,"chrome-tabs-fit-text",srcOpt.fitText);
	tools_HtmlTools.setTokenFlag(ui_ChromeTabs.element.classList,"chrome-tabs-boxy",srcOpt.boxyTabs);
	ui_ChromeTabMenu.init();
	window.setInterval(ui_ChromeTabs.idleTick,1000);
	var hintEl = document.createElement("div");
	hintEl.classList.add("chrome-tabs-hint");
	tools_HtmlTools.setInnerText(hintEl,"Bock?");
	ui_ChromeTabs.element.parentElement.appendChild(hintEl);
	var hideHint = function(ev) {
		hintEl.style.display = "none";
	};
	ui_ChromeTabs.element.addEventListener("activeTabChange",function(e) {
		var tabEl = e.detail.tabEl;
		var gmlFile = tabEl.gmlFile;
		var makeFile = gmlFile == null;
		if(makeFile) {
			gmlFile = gml_file_GmlFile.next;
			if(gmlFile == null) {
				return;
			}
			gml_file_GmlFile.next = null;
			gmlFile.tabEl = tabEl;
			tabEl.gmlFile = gmlFile;
			tabEl.setAttribute(ui_ChromeTabs.attrContext,gmlFile.context);
			tabEl.addEventListener("contextmenu",function(e) {
				e.preventDefault();
				ui_ChromeTabMenu.show(tabEl,e);
			});
			tabEl.addEventListener("mouseenter",function(e) {
				tools_HtmlTools.setInnerText(hintEl,gmlFile.name);
				hintEl.style.display = "block";
				var pos = ui_ChromeTabs.impl.tabPositions[ui_ChromeTabs.impl.tabEls.indexOf(tabEl)];
				hintEl.style.left = pos.left + tabEl.offsetWidth / 2 + tabEl.parentElement.offsetLeft - hintEl.offsetWidth / 2 + "px";
				hintEl.style.top = 36 + pos.top + "px";
			});
			tabEl.addEventListener("mouseleave",hideHint);
			tabEl.addEventListener("mousedown",hideHint);
		}
		ui_ChromeTabs.sync(gmlFile,makeFile);
		if(((gmlFile.editor) instanceof editors_EditCode)) {
			window.setTimeout(function() {
				Main.aceEditor.focus();
			});
		}
	});
	ui_ChromeTabs.element.addEventListener("tabClose",function(e) {
		var tabEl = e.detail.tabEl;
		if(tabEl.classList.contains("chrome-tab-force-close")) {
			return;
		}
		var gmlFile = tabEl.gmlFile;
		if(gmlFile == null) {
			return;
		}
		if(gmlFile.__changed) {
			if(gmlFile.path != null) {
				var bt;
				if(Electron_API == null) {
					bt = electron_Dialog.showConfirmWarn("Are you sure you want to close " + gmlFile.name + "?" + "\nThere are unsaved changes.") ? 1 : 2;
				} else {
					bt = electron_Dialog.showMessageBox({ buttons : ["Yes","No","Cancel"], message : "Do you want to save the current changes?", title : "Unsaved changes in " + gmlFile.name, cancelId : 2});
				}
				switch(bt) {
				case 0:
					gmlFile.save();
					break;
				case 1:
					break;
				default:
					e.preventDefault();
				}
			} else if(electron_Dialog.showMessageBox({ buttons : ["Yes","No"], message : "Changes cannot be saved (not a file). Stay here?", title : "Unsaved changes in " + gmlFile.name, cancelId : 0}) != 1) {
				e.preventDefault();
			}
		}
	});
	ui_ChromeTabs.element.addEventListener("tabRemove",function(e) {
		var closedTab = e.detail.tabEl;
		var closedFile = closedTab.gmlFile;
		if(closedFile != null) {
			closedFile.close();
			ui_ext_Bookmarks.onFileClose(closedFile);
			plugins_PluginAPI._signal("fileClose",{ file : closedFile, tab : closedTab});
		}
		if(ui_ChromeTabs.impl.tabEls.length == 0) {
			ui_ChromeTabs.sync(ui_WelcomePage.file);
		} else if(closedTab.classList.contains("chrome-tab-current")) {
			var tab = null;
			while(tab == null && ui_ChromeTabs.pathHistory.length > 0) tab = document.querySelector(".chrome-tab[" + ui_ChromeTabs.attrContext + "=\"" + ui_ChromeTabs.pathHistory.shift().replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]");
			if(tab == null) {
				tab = e.detail.prevTab;
			}
			if(tab == null) {
				tab = e.detail.nextTab;
			}
			if(tab == null) {
				ui_ChromeTabs.sync(ui_WelcomePage.file);
			} else {
				ui_ChromeTabs.impl.setCurrentTab(tab);
			}
		}
	});
	if(Electron_API != null) {
		window.addEventListener("beforeunload",function(e) {
			var changedTabs = document.querySelectorAll(".chrome-tab.chrome-tab-changed");
			if(changedTabs.length == 0) {
				var _g = 0;
				var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
				while(_g < _g1.length) {
					var file = _g1[_g++].gmlFile;
					if(file != null) {
						file.close();
					}
				}
				if(gml_Project.current != null) {
					gml_Project.current.close();
				}
				return;
			}
			e.returnValue = false;
			window.setTimeout(function() {
				var _g = 0;
				while(_g < changedTabs.length) changedTabs[_g++].querySelector(".chrome-tab-close").click();
				if(document.querySelectorAll(".chrome-tab.chrome-tab-changed").length == 0) {
					Electron_API.remote.getCurrentWindow().close();
				}
			});
		});
	} else {
		window.addEventListener("beforeunload",function(e) {
			if(gml_Project.current.path != "") {
				e.preventDefault();
				e.returnValue = "";
			}
		});
	}
	if(document.hasFocus()) {
		document.documentElement.setAttribute("hasFocus","");
		electron_WindowsAccentColors.updateFocus(true);
	} else {
		electron_WindowsAccentColors.updateFocus(false);
	}
	window.addEventListener("focus",function(_) {
		document.documentElement.setAttribute("hasFocus","");
		electron_WindowsAccentColors.updateFocus(true);
		if(gml_file_GmlFile.current != null) {
			gml_file_GmlFile.current.checkChanges();
		}
	});
	window.addEventListener("blur",function(_) {
		document.documentElement.removeAttribute("hasFocus");
		electron_WindowsAccentColors.updateFocus(false);
	});
	return ui_ChromeTabs.impl;
};
var ui_ChromeTabTools = function() { };
$hxClasses["ui.ChromeTabTools"] = ui_ChromeTabTools;
ui_ChromeTabTools.__name__ = "ui.ChromeTabTools";
ui_ChromeTabTools.getPinLayer = function(tab) {
	var val = tab.dataset.pinLayer;
	if(val != null) {
		return Std.parseInt(val);
	} else {
		return 0;
	}
};
var ui_ColorPicker = function() { };
$hxClasses["ui.ColorPicker"] = ui_ColorPicker;
ui_ColorPicker.__name__ = "ui.ColorPicker";
ui_ColorPicker.changed = function(e) {
	Main.aceEditor.getSession().selection.selectWord();
	var word = Main.aceEditor.getSelectedText();
	var curr = ui_ColorPicker.rxGml.exec(word);
	if(curr == null) {
		return;
	}
	var hexc = ui_ColorPicker.element.value;
	hexc = hexc.toUpperCase();
	var next = ui_ColorPicker.rxJs.exec(hexc);
	if(next == null) {
		return;
	}
	if(ui_ColorPicker.isBGR) {
		Main.aceEditor.insert(curr[1] + next[3] + next[2] + next[1]);
	} else {
		Main.aceEditor.insert(curr[1] + next[1] + next[2] + next[3]);
	}
};
ui_ColorPicker.open = function(value) {
	var vals = ui_ColorPicker.rxGml.exec(value);
	ui_ColorPicker.isBGR = HxOverrides.cca(value,0) != 35;
	ui_ColorPicker.element.value = "#" + (ui_ColorPicker.isBGR ? vals[4] + vals[3] + vals[2] : vals[2] + vals[3] + vals[4]);
	ui_ColorPicker.element.click();
};
ui_ColorPicker.init = function() {
	ui_ColorPicker.element = document.querySelector("#color-picker");
	ui_ColorPicker.element.addEventListener("change",ui_ColorPicker.changed);
	var hp3 = "([0-9a-fA-F]{2})" + "([0-9a-fA-F]{2})" + "([0-9a-fA-F]{2})";
	ui_ColorPicker.rxGml = new RegExp("^(0x|\\$||#)" + hp3 + "$","");
	ui_ColorPicker.rxJs = new RegExp("^#" + hp3 + "$","");
};
var ui_CommandPalette = $hx_exports["CommandPalette"] = function() { };
$hxClasses["ui.CommandPalette"] = ui_CommandPalette;
ui_CommandPalette.__name__ = "ui.CommandPalette";
ui_CommandPalette.add = function(cmd) {
	var name = cmd.name;
	if(ui_CommandPalette.lookupMap.h[name] == null) {
		ui_CommandPalette.lookupItems.push({ value : name});
	}
	ui_CommandPalette.lookupMap.h[name] = cmd;
};
ui_CommandPalette.remove = function(cmd) {
	var name = cmd.name;
	if(ui_CommandPalette.lookupMap.h[name] != null) {
		tools_NativeArray.removeFirst(ui_CommandPalette.lookupItems,function(c) {
			return c.name == name;
		});
		var _this = ui_CommandPalette.lookupMap;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
		}
	}
};
ui_CommandPalette.init = function() {
	ui_CommandPalette.add({ name : "Preferences", exec : function() {
		ui_Preferences.open();
	}});
	ui_CommandPalette.add({ name : "Project properties", exec : function() {
		ui_project_ProjectProperties.open();
	}});
	ui_CommandPalette.add({ name : "Reload GMEdit", exec : function() {
		document.location.reload();
	}});
	ui_CommandPalette.add({ name : "Edit keybinds", exec : function() {
		editors_EditKeybindings.open();
	}});
	ui_CommandPalette.add({ name : "Fullscreen mode", exec : function() {
		var wnd = Electron_API.remote.getCurrentWindow();
		wnd.setFullScreen(!wnd.fullScreen);
	}});
};
var ui_FileDrag = function() { };
$hxClasses["ui.FileDrag"] = ui_FileDrag;
ui_FileDrag.__name__ = "ui.FileDrag";
ui_FileDrag.handle = function(path,file) {
	var name = haxe_io_Path.withoutDirectory(path);
	switch(haxe_io_Path.withoutDirectory(path)) {
	case "main.cfg":case "main.txt":
		gml_Project.open(path);
		return;
	}
	switch(haxe_io_Path.extension(path).toLowerCase()) {
	case "gm81":case "gmd":case "gmk":
		gmk_GmkSplit.proc(path);
		break;
	case "gml":
		if(gml_GmlAPI.version == gml_GmlVersion.none) {
			gml_GmlAPI.set_version(gml_GmlVersion.v1);
		}
		gml_file_GmlFile.open(haxe_io_Path.withoutExtension(name),path);
		break;
	case "gmx":
		switch(haxe_io_Path.extension(haxe_io_Path.withoutExtension(path))) {
		case "config":case "object":
			gml_file_GmlFile.open(haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(name)),path);
			break;
		case "project":
			gml_Project.open(path);
			break;
		}
		break;
	case "yyp":
		gml_Project.open(path);
		break;
	case "yyz":case "zip":
		if(file != null) {
			var reader = new FileReader();
			reader.onloadend = function(_) {
				var abuf = reader.result;
				var bytes = haxe_io_Bytes.ofData(abuf);
				yy_zip_YyZip.open(path,bytes);
			};
			reader.readAsArrayBuffer(file);
		} else {
			var data = Electron_FS.readFileSync(path);
			var bytes = haxe_io_Bytes.ofData(data);
			yy_zip_YyZip.open(path,bytes);
		}
		break;
	default:
		if(tools_PathTools.ptDetectProject(path).version != gml_GmlVersion.none) {
			gml_Project.open(path);
		} else if(gml_file_GmlFileKindTools.detect(path).kind != file_kind_misc_KExtern.inst) {
			gml_file_GmlFile.open(haxe_io_Path.withoutExtension(name),path);
		} else {
			electron_Dialog.showMessageBox({ type : "error", message : "No idea how to load file type for " + name, buttons : ["OK"]});
		}
	}
};
ui_FileDrag.init = function() {
	var cancelDefault = function(e) {
		e.preventDefault();
		return false;
	};
	document.body.addEventListener("dragover",cancelDefault);
	document.body.addEventListener("dragenter",cancelDefault);
	document.body.addEventListener("drop",function(e) {
		e.preventDefault();
		var file = e.dataTransfer.files[0];
		if(file == null) {
			return;
		}
		ui_FileDrag.handle(file.path || file.name,file);
	});
};
var ui_GlobalLookup = function() { };
$hxClasses["ui.GlobalLookup"] = ui_GlobalLookup;
ui_GlobalLookup.__name__ = "ui.GlobalLookup";
ui_GlobalLookup.syncKindFilterCheckboxes = function() {
	var tf = ui_GlobalLookup.kindFilterCheckboxState;
	var _g = 0;
	var _g1 = ui_GlobalLookup.kindFilterCheckboxes;
	while(_g < _g1.length) {
		var cb = _g1[_g];
		++_g;
		var on = cb.checked;
		var kind = cb.dataset.kind;
		tf[kind] = on;
		var kind2 = cb.dataset.kind2;
		if(kind2 != null) {
			tf[kind2] = on;
		}
	}
};
ui_GlobalLookup.updateImpl = function(force) {
	ui_GlobalLookup.updateTimer = null;
	var filter = ui_GlobalLookup.field.value;
	var i;
	var el;
	if(!force && filter == ui_GlobalLookup.current) {
		return;
	}
	ui_GlobalLookup.current = filter;
	var isCmd = filter.startsWith(">");
	if(isCmd) {
		filter = filter.substring(1);
	}
	var kindFilters = null;
	if(!isCmd) {
		var pos = filter.indexOf(":");
		if(pos >= 0) {
			kindFilters = filter.substring(pos + 1).split("|");
			filter = filter.substring(0,pos);
		} else {
			kindFilters = ui_GlobalLookup.kindFiltersArr;
		}
	}
	ui_GlobalLookup.syncKindFilterCheckboxes();
	if(filter.length >= 2 || isCmd) {
		var selection = ui_GlobalLookup.list.selectedOptions.length > 0 ? ui_GlobalLookup.list.selectedOptions[0].textContent : null;
		var found = 0;
		ui_GlobalLookup.list.selectedIndex = -1;
		var matchMode = ui_Preferences.current.globalLookup.matchMode;
		var getHint = function(name) {
			var ac = gml_GmlAPI.gmlAssetComp[name];
			if(ac != null && ac.meta != null) {
				return ac.meta;
			}
			return ((gml_GmlAPI.gmlKind[name]) || (gml_GmlAPI.extKind[name]));
		};
		if(ui_GlobalLookup.filteredList == null || ui_GlobalLookup.filteredListCmd != isCmd) {
			ui_GlobalLookup.filteredList = new AceFilteredList(isCmd ? ui_CommandPalette.lookupItems : gml_GmlAPI.gmlLookupItems,filter);
			ui_GlobalLookup.filteredList.gmlMatchMode = matchMode;
			ui_GlobalLookup.filteredListCmd = isCmd;
		}
		var addOption_1 = function(ind,name,title,hint) {
			var option = ui_GlobalLookup.list.children[ind];
			if(option == null || option.noCache) {
				var orig = option;
				option = ui_GlobalLookup.pool.pop();
				if(option == null) {
					option = document.createElement("option");
				}
				if(orig != null) {
					ui_GlobalLookup.list.replaceChild(option,orig);
				} else {
					ui_GlobalLookup.list.appendChild(option);
				}
			}
			if(hint != null) {
				option.setAttribute("hint",hint);
			} else {
				option.removeAttribute("hint");
			}
			option.title = title != null ? title : "";
			option.textContent = name;
			return option;
		};
		var addOption = function(name,hint) {
			var title;
			if(isCmd) {
				var cmd = ui_CommandPalette.lookupMap.h[name];
				if(cmd != null) {
					hint = cmd.key;
					title = cmd.title;
				} else {
					hint = null;
					title = null;
				}
			} else {
				if(hint == null) {
					hint = getHint(name);
				}
				if(HxOverrides.cca(hint,0) == 97 && HxOverrides.cca(hint,5) == 46 && hint.startsWith("asset.")) {
					var h1 = ui_GlobalLookup.assetHintMapper[hint];
					if(h1 == null) {
						h1 = hint.substr(6);
						ui_GlobalLookup.assetHintMapper[hint] = h1;
					}
					hint = h1;
				}
				title = null;
			}
			addOption_1(found,name,title,hint);
			if(matchMode != 2 && name == selection) {
				ui_GlobalLookup.list.selectedIndex = found;
			}
			found += 1;
		};
		ui_GlobalLookup.filteredList.shouldSort = true;
		ui_GlobalLookup.filteredList.setFilter(filter);
		var filteredItems = ui_GlobalLookup.filteredList.filtered;
		if(!isCmd) {
			var _g = [];
			var _g1 = 0;
			var _g2 = filteredItems;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if((function(item) {
					var hint = item.meta;
					if(hint == null) {
						return false;
					}
					if(ui_GlobalLookup.kindFilterCheckboxState[hint] == false) {
						return false;
					}
					if(kindFilters == null) {
						return true;
					}
					var _g = 0;
					while(_g < kindFilters.length) if(hint.includes(kindFilters[_g++])) {
						return true;
					}
					return false;
				})(v)) {
					_g.push(v);
				}
			}
			filteredItems = _g;
		}
		var maxCount = ui_Preferences.current.globalLookup.maxCount;
		if(filteredItems.length > maxCount + 1) {
			var show = filteredItems.slice(0,maxCount);
			var hide = filteredItems.slice(maxCount);
			var _g = 0;
			while(_g < show.length) {
				var item = show[_g];
				++_g;
				addOption(item.value,item.meta);
			}
			found += 1;
			var more = addOption_1(found - 1,hide.length + " more items...","",null);
			more.noCache = true;
			more.onclick = function(_) {
				found = maxCount;
				var _g = 0;
				while(_g < hide.length) {
					var item = hide[_g];
					++_g;
					addOption(item.value,item.meta);
				}
			};
		} else {
			var _g = 0;
			var _g1 = filteredItems;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				addOption(item.value,item.meta);
			}
		}
		i = ui_GlobalLookup.list.children.length;
		while(--i >= found) {
			el = ui_GlobalLookup.list.children[i];
			ui_GlobalLookup.list.removeChild(el);
			if(!el.noCache) {
				ui_GlobalLookup.pool.push(el);
			}
		}
		if(ui_GlobalLookup.list.selectedIndex < 0) {
			ui_GlobalLookup.list.selectedIndex = 0;
		}
	} else {
		ui_GlobalLookup.list.selectedIndex = -1;
		i = ui_GlobalLookup.list.children.length;
		while(--i >= 0) {
			el = ui_GlobalLookup.list.children[i];
			ui_GlobalLookup.list.removeChild(el);
			if(!el.noCache) {
				ui_GlobalLookup.pool.push(el);
			}
		}
	}
};
ui_GlobalLookup.toggle = function(initialText) {
	if(ui_GlobalLookup.element.style.display == "none") {
		ui_GlobalLookup.element.style.display = "";
		if(initialText == null) {
			initialText = Main.aceEditor.getSelectedText();
			if(initialText.indexOf("\n") >= 0) {
				initialText = null;
			}
		}
		ui_GlobalLookup.filteredList = null;
		ui_GlobalLookup.filteredListCmd = null;
		if(initialText == null) {
			initialText = "";
		}
		ui_GlobalLookup.field.value = initialText;
		if(initialText.startsWith(">")) {
			ui_GlobalLookup.field.setSelectionRange(1,initialText.length);
		} else {
			ui_GlobalLookup.field.select();
		}
		ui_GlobalLookup.field.focus();
		ui_GlobalLookup.updateImpl();
	} else {
		ui_GlobalLookup.hide();
	}
};
ui_GlobalLookup.hide = function() {
	ui_GlobalLookup.element.style.display = "none";
};
ui_GlobalLookup.openTerm = function(term) {
	if(ui_GlobalLookup.field.value.startsWith(">")) {
		var cmd = ui_CommandPalette.lookupMap.h[term];
		if(cmd == null) {
			return false;
		}
		cmd.exec();
		return true;
	} else {
		return ui_OpenDeclaration.openLocal(term,null);
	}
};
ui_GlobalLookup.onkeydown = function(e) {
	if(ui_GlobalLookup.updateTimer == null) {
		ui_GlobalLookup.updateTimer = window.setTimeout(ui_GlobalLookup.updateImpl,100);
	}
	var kc = e.keyCode;
	var i;
	switch(kc) {
	case 13:
		e.preventDefault();
		var selectedOption = ui_GlobalLookup.list.selectedOptions[0];
		if(selectedOption != null && selectedOption.onclick != null) {
			selectedOption.click();
		} else {
			var term = ui_GlobalLookup.list.value;
			if(term == "") {
				term = ui_GlobalLookup.field.value;
			}
			if(ui_GlobalLookup.openTerm(term)) {
				ui_GlobalLookup.hide();
			}
		}
		break;
	case 27:
		ui_GlobalLookup.hide();
		break;
	case 38:
		e.preventDefault();
		i = (ui_GlobalLookup.list.selectedIndex - 1) % ui_GlobalLookup.list.children.length;
		if(i < 0) {
			i += ui_GlobalLookup.list.children.length;
		}
		ui_GlobalLookup.list.selectedIndex = i;
		break;
	case 40:
		e.preventDefault();
		ui_GlobalLookup.list.selectedIndex = (ui_GlobalLookup.list.selectedIndex + 1) % ui_GlobalLookup.list.children.length;
		break;
	}
};
ui_GlobalLookup.init = function() {
	ui_GlobalLookup.filteredList = new AceFilteredList([]);
	ui_GlobalLookup.element = document.createElement("form");
	ui_GlobalLookup.element.id = "global-lookup";
	ui_GlobalLookup.element.classList.add("popout-window");
	ui_GlobalLookup.element.style.display = "none";
	var cbHTML = "<lbcb checked asset name=\"sprite\">Sprites</lbcb>\r\n<lbcb checked asset name=\"tileset\">Tilesets</lbcb>\r\n<lbcb checked asset name=\"background\">Backgrounds</lbcb>\r\n<lbcb checked asset name=\"sound\">Sounds</lbcb>\r\n<lbcb checked asset name=\"path\">Paths</lbcb>\r\n<lbcb checked asset name=\"script\">Scripts</lbcb>\r\n<lbcb checked asset name=\"shader\">Shaders</lbcb>\r\n<lbcb checked asset name=\"font\">Fonts</lbcb>\r\n<lbcb checked asset name=\"timeline\">Timelines</lbcb>\r\n<lbcb checked asset name=\"object\">Objects</lbcb>\r\n<lbcb checked asset name=\"room\">Rooms</lbcb>\r\n<lbcb checked asset name=\"sequence\">Sequences</lbcb>\r\n<lbcb checked asset name=\"animcurve\">Animation curves</lbcb>\r\n<lbcb checked asset name=\"notes\">Notes</lbcb>\r\n<lbcb checked asset name=\"extension\" data-kind2=\"extfunction\">Extensions</lbcb>\r\n<lbcb name=\"includedFile\">Included files</lbcb>\r\n<hr/>\r\n<lbcb name=\"globalvar\">Global variables</lbcb>\r\n<lbcb name=\"macro\">Macros</lbcb>\r\n<lbcb name=\"enums\">Enums</lbcb>\r\n<lbcb name=\"namespace\">Namespaces</lbcb>";
	cbHTML = new EReg("<lbcb(.*?)>(.+?)</lbcb>","g").map("<lbcb checked asset name=\"sprite\">Sprites</lbcb>\r\n<lbcb checked asset name=\"tileset\">Tilesets</lbcb>\r\n<lbcb checked asset name=\"background\">Backgrounds</lbcb>\r\n<lbcb checked asset name=\"sound\">Sounds</lbcb>\r\n<lbcb checked asset name=\"path\">Paths</lbcb>\r\n<lbcb checked asset name=\"script\">Scripts</lbcb>\r\n<lbcb checked asset name=\"shader\">Shaders</lbcb>\r\n<lbcb checked asset name=\"font\">Fonts</lbcb>\r\n<lbcb checked asset name=\"timeline\">Timelines</lbcb>\r\n<lbcb checked asset name=\"object\">Objects</lbcb>\r\n<lbcb checked asset name=\"room\">Rooms</lbcb>\r\n<lbcb checked asset name=\"sequence\">Sequences</lbcb>\r\n<lbcb checked asset name=\"animcurve\">Animation curves</lbcb>\r\n<lbcb checked asset name=\"notes\">Notes</lbcb>\r\n<lbcb checked asset name=\"extension\" data-kind2=\"extfunction\">Extensions</lbcb>\r\n<lbcb name=\"includedFile\">Included files</lbcb>\r\n<hr/>\r\n<lbcb name=\"globalvar\">Global variables</lbcb>\r\n<lbcb name=\"macro\">Macros</lbcb>\r\n<lbcb name=\"enums\">Enums</lbcb>\r\n<lbcb name=\"namespace\">Namespaces</lbcb>",function(rx) {
		return "<label><input type=\"checkbox\"" + rx.matched(1) + "/>" + rx.matched(2) + "</label>";
	});
	var tmp = document.createElement("div");
	tmp.innerHTML = cbHTML;
	var cbs = tmp.querySelectorAll("input[type=\"checkbox\"]");
	var _g = 0;
	while(_g < cbs.length) {
		var cb = cbs[_g];
		++_g;
		var isAsset = cb.hasAttribute("asset");
		if(isAsset) {
			cb.removeAttribute("asset");
		}
		if(cb.dataset.kind == null) {
			var name = cb.name;
			var kind = name;
			if(isAsset) {
				kind = "asset." + name;
			}
			cb.name = "lookup-" + name;
			cb.dataset.kind = kind;
		}
	}
	ui_GlobalLookup.checkboxHTML = tmp.innerHTML;
	var initHTML = "<div class=\"lookup-main\">\r\n\t<div class=\"lookup-query\">\r\n\t\t<input name=\"name\" type=\"text\"/>\r\n\t\t<label for=\"filter\">\r\n\t\t\t<input name=\"filter\" type=\"checkbox\" title=\"Click to set default filters\"/>\r\n\t\t</label>\r\n\t</div>\r\n\t<select name=\"comp\" size=\"5\"></select>\r\n</div>\r\n<div class=\"lookup-options\">\r\n\t<fieldset>\r\n\t\t<legend>Look for</legend>\r\n\t\t<checkboxHTML/>\r\n\t</fieldset>\r\n</div>";
	initHTML = StringTools.replace("<div class=\"lookup-main\">\r\n\t<div class=\"lookup-query\">\r\n\t\t<input name=\"name\" type=\"text\"/>\r\n\t\t<label for=\"filter\">\r\n\t\t\t<input name=\"filter\" type=\"checkbox\" title=\"Click to set default filters\"/>\r\n\t\t</label>\r\n\t</div>\r\n\t<select name=\"comp\" size=\"5\"></select>\r\n</div>\r\n<div class=\"lookup-options\">\r\n\t<fieldset>\r\n\t\t<legend>Look for</legend>\r\n\t\t<checkboxHTML/>\r\n\t</fieldset>\r\n</div>","<checkboxHTML/>",ui_GlobalLookup.checkboxHTML);
	ui_GlobalLookup.element.innerHTML = initHTML;
	ui_GlobalLookup.element.onkeydown = ui_GlobalLookup.onkeydown;
	ui_GlobalLookup.element.style.width = ui_Preferences.current.globalLookup.initialWidth + "px";
	ui_GlobalLookup.element.style.height = ui_Preferences.current.globalLookup.initialHeight + "px";
	tools_HtmlTools.insertAfterSelf(document.querySelector("#main"),ui_GlobalLookup.element);
	ui_GlobalLookup.kindFilterCheckboxes = ui_GlobalLookup.element.querySelectorAll(".lookup-options input[type=\"checkbox\"]");
	var _g = 0;
	var _g1 = ui_GlobalLookup.kindFilterCheckboxes;
	while(_g < _g1.length) {
		var cb = _g1[_g];
		++_g;
		var opt = ui_Preferences.current.globalLookup.initialFilters[cb.name];
		if(opt != null) {
			cb.checked = opt;
		}
		cb.addEventListener("change",function() {
			ui_GlobalLookup.updateImpl(true);
		});
	}
	ui_GlobalLookup.field = ui_GlobalLookup.element.querySelector("input[name=\"name\"]");
	ui_GlobalLookup.field.placeholder = "Resource `name[:type]` or `>command`";
	ui_GlobalLookup.useFilters = ui_GlobalLookup.element.querySelector("input[name=\"filter\"]");
	ui_GlobalLookup.useFilters.onchange = function() {
		if(ui_GlobalLookup.useFilters.checked) {
			ui_GlobalLookup.element.style.display = "none";
			electron_Dialog.showPrompt("New default filters? e.g. `scr|obj`",ui_GlobalLookup.kindFiltersStr,function(s) {
				ui_GlobalLookup.kindFiltersStr = s;
				ui_GlobalLookup.kindFiltersArr = tools_NativeString.splitNonEmpty(s,"|");
				if(ui_GlobalLookup.kindFiltersArr.length == 0) {
					ui_GlobalLookup.kindFiltersArr = null;
				}
				ui_GlobalLookup.element.style.display = "";
				ui_GlobalLookup.updateImpl(true);
			});
		} else {
			ui_GlobalLookup.kindFiltersArr = null;
			ui_GlobalLookup.updateImpl(true);
		}
	};
	ui_GlobalLookup.list = ui_GlobalLookup.element.querySelector("select");
	ui_GlobalLookup.list.onclick = function(_) {
		window.setTimeout(function() {
			var term = ui_GlobalLookup.list.value;
			if(term != "") {
				ui_GlobalLookup.openTerm(term);
				ui_GlobalLookup.hide();
			}
		});
	};
	ui_GlobalLookup.field.onkeyup = function(_) {
		if(ui_GlobalLookup.updateTimer == null) {
			ui_GlobalLookup.updateTimer = window.setTimeout(ui_GlobalLookup.updateImpl,100);
		}
	};
};
var ui_GlobalSearch = function() { };
$hxClasses["ui.GlobalSearch"] = ui_GlobalSearch;
ui_GlobalSearch.__name__ = "ui.GlobalSearch";
ui_GlobalSearch.offsetToPos = function(code,till,rowStart) {
	return ui_search_GlobalSearchImpl.offsetToPos(code,till,rowStart);
};
ui_GlobalSearch.run = function(opt,finish) {
	ui_search_GlobalSearchImpl.run(opt,finish);
};
ui_GlobalSearch.findReferences = function(id,extra) {
	if(ui_GlobalSearch.element.style.display == "none") {
		ui_GlobalSearch.infoElement.style.display = "";
	}
	var opt = { find : id, wholeWord : true, matchCase : true, checkStrings : /^@?["']/.test(id), checkComments : /(?:\/\/|\/\*)/.test(id), checkHeaders : true, checkScripts : true, checkTimelines : true, checkObjects : true, checkRooms : true, checkMacros : true, checkShaders : false, checkExtensions : true, expandLambdas : true, checkRefKind : true};
	if(extra != null) {
		var obj = extra;
		var q = opt;
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in q) {
		if(has.call(q,fd)) {
			var v = Reflect.field(opt,fd);
			if(v != null && Reflect.field(obj,fd) == null) {
				obj[fd] = v;
			}
		}
		}
	} else {
		extra = opt;
	}
	ui_GlobalSearch.run(extra,function() {
		ui_GlobalSearch.infoElement.style.display = "none";
	});
};
ui_GlobalSearch.isVisible = function() {
	return ui_GlobalSearch.element.style.display != "none";
};
ui_GlobalSearch.toggle = function() {
	if(ui_GlobalSearch.element.style.display == "none") {
		ui_GlobalSearch.element.style.display = "";
		ui_GlobalSearch.infoElement.style.display = "none";
		ui_GlobalSearch.divSearching.style.display = "none";
		var s = Main.aceEditor.getSelectedText();
		if(s != "" && s != null) {
			ui_GlobalSearch.fdFind.value = s;
		}
		ui_GlobalSearch.fdFind.focus();
		ui_GlobalSearch.fdFind.select();
	} else {
		ui_GlobalSearch.element.style.display = "none";
	}
};
ui_GlobalSearch.getOptions = function() {
	var find;
	if(!ui_GlobalSearch.cbRegExp.checked) {
		find = ui_GlobalSearch.fdFind.value;
	} else {
		try {
			var flags = "g";
			if(!ui_GlobalSearch.cbMatchCase.checked) {
				flags = "g" + "i";
			}
			find = new RegExp(ui_GlobalSearch.fdFind.value,flags);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			window.alert("Error compiling the regular expression: " + Std.string(_g1));
			return null;
		}
	}
	return { find : find, findFilter : null, replaceBy : null, previewReplace : false, headerFilter : null, wholeWord : ui_GlobalSearch.cbWholeWord.checked, matchCase : ui_GlobalSearch.cbMatchCase.checked, checkStrings : ui_GlobalSearch.cbCheckStrings.checked, checkObjects : ui_GlobalSearch.cbCheckObjects.checked, checkScripts : ui_GlobalSearch.cbCheckScripts.checked, checkHeaders : ui_GlobalSearch.cbCheckHeaders.checked, checkComments : ui_GlobalSearch.cbCheckComments.checked, checkTimelines : ui_GlobalSearch.cbCheckTimelines.checked, checkRooms : ui_GlobalSearch.cbCheckRooms.checked, checkMacros : ui_GlobalSearch.cbCheckMacros.checked, checkShaders : ui_GlobalSearch.cbCheckShaders.checked, checkExtensions : ui_GlobalSearch.cbCheckExtensions.checked, expandLambdas : ui_GlobalSearch.cbExpandLambdas.checked};
};
ui_GlobalSearch.runAuto = function(opt) {
	ui_GlobalSearch.divSearching.style.display = "";
	ui_GlobalSearch.run(opt,function() {
		ui_GlobalSearch.element.style.display = "none";
		ui_GlobalSearch.infoElement.style.display = "none";
	});
};
ui_GlobalSearch.findAuto = function(opt) {
	if(opt == null) {
		opt = ui_GlobalSearch.getOptions();
		if(ui_GlobalSearch.cbUnique.checked) {
			var found = Object.create(null);
			opt.findFilter = function(mt) {
				var k = ((mt) instanceof Array) ? mt[0] : mt;
				if(found[k]) {
					return false;
				}
				found[k] = true;
				return true;
			};
		}
	}
	if(opt != null) {
		ui_GlobalSearch.runAuto(opt);
	}
};
ui_GlobalSearch.replaceAuto = function(opt) {
	if(opt == null) {
		opt = ui_GlobalSearch.getOptions();
	}
	opt.replaceBy = ui_GlobalSearch.fdReplace.value;
	ui_GlobalSearch.runAuto(opt);
};
ui_GlobalSearch.previewAuto = function(opt) {
	if(opt == null) {
		opt = ui_GlobalSearch.getOptions();
	}
	if(opt == null) {
		return;
	}
	opt.replaceBy = ui_GlobalSearch.fdReplace.value;
	opt.previewReplace = true;
	ui_GlobalSearch.runAuto(opt);
};
ui_GlobalSearch.init = function() {
	ui_GlobalSearch.element = document.querySelector("#global-search");
	ui_GlobalSearch.element.innerHTML = "<div class=\"search-main\">\r\n\t<div>\r\n\t\tFind what:\r\n\t\t<input type=\"text\" name=\"find-text\" />\r\n\t</div>\r\n\t<div>\r\n\t\tReplace with:\r\n\t\t<input type=\"text\" name=\"replace-text\" />\r\n\t</div>\r\n\t<div>\r\n\t\t<input type=\"button\" class=\"highlighted_button\" name=\"find\" value=\"Find All\" />\r\n\t\t<input type=\"button\" class=\"highlighted_button\" name=\"replace\" value=\"Replace All\" title=\"Replace items across the project\" />\r\n\t\t<input type=\"button\" class=\"highlighted_button\" name=\"cancel\" value=\"Cancel\" /><br/>\r\n\t</div>\r\n\t<div>\r\n\t\t<input type=\"button\" class=\"highlighted_button\" name=\"preview\" value=\"Preview 'Replace All'\" title=\"Preview replace operation without modifications\" />\r\n\t</div>\r\n\t<div style=\"display:none\" class=\"searching-text\">\r\n\t\tSearching...\r\n\t</div>\r\n</div>\r\n<div class=\"search-options\">\r\n\t<fieldset>\r\n\t\t<legend>Options</legend>\r\n\t\t<input    id=\"global-search-whole-word\" type=\"checkbox\"\r\n\t\t/><label for=\"global-search-whole-word\">Whole word</label><br/>\r\n\t\t<input    id=\"global-search-match-case\" type=\"checkbox\"\r\n\t\t/><label for=\"global-search-match-case\">Match case</label><br/>\r\n\t\t<input    id=\"global-search-check-comments\" type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-check-comments\">Look in comments</label><br/>\r\n\t\t<input    id=\"global-search-check-strings\" type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-check-strings\">Look in strings</label><br/>\r\n\t\t<input    id=\"global-search-check-headers\" type=\"checkbox\"\r\n\t\t/><label for=\"global-search-check-headers\" title=\"Will show results inside #event/etc. lines\">Look in headers</label><br/>\r\n\t\t<input    id=\"global-search-expand-lambdas\" type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-expand-lambdas\" title=\"If enabled, will show results inside inline functions at place of declaration rather than inside their extension\">Expand #lambdas</label><br/>\r\n\t\t<input    id=\"global-search-regexp\" type=\"checkbox\"\r\n\t\t/><label for=\"global-search-regexp\" title=\"Also lets you use $0,$1,$2,etc. in 'replace by'\">RegExp search</label><br/>\r\n\t\t<input    id=\"global-search-unique\" type=\"checkbox\"\r\n\t\t/><label for=\"global-search-unique\" title=\"When using regexp search, only shows unique matches\">Unique match</label>\r\n\t</fieldset>\r\n</div>\r\n<div class=\"search-options search-options-2\">\r\n\t<fieldset>\r\n\t\t<legend>Look in</legend>\r\n\t\t<input    id=\"global-search-check-scripts\"    type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-check-scripts\">Scripts</label><br/>\r\n\t\t<input    id=\"global-search-check-objects\"    type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-check-objects\">Objects</label><br/>\r\n\t\t<input    id=\"global-search-check-timelines\"  type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-check-timelines\">Timelines</label><br/>\r\n\t\t<input    id=\"global-search-check-macros\"     type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-check-macros\">Macros</label><br/>\r\n\t\t<input    id=\"global-search-check-rooms\" type=\"checkbox\" checked\r\n\t\t/><label for=\"global-search-check-rooms\">Rooms</label><br/>\r\n\t\t<input    id=\"global-search-check-shaders\"    type=\"checkbox\"\r\n\t\t/><label for=\"global-search-check-shaders\">Shaders</label><br/>\r\n\t\t<input    id=\"global-search-check-extensions\" type=\"checkbox\"\r\n\t\t/><label for=\"global-search-check-extensions\">Extensions</label><br/>\r\n\t</fieldset>\r\n</div>";
	ui_GlobalSearch.infoElement = document.querySelector("#global-search-info");
	ui_GlobalSearch.infoElement.innerHTML = "Searching...";
	ui_GlobalSearch.fdFind = ui_GlobalSearch.element.querySelector("input[name=\"find-text\"]");
	ui_GlobalSearch.fdReplace = ui_GlobalSearch.element.querySelector("input[name=\"replace-text\"]");
	ui_GlobalSearch.btFind = ui_GlobalSearch.element.querySelector("input[name=\"find\"]");
	ui_GlobalSearch.btReplace = ui_GlobalSearch.element.querySelector("input[name=\"replace\"]");
	ui_GlobalSearch.btPreview = ui_GlobalSearch.element.querySelector("input[name=\"preview\"]");
	ui_GlobalSearch.btCancel = ui_GlobalSearch.element.querySelector("input[name=\"cancel\"]");
	ui_GlobalSearch.divSearching = ui_GlobalSearch.element.querySelector(".searching-text");
	ui_GlobalSearch.cbWholeWord = ui_GlobalSearch.element.querySelector("#global-search-whole-word");
	ui_GlobalSearch.cbMatchCase = ui_GlobalSearch.element.querySelector("#global-search-match-case");
	ui_GlobalSearch.cbCheckStrings = ui_GlobalSearch.element.querySelector("#global-search-check-strings");
	ui_GlobalSearch.cbCheckObjects = ui_GlobalSearch.element.querySelector("#global-search-check-objects");
	ui_GlobalSearch.cbCheckScripts = ui_GlobalSearch.element.querySelector("#global-search-check-scripts");
	ui_GlobalSearch.cbCheckHeaders = ui_GlobalSearch.element.querySelector("#global-search-check-headers");
	ui_GlobalSearch.cbCheckComments = ui_GlobalSearch.element.querySelector("#global-search-check-comments");
	ui_GlobalSearch.cbCheckTimelines = ui_GlobalSearch.element.querySelector("#global-search-check-timelines");
	ui_GlobalSearch.cbCheckMacros = ui_GlobalSearch.element.querySelector("#global-search-check-macros");
	ui_GlobalSearch.cbCheckShaders = ui_GlobalSearch.element.querySelector("#global-search-check-shaders");
	ui_GlobalSearch.cbCheckExtensions = ui_GlobalSearch.element.querySelector("#global-search-check-extensions");
	ui_GlobalSearch.cbCheckRooms = ui_GlobalSearch.element.querySelector("#global-search-check-rooms");
	ui_GlobalSearch.cbExpandLambdas = ui_GlobalSearch.element.querySelector("#global-search-expand-lambdas");
	ui_GlobalSearch.cbRegExp = ui_GlobalSearch.element.querySelector("#global-search-regexp");
	ui_GlobalSearch.cbUnique = ui_GlobalSearch.element.querySelector("#global-search-unique");
	ui_GlobalSearch.fdFind.onkeydown = function(e) {
		switch(e.keyCode) {
		case 13:
			ui_GlobalSearch.btFind.click();
			break;
		case 27:
			ui_GlobalSearch.btCancel.click();
			break;
		}
	};
	ui_GlobalSearch.fdReplace.onkeydown = function(e) {
		switch(e.keyCode) {
		case 13:
			ui_GlobalSearch.btReplace.click();
			break;
		case 27:
			ui_GlobalSearch.btCancel.click();
			break;
		}
	};
	ui_GlobalSearch.btFind.onclick = function(_) {
		ui_GlobalSearch.findAuto();
	};
	ui_GlobalSearch.btReplace.onclick = function(_) {
		if(!electron_Dialog.showConfirmWarn("Are you sure that you want to globally replace?" + "\nThis cannot be undone!")) {
			return;
		}
		ui_GlobalSearch.replaceAuto();
	};
	ui_GlobalSearch.btPreview.onclick = function(_) {
		ui_GlobalSearch.previewAuto();
	};
	ui_GlobalSearch.btCancel.onclick = function(_) {
		ui_GlobalSearch.element.style.display = "none";
	};
};
var ui_KeyboardShortcuts = function() { };
$hxClasses["ui.KeyboardShortcuts"] = ui_KeyboardShortcuts;
ui_KeyboardShortcuts.__name__ = "ui.KeyboardShortcuts";
ui_KeyboardShortcuts.keyToCommandKey = function(key) {
	if(ui_KeyboardShortcuts.rxMod.test(key)) {
		return { win : key.replace(ui_KeyboardShortcuts.rxMod,"ctrl-"), mac : key.replace(ui_KeyboardShortcuts.rxMod,"cmd-")};
	} else if(ui_KeyboardShortcuts.rxWebMod.test(key)) {
		var isWeb = Electron_API == null;
		return { win : key.replace(ui_KeyboardShortcuts.rxWebMod,isWeb ? "alt-" : "ctrl-"), mac : key.replace(ui_KeyboardShortcuts.rxWebMod,isWeb ? "ctrl-" : "cmd-")};
	} else {
		return key;
	}
};
ui_KeyboardShortcuts.initCommands = function() {
	ui_KeyboardShortcuts.hashHandler = new AceHashHandler();
	var hh = ui_KeyboardShortcuts.hashHandler;
	var lcmd = null;
	var addCommand = function(name,keys,exec) {
		var multikey = ((keys) instanceof Array);
		var cmd = { bindKey : ui_KeyboardShortcuts.keyToCommandKey(multikey ? keys[0] : keys), name : name, exec : exec};
		hh.addCommand(cmd);
		if(multikey) {
			var keys1 = keys;
			var _g = 1;
			var _g1 = keys1.length;
			while(_g < _g1) hh.bindKey(ui_KeyboardShortcuts.keyToCommandKey(keys1[_g++]),name);
		}
		lcmd = cmd;
		return cmd;
	};
	addCommand("previousTab",["mod-shift-tab","mod-pageup"],function() {
		var tab = document.querySelector(".chrome-tab-current");
		if(tab == null) {
			return;
		}
		var next = tab.previousElementSibling;
		if(next == null) {
			next = tab.parentElement.lastElementChild;
		}
		if(next != null) {
			next.click();
		}
	});
	addCommand("nextTab",["mod-tab","mod-pagedown"],function() {
		var tab = document.querySelector(".chrome-tab-current");
		if(tab == null) {
			return;
		}
		var next = tab.nextElementSibling;
		if(next == null) {
			next = tab.parentElement.firstElementChild;
		}
		if(next != null) {
			next.click();
		}
	});
	if(Electron_API != null) {
		addCommand("toggleDevTools","mod-shift-i",function() {
			Electron_BrowserWindow.getFocusedWindow().toggleDevTools();
		});
		lcmd.description = "Only works in standalone version.";
		addCommand("toggleFullscreen","f11",function() {
			var wnd = Electron_API.remote.getCurrentWindow();
			wnd.setFullScreen(!wnd.fullScreen);
		});
	}
	addCommand("reloadProject","modw-r",function() {
		if(gml_Project.current != null) {
			gml_Project.current.reload();
		}
	});
	addCommand("closeTab","modw-w",function() {
		var tab = document.querySelector(".chrome-tab-current");
		if(tab != null) {
			if(ui_Preferences.current.chromeTabs.lockPinnedTabs && tab.classList.contains("chrome-tab-pinned")) {
				return;
			}
			var closeButton = tab.querySelector(".chrome-tab-close");
			if(closeButton != null) {
				closeButton.click();
			}
		} else if(document.querySelectorAll(".chrome-tab").length == 0) {
			gml_Project.open("");
		}
	});
	addCommand("closeOtherTabs","mod-shift-w",function() {
		var _g = 0;
		var _g1 = document.querySelectorAll(".chrome-tab:not(.chrome-tab-current)");
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			if(tab.classList.contains("chrome-tab-pinned")) {
				continue;
			}
			tab.querySelector(".chrome-tab-close").click();
		}
	});
	addCommand("closeIdleTabs","",function() {
		var _g = 0;
		var _g1 = document.querySelectorAll(".chrome-tab." + "chrome-tab-idle");
		while(_g < _g1.length) _g1[_g++].querySelector(".chrome-tab-close").click();
	});
	addCommand("saveTab","mod-s",function() {
		var q = gml_file_GmlFile.current;
		if(q != null) {
			q.save();
		}
	});
	addCommand("saveAll","mod-shift-s",function() {
		var _g = 0;
		var _g1 = ui_ChromeTabs.impl.tabEls;
		while(_g < _g1.length) {
			var file = _g1[_g++].gmlFile;
			if(file != null) {
				file.save();
			}
		}
	});
	addCommand("localSearch","mod-f",function() {
	});
	lcmd.description = "Note: Code Editor has a separate shortcut for this below.";
	addCommand("globalSearch","mod-shift-f",function() {
		ui_GlobalSearch.toggle();
	});
	addCommand("findReferencesToHere","alt-f1",function() {
		var file = gml_file_GmlFile.current;
		if(file == null) {
			return;
		}
		ui_GlobalSearch.findReferences(file.name);
	});
	addCommand("showInResourceTree","alt-g",function() {
		var file = gml_file_GmlFile.current;
		if(file == null) {
			return;
		}
		var item = ui_treeview_TreeView.find(true,{ path : file.path});
		if(item != null) {
			ui_treeview_TreeView.showElement(item,true);
		}
	});
	addCommand("globalLookup","modw-t",function() {
		ui_GlobalLookup.toggle();
	});
	addCommand("commandPalette","modw-shift-t",function() {
		ui_GlobalLookup.toggle(">");
	});
	addCommand("reloadGMEdit","",function() {
		document.location.reload();
	});
	addCommand("switchToTab" + 1,"mod-" + 1,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[0];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToTab" + 2,"mod-" + 2,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[1];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToTab" + 3,"mod-" + 3,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[2];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToTab" + 4,"mod-" + 4,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[3];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToTab" + 5,"mod-" + 5,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[4];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToTab" + 6,"mod-" + 6,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[5];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToTab" + 7,"mod-" + 7,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[6];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToTab" + 8,"mod-" + 8,function() {
		var tabEl = document.querySelectorAll(".chrome-tab")[7];
		if(tabEl != null) {
			tabEl.click();
		}
	});
	addCommand("switchToLastTab","mod-9",function() {
		var tabs = document.querySelectorAll(".chrome-tab");
		var tabEl = tabs[tabs.length - 1];
		if(tabEl != null) {
			tabEl.click();
		}
	});
};
ui_KeyboardShortcuts.handleKey = function(e,hashId,keyCode) {
	var keyString = AceKeys.keyCodeToString(keyCode);
	var result = ui_KeyboardShortcuts.hashHandler.handleKeyboard(ui_KeyboardShortcuts.hashHandlerCtx,hashId,keyString,keyCode);
	if(result == null || result.command == null || result.command == "null") {
		return null;
	}
	var command;
	if(typeof(result.command) == "string") {
		command = ui_KeyboardShortcuts.hashHandler.commands[result.command];
	} else {
		command = result.command;
	}
	if(command == null) {
		return null;
	}
	ui_KeyboardShortcuts.currentEvent = e;
	e.preventDefault();
	command.exec(Main.aceEditor);
	ui_KeyboardShortcuts.currentEvent = null;
	return false;
};
ui_KeyboardShortcuts.normalizeCommandKeys = function(e,keyCode) {
	var hashId = 0 | (e.ctrlKey ? 1 : 0) | (e.altKey ? 2 : 0) | (e.shiftKey ? 4 : 0) | (e.metaKey ? 8 : 0);
	if(!AceUserAgent.isMac) {
		if(e.getModifierState("OS") || e.getModifierState("Win")) {
			hashId |= 8;
		}
		if(ui_KeyboardShortcuts.pressedKeys["altGr"] > 0) {
			if((hashId & 3) != 3) {
				ui_KeyboardShortcuts.pressedKeys["altGr"] = 0;
			} else {
				return false;
			}
		}
		if(keyCode == 17 || keyCode == 18) {
			var location = e.location;
			if(location == null) {
				location = Reflect.field(e,"keyLocation");
			}
			var location1 = location;
			if(keyCode == 17 && location1 == 1) {
				if(ui_KeyboardShortcuts.pressedKeys["" + keyCode] == 1) {
					ui_KeyboardShortcuts.ctrlAltTimestamp = e.timeStamp;
				}
			} else if(keyCode == 18 && hashId == 3 && location1 == 2) {
				var dt = e.timeStamp - ui_KeyboardShortcuts.ctrlAltTimestamp;
				if(dt < 50) {
					ui_KeyboardShortcuts.pressedKeys["altGr"] = 1;
				}
			}
		}
	}
	switch(keyCode) {
	case 16:case 17:case 18:case 224:
		keyCode = -1;
		break;
	}
	if((hashId & 8) != 0 && (keyCode >= 91 && keyCode <= 93)) {
		keyCode = -1;
	}
	if(hashId == 0 && keyCode == 13) {
		var location = e.location;
		if(location == null) {
			location = Reflect.field(e,"keyLocation");
		}
		if(location == 3) {
			ui_KeyboardShortcuts.handleKey(e,hashId,-keyCode);
			if(e.defaultPrevented) {
				return null;
			}
		}
	}
	if(AceUserAgent.isChromeOS && (hashId & 8) != 0) {
		ui_KeyboardShortcuts.handleKey(e,hashId,keyCode);
		if(e.defaultPrevented) {
			return null;
		}
		hashId &= -9;
	}
	if(hashId == 0 && !Object.prototype.hasOwnProperty.call(AceKeys.FUNCTION_KEYS,keyCode) && !Object.prototype.hasOwnProperty.call(AceKeys.PRINTABLE_KEYS,keyCode)) {
		return false;
	}
	return ui_KeyboardShortcuts.handleKey(e,hashId,keyCode);
};
ui_KeyboardShortcuts.initSystemButtons = function(closeButton) {
	if(closeButton == null) {
		return;
	}
	closeButton.addEventListener("click",function(_) {
		var wnd = Electron_API.remote.getCurrentWindow();
		if(wnd != null) {
			wnd.close();
		}
	});
	document.querySelector(".system-button.maximize").addEventListener("click",function(_) {
		var wnd = Electron_API.remote.getCurrentWindow();
		if(wnd != null) {
			if(wnd.fullScreen) {
				wnd.setFullScreen(false);
			} else if(wnd.isMaximized()) {
				wnd.unmaximize();
			} else {
				wnd.maximize();
			}
		}
	});
	document.querySelector(".system-button.minimize").addEventListener("click",function(_) {
		var wnd = Electron_API.remote.getCurrentWindow();
		if(wnd != null) {
			wnd.minimize();
		}
	});
};
ui_KeyboardShortcuts.initGlobal = function() {
	ui_KeyboardShortcuts.hashHandlerCtx = ace_extern_AceHashHandlerKeyContext._new(Main.aceEditor);
	ui_KeyboardShortcuts.initCommands();
	var lastDefaultPrevented = null;
	document.body.addEventListener("keydown",function(e) {
		var kcs = e.keyCode == null ? "null" : "" + e.keyCode;
		ui_KeyboardShortcuts.pressedKeys[kcs] = ((ui_KeyboardShortcuts.pressedKeys[kcs]) || (0)) + 1;
		var result = ui_KeyboardShortcuts.normalizeCommandKeys(e,e.keyCode);
		lastDefaultPrevented = e.defaultPrevented;
		return result;
	});
	document.body.addEventListener("keypress",function(e) {
		if(lastDefaultPrevented && (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey)) {
			e.stopPropagation();
			e.preventDefault();
			lastDefaultPrevented = null;
		}
	});
	document.body.addEventListener("keyup",function(e) {
		ui_KeyboardShortcuts.pressedKeys[e.keyCode == null ? "null" : "" + e.keyCode] = null;
	});
	window.addEventListener("focus",function() {
		ui_KeyboardShortcuts.pressedKeys = Object.create(null);
	});
	editors_EditKeybindings.initGlobal();
	ui_KeyboardShortcuts.initSystemButtons(document.querySelector(".system-button.close"));
};
ui_KeyboardShortcuts.initEditor = function(editor) {
	editor.on("mousedown",function(ev) {
		var dom = ev.domEvent;
		if(dom.button != 1) {
			return;
		}
		var pos = ev.getDocumentPosition();
		var session = editor.getSession();
		var line = session.getLine(pos.row);
		if(line != null && pos.column < line.length && ui_OpenDeclaration.proc(session,pos,session.getTokenAt(pos.row,pos.column))) {
			if(session.selection.isEmpty()) {
				session.selection.moveTo(pos.row,pos.column);
			}
			dom.preventDefault();
		}
	});
	editor.on("mousewheel",function(ev) {
		var dom = ev.domEvent;
		if(ui_Preferences.current.ctrlWheelFontSize) {
			while(!(!dom.ctrlKey && !dom.metaKey)) {
				var delta = dom.deltaY;
				if(delta == 0) {
					break;
				}
				delta = delta < 0 ? 1 : -1;
				editor.setOption("fontSize",editor.getOption("fontSize") + delta);
				break;
			}
		}
	});
	ui_misc_DebugShowToken.initEditor(editor);
};
var ui_MainMenu = function() { };
$hxClasses["ui.MainMenu"] = ui_MainMenu;
ui_MainMenu.__name__ = "ui.MainMenu";
ui_MainMenu.addProjectItems = function(menu) {
	if(Electron_API == null) {
		var form = document.createElement("form");
		tools_HtmlTools.moveOffScreen(form);
		var input = document.createElement("input");
		input.type = "file";
		input.accept = ".zip,.yyz";
		input.onchange = function(_) {
			var file = input.files[0];
			if(file == null) {
				return;
			}
			ui_FileDrag.handle(file.name,file);
		};
		form.appendChild(input);
		document.body.appendChild(form);
		menu.append(new Electron_MenuItem({ label : "Open archive...", id : "open-archive", click : function() {
			form.reset();
			input.click();
		}}));
		if(yy_zip_YyZipDirectoryDialog.isAvailable()) {
			menu.append(new Electron_MenuItem({ label : "Open directory...", id : "open-directory", click : function() {
				yy_zip_YyZipDirectoryDialog.open();
			}}));
		}
	} else {
		menu.append(new Electron_MenuItem({ label : "Open...", id : "open-dialog", icon : Main.modulePath + ("/icons/silk/" + "folder_page" + ".png"), click : function() {
			electron_Dialog.showOpenDialog({ filters : [{ name : "GameMaker files", extensions : ["gmx","yy","yyp","yyz","gml"]},{ name : "Other supported files", extensions : ["js","md","dmd","txt"]},{ name : "All files", extensions : ["*"]}]},function(paths) {
				if(paths != null && paths[0] != null) {
					ui_FileDrag.handle(paths[0],null);
				}
			});
		}}));
	}
	menu.append(new Electron_MenuItem({ id : "reload-project", label : "Reload project", icon : Main.modulePath + ("/icons/silk/" + "arrow_refresh" + ".png"), accelerator : "CommandOrControl+R", click : function() {
		gml_Project.current.reload();
	}}));
	ui_MainMenu.exportItem = new Electron_MenuItem({ id : "export-project", label : "Export project...", icon : Main.modulePath + ("/icons/silk/" + "folder_go" + ".png"), click : function() {
		var pj = gml_Project.current;
		var zip = pj.toZip();
		if(Electron_API == null) {
			var path = pj.displayName;
			var type;
			if(pj.version == gml_GmlVersion.v2) {
				path += ".yyz";
				type = "application/octet-stream";
			} else {
				path += ".zip";
				type = "application/zip";
			}
			tools_BufferTools.saveAs(zip,path,type);
		}
	}});
	menu.append(ui_MainMenu.exportItem);
	menu.append(new Electron_MenuItem({ id : "close-project", label : "Close project", click : function() {
		gml_Project.open("");
		var _g = 0;
		var _g1 = document.querySelectorAll(".chrome-tab .chrome-tab-close");
		while(_g < _g1.length) _g1[_g++].click();
	}}));
	if(Electron_API != null) {
		electron_MenuFallback.appendSep(menu,"sep-show-in-directory");
		menu.append(new Electron_MenuItem({ id : "show-in-directory", label : "Show in directory", icon : Main.modulePath + ("/icons/silk/" + "show_in_directory" + ".png"), click : function() {
			var pj = gml_Project.current;
			Electron_IPC.send("shell-show",((pj) instanceof yy_zip_YyZip) ? pj.yyzPath : pj.path);
		}}));
		menu.append(new Electron_MenuItem({ id : "new-ide", label : "New IDE", icon : Main.modulePath + ("/icons/silk/" + "application_add" + ".png"), click : function() {
			Electron_IPC.send("new-ide");
		}}));
	}
};
ui_MainMenu.init = function() {
	ui_MainMenu.menu = new Electron_Menu();
	ui_MainMenu.addProjectItems(ui_MainMenu.menu);
	electron_MenuFallback.appendSep(ui_MainMenu.menu,"sep-help");
	ui_MainMenu.menu.append(new Electron_MenuItem({ id : "help", label : "Help", icon : Main.modulePath + ("/icons/silk/" + "help" + ".png"), click : function() {
		if(Electron_API != null) {
			Electron_Shell.openExternal("https://github.com/GameMakerDiscord/GMEdit/wiki");
		} else {
			window.open("https://github.com/GameMakerDiscord/GMEdit/wiki","_blank");
		}
	}}));
	ui_MainMenu.menu.append(new Electron_MenuItem({ id : "project-properties", label : "Project properties", icon : Main.modulePath + ("/icons/silk/" + "project_properties" + ".png"), click : function() {
		ui_project_ProjectProperties.open();
	}}));
	ui_MainMenu.menu.append(new Electron_MenuItem({ id : "preferences", label : "Preferences", icon : Main.modulePath + ("/icons/silk/" + "preferences" + ".png"), click : function() {
		ui_Preferences.open();
	}}));
	if(Electron_API != null && window.location.host == "") {
		ui_MainMenu.menu.append(new Electron_MenuItem({ id : "switch-gmlive", label : "Switch to GMLive.js", click : function() {
			window.location.href = StringTools.replace(window.location.href,"index.html","index-live.html");
		}}));
	}
	if(Electron_API != null) {
		ui_MainMenu.menu.append(new Electron_MenuItem({ id : "open-dev-tools", label : "Dev tools", accelerator : "CommandOrControl+Shift+I", click : function() {
			Electron_BrowserWindow.getFocusedWindow().toggleDevTools();
		}}));
	}
	document.querySelector(".system-button.preferences").addEventListener("click",function(e) {
		var pj = gml_Project.current;
		ui_MainMenu.exportItem.enabled = pj.version != gml_GmlVersion.none && ((pj) instanceof yy_zip_YyZip);
		electron_MenuFallback.contextEvent = e;
		ui_MainMenu.menu.popup({ async : true, callback : null});
	});
};
var ui_OpenDeclaration = function() { };
$hxClasses["ui.OpenDeclaration"] = ui_OpenDeclaration;
ui_OpenDeclaration.__name__ = "ui.OpenDeclaration";
ui_OpenDeclaration.openLink = function(meta,pos) {
	var rx = new RegExp("^(.+?)" + "(?:\\(([^)]*)\\))?" + "(?::(.+))?$");
	var vals = rx.exec(meta);
	if(vals == null) {
		return false;
	}
	var name = vals[1];
	var ctx = vals[3];
	var nav = { def : vals[2]};
	if(ctx != null) {
		rx = new RegExp("^" + "(\\d+)(?:(\\d+))?" + "$");
		vals = rx.exec(ctx);
		var ctxRow = null;
		var ctxCol = null;
		if(vals == null) {
			rx = new RegExp("^([^:]+):" + "(\\d+)(?:(\\d+))?" + "$");
			vals = rx.exec(ctx);
			if(vals != null) {
				nav.ctx = vals[1];
				ctxRow = vals[2];
				ctxCol = vals[3];
			} else {
				nav.ctx = ctx;
			}
		} else {
			ctxRow = vals[1];
			ctxCol = vals[2];
		}
		if(ctxRow != null) {
			nav.pos = { row : Std.parseInt(ctxRow) - 1, column : ctxCol != null ? Std.parseInt(ctxCol) - 1 : 0};
		}
	}
	ui_OpenDeclaration.openLocal(name,pos,nav);
	return true;
};
ui_OpenDeclaration.openLookup = function(lookup,nav) {
	if(lookup == null) {
		return false;
	}
	var path = lookup.path;
	var name;
	var treeEl = ui_treeview_TreeView.find(true,{ path : path});
	if(treeEl != null) {
		name = treeEl.title;
	} else {
		name = null;
		var _g = 0;
		var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
		while(_g < _g1.length) {
			var tabEl = _g1[_g];
			++_g;
			var gmlFile = tabEl.gmlFile;
			if(gmlFile != null && gmlFile.path == path) {
				name = gmlFile.name;
				break;
			}
		}
		if(name == null) {
			return false;
		}
	}
	if(nav != null) {
		if(nav.def == null) {
			nav.def = lookup.sub;
		}
		if(nav.pos != null) {
			nav.pos.row += lookup.row;
			nav.pos.column += lookup.col;
		} else {
			nav.pos = { row : lookup.row, column : lookup.col};
		}
	} else {
		nav = { def : lookup.sub, pos : { row : lookup.row, column : lookup.col}};
	}
	gml_file_GmlFile.open(name,path,nav);
	return true;
};
ui_OpenDeclaration.openLocal = function(name,pos,nav) {
	if(ui_OpenDeclaration.openLookup(gml_GmlAPI.gmlLookup[name],nav)) {
		return true;
	}
	var ename = name.replace(tools_NativeString.escapeProp_1,"\\$1");
	var el = ui_treeview_TreeView.element.querySelector(".item[" + "data-ident" + "=\"" + ename + "\"]");
	if(el != null) {
		if(gml_Project.current.path == "") {
			ui_treeview_TreeView.openProject(el);
		} else {
			gml_file_GmlFile.open(el.title,el.getAttribute("data-full-path"),nav);
		}
		return true;
	}
	return false;
};
ui_OpenDeclaration.openImportFile = function(rel) {
	if(!electron_FileWrap.existsSync("#import")) {
		electron_FileWrap.mkdirSync("#import");
	}
	var pj = gml_Project.current;
	var full = haxe_io_Path.join(["#import",rel]);
	var data = null;
	if(!pj.existsSync(full)) {
		full += ".gml";
		if(!pj.existsSync(full)) {
			data = "";
		}
	}
	if(data == null) {
		data = pj.readTextFileSync(full);
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile(haxe_io_Path.withoutDirectory(full),pj.fullPath(full),file_kind_gml_KGmlImports.inst,data));
	return true;
};
ui_OpenDeclaration.proc = function(session,pos,token) {
	if(token == null) {
		return false;
	}
	var term = token.value;
	if(token.type.indexOf("importpath") >= 0) {
		if(ui_OpenDeclaration.openImportFile(term.substring(1,term.length - 1))) {
			return true;
		}
	}
	if(token.type == "numeric" && ui_ColorPicker.rxGml.test(term)) {
		ui_ColorPicker.open(term);
		return true;
	}
	if(term.substring(0,2) == "@[") {
		var vals = new RegExp("^@\\[(.*)\\]").exec(term);
		if(vals != null) {
			ui_OpenDeclaration.openLink(vals[1],pos);
		}
		return true;
	}
	if(token.type.indexOf("link.url") != -1) {
		Electron_Shell.openExternal(term);
	}
	if(term == "event_inherited" || term == "action_inherited") {
		var def = session.gmlScopes.get(pos.row);
		if(def == "") {
			return false;
		}
		var file = session.gmlFile;
		var path = file.path;
		if(((file.kind) instanceof file_kind_gmx_KGmxEvents)) {
			return gmx_GmxObject.openEventInherited(path,def) != null;
		} else if(((file.kind) instanceof file_kind_yy_KYyEvents)) {
			return yy_YyObject.openEventInherited(path,def) != null;
		} else {
			return false;
		}
	}
	_hx_loop1: do {
		var scope = session.gmlScopes.get(pos.row);
		if(scope == null) {
			break;
		}
		var imp = session.gmlFile.codeEditor.imports[scope];
		if(imp == null) {
			break;
		}
		var iter = new AceTokenIterator(session,pos.row,pos.column);
		var tk = iter.stepBackward();
		var next;
		var ns;
		if(tk != null && tk.value == ".") {
			tk = iter.stepBackward();
			if(tk != null) {
				switch(tk.type) {
				case "enum":
					var en = gml_GmlAPI.gmlEnums[tk.value];
					if(en == null) {
						break _hx_loop1;
					}
					return ui_OpenDeclaration.openLookup(en.fieldLookup[term],{ ctx : term, pos : { column : 0, row : 0}, ctxAfter : true});
				case "namespace":
					ns = imp.namespaces[tk.value];
					if(ns == null) {
						break _hx_loop1;
					}
					next = ns.longen[term];
					if(next != null) {
						term = next;
					}
					break _hx_loop1;
				case "local":case "sublocal":
					var tn = gml_type_GmlTypeTools.getNamespace(imp.localTypes[tk.value]);
					if(tn == null) {
						break _hx_loop1;
					}
					ns = imp.namespaces[tn];
					if(ns == null) {
						break _hx_loop1;
					}
					next = ns.longen[term];
					if(next != null) {
						term = next;
					}
					break _hx_loop1;
				}
			}
		}
		next = imp.longen[term];
		if(next != null) {
			term = next;
		}
	} while(false);
	if(ui_OpenDeclaration.openLocal(term,pos,null)) {
		return true;
	}
	var helpURL = gml_GmlAPI.helpURL;
	if(helpURL != null) {
		var helpLookup = gml_GmlAPI.helpLookup;
		if(helpLookup != null) {
			var helpTerm = helpLookup[term];
			if(helpTerm == null) {
				helpTerm = helpLookup[StringTools.replace(term,"color","colour")];
			}
			if(helpTerm != null) {
				Electron_Shell.openExternal(StringTools.replace(helpURL,"$1",helpTerm));
				return true;
			}
		} else {
			Electron_Shell.openExternal(StringTools.replace(helpURL,"$1",term));
			return true;
		}
	}
	return false;
};
var ui_Preferences = function() { };
$hxClasses["ui.Preferences"] = ui_Preferences;
ui_Preferences.__name__ = "ui.Preferences";
ui_Preferences.setMenu = function(el) {
	if(ui_Preferences.subMenu != el) {
		if(ui_Preferences.subMenu != null) {
			ui_Preferences.element.removeChild(ui_Preferences.subMenu);
		}
		ui_Preferences.subMenu = el;
		ui_Preferences.element.appendChild(el);
	}
	return el;
};
ui_Preferences.buildMain = function() {
	var mm = document.createElement("div");
	ui_preferences_PrefMenu.build(mm);
	ui_Preferences.menuMain = mm;
	plugins_PluginAPI._signal("preferencesBuilt",{ target : mm});
	return mm;
};
ui_Preferences.addGroupToggle = function(fs) {
	var lg = fs.querySelector("legend");
	lg.addEventListener("click",function(e) {
		if(e.target == lg) {
			fs.classList.toggle("collapsed");
			e.preventDefault();
		}
	});
};
ui_Preferences.addGroup = function(out,legend) {
	var fs = document.createElement("fieldset");
	fs.classList.add("group");
	var lg = document.createElement("legend");
	lg.appendChild(document.createTextNode(legend));
	fs.appendChild(lg);
	ui_Preferences.addGroupToggle(fs);
	out.appendChild(fs);
	return fs;
};
ui_Preferences.addRadios = function(out,legend,curr,names,fn) {
	var fs = document.createElement("fieldset");
	fs.classList.add("radios");
	var lg = document.createElement("legend");
	lg.innerText = legend;
	fs.appendChild(lg);
	var _g = 0;
	while(_g < names.length) {
		var name = [names[_g]];
		++_g;
		var id = ui_Preferences.createValidIdFromString(name[0]);
		var rad = document.createElement("input");
		rad.type = "radio";
		rad.name = legend;
		rad.value = name[0];
		rad.id = id;
		rad.addEventListener("change",(function(name) {
			return function(_) {
				fn(name[0]);
			};
		})(name));
		if(curr == name[0]) {
			rad.checked = true;
		}
		var lb = document.createElement("label");
		lb.htmlFor = id;
		lb.appendChild(rad);
		lb.appendChild(document.createTextNode(name[0]));
		fs.appendChild(lb);
		fs.appendChild(document.createElement("br"));
	}
	out.appendChild(fs);
	return fs;
};
ui_Preferences.addDropdown = function(out,legend,curr,names,fn) {
	var ctr = document.createElement("div");
	ctr.classList.add("select");
	var lb = document.createElement("label");
	lb.htmlFor = legend;
	lb.appendChild(document.createTextNode(legend));
	ctr.appendChild(lb);
	var sel = document.createElement("select");
	var _g = 0;
	while(_g < names.length) {
		var name = names[_g];
		++_g;
		var opt = document.createElement("option");
		opt.value = name;
		opt.appendChild(document.createTextNode(name));
		sel.appendChild(opt);
	}
	sel.addEventListener("change",function(_) {
		fn(sel.value);
	});
	sel.value = curr;
	ctr.appendChild(sel);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addCheckbox = function(out,legend,curr,fn) {
	var id = ui_Preferences.createValidIdFromString(legend);
	var ctr = document.createElement("div");
	ctr.classList.add("checkbox");
	var cb = document.createElement("input");
	cb.type = "checkbox";
	cb.checked = curr;
	cb.name = legend;
	cb.addEventListener("change",function(_) {
		fn(cb.checked);
	});
	cb.id = id;
	var lb = document.createElement("label");
	lb.htmlFor = id;
	lb.appendChild(cb);
	lb.appendChild(document.createTextNode(legend));
	ctr.appendChild(lb);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addInput = function(out,legend,curr,fn) {
	var ctr = document.createElement("div");
	ctr.classList.add("input");
	var lb = document.createElement("label");
	lb.htmlFor = legend;
	lb.appendChild(document.createTextNode(legend));
	ctr.appendChild(lb);
	var cb = document.createElement("input");
	cb.type = "text";
	cb.value = curr;
	cb.name = legend;
	cb.addEventListener("change",function(_) {
		fn(cb.value);
	});
	cb.addEventListener("keydown",function(e) {
		if(e.keyCode == 13) {
			fn(cb.value);
		}
	});
	ctr.appendChild(cb);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addRegexPatternInput = function(out,legend,curr,fn) {
	var ctr = document.createElement("div");
	ctr.classList.add("input");
	var lb = document.createElement("label");
	lb.htmlFor = legend;
	lb.appendChild(document.createTextNode(legend));
	ctr.appendChild(lb);
	var fd = document.createElement("input");
	fd.type = "text";
	fd.value = ((curr) || (""));
	fd.name = legend;
	fd.addEventListener("change",function(_) {
		if(fd.value.trim() == "") {
			fd.classList.remove("error");
			fn(null);
		} else {
			try {
				new RegExp(fd.value);
				fd.classList.remove("error");
				fn(fd.value);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				fd.classList.add("error");
				electron_Dialog.showError("Error compiling a regular expression: " + Std.string(_g1));
			}
		}
	});
	fd.addEventListener("keydown",function(e) {
		if(e.keyCode == 13) {
			if(fd.value.trim() == "") {
				fd.classList.remove("error");
				fn(null);
			} else {
				try {
					new RegExp(fd.value);
					fd.classList.remove("error");
					fn(fd.value);
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					fd.classList.add("error");
					electron_Dialog.showError("Error compiling a regular expression: " + Std.string(_g1));
				}
			}
		}
	});
	ctr.appendChild(fd);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addIntInput = function(out,legend,val,fn) {
	var fd = null;
	var el = ui_Preferences.addInput(out,legend,val != null ? "" + val : "",function(s) {
		var v = Std.parseInt(s);
		if(v != null) {
			fd.classList.remove("error");
			fn(v);
		} else {
			fd.classList.add("error");
		}
	});
	fd = el.querySelector("input");
	return el;
};
ui_Preferences.addFloatInput = function(out,legend,val,fn) {
	var fd = null;
	var el = ui_Preferences.addInput(out,legend,val != null ? "" + val : "",function(s) {
		var v = parseFloat(s);
		if(!isNaN(v)) {
			fd.classList.remove("error");
			fn(v);
		} else {
			fd.classList.add("error");
		}
	});
	fd = el.querySelector("input");
	return el;
};
ui_Preferences.addButton = function(out,text,fn) {
	var ctr = document.createElement("div");
	ctr.classList.add("button");
	var el = document.createElement("a");
	el.href = "#";
	el.appendChild(document.createTextNode(text));
	el.addEventListener("click",function(e) {
		e.preventDefault();
		fn();
	});
	ctr.appendChild(el);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addBigButton = function(out,text,fn) {
	var ctr = document.createElement("div");
	var el = document.createElement("input");
	el.type = "button";
	el.value = text;
	el.addEventListener("click",function(e) {
		e.preventDefault();
		fn();
	});
	ctr.appendChild(el);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addText = function(out,text) {
	var ctr = document.createElement("div");
	ctr.classList.add("plaintext");
	ctr.appendChild(document.createTextNode(text));
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.createShellAnchor = function(url,label) {
	var a = document.createElement("a");
	a.href = url;
	a.target = "_blank";
	a.onclick = function(_) {
		Electron_Shell.openExternal(url);
		return false;
	};
	a.appendChild(document.createTextNode(label));
	return a;
};
ui_Preferences.createFuncAnchor = function(label,func) {
	var a = document.createElement("a");
	a.href = "javascript:void(0)";
	a.target = "_blank";
	a.onclick = function(e) {
		func(e);
		return false;
	};
	a.appendChild(document.createTextNode(label));
	return a;
};
ui_Preferences.addWiki = function(to,url,label) {
	if(label == null) {
		label = "wiki";
	}
	var lb = to.querySelector("legend");
	if(lb == null) {
		lb = to.querySelector("label");
	}
	if(lb == null) {
		lb = to;
	}
	lb.appendChild(document.createTextNode(" ("));
	lb.appendChild(ui_Preferences.createShellAnchor(url,label));
	lb.appendChild(document.createTextNode(")"));
};
ui_Preferences.createValidIdFromString = function(str) {
	str = str.toLowerCase();
	var alphanumeric_r = new RegExp("[^a-z0-9_\\s-]","g".split("u").join(""));
	str = str.replace(alphanumeric_r,"");
	var dashes_r = new RegExp("[\\s-]+","g".split("u").join(""));
	str = str.replace(dashes_r,"");
	var whitespace_r = new RegExp("[\\s_]","g".split("u").join(""));
	str = str.replace(whitespace_r,"");
	return str;
};
ui_Preferences.open = function() {
	var kind = file_kind_misc_KPreferences.inst;
	var _g = 0;
	var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
	while(_g < _g1.length) {
		var tab = _g1[_g];
		++_g;
		if(tab.gmlFile.kind == kind) {
			tab.click();
			return tab.gmlFile;
		}
	}
	return kind.create("Preferences",null,null,null);
};
ui_Preferences.save = function() {
	electron_FileWrap.writeConfigSync("config","user-preferences",ui_Preferences.current);
};
ui_Preferences.load = function() {
	var pref = null;
	try {
		pref = electron_FileWrap.readConfigSync("config","user-preferences");
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.error("Error loading preferences: ",_g1);
	}
	if(pref != null) {
		if(pref.compMatchMode == null && pref.compExactMatch != null) {
			pref.compMatchMode = pref.compExactMatch ? 0 : 2;
		}
	}
	var def = ui_preferences_PrefData.defValue();
	var doSave = false;
	if(pref == null) {
		pref = def;
		doSave = true;
	} else {
		var isStruct = function(v) {
			if(typeof(v) == "string") {
				return false;
			}
			if(((v) instanceof Array)) {
				return false;
			}
			return Reflect.isObject(v);
		};
		var mergeRec = null;
		mergeRec = function(cur,def) {
			var _g_keys = Reflect.fields(def);
			var _g_index = 0;
			while(_g_index < _g_keys.length) {
				var key = _g_keys[_g_index++];
				var _g_value = def[key];
				var vc = cur[key];
				if(vc != null) {
					if(isStruct(_g_value) && isStruct(vc)) {
						mergeRec(vc,_g_value);
					}
				} else {
					cur[key] = _g_value;
					doSave = true;
				}
			}
		};
		mergeRec(pref,def);
	}
	ui_Preferences.current = pref;
	if(doSave) {
		ui_Preferences.save();
	}
	if(pref.theme != null) {
		ui_Theme.set_current(pref.theme);
	}
	if(pref.coroutineMagic) {
		synext_GmlExtCoroutines.ensureScript();
	}
	gml_GmlAPI.ukSpelling = pref.ukSpelling;
};
ui_Preferences.init = function() {
	var isMac;
	var isUnix;
	var ep = window.process;
	if(ep == null) {
		var np = window.navigator.platform;
		np = np != null ? np.toLowerCase() : "";
		isMac = np.indexOf("mac") >= 0;
		isUnix = np.indexOf("win") < 0;
	} else {
		isMac = ep.platform == "darwin";
		isUnix = ep.platform != "win32";
	}
	electron_FileWrap.isMac = isMac;
	electron_FileWrap.isUnix = isUnix;
	if(ep != null) {
		var appBase = isUnix ? "/Users/" + Std.string(ep.env.LOGNAME) + "/.config" : Electron_App.getPath("appData");
		var _g = 0;
		var _g1 = ["","-Beta","-EA"];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			try {
				var appDir = appBase + "/GameMakerStudio2" + sfx;
				if(!Electron_FS.existsSync(appDir)) {
					continue;
				}
				var umPath = "" + appDir + "/um.json";
				if(!Electron_FS.existsSync(umPath)) {
					continue;
				}
				var um = yy_YyJson.parse(Electron_FS.readFileSync(umPath,"utf8"));
				var username = ((um.login) || (um.username));
				var sep = username.indexOf("@");
				if(sep >= 0) {
					username = username.substring(0,sep);
				}
				var userDir = appDir + "/" + username + "_" + Std.string(um.userID);
				if(!Electron_FS.existsSync(userDir)) {
					continue;
				}
				ui_Preferences.userPaths.push(userDir);
			} catch( _g2 ) {
				var x = haxe_Exception.caught(_g2).unwrap();
				console.error("Failed to index /GameMakerStudio2" + sfx + ":",x);
			}
		}
	}
	ui_Preferences.load();
};
ui_Preferences.hookSetOption = function(obj) {
	if(obj.setOption_raw != null) {
		return;
	}
	obj.setOption_raw = obj.setOption;
	obj.setOption = function(key,val) {
		obj.setOption_raw(key,val);
		if(key == "tabSize" && val != ui_Preferences.current.tabSize) {
			ui_Preferences.current.tabSize = typeof(val) == "string" ? Std.parseInt(val) : val;
			ui_Preferences.save();
		}
		if(key == "useSoftTabs" && val != ui_Preferences.current.tabSpaces) {
			ui_Preferences.current.tabSpaces = val;
			ui_Preferences.save();
		}
		if(Main.aceEditor != null) {
			var opts = Main.aceEditor.getOptions();
			Reflect.deleteField(opts,"enableLiveAutocompletion");
			Reflect.deleteField(opts,"theme");
			Reflect.deleteField(opts,"enableSnippets");
			electron_FileWrap.writeConfigSync("config","aceOptions",opts);
		}
	};
};
ui_Preferences.bindEditor = function(editor) {
	try {
		var opts = electron_FileWrap.readConfigSync("config","aceOptions");
		if(opts != null) {
			opts["enableSnippets"] = true;
			Reflect.deleteField(opts,"mode");
			editor.setOptions(opts);
		}
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.error("Error loading Ace options: " + Std.string(_g1));
	}
	editor.setOption("fixedWidthGutter",true);
	ui_Preferences.hookSetOption(editor);
	ui_Preferences.hookSetOption(editor.renderer);
	if(editor.getOption("fontFamily") == null) {
		editor.setOption("fontFamily",electron_FileWrap.isMac ? "Menlo, monospace" : "Consolas, Courier New, monospace");
	}
};
var ui_ProjectStyle = function() { };
$hxClasses["ui.ProjectStyle"] = ui_ProjectStyle;
ui_ProjectStyle.__name__ = "ui.ProjectStyle";
ui_ProjectStyle.reload = function() {
	var pj = gml_Project.current;
	if(pj.path != "") {
		if(pj.isVirtual) {
			var cssPath = pj.name + ".css";
			if(pj.existsSync(cssPath)) {
				ui_ProjectStyle.style.innerHTML = pj.readTextFileSync(cssPath);
			} else {
				ui_ProjectStyle.style.innerHTML = "";
			}
			ui_ProjectStyle.link.href = "";
		} else {
			var path = gml_Project.current.path + ".css";
			if(Electron_FS.existsSync(path)) {
				var tmp = new Date().getTime();
				ui_ProjectStyle.link.href = "file:///" + path + "?t=" + tmp;
			} else {
				ui_ProjectStyle.link.href = "";
			}
			ui_ProjectStyle.style.innerHTML = "";
		}
	} else {
		ui_ProjectStyle.link.href = "";
		ui_ProjectStyle.style.innerHTML = "";
	}
};
ui_ProjectStyle.setItemThumb = function(data) {
	var thumb = data.thumb;
	if(thumb != null) {
		thumb = haxe_io_Path.normalize(thumb);
		var pjdir = haxe_io_Path.normalize(gml_Project.current.dir);
		if(thumb.startsWith(pjdir)) {
			thumb = "." + thumb.substring(pjdir.length);
		} else {
			thumb = "file:///" + thumb;
		}
	}
	var path = gml_Project.current.path + ".css";
	var sel;
	var sfx = data.suffix;
	var _g = data.kind;
	if(_g == null) {
		sel = ".treeview .dir[" + "data-rel-path" + "=\"" + data.rel.replace(tools_NativeString.escapeProp_1,"\\$1") + ("\"]" + sfx + " > .header");
	} else {
		switch(_g) {
		case "config":case "datafile":case "extfile":
			sel = ".treeview .item[" + "data-rel-path" + "=\"" + data.rel.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]" + sfx;
			break;
		default:
			sel = ".treeview .item[" + "data-ident" + "=\"" + data.ident.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]" + sfx;
		}
	}
	var proc = function(text) {
		var r0 = sel + ":before { background: url(\"";
		var rx = new RegExp("^" + r0.replace(tools_NativeString.escapeRx_1,"\\$1") + ".+" + "\") center/contain no-repeat; }".replace(tools_NativeString.escapeRx_1,"\\$1") + "$","gm");
		var next = thumb != null ? r0 + thumb.replace(tools_NativeString.escapeProp_1,"\\$1") + "\") center/contain no-repeat; }" : "";
		var found = false;
		text = text.replace(rx,function(s) {
			found = true;
			return next;
		});
		if(!found && next != "") {
			if(text != "") {
				text += "\n";
			}
			text += next;
		}
		Electron_FS.writeFileSync(path,text);
		ui_ProjectStyle.reload();
	};
	if(!Electron_FS.existsSync(path)) {
		proc("");
	} else {
		Electron_FS.readFile(path,"utf8",function(err,txt) {
			if(err == null) {
				proc(txt);
			}
		});
	}
};
ui_ProjectStyle.init = function() {
	ui_ProjectStyle.link = document.querySelector("#project-style");
	ui_ProjectStyle.style = document.querySelector("#project-style-inline");
};
var ui_RecentProjects = function() { };
$hxClasses["ui.RecentProjects"] = ui_RecentProjects;
ui_RecentProjects.__name__ = "ui.RecentProjects";
ui_RecentProjects.get = function() {
	try {
		var curr = electron_FileWrap.readConfigSync("session","recent-projects");
		if(!((curr) instanceof Array)) {
			return [];
		}
		var _g = 0;
		var _g1 = curr.length;
		while(_g < _g1) {
			var i = _g++;
			curr[i] = StringTools.replace(curr[i],"\\","/");
		}
		return curr;
	} catch( _g ) {
		return [];
	}
};
ui_RecentProjects.set = function(list) {
	electron_FileWrap.writeConfigSync("session","recent-projects",list);
};
ui_RecentProjects.clear = function() {
	ui_RecentProjects.set([]);
	if(Electron_API != null) {
		Electron_IPC.send("clear-recent-documents");
	}
};
ui_RecentProjects.add = function(path) {
	var curr = ui_RecentProjects.get();
	HxOverrides.remove(curr,path);
	curr.unshift(path);
	if(curr.length > ui_Preferences.current.recentProjectCount) {
		curr.pop();
	}
	if(Electron_API != null) {
		Electron_IPC.send("add-recent-document",path);
	}
	ui_RecentProjects.set(curr);
};
ui_RecentProjects.remove = function(path) {
	var curr = ui_RecentProjects.get();
	HxOverrides.remove(curr,path);
	ui_RecentProjects.set(curr);
};
ui_RecentProjects.show = function() {
	ui_treeview_TreeView.clear();
	var el = ui_treeview_TreeView.element;
	var lookup = [];
	if(Electron_API != null) {
		var _g = 0;
		var _g1 = ui_RecentProjects.get();
		while(_g < _g1.length) {
			var path = [_g1[_g]];
			++_g;
			var pair = [tools_PathTools.ptDetectProject(path[0])];
			var name = pair[0].name;
			lookup.push({ value : name, meta : pair[0].version.label});
			var pj = [ui_treeview_TreeView.makeProject(name,path[0])];
			Electron_FS.access(path[0],0,(function(pj,pair,path) {
				return function(e) {
					if(e != null) {
						pj[0].setAttribute("data-missing","true");
						return;
					}
					if(!pair[0].version.name.startsWith("v2")) {
						return;
					}
					var thumbIcon = path[0] + ".png";
					Electron_FS.access(thumbIcon,0,(function(path) {
						return function(e) {
							if(e == null) {
								ui_treeview_TreeView.setThumb(path[0],"file:///" + thumbIcon);
								return;
							}
							var tplIcon = haxe_io_Path.directory(path[0]) + "/options/main/template_icon.png";
							Electron_FS.access(tplIcon,0,(function(path) {
								return function(e) {
									if(e == null) {
										ui_treeview_TreeView.setThumb(path[0],"file:///" + tplIcon);
									}
								};
							})(path));
						};
					})(path));
				};
			})(pj,pair,path));
			el.appendChild(pj[0]);
		}
	}
	gml_GmlAPI.gmlLookupItems = lookup;
};
var ui_ScrollMode = function() {
	this.scrollWait = false;
};
$hxClasses["ui.ScrollMode"] = ui_ScrollMode;
ui_ScrollMode.__name__ = "ui.ScrollMode";
ui_ScrollMode.prototype = {
	mousedown: function(e) {
		var _gthis = this;
		if(e.button != 1 && e.layerX < this.scrollbar.offsetWidth - this.scrollbarWidthInt) {
			this.scrollbar.style.width = this.scrollbarWidth;
			this.scrollbar.style.cursor = "";
			this.scrollWait = true;
			var e1 = new MouseEvent(e.type,e);
			this.container.querySelector(".ace_scroller").dispatchEvent(e1);
			var fn = null;
			fn = function(e) {
				_gthis.scrollWait = false;
				window.removeEventListener("mouseup",fn);
			};
			window.addEventListener("mouseup",fn);
		}
	}
	,mousemove: function(e) {
		if(this.scrollWait) {
			return;
		}
		var sb = this.editor.renderer.scrollBar.element;
		var pos = this.editor.renderer.screenToTextCoordinates(e.clientX,e.clientY);
		var line = this.editor.getSession().getLine(pos.row);
		if(line == null || pos.column >= line.length) {
			sb.style.width = "100%";
			sb.style.cursor = e.layerX < this.scrollbar.offsetWidth - this.scrollbarWidthInt ? "text" : "";
		} else {
			sb.style.width = this.scrollbarWidth;
			sb.style.cursor = "";
		}
	}
	,bind: function(editor) {
		try {
			new MouseEvent("mousedown");
		} catch( _g ) {
			return;
		}
		this.editor = editor;
		this.container = editor.container;
		this.scrollbar = editor.renderer.scrollBar.element;
		this.scrollbarWidth = this.scrollbar.style.width;
		this.scrollbarWidthInt = parseInt(this.scrollbarWidth);
		this.scrollbar.addEventListener("mousedown",$bind(this,this.mousedown));
		this.container.addEventListener("mousemove",$bind(this,this.mousemove));
	}
	,__class__: ui_ScrollMode
};
var ui__$Sidebar_SidebarItem = function(name,el) {
	this.name = name;
	this.el = el;
	this.opt = document.createElement("option");
	tools_HtmlTools.setInnerText(this.opt,name);
};
$hxClasses["ui._Sidebar.SidebarItem"] = ui__$Sidebar_SidebarItem;
ui__$Sidebar_SidebarItem.__name__ = "ui._Sidebar.SidebarItem";
ui__$Sidebar_SidebarItem.prototype = {
	__class__: ui__$Sidebar_SidebarItem
};
var ui_TagEditor = function() { };
$hxClasses["ui.TagEditor"] = ui_TagEditor;
ui_TagEditor.__name__ = "ui.TagEditor";
ui_TagEditor.show = function(relPath,_isDir) {
	var ok = false;
	var _g = 0;
	while(_g < 1) {
		++_g;
		var tags;
		try {
			var pj = gml_Project.current;
			if(_isDir) {
				var folder = tools_NativeArray.findFirst(pj.readYyFileSync(gml_Project.current.name).Folders,function(q) {
					return q.folderPath == relPath;
				});
				if(folder == null) {
					electron_Dialog.showError("Couldn't find folder \"" + relPath + "\" in the project file.");
					continue;
				}
				tags = folder.tags;
			} else {
				tags = pj.readYyFileSync(relPath).tags;
			}
			if(tags == null) {
				tags = [];
			}
		} catch( _g1 ) {
			electron_Dialog.showError("Couldn't get tags:\n" + Std.string(haxe_Exception.caught(_g1).unwrap()));
			continue;
		}
		ok = true;
		ui_TagEditor.currPath = relPath;
		ui_TagEditor.isDir = _isDir;
		var pt = new haxe_io_Path(relPath);
		pt.ext = null;
		if(!_isDir) {
			pt.dir = null;
		}
		tools_HtmlTools.setInnerText(ui_TagEditor.targetEl,pt.toString());
		ui_TagEditor.textarea.value = tags.join("\n");
	}
	tools_HtmlTools.setDisplayFlag(ui_TagEditor.element,ok);
};
ui_TagEditor.init = function() {
	ui_TagEditor.element = document.createElement("div");
	ui_TagEditor.element.id = "tag-editor";
	ui_TagEditor.element.className = "popout-window";
	tools_HtmlTools.setDisplayFlag(ui_TagEditor.element,false);
	ui_TagEditor.element.innerHTML = "<label for=\"tags\">Tags (one per line):</label>\r\n<textarea name=\"tags\"></textarea>\r\n<div>Editing tags for \"<span name=\"target\"></span>\"</div>\r\n<div class=\"tag-editor-controls\">\r\n\t<input type=\"button\" name=\"accept\" value=\"Apply\" />\r\n\t<span></span>\r\n\t<input type=\"button\" name=\"cancel\" value=\"Cancel\" />\r\n</div>";
	tools_HtmlTools.insertAfterSelf(document.querySelector("#main"),ui_TagEditor.element);
	ui_TagEditor.textarea = ui_TagEditor.element.querySelector("[name=\"tags\"]");
	ui_TagEditor.targetEl = ui_TagEditor.element.querySelector("[name=\"target\"]");
	ui_TagEditor.element.querySelector("[name=\"accept\"]").onclick = function(_) {
		var tags = ui_TagEditor.textarea.value.split("\n");
		var i = 0;
		while(i < tags.length) if(StringTools.trim(tags[i]) != "") {
			++i;
		} else {
			tags.splice(i,1);
		}
		var _g = 0;
		while(_g < 1) {
			++_g;
			try {
				var pj = gml_Project.current;
				if(ui_TagEditor.isDir) {
					var yypRel = gml_Project.current.name;
					var yyp = pj.readYyFileSync(yypRel);
					var folder = tools_NativeArray.findFirst(yyp.Folders,function(q) {
						return q.folderPath == ui_TagEditor.currPath;
					});
					if(folder == null) {
						electron_Dialog.showError("Couldn't find folder \"" + ui_TagEditor.currPath + "\" in the project file.");
						continue;
					}
					var _tags = folder.tags;
					if(_tags == null ? tags.length != 0 : tags.join("\n") != _tags.join("\n")) {
						folder.tags = tags;
						pj.writeYyFileSync(yypRel,yyp);
					}
				} else {
					var yy = pj.readYyFileSync(ui_TagEditor.currPath);
					var _tags1 = yy.tags;
					if(_tags1 == null ? tags.length != 0 : tags.join("\n") != _tags1.join("\n")) {
						yy.tags = tags;
						pj.writeYyFileSync(ui_TagEditor.currPath,yy);
					}
				}
			} catch( _g1 ) {
				electron_Dialog.showError("Couldn't save tags:\n" + Std.string(haxe_Exception.caught(_g1).unwrap()));
			}
		}
		tools_HtmlTools.setDisplayFlag(ui_TagEditor.element,false);
	};
	ui_TagEditor.element.querySelector("[name=\"cancel\"]").onclick = function(_) {
		tools_HtmlTools.setDisplayFlag(ui_TagEditor.element,false);
	};
};
var ui_Theme = function() { };
$hxClasses["ui.Theme"] = ui_Theme;
ui_Theme.__name__ = "ui.Theme";
ui_Theme.setBackgroundColor = function(hexColor) {
	if(Electron_API != null) {
		Electron_API.remote.getCurrentWindow().setBackgroundColor(hexColor);
	}
};
ui_Theme.reset = function() {
	var _g = 0;
	var _g1 = ui_Theme.elements;
	while(_g < _g1.length) {
		var el = _g1[_g];
		++_g;
		var par = el.parentElement;
		if(par != null) {
			par.removeChild(el);
		}
	}
	ui_Theme.setDarkTabs(false);
	ui_Theme.setBackgroundColor("#ffffff");
	document.documentElement.removeAttribute("data-theme-uses-bracket-depth");
};
ui_Theme.setDarkTabs = function(z) {
	var _g = [];
	var _g1 = 0;
	var _g2 = document.querySelectorAll(".chrome-tabs");
	while(_g1 < _g2.length) _g.push(_g2[_g1++]);
	_g.push(document.querySelector("#main"));
	var _g1 = 0;
	while(_g1 < _g.length) {
		var el = _g[_g1];
		++_g1;
		if(z) {
			el.classList.add("chrome-tabs-dark-theme");
		} else {
			el.classList.remove("chrome-tabs-dark-theme");
		}
	}
};
ui_Theme.add = function(name,then) {
	var userPath = electron_FileWrap.userPath;
	var dir = haxe_io_Path.join([Main.modulePath,"themes",name]);
	var fullConf = haxe_io_Path.join([dir,"config.json"]);
	var procSelf = function(theme) {
		if(theme.darkChromeTabs != null) {
			ui_Theme.setDarkTabs(theme.darkChromeTabs);
		}
		if(theme.windowsAccentColors) {
			electron_WindowsAccentColors.update(true);
		}
		if(theme.backgroundColor != null) {
			ui_Theme.setBackgroundColor(theme.backgroundColor);
		}
		if(theme.useBracketDepth != null) {
			if(theme.useBracketDepth) {
				document.documentElement.setAttribute("data-theme-uses-bracket-depth","");
			} else {
				document.documentElement.removeAttribute("data-theme-uses-bracket-depth");
			}
			ace_AceGmlHighlight.useBracketDepth = theme.useBracketDepth;
		}
		if(theme.stylesheets != null) {
			var _g = 0;
			var _g1 = theme.stylesheets;
			while(_g < _g1.length) {
				var rel = _g1[_g++];
				var link = document.createElement("link");
				link.rel = "stylesheet";
				link.href = haxe_io_Path.join([dir,rel]);
				link.setAttribute("data-is-theme","");
				document.head.insertBefore(link,ui_Theme.refElement);
				ui_Theme.elements.push(link);
			}
		}
		then();
	};
	var proc = function(theme) {
		if(theme.parentTheme != null) {
			ui_Theme.add(theme.parentTheme,function() {
				procSelf(theme);
			});
		} else {
			procSelf(theme);
		}
	};
	if(Electron_FS.existsSync != null) {
		try {
			if(Electron_FS.existsSync(fullConf)) {
				proc(JSON.parse(Electron_FS.readFileSync(fullConf,"utf8")));
			} else {
				dir = userPath + "/themes/" + name;
				fullConf = dir + "/config.json";
				if(Electron_FS.existsSync(fullConf)) {
					proc(JSON.parse(Electron_FS.readFileSync(fullConf,"utf8")));
				} else {
					then();
				}
			}
		} catch( _g ) {
			console.log(haxe_Exception.caught(_g).unwrap());
			then();
		}
	} else {
		var callback = function(err,data) {
			if(data != null) {
				proc(data);
			}
		};
		Electron_FS.readFile(fullConf,"utf8",function(e,d) {
			if(d != null) {
				try {
					d = JSON.parse(d);
				} catch( _g ) {
					d = null;
					e = haxe_Exception.caught(_g).unwrap();
				}
			}
			callback(e,d);
		});
	}
};
ui_Theme.set = function(name,cb) {
	if(cb == null) {
		cb = function() {
		};
	}
	document.documentElement.setAttribute("data-theme",name);
	ui_Theme.reset();
	ace_AceGmlHighlight.useBracketDepth = false;
	ui_Theme.add(name,cb);
	return name;
};
ui_Theme.set_current = function(name) {
	if(ui_Theme.current == name) {
		return name;
	}
	ui_Theme.current = name;
	ui_Theme.set(name);
	return name;
};
var ui_WelcomePage = function() { };
$hxClasses["ui.WelcomePage"] = ui_WelcomePage;
ui_WelcomePage.__name__ = "ui.WelcomePage";
ui_WelcomePage.init = function(e) {
	var session;
	ui_WelcomePage.file = new gml_file_GmlFile("WelcomePage",null,file_kind_misc_KPlain.inst,"");
	gml_file_GmlFile.set_current(ui_WelcomePage.file);
	session = ui_WelcomePage.file.codeEditor.session;
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,Electron_API != null ? "misc/welcome.txt" : "misc/welcome-web.txt"]),"utf8",function(err,text) {
		text = text.replace("%%VERSION%%","Jun 19, 2023");
		session.setValue(text);
	});
	return session;
};
var ui_ext_Bookmarks = function() { };
$hxClasses["ui.ext.Bookmarks"] = ui_ext_Bookmarks;
ui_ext_Bookmarks.__name__ = "ui.ext.Bookmarks";
ui_ext_Bookmarks.sync = function(bookmark) {
	if(bookmark.anchor == null) {
		return;
	}
	bookmark.row = bookmark.anchor.row;
	bookmark.col = bookmark.anchor.column;
};
ui_ext_Bookmarks.getStates = function() {
	var _this = ui_ext_Bookmarks.current;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var bm = _this[i];
		var tmp;
		if(bm == null) {
			tmp = null;
		} else {
			ui_ext_Bookmarks.sync(bm);
			tmp = { path : bm.path, row : bm.row, col : bm.col};
		}
		result[i] = tmp;
	}
	return result;
};
ui_ext_Bookmarks.setStates = function(arr) {
	ui_ext_Bookmarks.current = [];
	if(arr != null) {
		var _g_current = 0;
		while(_g_current < arr.length) {
			var _g_value = arr[_g_current];
			var _g_key = _g_current++;
			var bm;
			if(_g_value == null) {
				bm = null;
			} else {
				bm = { path : _g_value.path, row : _g_value.row, col : _g_value.col, doc : null, anchor : null, bookmarkName : "Bookmark " + (_g_key + 1)};
			}
			ui_ext_Bookmarks.current.push(bm);
		}
	}
};
ui_ext_Bookmarks.open = function(editor,index) {
	var bm = ui_ext_Bookmarks.current[index];
	if(bm == null) {
		return;
	}
	ui_ext_Bookmarks.sync(bm);
	ui_OpenDeclaration.openLookup(bm);
};
ui_ext_Bookmarks.bind = function(bm,doc,index) {
	bm.anchor = doc.createAnchor(bm.row,bm.col);
	bm.anchor.bookmarkName = bm.bookmarkName;
	bm.doc = doc;
	if(doc.gmlBookmarks == null) {
		doc.gmlBookmarks = [];
	}
	doc.gmlBookmarks.push(bm.anchor);
};
ui_ext_Bookmarks.toggle = function(editor,index) {
	var session = editor.getSession();
	var file = session.gmlFile;
	if(file == null) {
		return;
	}
	var lead = session.selection.lead;
	var curr = ui_ext_Bookmarks.current[index];
	var wantAdd = true;
	if(curr != null) {
		ui_ext_Bookmarks.sync(curr);
		wantAdd = curr.path != file.path || curr.row != lead.row;
		if(curr.anchor != null) {
			curr.anchor.detach();
			var doc = curr.anchor.getDocument();
			if(doc.gmlBookmarks != null) {
				HxOverrides.remove(doc.gmlBookmarks,curr.anchor);
			}
		}
	}
	if(wantAdd) {
		var doc = session.doc;
		var next = { path : file.path, row : lead.row, col : lead.column, doc : null, anchor : null, bookmarkName : "Bookmark " + (index + 1)};
		ui_ext_Bookmarks.bind(next,doc,index);
		ui_ext_Bookmarks.current[index] = next;
	} else {
		ui_ext_Bookmarks.current[index] = null;
	}
	editor.renderer.$gutterLayer.update(editor.renderer.layerConfig);
};
ui_ext_Bookmarks.onFileOpen = function(file) {
	var path = file.path;
	if(path == null) {
		return;
	}
	var session = file.getAceSession();
	if(session == null) {
		return;
	}
	var doc = session.doc;
	var _this = ui_ext_Bookmarks.current;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var _g_value = _this[_g_current];
		var _g_key = _g_current++;
		if(_g_value != null && _g_value.path == path) {
			ui_ext_Bookmarks.bind(_g_value,doc,_g_key);
		}
	}
};
ui_ext_Bookmarks.onFileClose = function(file) {
	if(file.path == null) {
		return;
	}
	var session = file.getAceSession();
	if(session == null) {
		return;
	}
	var doc = session.doc;
	var _g = 0;
	var _g1 = ui_ext_Bookmarks.current;
	while(_g < _g1.length) {
		var bm = _g1[_g];
		++_g;
		if(bm != null && bm.doc == doc) {
			ui_ext_Bookmarks.sync(bm);
			bm.anchor.detach();
			bm.anchor = null;
			bm.doc = null;
		}
	}
};
var ui_ext_GMLive = function() { };
$hxClasses["ui.ext.GMLive"] = ui_ext_GMLive;
ui_ext_GMLive.__name__ = "ui.ext.GMLive";
ui_ext_GMLive.check = function(code) {
	if(!ui_ext_GMLive.rxLive.test(code)) {
		return false;
	}
	var q = new parsers_GmlReader(code);
	var start = 0;
	var flush = function(till) {
		return ui_ext_GMLive.rxLive.test(q.source.substring(start,till));
	};
	while(q.get_loop()) {
		var p = q.pos;
		if(q.source.charCodeAt(q.pos++) == 47) {
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				if(flush(p)) {
					return true;
				}
				q.pos += 1;
				q.skipComment();
				start = q.pos;
				break;
			case 47:
				if(flush(p)) {
					return true;
				}
				q.skipLine();
				start = q.pos;
				break;
			}
		}
	}
	return flush(q.pos);
};
ui_ext_GMLive.update = function(path,has) {
	var item = ui_treeview_TreeView.find(true,{ path : path});
	if(item == null) {
		if(gml_Project.current.isGMS23) {
			var pair = tools_NativeArray.findFirst(yy_YyLoader.itemsToInsert,function(q) {
				return q.item.getAttribute("data-full-path") == path;
			});
			if(pair == null) {
				return;
			}
			item = pair.item;
		} else {
			return;
		}
	}
	if(has == item.hasAttribute(ui_ext_GMLive.attr)) {
		return;
	}
	if(has) {
		item.setAttribute(ui_ext_GMLive.attr,"");
	} else {
		item.removeAttribute(ui_ext_GMLive.attr);
	}
	if(parsers_GmlSeeker.itemsLeft <= 0) {
		var iter = item;
		var top = ui_treeview_TreeView.element;
		while(iter != null && iter != top) {
			if(iter.classList.contains("dir")) {
				if(!has) {
					if(iter.hasAttribute(ui_ext_GMLive.attr)) {
						if(iter.querySelector(".item[" + ui_ext_GMLive.attr + "]") == null) {
							iter.removeAttribute(ui_ext_GMLive.attr);
						}
					}
				} else {
					iter.setAttribute(ui_ext_GMLive.attr,"");
				}
			}
			iter = iter.parentElement;
		}
	}
};
ui_ext_GMLive.updateAll = function(force) {
	var all = ui_Preferences.current.showGMLive == 2;
	if(!all && !force) {
		return;
	}
	var _g = 0;
	var _g1 = ui_treeview_TreeView.element.querySelectorAll(".dir");
	while(_g < _g1.length) {
		var dir = _g1[_g];
		++_g;
		if(all && dir.querySelector(".item[" + ui_ext_GMLive.attr + "]") != null) {
			dir.setAttribute(ui_ext_GMLive.attr,"");
		} else {
			dir.removeAttribute(ui_ext_GMLive.attr);
		}
	}
};
var ui_liveweb_KLiveWeb = function() {
	file_kind_gml_KGmlScript.call(this);
	this.canLambda = false;
};
$hxClasses["ui.liveweb.KLiveWeb"] = ui_liveweb_KLiveWeb;
ui_liveweb_KLiveWeb.__name__ = "ui.liveweb.KLiveWeb";
ui_liveweb_KLiveWeb.__super__ = file_kind_gml_KGmlScript;
ui_liveweb_KLiveWeb.prototype = $extend(file_kind_gml_KGmlScript.prototype,{
	__class__: ui_liveweb_KLiveWeb
});
var ui_misc_DebugShowToken = function() { };
$hxClasses["ui.misc.DebugShowToken"] = ui_misc_DebugShowToken;
ui_misc_DebugShowToken.__name__ = "ui.misc.DebugShowToken";
ui_misc_DebugShowToken.initEditor = function(editor) {
	var mki = null;
	var handleHover = function(ev) {
		var sb = editor.statusBar;
		if(sb == null) {
			return;
		}
		var pos = editor.renderer.screenToTextCoordinates(ev.clientX,ev.clientY);
		pos.column++;
		if(mki != null) {
			editor.getSession().removeMarker(mki);
			mki = null;
		}
		var tk = editor.getSession().getTokenAt(pos.row,pos.column);
		if(tk == null) {
			sb.setText((pos == null ? "null" : "[Ln " + (pos.row + 1) + ", col " + (pos.column + 1) + "]") + " state: " + JSON.stringify(editor.getSession().getState(pos.row)));
			return;
		}
		pos.column = tk.start;
		mki = editor.getSession().addMarker(ace_extern_AceRange.fromTokenPos(tk,pos),"debugShowToken","text");
		sb.setText((pos == null ? "null" : "[Ln " + (pos.row + 1) + ", col " + (pos.column + 1) + "]") + " token: " + JSON.stringify(tk));
	};
	var enabled = false;
	var toggle = function() {
		enabled = !enabled;
		if(enabled) {
			editor.on("mousemove",handleHover);
		} else {
			editor.off("mousemove",handleHover);
			if(mki != null) {
				editor.getSession().removeMarker(mki);
				mki = null;
			}
		}
	};
	editor.debugShowToken = toggle;
};
var ui_preferences_PrefApp = function() { };
$hxClasses["ui.preferences.PrefApp"] = ui_preferences_PrefApp;
ui_preferences_PrefApp.__name__ = "ui.preferences.PrefApp";
ui_preferences_PrefApp.build = function(out) {
	if(Electron_API == null) {
		return;
	}
	out = ui_Preferences.addGroup(out,"Application");
	ui_Preferences.addIntInput(out,"Default window width",ui_Preferences.current.app.windowWidth,function(v) {
		ui_Preferences.current.app.windowWidth = v;
		Electron_IPC.send("resize-window",v,null);
		ui_Preferences.save();
	});
	ui_Preferences.addIntInput(out,"Default window height",ui_Preferences.current.app.windowHeight,function(v) {
		ui_Preferences.current.app.windowHeight = v;
		Electron_IPC.send("resize-window",null,v);
		ui_Preferences.save();
	});
	ui_Preferences.addCheckbox(out,"Use native window border (requires restart)",ui_Preferences.current.app.windowFrame,function(v) {
		ui_Preferences.current.app.windowFrame = v;
		ui_Preferences.save();
	});
};
var ui_preferences_PrefBackups = function() { };
$hxClasses["ui.preferences.PrefBackups"] = ui_preferences_PrefBackups;
ui_preferences_PrefBackups.__name__ = "ui.preferences.PrefBackups";
ui_preferences_PrefBackups.build = function(out) {
	out = ui_Preferences.addGroup(out,"Backups");
	out.id = "pref-backups";
	ui_Preferences.addWiki(out,"https://github.com/GameMakerDiscord/GMEdit/wiki/Preferences#backups");
	ui_Preferences.addText(out,"Values are numbers of backup copies per file.");
	var _g = 0;
	var _g1 = gml_GmlVersion.list;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		var s = [v.name];
		switch(s[0]) {
		case "gmlivejs-v1":case "gmlivejs-v2":case "gmlivejs-v23":
			continue;
		}
		ui_Preferences.addIntInput(out,"for `" + v.label + "` projects",ui_Preferences.current.backupCount[s[0]],(function(s) {
			return function(n) {
				ui_Preferences.current.backupCount[s[0]] = n;
				ui_Preferences.save();
			};
		})(s));
	}
};
var ui_preferences_PrefCode = function() { };
$hxClasses["ui.preferences.PrefCode"] = ui_preferences_PrefCode;
ui_preferences_PrefCode.__name__ = "ui.preferences.PrefCode";
ui_preferences_PrefCode.buildComp = function(out) {
	ui_Preferences.addCheckbox(out,"UK spelling",ui_Preferences.current.ukSpelling,function(z) {
		ui_Preferences.current.ukSpelling = z;
		gml_GmlAPI.ukSpelling = z;
		gml_GmlAPI.init();
		ui_Preferences.save();
	}).title = "Displays UK versions of function/variable names (e.g. draw_set_colour) in auto-completion when available.";
	ui_Preferences.addCheckbox(out,"Auto-complete keywords",ui_Preferences.current.compKeywords,function(z) {
		ui_Preferences.current.compKeywords = z;
		ui_Preferences.save();
	});
	var el = ui_Preferences.addInput(out,"API feature flags (comma-separated; spaces are trimmed; reload required)",ui_Preferences.current.apiFeatureFlags.join(", "),function(text) {
		text = text.trim();
		var flags;
		if(text == "") {
			flags = [];
		} else {
			var _this = text.split(",");
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i].trim();
			}
			flags = result;
		}
		ui_Preferences.current.apiFeatureFlags = flags;
		ui_Preferences.save();
	});
	el.title = "Seen as ^flag suffix in GM2022+ `fnames`." + "\nAdd flags if participating in feature betas.";
	var compMatchModes = ui_preferences_PrefMatchMode.names;
	el = ui_Preferences.addDropdown(out,"Auto-completion mode",compMatchModes[ui_Preferences.current.compMatchMode],compMatchModes,function(s) {
		ui_Preferences.current.compMatchMode = compMatchModes.indexOf(s);
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Preferences#auto-completion-mode");
	var optSnippets_0 = ["gml","gml_search","shader"];
	var optSnippets_1 = ["GML","Search results","Shaders"];
	var optSnippets_select = null;
	el = ui_Preferences.addDropdown(out,"Edit snippets","",optSnippets_1,function(name) {
		var mode = optSnippets_0[optSnippets_1.indexOf(name)];
		gml_file_GmlFile.openTab(new gml_file_GmlFile(mode + ".snippets",mode,file_kind_misc_KSnippets.inst));
		optSnippets_select.value = "";
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-snippets");
	optSnippets_select = el.querySelector("select");
	ui_Preferences.addCheckbox(out,"Don't offer snippets inside strings/comments/etc.",ui_Preferences.current.compFilterSnippets,function(z) {
		ui_Preferences.current.compFilterSnippets = z;
		ui_Preferences.save();
	});
};
ui_preferences_PrefCode.buildTooltips = function(out) {
	var tooltipKinds = ["None","Custom"];
	ui_Preferences.addDropdown(out,"Code tooltips",tooltipKinds[ui_Preferences.current.tooltipKind],tooltipKinds,function(s) {
		ui_Preferences.current.tooltipKind = tooltipKinds.indexOf(s);
		ui_Preferences.save();
	});
	ui_Preferences.addIntInput(out,"Code tooltip delay for mouse activity (ms; 0 to disable):",ui_Preferences.current.tooltipDelay,function(t) {
		ui_Preferences.current.tooltipDelay = t;
		ui_Preferences.save();
	});
	ui_Preferences.addIntInput(out,"Code tooltip delay for keyboard activity (ms; 0 to disable):",ui_Preferences.current.tooltipKeyboardDelay,function(t) {
		ui_Preferences.current.tooltipKeyboardDelay = t;
		ui_Preferences.save();
	});
};
ui_preferences_PrefCode.build = function(out) {
	out = ui_Preferences.addGroup(out,"Code editor");
	out.id = "pref-code";
	var el = ui_Preferences.addBigButton(out,"Code Editor Settings",function() {
		ace.config.loadModule("ace/ext/settings_menu",function(module) {
			module.init(Main.aceEditor);
			Main.aceEditor.showSettingsMenu();
		});
	});
	el.appendChild(document.createTextNode(" Font, size, word wrap, etc."));
	ui_Preferences.addBigButton(out,"Edit Keyboard Shortcuts",function() {
		editors_EditKeybindings.open();
	});
	ui_preferences_PrefCode.buildComp(ui_Preferences.addGroup(out,"Auto-completion"));
	ui_preferences_PrefCode.buildTooltips(ui_Preferences.addGroup(out,"Tooltips"));
	ui_Preferences.addCheckbox(out,"Auto-detect soft tabs",ui_Preferences.current.detectTab,function(z) {
		ui_Preferences.current.detectTab = z;
		ui_Preferences.save();
	}).title = "If enabled, will auto-detect whether to indent with tabs or spaces" + " based on whether the file has lines starting with either.";
	ui_Preferences.addCheckbox(out,"Allow changing code editor font size via Control+mouse wheel",ui_Preferences.current.ctrlWheelFontSize,function(z) {
		ui_Preferences.current.ctrlWheelFontSize = z;
		ui_Preferences.save();
	}).title = "If disabled, you can still use F7, F8, or code editor settings.";
	ui_Preferences.addCheckbox(out,"Show argument types in status bar",ui_Preferences.current.showArgTypesInStatusBar,function(z) {
		ui_Preferences.current.showArgTypesInStatusBar = z;
		ui_Preferences.save();
	});
	ui_Preferences.addCheckbox(out,"Highlight code inside hinted GML strings (e.g. /*gml*/@'return 1')",ui_Preferences.current.codeLiterals,function(z) {
		ui_Preferences.current.codeLiterals = z;
		ui_Preferences.save();
	}).title = "Supported modes: gml, hlsl, glsl." + "\nGMS2: use /*mode*/@'string'." + "\nGMS1: use /*mode*/'string'." + "\nAffects newly opened code tabs.";
};
var ui_preferences_PrefData = {};
ui_preferences_PrefData.defValue = function() {
	return { theme : "dark", ukSpelling : false, apiFeatureFlags : [], compMatchMode : 2, compKeywords : true, compFilterSnippets : true, argsMagic : true, argsFormat : "", argsStrict : false, importMagic : true, allowImportUndo : false, coroutineMagic : true, lambdaMagic : true, hyperMagic : true, mfuncMagic : true, nullCoalescingAssignment : true, castOperators : true, hashColorLiterals : true, arrowFunctions : true, showGMLive : 2, fileSessionTime : 7, projectSessionTime : 14, singleClickOpen : false, taskbarOverlays : false, assetThumbs : true, assetCache : false, clearAssetThumbsOnRefresh : true, codeLiterals : false, ctrlWheelFontSize : true, showArgTypesInStatusBar : false, fileChangeAction : 1, avoidYyChanges : false, closeTabsOnFileDeletion : true, backupCount : { v1 : 2, v2 : 0, live : 0}, recentProjectCount : 16, tabSize : 4, tabSpaces : true, detectTab : true, eventOrder : 1, assetOrder23 : 0, extensionAPIOrder : 1, tooltipDelay : 350, tooltipKeyboardDelay : 0, tooltipKind : 1, linterPrefs : { }, customizedKeybinds : { }, app : { windowWidth : 960, windowHeight : 720, windowFrame : false}, globalLookup : { matchMode : 2, maxCount : 100, initialWidth : 480, initialHeight : 384, initialFilters : { }}, chromeTabs : { minWidth : 50, maxWidth : 160, multiline : false, fitText : false, boxyTabs : false, flowAroundSystemButtons : false, autoHideCloseButtons : false, rowBreakAfterPinnedTabs : false, lockPinnedTabs : false, multilineStretchStyle : 1, idleTime : 0, pinLayers : false}};
};
var ui_preferences_PrefMatchMode = {};
var ui_preferences_PrefLinter = function() { };
$hxClasses["ui.preferences.PrefLinter"] = ui_preferences_PrefLinter;
ui_preferences_PrefLinter.__name__ = "ui.preferences.PrefLinter";
ui_preferences_PrefLinter.build = function(out,project) {
	out = ui_Preferences.addGroup(out,"Linter");
	if(project != null) {
		out.id = "project-properties-linter";
	} else {
		out.id = "pref-linter";
	}
	var opt;
	if(project != null) {
		opt = project.properties.linterPrefs;
		if(opt == null) {
			opt = project.properties.linterPrefs = { };
		}
	} else {
		opt = ui_Preferences.current.linterPrefs;
	}
	var saveOpt = function() {
		if(project != null) {
			ui_project_ProjectProperties.save(project,project.properties);
		} else {
			ui_Preferences.save();
		}
	};
	var aBool = function(name,get,set,defValue) {
		var initialValue = get(opt);
		if(project != null) {
			var options = ui_preferences_PrefLinter.selectOpts.slice();
			var values = ui_preferences_PrefLinter.selectVals;
			var parentValue = get(ui_Preferences.current.linterPrefs);
			if(parentValue == null) {
				parentValue = defValue;
			}
			options[0] += " (➜ " + (parentValue ? "on" : "off") + ")";
			if(initialValue == null) {
				initialValue = null;
			}
			return ui_Preferences.addDropdown(out,name,options[values.indexOf(initialValue)],options,function(s) {
				set(opt,values[options.indexOf(s)]);
				saveOpt();
			});
		} else {
			if(initialValue == null) {
				initialValue = defValue;
			}
			return ui_Preferences.addCheckbox(out,name,initialValue,function(z) {
				set(opt,z);
				saveOpt();
			});
		}
	};
	var aInt = function(name,get,set,defValue) {
		var initialValue = get(opt);
		if(project != null) {
			var parentValue = get(ui_Preferences.current.linterPrefs);
			if(parentValue == null) {
				parentValue = defValue;
			}
			var fd = null;
			var el = ui_Preferences.addInput(out,name,initialValue != null ? "" + initialValue : "",function(s) {
				var i;
				if(s == "") {
					fd.classList.remove("error");
					i = null;
				} else {
					i = Std.parseInt(s);
					if(i != null) {
						fd.classList.remove("error");
					} else {
						fd.classList.add("error");
						return;
					}
				}
				set(opt,i);
				saveOpt();
			});
			fd = el.querySelector("input");
			fd.placeholder = "" + parentValue;
			return el;
		} else {
			if(initialValue == null) {
				initialValue = defValue;
			}
			return ui_Preferences.addIntInput(out,name,initialValue,function(i) {
				set(opt,i);
				saveOpt();
			});
		}
	};
	var orig = out;
	out = ui_Preferences.addGroup(orig,"Behaviour");
	aBool("Syntax check on load",function(q) {
		return q.onLoad;
	},function(q,z) {
		q.onLoad = z;
	},parsers_linter_GmlLinterPrefs.defValue.onLoad);
	aBool("Syntax check on save",function(q) {
		return q.onSave;
	},function(q,z) {
		q.onSave = z;
	},parsers_linter_GmlLinterPrefs.defValue.onSave);
	out = ui_Preferences.addGroup(out,"Live update (experimental)");
	aInt("Run linter after a period of inactivity (in ms; 0 to disable)",function(q) {
		return q.liveIdleDelay;
	},function(q,z) {
		q.liveIdleDelay = z;
	},parsers_linter_GmlLinterPrefs.defValue.liveIdleDelay);
	aInt("Max lines per file for checks after periods of inactivity",function(q) {
		return q.liveIdleMaxLines;
	},function(q,z) {
		q.liveIdleMaxLines = z;
	},parsers_linter_GmlLinterPrefs.defValue.liveIdleMaxLines);
	aBool("Syntax check on pressing Enter",function(q) {
		return q.liveCheckOnEnter;
	},function(q,z) {
		q.liveCheckOnEnter = z;
	},parsers_linter_GmlLinterPrefs.defValue.liveCheckOnEnter);
	aBool("Syntax check on pressing `;`",function(q) {
		return q.liveCheckOnSemico;
	},function(q,z) {
		q.liveCheckOnSemico = z;
	},parsers_linter_GmlLinterPrefs.defValue.liveCheckOnSemico);
	aInt("Max lines per file for checks on Enter and `;`",function(q) {
		return q.liveMaxLines;
	},function(q,z) {
		q.liveMaxLines = z;
	},parsers_linter_GmlLinterPrefs.defValue.liveMaxLines);
	aInt("Minimum delay between checks (in ms)",function(q) {
		return q.liveMinDelay;
	},function(q,z) {
		q.liveMinDelay = z;
	},parsers_linter_GmlLinterPrefs.defValue.liveMinDelay);
	out = ui_Preferences.addGroup(orig,"Code style");
	aBool("Warn about missing semicolons",function(q) {
		return q.requireSemicolons;
	},function(q,z) {
		q.requireSemicolons = z;
	},parsers_linter_GmlLinterPrefs.defValue.requireSemicolons);
	aBool("Warn about single `=` comparisons",function(q) {
		return q.noSingleEquals;
	},function(q,z) {
		q.noSingleEquals = z;
	},parsers_linter_GmlLinterPrefs.defValue.noSingleEquals);
	aBool("Warn about conditions without ()",function(q) {
		return q.requireParentheses;
	},function(q,z) {
		q.requireParentheses = z;
	},parsers_linter_GmlLinterPrefs.defValue.requireParentheses);
	out = ui_Preferences.addGroup(orig,"Scripts and functions");
	aBool("Warn about missing functions",function(q) {
		return q.requireFunctions;
	},function(q,z) {
		q.requireFunctions = z;
	},parsers_linter_GmlLinterPrefs.defValue.requireFunctions);
	var el = aBool("Warn about trying to use result of a script/function with (supposedly) no returned values",function(q) {
		return q.checkHasReturn;
	},function(q,z) {
		q.checkHasReturn = z;
	},parsers_linter_GmlLinterPrefs.defValue.checkHasReturn);
	aBool("Warn about mismatched argument counts on user-defined scripts/functions",function(q) {
		return q.checkScriptArgumentCounts;
	},function(q,z) {
		q.checkScriptArgumentCounts = z;
	},parsers_linter_GmlLinterPrefs.defValue.checkScriptArgumentCounts);
	el = aBool("Add missing named arguments to JSDoc",function(q) {
		return q.addMissingArgsToJSDoc;
	},function(q,z) {
		q.addMissingArgsToJSDoc = z;
	},parsers_linter_GmlLinterPrefs.defValue.addMissingArgsToJSDoc);
	el.title = "If JSDoc lists fewer arguments than function() itself, they will be mixed together.";
	out = ui_Preferences.addGroup(orig,"Misc.");
	aBool("Warn about missing fields on a.b access",function(q) {
		return q.requireFields;
	},function(q,z) {
		q.requireFields = z;
	},parsers_linter_GmlLinterPrefs.defValue.requireFields);
	aBool("Allow implicitly casting Type? to Type",function(q) {
		return q.implicitNullableCasts;
	},function(q,z) {
		q.implicitNullableCasts = z;
	},parsers_linter_GmlLinterPrefs.defValue.implicitNullableCasts);
	aBool("Allow implicitly casting between bool and int",function(q) {
		return q.implicitBoolIntCasts;
	},function(q,z) {
		q.implicitBoolIntCasts = z;
	},parsers_linter_GmlLinterPrefs.defValue.implicitBoolIntCasts);
	aBool("Warn about redundant casts (e.g. for `4 as number`)",function(q) {
		return q.warnAboutRedundantCasts;
	},function(q,z) {
		q.warnAboutRedundantCasts = z;
	},parsers_linter_GmlLinterPrefs.defValue.warnAboutRedundantCasts);
	aBool("Treat scripts without @self as having `void` self",function(q) {
		return q.strictScriptSelf;
	},function(q,z) {
		q.strictScriptSelf = z;
	},parsers_linter_GmlLinterPrefs.defValue.strictScriptSelf);
	aBool("Only show Constructor.staticVars that have a @static JSDoc",function(q) {
		return q.strictStaticJSDoc;
	},function(q,z) {
		q.strictStaticJSDoc = z;
	},parsers_linter_GmlLinterPrefs.defValue.strictStaticJSDoc);
	out = ui_Preferences.addGroup(orig,"Block scoping");
	el = aBool("Treat `var` as block-scoped",function(q) {
		return q.blockScopedVar;
	},function(q,z) {
		q.blockScopedVar = z;
	},parsers_linter_GmlLinterPrefs.defValue.blockScopedVar);
	el.title = "You can also use `#macro const var` and `#macro let var`";
	el = aBool("Treat `case` as block-scoped",function(q) {
		return q.blockScopedCase;
	},function(q,z) {
		q.blockScopedCase = z;
	},parsers_linter_GmlLinterPrefs.defValue.blockScopedCase);
	el.title = "Allows cases to redefine block-scoped variables inside cases, but variables in fall-through cases will not be considered accessible in subsequent case(s)";
	out = ui_Preferences.addGroup(orig,"Implicit types");
	aBool("For `var`",function(q) {
		return q.specTypeVar;
	},function(q,z) {
		q.specTypeVar = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeVar);
	aBool("For `static`",function(q) {
		return q.specTypeStatic;
	},function(q,z) {
		q.specTypeStatic = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeStatic);
	aBool("For `let`",function(q) {
		return q.specTypeLet;
	},function(q,z) {
		q.specTypeLet = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeLet);
	aBool("For `const`",function(q) {
		return q.specTypeConst;
	},function(q,z) {
		q.specTypeConst = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeConst);
	aBool("For other `var` macros",function(q) {
		return q.specTypeMisc;
	},function(q,z) {
		q.specTypeMisc = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeMisc);
	el = aBool("When using := to assign",function(q) {
		return q.specTypeColon;
	},function(q,z) {
		q.specTypeColon = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeColon);
	el.title = "(idea stolen from Godot)";
	aBool("For simple instance/constructor variables (numbers, booleans, strings, `new`)",function(q) {
		return q.specTypeInst;
	},function(q,z) {
		q.specTypeInst = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeInst);
	el = aBool("Allow non-top-level assignments",function(q) {
		return q.specTypeInstSubTopLevel;
	},function(q,z) {
		q.specTypeInstSubTopLevel = z;
	},parsers_linter_GmlLinterPrefs.defValue.specTypeInstSubTopLevel);
	el.title = "May mis-fire on bracket-less `with` blocks and alike";
};
var ui_preferences_PrefMagic = function() { };
$hxClasses["ui.preferences.PrefMagic"] = ui_preferences_PrefMagic;
ui_preferences_PrefMagic.__name__ = "ui.preferences.PrefMagic";
ui_preferences_PrefMagic.build = function(out) {
	out = ui_Preferences.addGroup(out,"Syntax extensions");
	out.id = "pref-magic";
	var el;
	var gr = ui_Preferences.addGroup(out,"#args magic");
	ui_Preferences.addWiki(gr,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23args-magic");
	el = ui_Preferences.addCheckbox(gr,"Use `#args` magic",ui_Preferences.current.argsMagic,function(z) {
		ui_Preferences.current.argsMagic = z;
		ui_Preferences.save();
	});
	el.title = "Allows writing `#args a, b` instead of `var a = argument0, b = argument1`.";
	var noAutoArgs = "Don't auto-generate";
	el = ui_Preferences.addDropdown(gr,"JSDoc format for #args",ui_Preferences.current.argsFormat != "" ? ui_Preferences.current.argsFormat : noAutoArgs,[noAutoArgs,"@arg","@param","@argument"],function(v) {
		if(v == noAutoArgs) {
			v = "";
		}
		ui_Preferences.current.argsFormat = v;
		ui_Preferences.save();
	});
	el = ui_Preferences.addCheckbox(gr,"Strict mode",ui_Preferences.current.argsStrict,function(z) {
		ui_Preferences.current.argsStrict = z;
		ui_Preferences.save();
	});
	el.title = "Doesn't collapse arguments unless the format is binary identical.";
	el = ui_Preferences.addCheckbox(out,"Use `#import` magic",ui_Preferences.current.importMagic,function(z) {
		ui_Preferences.current.importMagic = z;
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23import-magic");
	el.title = "Allows setting up rules for shortening names per-script.";
	ui_Preferences.addCheckbox(out,"Allow undo-ing `#import`",ui_Preferences.current.allowImportUndo,function(z) {
		ui_Preferences.current.allowImportUndo = z;
		ui_Preferences.save();
	}).title = "Allows undoing name changes made after changing #import rules." + "\nMakes it easier to break code, so be careful.";
	el = ui_Preferences.addCheckbox(out,"Use `#mfunc` magic",ui_Preferences.current.mfuncMagic,function(z) {
		ui_Preferences.current.mfuncMagic = z;
		ui_Preferences.save();
	});
	el.title = "Allows C-style macros with arguments";
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23mfunc-magic");
	el = ui_Preferences.addCheckbox(out,"Use coroutine magic",ui_Preferences.current.coroutineMagic,function(z) {
		ui_Preferences.current.coroutineMagic = z;
		if(z) {
			synext_GmlExtCoroutines.ensureScript();
		}
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23gmcr-magic");
	el = ui_Preferences.addCheckbox(out,"Use lambda magic",ui_Preferences.current.lambdaMagic,function(z) {
		ui_Preferences.current.lambdaMagic = z;
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23lambda-magic");
	el = ui_Preferences.addCheckbox(out,"Use ??= operator",ui_Preferences.current.nullCoalescingAssignment,function(z) {
		ui_Preferences.current.nullCoalescingAssignment = z;
		ui_Preferences.save();
	});
	el.title = "Allows to write `a ??= b` instead of `if (a == undefined) a = b`";
	ui_Preferences.addWiki(el,"https://github.com/YellowAfterlife/GMEdit/wiki/Using-null-conditional-assignment");
	el = ui_Preferences.addCheckbox(out,"Use cast/as linter 'operators'",ui_Preferences.current.castOperators,function(z) {
		ui_Preferences.current.castOperators = z;
		ui_Preferences.save();
	});
	el.title = "Used for implicit/explicit casts";
	ui_Preferences.addWiki(el,"https://github.com/YellowAfterlife/GMEdit/wiki/Smart-completion#x-as-y");
	el = ui_Preferences.addCheckbox(out,"Use `#RrGgBb` color literals",ui_Preferences.current.hashColorLiterals,function(z) {
		ui_Preferences.current.hashColorLiterals = z;
		ui_Preferences.save();
	});
	el.title = "(as an alternative to usual 0xBbGgRr)";
	el = ui_Preferences.addCheckbox(out,"Use arrow function shorthands",ui_Preferences.current.arrowFunctions,function(z) {
		ui_Preferences.current.arrowFunctions = z;
		ui_Preferences.save();
	});
	el.title = "Lets you write (a, b) => c instead of function(a, b) { return c } and alike";
	ui_Preferences.addWiki(el,"https://github.com/YellowAfterlife/GMEdit/wiki/Using-arrow-functions");
	var optGMLive = ["Hide","Show on items","Show everywhere"];
	el = ui_Preferences.addDropdown(out,"Show GMLive badges",optGMLive[ui_Preferences.current.showGMLive],optGMLive,function(v) {
		var v0 = ui_Preferences.current.showGMLive;
		var v1 = optGMLive.indexOf(v);
		if(v0 == v1) {
			return;
		}
		ui_Preferences.current.showGMLive = v1;
		if(gml_Project.current.hasGMLive) {
			if(v0 > 0 != v1 > 0) {
				var _g = 0;
				var _g1 = ui_treeview_TreeView.element.querySelectorAll(".item");
				while(_g < _g1.length) {
					var el = _g1[_g];
					++_g;
					if(v1 > 0) {
						var data = parsers_GmlSeekData.map[el.getAttribute("data-full-path")];
						if(data != null) {
							if(data.hasGMLive) {
								el.setAttribute(ui_ext_GMLive.attr,"");
							} else {
								el.removeAttribute(ui_ext_GMLive.attr);
							}
						}
					} else {
						el.removeAttribute(ui_ext_GMLive.attr);
					}
				}
			}
			ui_ext_GMLive.updateAll(true);
		}
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/GMLive-in-GMEdit");
};
var ui_preferences_PrefMenu = function() { };
$hxClasses["ui.preferences.PrefMenu"] = ui_preferences_PrefMenu;
ui_preferences_PrefMenu.__name__ = "ui.preferences.PrefMenu";
ui_preferences_PrefMenu.build = function(out) {
	out.appendChild(document.createTextNode("(note: you can click on section headers to collapse/expand them)"));
	ui_preferences_PrefTheme.build(out);
	ui_preferences_PrefCode.build(out);
	ui_preferences_PrefNav.build(out);
	ui_preferences_PrefLinter.build(out,null);
	ui_preferences_PrefMagic.build(out);
	ui_preferences_PrefApp.build(out);
	ui_preferences_PrefBackups.build(out);
	ui_preferences_PrefPlugins.build(out);
	if(Electron_API != null) {
		var gr = ui_Preferences.addGroup(out,"Other useful things");
		var el = ui_Preferences.addButton(gr,"GML dialects directory",function() {
			Electron_Shell.openExternal(electron_FileWrap.userPath + "/api");
		});
		ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/GML-dialects");
		el = ui_Preferences.addButton(gr,"Reload GMEdit",function() {
			document.location.reload();
		});
		el.title = "Required when adding themes/plugins/dialects";
	}
};
var ui_preferences_PrefNav = function() { };
$hxClasses["ui.preferences.PrefNav"] = ui_preferences_PrefNav;
ui_preferences_PrefNav.__name__ = "ui.preferences.PrefNav";
ui_preferences_PrefNav.buildTreeview = function(out) {
	out = ui_Preferences.addGroup(out,"Treeview");
	out.dataset.outlineViewLabel = "Treeview";
	ui_Preferences.addCheckbox(out,"Open assets with single click",ui_Preferences.current.singleClickOpen,function(z) {
		ui_Preferences.current.singleClickOpen = z;
		ui_Preferences.save();
		gml_Project.current.reload();
	}).title = "Allows to open treeview items with single click";
	ui_Preferences.addCheckbox(out,"Show asset thumbnails",ui_Preferences.current.assetThumbs,function(z) {
		ui_Preferences.current.assetThumbs = z;
		ui_Preferences.save();
		gml_Project.current.reload();
	}).title = "Loads and displays the assigned sprites as object thumbnails in resource tree." + " Disabling this can improve memory use.";
	ui_Preferences.addCheckbox(out,"Clear asset thumbnails on refresh",ui_Preferences.current.clearAssetThumbsOnRefresh,function(z) {
		ui_Preferences.current.clearAssetThumbsOnRefresh = z;
		ui_Preferences.save();
	}).title = "Reloads asset thumbnails when refreshing (Ctrl+R) a project." + " Disabling this can improve refresh speeds" + " at cost of not reflecting any potential changes to sprites";
	var assetOrder23 = ["Custom order (as authored)","Ascending (A-Z)","Descdning (Z-A)"];
	ui_Preferences.addDropdown(out,"GMS2.3 asset order",assetOrder23[ui_Preferences.current.assetOrder23],assetOrder23,function(s) {
		ui_Preferences.current.assetOrder23 = assetOrder23.indexOf(s);
		ui_Preferences.save();
		gml_Project.current.reload();
	});
	return out;
};
ui_preferences_PrefNav.buildChromeTabs = function(out) {
	ui_preferences_PrefNavTabs.build(out);
};
ui_preferences_PrefNav.buildFiles = function(out) {
	out = ui_Preferences.addGroup(out,"File handling");
	out.dataset.outlineViewLabel = "";
	var eventOrder = ["As authored","By event type"];
	ui_Preferences.addDropdown(out,"GMS2 object event order",eventOrder[ui_Preferences.current.eventOrder],eventOrder,function(s) {
		ui_Preferences.current.eventOrder = eventOrder.indexOf(s);
		ui_Preferences.save();
	});
	var apiOrder = ["As authored","Alphabetical"];
	ui_Preferences.addDropdown(out,"\"Show extension API\" entry order",apiOrder[ui_Preferences.current.extensionAPIOrder],apiOrder,function(s) {
		ui_Preferences.current.extensionAPIOrder = apiOrder.indexOf(s);
		ui_Preferences.save();
	});
	ui_Preferences.addCheckbox(out,"Avoid changing YY files where possible",ui_Preferences.current.avoidYyChanges,function(z) {
		ui_Preferences.current.avoidYyChanges = z;
		ui_Preferences.save();
	}).title = "Does not overwrite files if changes only affect whitespace/field order.";
	var fileChangeActions = ["Do nothing","Ask what to do","Reload unless conflicting"];
	ui_Preferences.addDropdown(out,"If the source file changes",fileChangeActions[ui_Preferences.current.fileChangeAction],fileChangeActions,function(v) {
		ui_Preferences.current.fileChangeAction = fileChangeActions.indexOf(v);
		ui_Preferences.save();
	});
	ui_Preferences.addCheckbox(out,"Close associated tab(s) when deleting a resource in GMEdit",ui_Preferences.current.closeTabsOnFileDeletion,function(v) {
		ui_Preferences.current.closeTabsOnFileDeletion = v;
		ui_Preferences.save();
	});
	ui_Preferences.addCheckbox(out,"Cache assets in memory",ui_Preferences.current.assetCache,function(v) {
		ui_Preferences.current.assetCache = v;
		ui_Preferences.save();
	}).title = "Disabling this improves memory use at cost of longer project reloads";
	return out;
};
ui_preferences_PrefNav.buildRecent = function(out) {
	out = ui_Preferences.addGroup(out,"Recent files & sessions");
	out.dataset.outlineViewLabel = "";
	ui_Preferences.addFloatInput(out,"Keep file sessions for (days):",ui_Preferences.current.fileSessionTime,function(v) {
		ui_Preferences.current.fileSessionTime = v;
		ui_Preferences.save();
	});
	ui_Preferences.addFloatInput(out,"Keep project sessions for (days):",ui_Preferences.current.projectSessionTime,function(v) {
		ui_Preferences.current.projectSessionTime = v;
		ui_Preferences.save();
	});
	ui_Preferences.addIntInput(out,"Max recent project count:",ui_Preferences.current.recentProjectCount,function(v) {
		ui_Preferences.current.recentProjectCount = v;
		ui_Preferences.save();
	});
	ui_Preferences.addButton(out,"Clear recent projects",function() {
		ui_RecentProjects.clear();
	});
	return out;
};
ui_preferences_PrefNav.buildMisc = function(out) {
	out = ui_Preferences.addGroup(out,"Misc.");
	out.dataset.outlineViewLabel = "Misc.";
	ui_Preferences.addCheckbox(out,"Show taskbar overlays",ui_Preferences.current.taskbarOverlays,function(z) {
		ui_Preferences.current.taskbarOverlays = z;
		ui_Preferences.save();
		gml_Project.current.reload();
	}).title = "Shows GM version icon" + " (or `<project path>.taskbar-overlay.png`, if available)" + " over the GMEdit icon (Windows-only?)";
	if(Electron_API != null) {
		ui_Preferences.addInput(out,"Gmk-Splitter path (for converting GM≤8.1 projects)",ui_Preferences.current.gmkSplitPath,function(v) {
			ui_Preferences.current.gmkSplitPath = v;
			ui_Preferences.save();
		});
	}
};
ui_preferences_PrefNav.buildLookup = function(out) {
	out = ui_Preferences.addGroup(out,"Global lookup (default: Ctrl+T)");
	out.dataset.outlineViewLabel = "Global lookup";
	var compMatchModes = ui_preferences_PrefMatchMode.names;
	var el = ui_Preferences.addDropdown(out,"Auto-completion mode",compMatchModes[ui_Preferences.current.globalLookup.matchMode],compMatchModes,function(s) {
		ui_Preferences.current.globalLookup.matchMode = compMatchModes.indexOf(s);
		ui_Preferences.save();
	});
	el = ui_Preferences.addIntInput(out,"Maximum item count",ui_Preferences.current.globalLookup.maxCount,function(i) {
		if(i < 1) {
			i = 1;
		}
		ui_Preferences.current.globalLookup.maxCount = i;
		ui_Preferences.save();
	});
	el = ui_Preferences.addIntInput(out,"Initial width",ui_Preferences.current.globalLookup.initialWidth,function(i) {
		if(i < 160) {
			i = 1;
		}
		ui_Preferences.current.globalLookup.initialWidth = i;
		ui_Preferences.save();
	});
	el = ui_Preferences.addIntInput(out,"Initial height",ui_Preferences.current.globalLookup.initialHeight,function(i) {
		if(i < 160) {
			i = 1;
		}
		ui_Preferences.current.globalLookup.initialHeight = i;
		ui_Preferences.save();
	});
	el = ui_Preferences.addGroup(out,"Default filters");
	el.classList.add("collapsed");
	el.style.display = "flex";
	el.style.flexDirection = "column";
	var tmp = document.createElement("div");
	el.appendChild(tmp);
	tmp.outerHTML = ui_GlobalLookup.checkboxHTML;
	var opts = ui_Preferences.current.globalLookup.initialFilters;
	var _g = 0;
	var _g1 = el.querySelectorAll("input");
	while(_g < _g1.length) {
		var cb = [_g1[_g]];
		++_g;
		var opt = opts[cb[0].name];
		if(opt != null) {
			cb[0].checked = opt;
		}
		cb[0].addEventListener("change",(function(cb) {
			return function(_) {
				ui_Preferences.current.globalLookup.initialFilters[cb[0].name] = cb[0].checked;
				ui_Preferences.save();
			};
		})(cb));
	}
};
ui_preferences_PrefNav.build = function(out) {
	out = ui_Preferences.addGroup(out,"Navigation");
	out.id = "pref-navigation";
	ui_preferences_PrefNav.buildTreeview(out);
	ui_preferences_PrefNav.buildLookup(out);
	ui_preferences_PrefNav.buildFiles(out);
	ui_preferences_PrefNav.buildRecent(out);
	ui_preferences_PrefNav.buildChromeTabs(out);
	ui_preferences_PrefNav.buildMisc(out);
};
var ui_preferences_PrefNavTabs = function() { };
$hxClasses["ui.preferences.PrefNavTabs"] = ui_preferences_PrefNavTabs;
ui_preferences_PrefNavTabs.__name__ = "ui.preferences.PrefNavTabs";
ui_preferences_PrefNavTabs.build = function(out) {
	out = ui_Preferences.addGroup(out,"Tabs");
	out.dataset.outlineViewLabel = "Tabs";
	var syncOptions = function() {
		ui_Preferences.save();
		Object.assign(ui_ChromeTabs.impl.options,ui_Preferences.current.chromeTabs);
		ui_ChromeTabs.impl.layoutTabs();
	};
	var cur = ui_Preferences.current.chromeTabs;
	ui_Preferences.addIntInput(out,"Minimum width",cur.minWidth,function(v) {
		ui_Preferences.current.chromeTabs.minWidth = v;
		syncOptions();
	});
	ui_Preferences.addIntInput(out,"Maximum width",cur.maxWidth,function(v) {
		ui_Preferences.current.chromeTabs.maxWidth = v;
		syncOptions();
	});
	var el = ui_Preferences.addCheckbox(out,"Always use rectangular tabs",cur.boxyTabs,function(v) {
		ui_Preferences.current.chromeTabs.boxyTabs = v;
		syncOptions();
	});
	el.title = "Otherwise only uses rectangular tabs when multi-line";
	el = ui_Preferences.addCheckbox(out,"Auto-hide 'close' buttons",cur.autoHideCloseButtons,function(v) {
		ui_Preferences.current.chromeTabs.autoHideCloseButtons = v;
		tools_HtmlTools.setTokenFlag(ui_ChromeTabs.element.classList,"chrome-tabs-auto-hide-close-buttons",v);
		ui_ChromeTabs.impl.layoutTabs();
		ui_Preferences.save();
	});
	el = ui_Preferences.addCheckbox(out,"Lock pinned tabs",cur.lockPinnedTabs,function(v) {
		ui_Preferences.current.chromeTabs.lockPinnedTabs = v;
		tools_HtmlTools.setTokenFlag(ui_ChromeTabs.element.classList,"chrome-tabs-lock-pinned",v);
		ui_ChromeTabs.impl.layoutTabs();
		ui_Preferences.save();
	});
	el.title = "Hides 'close' buttons on pinned tabs and prevents them from being closed via keyboard shortcuts";
	ui_Preferences.addIntInput(out,"Mark tabs as 'idle' after (in seconds; 0 to disable)",cur.idleTime,function(t) {
		ui_Preferences.current.chromeTabs.idleTime = t;
		var _g = 0;
		var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab." + "chrome-tab-idle");
		while(_g < _g1.length) _g1[_g++].classList.remove("chrome-tab-idle");
		ui_ChromeTabs.idleTick();
		ui_Preferences.save();
	});
	var sub = ui_Preferences.addGroup(out,"Multi-line tabs");
	ui_Preferences.addCheckbox(sub,"Enable",cur.multiline,function(v) {
		ui_Preferences.current.chromeTabs.multiline = v;
		syncOptions();
	});
	ui_Preferences.addCheckbox(sub,"Set tab widths based on content",cur.fitText,function(v) {
		ui_Preferences.current.chromeTabs.fitText = v;
		tools_HtmlTools.setTokenFlag(ui_ChromeTabs.element.classList,"chrome-tabs-fit-text",v);
		syncOptions();
	});
	ui_Preferences.addCheckbox(sub,"New row after pinned tabs (Visual Studio style)",cur.rowBreakAfterPinnedTabs,function(v) {
		ui_Preferences.current.chromeTabs.rowBreakAfterPinnedTabs = v;
		syncOptions();
	});
	ui_Preferences.addCheckbox(sub,"Multiple tab pin layers (best used with above)",cur.pinLayers,function(v) {
		ui_Preferences.current.chromeTabs.pinLayers = v;
		syncOptions();
	});
	ui_Preferences.addCheckbox(sub,"Let the buttons flow around the system buttons",cur.flowAroundSystemButtons,function(v) {
		ui_Preferences.current.chromeTabs.flowAroundSystemButtons = v;
		syncOptions();
	});
	var fitToWidthOptions = ["Don't","Stretch all tabs (proportionally)","Stretch last tab (VSC style)"];
	ui_Preferences.addDropdown(sub,"Fit tabs to width on row overflow?",fitToWidthOptions[cur.multilineStretchStyle],fitToWidthOptions,function(s) {
		ui_Preferences.current.chromeTabs.multilineStretchStyle = fitToWidthOptions.indexOf(s);
		syncOptions();
	});
};
var ui_preferences_PrefPlugins = function() { };
$hxClasses["ui.preferences.PrefPlugins"] = ui_preferences_PrefPlugins;
ui_preferences_PrefPlugins.__name__ = "ui.preferences.PrefPlugins";
ui_preferences_PrefPlugins.makePluginItem = function(out,p) {
	var group = ui_Preferences.addGroup(out,"");
	var el = group.querySelector("legend");
	group.classList.add("plugin-info");
	group.setAttribute("for",p.name);
	var syncLabelState = null;
	var p_label = document.createElement("label");
	p_label.appendChild(document.createTextNode(p.name));
	el.appendChild(p_label);
	el.appendChild(document.createTextNode(" ("));
	el.append(ui_Preferences.createShellAnchor(p.dir,"open"));
	var p_conf = null;
	var p_reload = document.createElement("span");
	p_reload.appendChild(document.createTextNode("; "));
	p_reload.appendChild(ui_Preferences.createFuncAnchor("reload",function(_) {
		tools_HtmlTools.clearInner(p_conf);
		p.destroy();
		plugins_PluginManager.load(p.name,function(e) {
			p = plugins_PluginManager.pluginMap[p.name];
			syncLabelState();
		});
	}));
	el.append(p_reload);
	el.appendChild(document.createTextNode(")"));
	var p_desc = document.createElement("div");
	p_desc.classList.add("plugin-description");
	group.appendChild(p_desc);
	p_conf = document.createElement("div");
	p_conf.classList.add("plugin-settings");
	p_conf.setAttribute("for",p.name);
	group.appendChild(p_conf);
	var syncLabelState1 = function() {
		tools_HtmlTools.setTokenFlag(p_label.classList,"error",p.error != null);
		if(p.error != null) {
			p_label.style.pointerEvents = "";
			p_label.title = Std.string(p.error);
		} else {
			p_label.style.pointerEvents = "none";
		}
		tools_HtmlTools.setDisplayFlag(p_reload,p.data == null || p.data.cleanup != null);
		var desc = p.config.description;
		if(desc != null && desc.trim() == "") {
			desc = null;
		}
		if(desc != null) {
			tools_HtmlTools.setInnerText(p_desc,desc);
		}
	};
	syncLabelState = syncLabelState1;
	syncLabelState1();
};
ui_preferences_PrefPlugins.build = function(out) {
	out = ui_Preferences.addGroup(out,"Plugins");
	out.id = "pref-plugins";
	ui_Preferences.addText(out,"Currently loaded plugins:");
	var _g = 0;
	var _g1 = plugins_PluginManager.pluginList;
	while(_g < _g1.length) ui_preferences_PrefPlugins.makePluginItem(out,plugins_PluginManager.pluginMap[_g1[_g++]]);
	var el = out.querySelector("legend");
	el.appendChild(document.createTextNode(" ("));
	el.append(ui_Preferences.createShellAnchor("https://github.com/GameMakerDiscord/GMEdit/wiki/Using-plugins","wiki"));
	if(Electron_FS.existsSync != null) {
		el.appendChild(document.createTextNode("; "));
		el.append(ui_Preferences.createShellAnchor(electron_FileWrap.userPath + "/plugins","manage"));
	}
	el.appendChild(document.createTextNode(")"));
};
var ui_preferences_PrefTheme = function() { };
$hxClasses["ui.preferences.PrefTheme"] = ui_preferences_PrefTheme;
ui_preferences_PrefTheme.__name__ = "ui.preferences.PrefTheme";
ui_preferences_PrefTheme.build = function(out) {
	var themeList = ["default"];
	if(Electron_FS.existsSync == null) {
		themeList.push("dark");
		themeList.push("gms2");
	} else {
		var _g = 0;
		var _g1 = [haxe_io_Path.join([Main.modulePath,"themes"]),electron_FileWrap.userPath + "/themes"];
		while(_g < _g1.length) {
			var dir = _g1[_g];
			++_g;
			if(Electron_FS.existsSync(dir)) {
				var _g2 = 0;
				var _g3 = Electron_FS.readdirSync(dir);
				while(_g2 < _g3.length) {
					var name = _g3[_g2];
					++_g2;
					if(name == "default") {
						continue;
					}
					if(Electron_FS.existsSync(haxe_io_Path.join([dir,name,"config.json"]))) {
						themeList.push(name);
					}
				}
			}
		}
	}
	var fs = ui_Preferences.addRadios(out,"Theme",ui_Preferences.current.theme,themeList,function(theme) {
		ui_Preferences.current.theme = theme;
		ui_Theme.set_current(theme);
		ui_Preferences.save();
	});
	ui_Preferences.addGroupToggle(fs);
	fs.id = "pref-theme";
	var lg = fs.querySelector("legend");
	lg.appendChild(document.createTextNode(" ("));
	lg.append(ui_Preferences.createShellAnchor("https://github.com/GameMakerDiscord/GMEdit/wiki/Using-themes","wiki"));
	if(Electron_FS.existsSync != null) {
		lg.appendChild(document.createTextNode("; "));
		lg.append(ui_Preferences.createShellAnchor(electron_FileWrap.userPath + "/themes","manage"));
	}
	lg.appendChild(document.createTextNode(")"));
};
var ui_project_ProjectProperties = function() { };
$hxClasses["ui.project.ProjectProperties"] = ui_project_ProjectProperties;
ui_project_ProjectProperties.__name__ = "ui.project.ProjectProperties";
ui_project_ProjectProperties.load = function(project) {
	var def = { };
	if(project.path == "") {
		return def;
	}
	var data = project.readConfigJsonFileSync("properties.json");
	if(data == null) {
		data = def;
	} else {
		var q = def;
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in q) {
		if(has.call(q,fd)) {
			if(Reflect.field(data,fd) == null) {
				data[fd] = Reflect.field(def,fd);
			}
		}
		}
	}
	return data;
};
ui_project_ProjectProperties.save = function(project,data) {
	project.writeConfigJsonFileSync("properties.json",data);
};
ui_project_ProjectProperties.buildCode = function(project,out) {
	var d = project.properties;
	var fs = ui_Preferences.addGroup(out,"Code editor (these take effect for newly opened editors)");
	fs.id = "project-properties-code";
	ui_Preferences.addInput(fs,"Indentation size override",d.indentSize != null ? "" + d.indentSize : "",function(s) {
		d.indentSize = Std.parseInt(s);
		ui_project_ProjectProperties.save(project,d);
	}).title = "Blank for default";
	var indentModes = ["default","tabs","spaces"];
	ui_Preferences.addRadios(fs,"Indentation mode override",indentModes[d.indentWithTabs == null ? 0 : d.indentWithTabs ? 1 : 2],indentModes,function(v) {
		d.indentWithTabs = v == indentModes[0] ? null : v == indentModes[1];
		ui_project_ProjectProperties.save(project,d);
	});
	var newLineModeDef = "auto-detect";
	ui_Preferences.addDropdown(fs,"New line mode override",d.newLineMode != null ? d.newLineMode : newLineModeDef,[newLineModeDef,"windows","unix"],function(s) {
		if(s == newLineModeDef) {
			s = null;
		}
		d.newLineMode = s;
		ui_project_ProjectProperties.save(project,d);
	});
};
ui_project_ProjectProperties.addGmlNameInput = function(out,legend,curr,fn) {
	var input = null;
	var rx = new RegExp("^[a-zA-Z_]\\w*$");
	var el = ui_Preferences.addInput(out,legend,((curr) || ("")),function(s) {
		s = s.trim();
		if(s == "") {
			s = null;
		} else if(!rx.test(s)) {
			input.classList.add("error");
			input.title = "Incorrect name format - expected a globalvar/macro/script name";
			return;
		}
		fn(s);
		if(s != null && gml_GmlAPI.gmlKind[s] == null) {
			input.classList.add("error");
			input.title = "Couldn't find script `" + s + "`.";
		} else {
			input.classList.remove("error");
			input.title = "";
		}
	});
	input = el.querySelector("input");
	if(curr != null && gml_GmlAPI.gmlKind[curr] == null) {
		input.classList.add("error");
	}
	return el;
};
ui_project_ProjectProperties.buildSyntax = function(project,out) {
	var d = project.properties;
	var fs = ui_Preferences.addGroup(out,"Syntax extensions");
	fs.id = "project-properties-syntax";
	var lambdaModes = ["Default (extension)","Compatible (extension macros)","Scripts (GMS2 only)"];
	var el = ui_Preferences.addRadios(fs,"#lambda mode",lambdaModes[((d.lambdaMode) || (0))],lambdaModes,function(s) {
		d.lambdaMode = lambdaModes.indexOf(s);
		ui_project_ProjectProperties.save(project,d);
	});
	if(project.version.config.projectModeId != 2) {
		el.querySelector("label:last-of-type input").disabled = true;
	}
	var argRegexInput = null;
	el = ui_Preferences.addRegexPatternInput(fs,"Regex for trimming argument name (e.g. `^_(\\w+)$`)",d.argNameRegex,function(s) {
		if(s != null) {
			try {
				new RegExp(s);
				argRegexInput.classList.remove("error");
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				argRegexInput.classList.add("error");
				electron_Dialog.showError("Invalid regexp: " + Std.string(_g1));
				return;
			}
		}
		d.argNameRegex = s;
		ui_project_ProjectProperties.save(project,d);
	});
	argRegexInput = el.querySelector("input");
	el = ui_Preferences.addRegexPatternInput(fs,"Regex for determining that instance/struct variables are private (e.g. `^_` for anything starting with an underscore)",d.privateFieldRegex,function(s) {
		d.privateFieldRegex = s;
		ui_project_ProjectProperties.save(project,d);
	});
	el = ui_Preferences.addRegexPatternInput(fs,"Regex for determining that global variables are private (e.g. `^_` for anything starting with an underscore)",d.privateGlobalRegex,function(s) {
		d.privateGlobalRegex = s;
		ui_project_ProjectProperties.save(project,d);
	});
	el = ui_project_ProjectProperties.addGmlNameInput(fs,"Template string script name",d.templateStringScript,function(s) {
		d.templateStringScript = s;
		gml_GmlAPI.forceTemplateStrings = s != null;
		ui_project_ProjectProperties.save(project,d);
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-template-strings");
	var ncGroup = ui_Preferences.addGroup(fs,"Null-conditional operators");
	ui_Preferences.addWiki(ncGroup,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-null-conditional-operators");
	ui_project_ProjectProperties.addGmlNameInput(ncGroup,"Setter script/function name",d.nullConditionalSet,function(s) {
		d.nullConditionalSet = s;
		ui_project_ProjectProperties.save(project,d);
	});
	ui_project_ProjectProperties.addGmlNameInput(ncGroup,"Value globalvar/macro name",d.nullConditionalVal,function(s) {
		d.nullConditionalVal = s;
		ui_project_ProjectProperties.save(project,d);
	});
};
ui_project_ProjectProperties.build = function(project,out) {
	ui_project_ProjectProperties.buildCode(project,out);
	ui_project_ProjectProperties.buildSyntax(project,out);
	ui_preferences_PrefLinter.build(out,project);
	plugins_PluginAPI._signal("projectPropertiesBuilt",{ project : project, target : out});
};
ui_project_ProjectProperties.open = function() {
	var kind = file_kind_misc_KProjectProperties.inst;
	var pj = gml_Project.current;
	var _g = 0;
	var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
	while(_g < _g1.length) {
		var tab = _g1[_g];
		++_g;
		if(tab.gmlFile.kind != kind) {
			continue;
		}
		if(tab.gmlFile.editor.project != pj) {
			continue;
		}
		tab.click();
		return tab.gmlFile;
	}
	return kind.create("Project properties",null,pj,null);
};
var ui_search_GlobalSeachData = function(opt) {
	this.saving = false;
	this.map = Object.create(null);
	this.list = [];
	this.options = opt;
};
$hxClasses["ui.search.GlobalSeachData"] = ui_search_GlobalSeachData;
ui_search_GlobalSeachData.__name__ = "ui.search.GlobalSeachData";
ui_search_GlobalSeachData.prototype = {
	sync: function(code) {
		var rx = ui_search_GlobalSeachData.sync_rx;
		rx.lastIndex = 0;
		var mt = rx.exec(code);
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) _g1[_g++].next = null;
		while(mt != null) {
			var items = this.map[mt[1]];
			if(items != null) {
				var nextRow = Std.parseInt(mt[2]) - 1;
				var _g = 0;
				while(_g < items.length) {
					var item = items[_g];
					++_g;
					var itemRow = item.row;
					if(itemRow == nextRow) {
						item.next = mt[3];
						break;
					} else if(itemRow > nextRow) {
						break;
					}
				}
			}
			mt = rx.exec(code);
		}
	}
	,save: function(file) {
		var _gthis = this;
		if(this.saving) {
			return false;
		}
		this.sync(file.codeEditor.session.getValue());
		var project = gml_Project.current;
		var version = project.version;
		var errors = "";
		this.saving = true;
		project.search(function(name,path,code) {
			var q = new parsers_GmlReader(code);
			var out = "";
			var ctxName = name;
			var ctxRowStart = 1;
			var start = 0;
			var flush = function(till) {
				var ctxItems = _gthis.map[ctxName];
				if(ctxItems == null || ctxItems.length == 0) {
					out += q.source.substring(start,till);
					return;
				}
				var ctxCode = q.source.substring(start,till);
				var ctxLen = till - start;
				var ctxStart = 0;
				var ctxRow = ctxRowStart - 2;
				var ctxSol = 0;
				var ctxEol = 0;
				var ctxNol = 0;
				var _g = 0;
				while(_g < ctxItems.length) {
					var item = ctxItems[_g];
					++_g;
					var ctxLine = null;
					var itemRow = item.row;
					while(ctxRow < itemRow) {
						ctxSol = ctxNol;
						ctxEol = ctxCode.indexOf("\n",ctxNol);
						if(ctxEol >= 0) {
							ctxNol = ctxEol + 1;
							if(ctxCode.charCodeAt(ctxEol - 1) == 13) {
								--ctxEol;
							}
						} else {
							ctxEol = ctxLen;
							ctxNol = ctxLen;
						}
						if(++ctxRow == itemRow) {
							ctxLine = ctxCode.substring(ctxSol,ctxEol);
						}
					}
					if(ctxLine == null) {
						errors += "// Can't update @[" + ctxName + ":" + (itemRow + 1) + "]: " + "End of code reached." + "\n";
						break;
					}
					out += ctxCode.substring(ctxStart,ctxSol);
					if(ctxLine == item.code) {
						if(item.next != null) {
							out += item.next;
						} else {
							out += ctxLine;
						}
					} else {
						out += ctxLine;
						if(item.next != item.code) {
							errors += "// Can't update @[" + ctxName + ":" + (itemRow + 1) + "]: " + "Source line changed - please verify manually." + "\n";
						}
					}
					ctxStart = ctxEol;
				}
				out += ctxCode.substring(ctxStart);
			};
			while(q.get_loop()) {
				var p = q.pos;
				var c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 35:
					if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
						var ctxNameNext = q.readContextName(name);
						if(ctxNameNext == null) {
							continue;
						}
						flush(p);
						ctxName = ctxNameNext;
						ctxRowStart = 0;
						q.skipLine();
						q.skipLineEnd();
						start = p;
					}
					break;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					}
					break;
				case 34:case 39:case 64:case 96:
					q.skipStringAuto(c,version);
					break;
				default:
				}
			}
			flush(q.pos);
			return out;
		},function() {
			_gthis.saving = false;
			var _g = 0;
			var _g1 = _gthis.list;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				item.code = item.next;
				item.next = null;
			}
			file.savePost();
			if(errors != "") {
				gml_file_GmlFile.openTab(new gml_file_GmlFile("save errors",null,file_kind_misc_KPlain.inst,errors));
			}
		},this.options);
		return true;
	}
	,__class__: ui_search_GlobalSeachData
};
var ui_search_GlobalSearchImpl = function() { };
$hxClasses["ui.search.GlobalSearchImpl"] = ui_search_GlobalSearchImpl;
ui_search_GlobalSearchImpl.__name__ = "ui.search.GlobalSearchImpl";
ui_search_GlobalSearchImpl.offsetToPos = function(code,till,rowStart) {
	var pos;
	if(till < rowStart) {
		pos = code.lastIndexOf("\n",till);
		return { column : till - (pos + 1), row : -1};
	}
	var row = 0;
	pos = code.indexOf("\n",rowStart);
	while(pos <= till && pos >= 0) {
		++row;
		rowStart = pos + 1;
		pos = code.indexOf("\n",rowStart);
	}
	return { column : till - rowStart, row : row};
};
ui_search_GlobalSearchImpl.run = function(opt,finish) {
	var pj = gml_Project.current;
	var version = pj.version;
	if(version == gml_GmlVersion.none) {
		return;
	}
	var showPaths = version.config.searchMode == "directory";
	var term;
	var rx;
	if(((opt.find) instanceof RegExp)) {
		rx = opt.find;
		if(!rx.global) {
			console.warn("This is not a /g regexp and you are potentially in trouble.");
		}
		term = rx.toString();
	} else {
		term = opt.find;
		var eterm = term.replace(tools_NativeString.escapeRx_1,"\\$1");
		var eopt = opt.matchCase ? "g" : "ig";
		if(opt.wholeWord) {
			if(/^\/\//.test(term)) {
				eterm += "$";
				eopt += "m";
			} else {
				if(/^\w/.test(term)) {
					eterm = "\\b" + eterm;
				}
				if(/\w$/.test(term)) {
					eterm += "\\b";
				}
			}
		}
		rx = new RegExp(eterm,eopt);
	}
	if(term == "") {
		return;
	}
	var results = "";
	var found = 0;
	var checkRefKind = opt.checkRefKind;
	var repl = opt.replaceBy;
	var filterFn = opt.findFilter;
	var lineFilter = opt.lineFilter;
	var ctxFilter = opt.headerFilter;
	var ctxFilterFn = typeof(ctxFilter) == "function" ? ctxFilter : null;
	var ctxFilterRx = ((ctxFilter) instanceof RegExp) ? ctxFilter : null;
	var allowDotPrefix = !opt.noDotPrefix;
	var isRepl = repl != null;
	var isReplFn = typeof(repl) == "function";
	var isPrev = opt.previewReplace;
	var saveData = new ui_search_GlobalSeachData(opt);
	var saveItems = saveData.list;
	var saveItem;
	var saveCtxItems;
	var canLambda = !pj.isGMS23 && ui_Preferences.current.lambdaMagic && (pj.lambdaGml != null || pj.properties.lambdaMode == 2) && opt.expandLambdas;
	var lambdaGml = null;
	pj.search(function(name,path,code) {
		var lambdaPre;
		if(canLambda) {
			lambdaPre = synext_GmlExtLambda.preInit(pj);
			lambdaPre.gml = lambdaGml;
			code = synext_GmlExtLambda.preImpl(code,lambdaPre);
			lambdaGml = lambdaPre.gml;
		} else {
			lambdaPre = null;
		}
		ui_GlobalSearch.currentPath = path;
		var q = new parsers_GmlReader(code);
		var start = 0;
		var ctxName = name;
		saveCtxItems = [];
		saveData.map[ctxName] = saveCtxItems;
		var ctxStart = 0;
		var ctxCheck;
		if(ctxFilterFn != null) {
			ctxCheck = ctxFilterFn(name,path);
		} else if(ctxFilterRx != null) {
			ctxCheck = ctxFilterRx.test(name);
		} else {
			ctxCheck = true;
		}
		var ctxLast = null;
		var out = isRepl ? "" : null;
		var replStart = 0;
		var flush = function(till) {
			if(!ctxCheck) {
				return;
			}
			var subc = q.source.substring(start,till);
			var mt = rx.exec(subc);
			while(mt != null) {
				var ofs = start + mt.index;
				var eol = code.indexOf("\n",ofs);
				if(eol >= 0) {
					if(code.charCodeAt(eol - 1) == 13) {
						--eol;
					}
				} else {
					eol = code.length;
				}
				var pos = ui_search_GlobalSearchImpl.offsetToPos(code,ofs,ctxStart);
				var sol = ofs - pos.column;
				var line = code.substring(sol,eol);
				var ctxLink = ctxName;
				if(showPaths) {
					ctxLink = path + "(" + ctxLink + ")";
				}
				ctxLink += ":" + (pos.row + 1);
				if(isRepl || ctxLink != ctxLast) {
					var curr = mt.length > 1 ? mt : mt[0];
					if((allowDotPrefix || !tools_GmlCodeTools.isDotAccessBacktrack(code,ofs)) && (filterFn == null || filterFn(curr)) && (lineFilter == null || lineFilter(line))) {
						saveItem = { row : pos.row, code : line, next : null};
						saveItems.push(saveItem);
						saveCtxItems.push(saveItem);
						ctxLast = ctxLink;
						var head = "\n\n// in @[" + ctxLink + "]";
						if(checkRefKind) {
							var mtEnd = ofs + mt[0].length;
							if(ctxName.endsWith("(properties)")) {
								head += " (properties)";
							} else if(line.startsWith("#event collision:")) {
								head += " (collision)";
							} else {
								head += " (" + tools_GmlReferenceKind.toFullString(tools_GmlCodeTools.getReferenceKind(q.source,ofs,mtEnd)) + ")";
							}
						}
						head += ":\n" + line;
						if(isRepl) {
							var next;
							if(isReplFn) {
								next = repl(curr,{ ctx : ctxName, row : pos.row});
							} else if(mt.length > 1) {
								var li = rx.lastIndex;
								next = mt[0].replace(rx,repl);
								rx.lastIndex = li;
							} else {
								next = repl;
							}
							out += q.source.substring(replStart,ofs) + next;
							replStart = ofs + mt[0].length;
							if(mt[0] != next) {
								results += head + "\n" + code.substring(sol,ofs) + next + code.substring(replStart,eol);
							}
						} else {
							results += head;
						}
						found += 1;
					}
				}
				mt = rx.exec(subc);
			}
		};
		while(q.get_loop()) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					if(q.source.substr(p,6) == "#macro") {
						if(!opt.checkMacros) {
							q.skipLine();
							q.skipLineEnd();
							start = q.pos;
						}
					} else {
						var ctxNameNext = q.readContextName(name);
						if(ctxNameNext == null) {
							continue;
						}
						flush(p);
						ctxName = ctxNameNext;
						q.skipLine();
						q.skipLineEnd();
						ctxStart = q.pos;
						if(ctxFilterFn != null) {
							ctxCheck = ctxFilterFn(ctxName,path);
						} else if(ctxFilterRx != null) {
							ctxCheck = ctxFilterRx.test(ctxName);
						} else {
							ctxCheck = true;
						}
						saveCtxItems = [];
						if(opt.checkHeaders) {
							start = p;
							flush(q.pos);
						}
						saveData.map[ctxName] = saveCtxItems;
						start = q.pos;
					}
				}
				break;
			case 36:
				if(!opt.checkStrings && (q.source.charCodeAt(q.pos) == 34 && version.hasQuoteTemplateStrings())) {
					q.pos += 1;
					q.skipStringTemplate(version,true);
					if(q.pos > p + 1) {
						flush(p);
						start = q.pos;
					}
				}
				break;
			case 47:
				if(!opt.checkComments) {
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						flush(p);
						q.pos += 1;
						q.skipComment();
						start = q.pos;
						break;
					case 47:
						flush(p);
						q.skipLine();
						start = q.pos;
						break;
					}
				}
				break;
			case 34:case 39:case 64:case 96:
				if(!opt.checkStrings) {
					q.skipStringAuto(c,version);
					if(q.pos > p + 1) {
						flush(p);
						start = q.pos;
					}
				}
				break;
			}
		}
		flush(q.pos);
		if(isRepl) {
			out += q.source.substring(replStart,q.length);
			if(canLambda && !isPrev && (canLambda && !isPrev && (out.indexOf("#lambda") != -1 || out.indexOf("#lamdef") != -1) || lambdaPre.list.length > 0)) {
				var lambdaPost = synext_GmlExtLambda.postInit(name,pj,lambdaPre.list,lambdaPre.map);
				out = synext_GmlExtLambda.postImpl(out,lambdaPost);
				if(out == null) {
					var e = "Failed to update #lambda in " + name + ": " + synext_GmlExtLambda.errorText;
					opt.errors = opt.errors == null ? e : opt.errors + "\n" + e;
				}
			}
		}
		if(isRepl && !isPrev) {
			return out;
		} else {
			return null;
		}
	},function() {
		if(finish != null) {
			finish();
		}
		var name;
		if(checkRefKind) {
			name = "references";
		} else if(!isRepl) {
			name = "search";
		} else if(isPrev) {
			name = "preview";
		} else {
			name = "replace";
		}
		name += ": " + term;
		var head = "// " + found + " result";
		if(found != 1) {
			head += "s";
		}
		if(isRepl) {
			if(isPrev) {
				head += " would be replaced";
			} else {
				head += " replaced";
			}
		} else {
			head += " found";
		}
		results = head + ":" + results;
		if(opt.results != null && opt.results.trimRight() != "") {
			results = opt.results + "\n" + results;
		}
		if(opt.errors != null) {
			results = "/* Errors:\n" + opt.errors + "\n*/\n" + results;
		}
		var file = new gml_file_GmlFile(name,null,file_kind_gml_KGmlSearchResults.inst,results);
		if(!isRepl) {
			file.searchData = saveData;
		}
		gml_file_GmlFile.openTab(file);
		window.setTimeout(function() {
			Main.aceEditor.focus();
		});
	},opt);
};
var ui_treeview_TreeView = function() { };
$hxClasses["ui.treeview.TreeView"] = ui_treeview_TreeView;
ui_treeview_TreeView.__name__ = "ui.treeview.TreeView";
ui_treeview_TreeView.clear = function() {
	ui_treeview_TreeView.element.innerHTML = "";
	ui_treeview_TreeView.element.removeAttribute("data-filter");
	var sheet = ui_treeview_TreeView.thumbSheet;
	var rules = sheet.cssRules;
	var i = rules.length;
	while(--i >= 0) sheet.deleteRule(i);
	ui_treeview_TreeView.thumbMap = Object.create(null);
};
ui_treeview_TreeView.find = function(item,query) {
	var qjs = "." + (item ? "item" : "dir");
	if(query.extra != null) {
		qjs += "." + query.extra;
	}
	var value = query.ident;
	if(value != null) {
		qjs += "[" + "data-ident" + "=\"" + value.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	var value = query.path;
	if(value != null) {
		qjs += "[" + "data-full-path" + "=\"" + StringTools.replace(value,"\\","/").replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	var value = query.kind;
	if(value != null) {
		qjs += "[" + "data-kind" + "=\"" + value.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	var value = query.rel;
	if(value != null) {
		qjs += "[" + "data-rel-path" + "=\"" + StringTools.replace(value,"\\","/").replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	return ui_treeview_TreeView.element.querySelector(qjs);
};
ui_treeview_TreeView.isDirectory = function(el) {
	return el.classList.contains("dir");
};
ui_treeview_TreeView.hasThumb = function(itemPath) {
	var item = ui_treeview_TreeView.find(true,{ path : itemPath});
	if(item != null) {
		return item.hasAttribute("data-thumb");
	} else {
		return false;
	}
};
ui_treeview_TreeView.addThumbRule = function(itemPath,thumbPath) {
	ui_treeview_TreeView.thumbSheet.insertRule(".treeview .item[" + "data-full-path" + "=\"" + itemPath.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]::before {" + ("background-image: url(\"" + thumbPath.replace(tools_NativeString.escapeProp_1,"\\$1") + "\");") + "}",ui_treeview_TreeView.thumbSheet.cssRules.length);
};
ui_treeview_TreeView.setThumb = function(itemPath,thumbPath,item) {
	if(itemPath == null) {
		if(item != null) {
			itemPath = item.getAttribute("data-full-path");
		} else {
			return;
		}
	} else if(item == null) {
		item = ui_treeview_TreeView.find(true,{ path : itemPath});
	}
	ui_treeview_TreeView.resetThumb(itemPath,item);
	if(thumbPath == null) {
		return;
	}
	var addRule;
	if(item != null) {
		item.setAttribute("data-thumb",thumbPath);
		if(item.scrollHeight == 0) {
			item.setAttribute("data-thumb-delay","");
			addRule = false;
		} else {
			addRule = true;
		}
	} else {
		addRule = true;
	}
	if(addRule) {
		ui_treeview_TreeView.addThumbRule(itemPath,thumbPath);
	}
	ui_treeview_TreeView.thumbMap[itemPath] = thumbPath;
};
ui_treeview_TreeView.setThumbSprite = function(itemPath,spriteName,item) {
	if(itemPath == null) {
		if(item != null) {
			itemPath = item.getAttribute("data-full-path");
		} else {
			return;
		}
	} else if(item == null) {
		item = ui_treeview_TreeView.find(true,{ path : itemPath});
	}
	ui_treeview_TreeView.resetThumb(itemPath,item);
	if(spriteName == null) {
		return;
	}
	var addRule;
	if(item != null) {
		if(item.scrollHeight == 0) {
			item.setAttribute("data-thumb-sprite",spriteName);
			item.setAttribute("data-thumb-delay","");
			addRule = false;
		} else {
			addRule = true;
		}
	} else {
		addRule = true;
	}
	if(addRule) {
		gml_Project.current.getSpriteURLasync(spriteName,function(thumbPath) {
			ui_treeview_TreeView.resetThumb(itemPath,item);
			if(thumbPath == null) {
				return;
			}
			ui_treeview_TreeView.addThumbRule(itemPath,thumbPath);
			ui_treeview_TreeView.thumbMap[itemPath] = thumbPath;
			if(item != null) {
				item.setAttribute("data-thumb",thumbPath);
			}
		});
	}
};
ui_treeview_TreeView.resetThumb = function(itemPath,item) {
	if(itemPath == null) {
		if(item != null) {
			itemPath = item.getAttribute("data-full-path");
		} else {
			return;
		}
	} else if(item == null) {
		item = ui_treeview_TreeView.find(true,{ path : itemPath});
	}
	var prefix = ".treeview .item[" + "data-full-path" + "=\"" + itemPath.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]::before {";
	var sheet = ui_treeview_TreeView.thumbSheet;
	var rules = sheet.cssRules;
	var i = rules.length;
	while(--i >= 0) if(rules[i].cssText.indexOf(prefix) >= 0) {
		sheet.deleteRule(i);
	}
	if(item != null) {
		item.removeAttribute("data-thumb");
		item.removeAttribute("data-thumb-delay");
		item.removeAttribute("data-thumb-sprite");
	}
	delete ui_treeview_TreeView.thumbMap[itemPath];
};
ui_treeview_TreeView.ensureThumb = function(item) {
	if(!item.hasAttribute("data-thumb-delay")) {
		return;
	}
	item.removeAttribute("data-thumb-delay");
	if(item.hasAttribute("data-thumb-sprite")) {
		var spriteName = item.getAttribute("data-thumb-sprite");
		item.removeAttribute("data-thumb-sprite");
		gml_Project.current.getSpriteURLasync(spriteName,function(thumbPath) {
			if(thumbPath == null) {
				return;
			}
			var itemPath = item.getAttribute("data-full-path");
			ui_treeview_TreeView.addThumbRule(itemPath,thumbPath);
			ui_treeview_TreeView.thumbMap[itemPath] = thumbPath;
			item.setAttribute("data-thumb",thumbPath);
		});
	} else {
		ui_treeview_TreeView.addThumbRule(item.getAttribute("data-full-path"),item.getAttribute("data-thumb"));
	}
};
ui_treeview_TreeView.ensureThumbs = function(el) {
	var _g = 0;
	var _g1 = el.querySelectorAll(".item[" + "data-thumb-delay" + "]");
	while(_g < _g1.length) {
		var item = _g1[_g++];
		if(item.scrollHeight > 0) {
			ui_treeview_TreeView.ensureThumb(item);
		}
	}
};
ui_treeview_TreeView.handleDirClick = function(e) {
	e.preventDefault();
	var el = e.target;
	el = el.parentElement;
	if(e.altKey) {
		ui_treeview_TreeViewMenus.target = el;
		ui_treeview_TreeViewMenus.openCombined();
	} else {
		var cl = el.classList;
		if(!cl.contains("open")) {
			cl.add("open");
			ui_treeview_TreeView.ensureThumbs(el);
		} else {
			cl.remove("open");
		}
	}
};
ui_treeview_TreeView.handleDirCtxMenu = function(e) {
	e.preventDefault();
	var el = e.target;
	ui_treeview_TreeViewMenus.showDirMenu(el.parentElement,e);
};
ui_treeview_TreeView.handleItemCtxMenu = function(e) {
	e.preventDefault();
	ui_treeview_TreeViewMenus.showItemMenu(e.target,e);
};
ui_treeview_TreeView.makeDir = function(name) {
	var r = document.createElement("div");
	r.className = "dir is-empty";
	var header = document.createElement("div");
	header.className = "header";
	header.title = name;
	r.treeHeader = header;
	r.appendChild(header);
	var span = document.createElement("span");
	span.classList.add("label");
	span.appendChild(document.createTextNode(name));
	header.appendChild(span);
	var c = document.createElement("div");
	c.className = "items";
	r.treeItems = c;
	r.appendChild(c);
	var observer = new MutationObserver(function(records,observer) {
		var rcl = r.classList;
		if(rcl.contains("is-empty") != (c.children.length == 0)) {
			rcl.toggle("is-empty");
		}
	});
	observer.observe(c,{ childList : true});
	return r;
};
ui_treeview_TreeView.makeAssetDir = function(name,rel,filter) {
	rel = StringTools.replace(rel,"\\","/");
	var r = ui_treeview_TreeView.makeDir(name);
	var header = r.treeHeader;
	header.addEventListener("click",ui_treeview_TreeView.handleDirClick);
	header.addEventListener("contextmenu",ui_treeview_TreeView.handleDirCtxMenu);
	r.setAttribute("data-label",name);
	r.setAttribute("data-rel-path",rel);
	ui_treeview_TreeViewDnD.bind(header);
	if(filter != null) {
		r.setAttribute("data-filter",filter);
	}
	return r;
};
ui_treeview_TreeView.makeItem = function(name) {
	var r = document.createElement("div");
	r.className = "item";
	var span = document.createElement("span");
	span.appendChild(document.createTextNode(name));
	r.appendChild(span);
	r.title = name;
	return r;
};
ui_treeview_TreeView.handleItemClick = function(e,element,nav) {
	if(e != null) {
		e.preventDefault();
		if(element == null) {
			element = e.target;
		}
	} else if(element == null) {
		return null;
	}
	if(!element.classList.contains("item")) {
		return null;
	}
	var openAs = element.yyOpenAs;
	if(openAs != null) {
		if(nav == null) {
			nav = { kind : openAs};
		} else {
			nav.kind = openAs;
		}
	}
	return gml_file_GmlFile.open(element.innerText,element.getAttribute("data-full-path"),nav);
};
ui_treeview_TreeView.makeItemShared = function(name,path,kind) {
	var r = ui_treeview_TreeView.makeItem(name);
	r.setAttribute("data-full-path",StringTools.replace(path,"\\","/"));
	r.setAttribute("data-ident",name);
	if(kind != null) {
		r.setAttribute("data-kind",kind);
	}
	return r;
};
ui_treeview_TreeView.makeAssetItem = function(name,rel,path,kind) {
	rel = StringTools.replace(rel,"\\","/");
	var r = ui_treeview_TreeView.makeItem(name);
	r.setAttribute("data-full-path",StringTools.replace(path,"\\","/"));
	r.setAttribute("data-ident",name);
	if(kind != null) {
		r.setAttribute("data-kind",kind);
	}
	r.setAttribute("data-rel-path",rel);
	ui_treeview_TreeViewDnD.bind(r);
	var th = ui_treeview_TreeView.thumbMap[path];
	if(th != null) {
		r.setAttribute("data-thumb",th);
	}
	r.addEventListener(ui_Preferences.current.singleClickOpen ? "click" : "dblclick",ui_treeview_TreeView.handleItemClick);
	r.addEventListener("contextmenu",ui_treeview_TreeView.handleItemCtxMenu);
	return r;
};
ui_treeview_TreeView.insertSorted = function(dir,item) {
	var itemDir = item.classList.contains("dir");
	var assetOrder = ui_Preferences.current.assetOrder23;
	var itemOrder = 0;
	var itemName = null;
	if(assetOrder == 0) {
		itemOrder = item.yyOrder;
	} else {
		itemName = item.getAttribute(itemDir ? "data-label" : "data-ident");
	}
	var children = dir.treeItems.children;
	var i = -1;
	while(++i < children.length) {
		var ref = children[i];
		if(assetOrder == 0) {
			if(itemOrder < ref.yyOrder) {
				break;
			}
		} else {
			var refDir = ref.classList.contains("dir");
			if(refDir != itemDir) {
				if(itemDir) {
					break;
				} else {
					continue;
				}
			}
			var refName = ref.getAttribute(refDir ? "data-label" : "data-ident");
			if(assetOrder == 1) {
				if(itemName < refName) {
					break;
				}
			} else if(itemName > refName) {
				break;
			}
		}
	}
	if(children.length > 0) {
		dir.treeItems.insertBefore(item,children[i]);
	} else {
		dir.treeItems.appendChild(item);
	}
};
ui_treeview_TreeView.openProject = function(el) {
	if(!el.classList.contains("item")) {
		el = el.parentElement;
	}
	var path = el.getAttribute("data-full-path");
	if(Electron_FS.existsSync(path)) {
		gml_Project.open(path);
	} else if(gml_Project.current.path == "") {
		if(electron_Dialog.showMessageBox({ message : "Project is missing. Remove from recent project list?", buttons : ["Yes","No"], cancelId : 1}) == 0) {
			ui_RecentProjects.remove(path);
			el.parentElement.removeChild(el);
		}
	}
};
ui_treeview_TreeView.handleProjectClick = function(e) {
	e.preventDefault();
	ui_treeview_TreeView.openProject(e.target);
};
ui_treeview_TreeView.makeProject = function(name,path) {
	var r = ui_treeview_TreeView.makeItem(name);
	r.setAttribute("data-full-path",StringTools.replace(path,"\\","/"));
	r.setAttribute("data-ident",name);
	r.setAttribute("data-kind","project");
	r.title = path;
	r.addEventListener(ui_Preferences.current.singleClickOpen ? "click" : "dblclick",ui_treeview_TreeView.handleProjectClick);
	r.addEventListener("contextmenu",ui_treeview_TreeView.handleItemCtxMenu);
	return r;
};
ui_treeview_TreeView.showElement = function(item,flash) {
	if(flash) {
		var flashStep = 0;
		var flashInt = 0;
		var flashFunc = function() {
			if(flashStep % 2 == 0) {
				item.classList.add("show-in-treeview-flash");
			} else {
				item.classList.remove("show-in-treeview-flash");
			}
			if((flashStep += 1) >= 6) {
				window.clearInterval(flashInt);
			}
		};
		flashInt = window.setInterval(flashFunc,300);
	}
	var par = item;
	var check = false;
	do {
		if(par.classList.contains("dir") && !par.classList.contains("open")) {
			par.classList.add("open");
			check = true;
		}
		par = par.parentElement;
	} while(par != null && !par.classList.contains("treeview"));
	if(check && par != null) {
		ui_treeview_TreeView.ensureThumbs(par);
	}
	tools_HtmlTools.scrollIntoViewIfNeeded(item);
};
ui_treeview_TreeView.saveOpen = function() {
	var r = [];
	var _g = 0;
	var _g1 = ui_treeview_TreeView.element.querySelectorAll("." + "dir" + "." + "open");
	while(_g < _g1.length) r.push(_g1[_g++].getAttribute("data-rel-path"));
	ui_treeview_TreeView.openPaths = r;
};
ui_treeview_TreeView.restoreOpen = function(paths) {
	var paths1 = paths != null ? paths : ui_treeview_TreeView.openPaths;
	var el = ui_treeview_TreeView.element;
	var _g = 0;
	while(_g < paths1.length) {
		var dir = el.querySelector(".dir[" + "data-rel-path" + "=\"" + paths1[_g++].replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]");
		if(dir != null) {
			dir.classList.add("open");
			ui_treeview_TreeView.ensureThumbs(dir);
		}
	}
};
ui_treeview_TreeView.init = function() {
	ui_treeview_TreeView.element = document.querySelector(".treeview");
	if(ui_treeview_TreeView.element == null) {
		ui_treeview_TreeView.element = document.createElement("div");
	}
	ui_treeview_TreeView.thumbStyle = document.querySelector("#tree-thumbs");
	ui_treeview_TreeView.thumbSheet = ui_treeview_TreeView.thumbStyle.sheet;
	var EventEmitter = ace.require("ace/lib/event_emitter").EventEmitter;
	AceOOP.implement(ui_treeview_TreeView,EventEmitter);
};
ui_treeview_TreeView._emit = function(eventName,e) {
	console.error("EventEmitter is not hooked for TreeView!");
	return null;
};
ui_treeview_TreeView._signal = function(eventName,e) {
	console.error("EventEmitter is not hooked for TreeView!");
};
var ui_treeview_TreeViewDnD = function() { };
$hxClasses["ui.treeview.TreeViewDnD"] = ui_treeview_TreeViewDnD;
ui_treeview_TreeViewDnD.__name__ = "ui.treeview.TreeViewDnD";
ui_treeview_TreeViewDnD.update = function(el,order) {
	if(ui_treeview_TreeViewDnD.currEl == el && ui_treeview_TreeViewDnD.currOrder == order) {
		return;
	}
	if(ui_treeview_TreeViewDnD.currEl != null) {
		var el1 = ui_treeview_TreeViewDnD.currEl;
		var cl = ui_treeview_TreeViewDnD.currClass;
		window.setTimeout(function() {
			el1.classList.remove(cl);
		},50);
	}
	ui_treeview_TreeViewDnD.currEl = el;
	ui_treeview_TreeViewDnD.currOrder = order;
	var tmp;
	switch(order) {
	case -1:
		tmp = "drop-before";
		break;
	case 1:
		tmp = "drop-after";
		break;
	default:
		tmp = "drop-into";
	}
	ui_treeview_TreeViewDnD.currClass = tmp;
	if(ui_treeview_TreeViewDnD.currEl != null) {
		ui_treeview_TreeViewDnD.currEl.classList.add(ui_treeview_TreeViewDnD.currClass);
	}
};
ui_treeview_TreeViewDnD.prefixOf = function(rel) {
	var mt = ui_treeview_TreeViewDnD.prefixOf_rx.exec(rel);
	if(mt != null) {
		return mt[1];
	} else {
		return "";
	}
};
ui_treeview_TreeViewDnD.hasType = function(e,t) {
	var dtTypes = e.dataTransfer.types;
	if(dtTypes.indexOf) {
		return dtTypes.indexOf(t) >= 0;
	} else {
		return dtTypes.contains(t);
	}
};
ui_treeview_TreeViewDnD.bind = function(el) {
	var isDir = el.classList.contains("header");
	var dataElement = isDir ? el.parentElement : el;
	var rel = dataElement.getAttribute("data-rel-path");
	var prefix = ui_treeview_TreeViewDnD.prefixOf(rel).toLowerCase();
	var ownType = "text/gmedit-rel-path" + "=" + rel.toLowerCase();
	var ownPrefix = "text/gmedit-rel-prefix" + "=" + prefix;
	var v2 = gml_Project.current.version.config.projectModeId == 2;
	var v23 = v2 && !gml_Project.current.yyUsesGUID;
	if(v2 || ui_treeview_TreeViewDnD.rxCanDropTo.test(rel)) {
		var updateAuto = function(e) {
			var y = e.offsetY;
			var h = el.scrollHeight;
			var th = isDir ? 0.25 : 0.35;
			if(!v23 && !ui_treeview_TreeViewDnD.hasType(e,ownPrefix)) {
				ui_treeview_TreeViewDnD.update(null,0);
			} else if(y < h * th) {
				ui_treeview_TreeViewDnD.update(el,-1);
			} else if(y > h * (1 - th)) {
				ui_treeview_TreeViewDnD.update(el,1);
			} else {
				ui_treeview_TreeViewDnD.update(isDir && !ui_treeview_TreeViewDnD.hasType(e,ownType) ? el : null,0);
			}
		};
		el.addEventListener("dragover",function(e) {
			e.preventDefault();
			updateAuto(e);
		});
		el.addEventListener("dragleave",function(e) {
			ui_treeview_TreeViewDnD.update(null,0);
		});
		var dropRel = function(dst,rel,full,order) {
			var src = ui_treeview_TreeView.find(!rel.endsWith("/"),{ rel : rel});
			if(src == null) {
				if(full == null || !rel.startsWith("scripts")) {
					return;
				}
				if(order == 0 && !dst.classList.contains("dir")) {
					order = 1;
				}
				var p = new haxe_io_Path(full);
				p.ext = "gml";
				var gml = electron_FileWrap.readTextFileSync(p.toString());
				p.dir = null;
				p.ext = null;
				ui_treeview_TreeViewItemMenus.createImplBoth("script",order,dst,p.toString(),function(tvc) {
					tvc.gmlCode = gml;
					return tvc;
				});
				return;
			}
			if(src.classList.contains("header")) {
				src = src.parentElement;
			}
			var root = ui_treeview_TreeView.element;
			var par = dst;
			while(par != null && par != root) {
				if(par == src) {
					return;
				}
				par = par.parentElement;
			}
			var project = gml_Project.current;
			var d = ui_treeview_TreeViewItemMenus.getItemData(dst);
			var d2 = ui_treeview_TreeViewItemMenus.getItemData(src);
			var args = { prefix : d.prefix, plural : d.plural, single : d.single, chain : d.chain, last : d.last, tvDir : order != 0 ? dst.parentElement.parentElement : dst, tvRef : dst, srcChain : d2.chain, srcLast : d2.last, srcDir : src.parentElement.parentElement, srcRef : src, order : order, pj : project};
			var _g = project.version.config.projectModeId;
			if(_g != null) {
				switch(_g) {
				case 1:
					gmx_GmxManip.move(args);
					break;
				case 2:
					if(project.yyUsesGUID) {
						yy_v22_YyManipV22.move(args);
					} else {
						yy_YyManip.move(args);
					}
					break;
				default:
				}
			}
		};
		el.addEventListener("drop",function(e) {
			updateAuto(e);
			var dst = ui_treeview_TreeViewDnD.currEl;
			if(dst == null) {
				return;
			}
			if(dst.classList.contains("header")) {
				dst = dst.parentElement;
			}
			ui_treeview_TreeViewItemMenus.updatePrefix(dst);
			var order = ui_treeview_TreeViewDnD.currOrder;
			ui_treeview_TreeViewDnD.update(null,0);
			if(order > 0 && dst.classList.contains("dir") && dst.classList.contains("open")) {
				var dstItems = dst.treeItems;
				if(dstItems.children.length > 0) {
					dst = dstItems.children[0];
					order = -1;
				} else {
					order = 0;
				}
			}
			if(order != 0 && dst.parentElement == ui_treeview_TreeView.element) {
				return;
			}
			var rel = e.dataTransfer.getData("text/gmedit-rel-path");
			var full = e.dataTransfer.getData("text/gmedit-full-path");
			if(rel != null) {
				dropRel(dst,rel,full,order);
				return;
			}
		});
	}
	if((v2 ? ui_treeview_TreeViewDnD.rxCanDrag2 : ui_treeview_TreeViewDnD.rxCanDrag).test(rel)) {
		el.setAttribute("draggable","true");
		el.addEventListener("dragstart",function(e) {
			var dragRel = dataElement.getAttribute("data-rel-path");
			var dragFull = dataElement.getAttribute("data-full-path");
			var dragPrefix = ui_treeview_TreeViewDnD.prefixOf(dragRel).toLowerCase();
			e.dataTransfer.setData("text/gmedit-rel-path",dragRel);
			if(dragFull != null) {
				e.dataTransfer.setData("text/gmedit-full-path",dragFull);
			}
			e.dataTransfer.setData(ownType,"");
			e.dataTransfer.setData("text/gmedit-rel-prefix",dragPrefix);
			e.dataTransfer.setData(ownPrefix,"");
		});
	}
};
var ui_treeview__$TreeViewElement_TreeViewElementTools = function() { };
$hxClasses["ui.treeview._TreeViewElement.TreeViewElementTools"] = ui_treeview__$TreeViewElement_TreeViewElementTools;
ui_treeview__$TreeViewElement_TreeViewElementTools.__name__ = "ui.treeview._TreeViewElement.TreeViewElementTools";
ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeYyPathV23 = function(el) {
	if(el.classList.contains("dir")) {
		return ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeFolderPathV23(el);
	} else {
		return ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeResourcePathV23(el);
	}
};
ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeFolderPathV23 = function(el) {
	var rel = el.getAttribute("data-rel-path");
	if(rel.endsWith("/")) {
		return rel.substring(0,rel.length - 1) + ".yy";
	} else {
		return rel;
	}
};
ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeResourcePathV23 = function(el) {
	var path = el.getAttribute("data-rel-path");
	var pt = new haxe_io_Path(path);
	if(pt.ext == "gml") {
		pt.ext = "yy";
		path = pt.toString();
	}
	return path;
};
ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeParentDir = function(el) {
	var par = el.parentElement;
	if(par == null || !par.classList.contains("items")) {
		return null;
	}
	return par.parentElement;
};
ui_treeview__$TreeViewElement_TreeViewElementTools.setTreeText = function(el,s) {
	var header;
	if(el.classList.contains("dir")) {
		header = el.treeHeader;
	} else {
		header = el;
	}
	header.querySelector("span").innerText = s;
	return s;
};
ui_treeview__$TreeViewElement_TreeViewElementTools.showInlineTextbox = function(el,finishFunction) {
	var header;
	if(el.classList.contains("dir")) {
		header = el.treeHeader;
	} else {
		header = el;
	}
	var spanChild = header.firstElementChild;
	var oldDisplay = spanChild.style.display;
	el.draggable = false;
	spanChild.style.display = "none";
	var textInputElement = document.createElement("input");
	textInputElement.className = "inline-text-field";
	textInputElement.type = "text";
	textInputElement.value = header.textContent;
	if(header.hasChildNodes()) {
		header.insertBefore(textInputElement,header.firstChild);
	} else {
		header.appendChild(textInputElement);
	}
	textInputElement.select();
	var triggered = false;
	var wrappedFinishFunction = function() {
		if(triggered) {
			return;
		}
		triggered = true;
		textInputElement.remove();
		spanChild.style.display = oldDisplay;
		el.draggable = true;
		finishFunction(textInputElement.value);
	};
	textInputElement.addEventListener("focusout",wrappedFinishFunction);
	textInputElement.addEventListener("keyup",function(event) {
		if(event.keyCode == 13) {
			event.preventDefault();
			wrappedFinishFunction();
		}
		if(event.keyCode == 27) {
			event.preventDefault();
			textInputElement.value = "";
			wrappedFinishFunction();
		}
	});
};
var ui_treeview_TreeViewItemMenus = function() { };
$hxClasses["ui.treeview.TreeViewItemMenus"] = ui_treeview_TreeViewItemMenus;
ui_treeview_TreeViewItemMenus.__name__ = "ui.treeview.TreeViewItemMenus";
ui_treeview_TreeViewItemMenus.getItemData = function(el) {
	var par = el.parentElement;
	var isDir = el.classList.contains("dir");
	var filter = (isDir ? el : par.parentElement).getAttribute("data-filter");
	var root = ui_treeview_TreeView.element;
	var chain = [];
	while(par != null && par != root) {
		var d = par.getAttribute("data-label");
		if(d != null) {
			chain.unshift(d);
		}
		par = par.parentElement;
	}
	var name = el.getAttribute("data-ident");
	if(name == null) {
		name = el.getAttribute("data-label");
	}
	return { isDir : isDir, chain : chain, last : name, prefix : ui_treeview_TreeViewItemMenus.prefix, filter : filter, plural : ui_treeview_TreeViewItemMenus.prefix.substring(0,ui_treeview_TreeViewItemMenus.prefix.length - 1), single : ui_treeview_TreeViewItemMenus.prefix.substring(0,ui_treeview_TreeViewItemMenus.prefix.length - 2)};
};
ui_treeview_TreeViewItemMenus.updatePrefix = function(par) {
	var root = ui_treeview_TreeView.element;
	ui_treeview_TreeViewItemMenus.prefix = "unknown/";
	while(par != null && par != root) {
		if(par.classList.contains("dir")) {
			ui_treeview_TreeViewItemMenus.prefix = par.getAttribute("data-rel-path");
		}
		par = par.parentElement;
	}
	ui_treeview_TreeViewItemMenus.prefix = ui_treeview_TreeViewItemMenus.prefix.toLowerCase();
};
ui_treeview_TreeViewItemMenus.updateCreateMenu = function(dir) {
	ui_treeview_TreeViewItemMenus.updatePrefix(ui_treeview_TreeViewMenus.target);
	var v = gml_Project.current.version;
	if(v != gml_GmlVersion.none) {
		var supported = true;
		if(v.config.projectModeId == 1) {
			switch(ui_treeview_TreeViewItemMenus.prefix) {
			case "objects/":
				supported = true;
				break;
			case "scripts/":
				supported = true;
				break;
			case "shaders/":
				supported = true;
				break;
			default:
				supported = false;
			}
		}
		var _g = 0;
		var _g1 = ui_treeview_TreeViewMenus.items.manipOuter;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.id == "edit-tags") {
				if(gml_Project.current.isGMS23) {
					var rel = ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path");
					q.visible = dir || rel != null && rel.endsWith(".yy");
				} else {
					q.visible = false;
				}
			} else {
				q.visible = true;
			}
			q.enabled = supported;
		}
		var v23 = gml_Project.current.isGMS23;
		var _g = 0;
		var _g1 = ui_treeview_TreeViewMenus.items.manipCreate.submenu.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var only23 = item.yyOnlyV23;
			if(only23 != null) {
				item.visible = only23 == v23;
			}
		}
		var nonRoot = ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path").toLowerCase() != ui_treeview_TreeViewItemMenus.prefix;
		var _g = 0;
		var _g1 = ui_treeview_TreeViewMenus.items.manipNonRoot;
		while(_g < _g1.length) _g1[_g++].enabled = supported && nonRoot;
		var _g = 0;
		var _g1 = ui_treeview_TreeViewMenus.items.manipDirOnly;
		while(_g < _g1.length) _g1[_g++].enabled = supported && dir;
		ui_treeview_TreeViewMenus.items.manipDuplicate.enabled = supported && ui_treeview_TreeViewItemMenus.prefix == "scripts/" && !dir;
	} else {
		var _g = 0;
		var _g1 = ui_treeview_TreeViewMenus.items.manipOuter;
		while(_g < _g1.length) _g1[_g++].visible = false;
	}
};
ui_treeview_TreeViewItemMenus.insertImplTV = function(dir,ref,ntv,order,showInTree) {
	switch(order) {
	case -2:
		dir.treeItems.insertBefore(ntv,dir.treeItems.lastElementChild);
		if(showInTree != false) {
			dir.classList.add("open");
		}
		break;
	case -1:
		dir.treeItems.insertBefore(ntv,ref);
		break;
	case 1:
		var after = ref.nextElementSibling;
		if(after != null) {
			dir.treeItems.insertBefore(ntv,after);
		} else {
			dir.treeItems.appendChild(ntv);
		}
		break;
	default:
		dir.treeItems.appendChild(ntv);
		if(showInTree != false) {
			dir.classList.add("open");
		}
	}
};
ui_treeview_TreeViewItemMenus.createImplTV = function(q) {
	var name = q.name;
	var nrel = q.tvDir.getAttribute("data-rel-path") + name;
	var ntv;
	if(q.mkdir) {
		ntv = ui_treeview_TreeView.makeAssetDir(name,nrel + "/",q.kind);
		ntv.classList.add("open");
	} else {
		var pj = q.pj;
		if(pj == null) {
			pj = gml_Project.current;
		}
		ntv = ui_treeview_TreeView.makeAssetItem(name,nrel,pj.fullPath(q.npath),q.kind);
	}
	ui_treeview_TreeViewItemMenus.insertImplTV(q.tvDir,q.tvRef,ntv,q.order,q.showInTree);
	return ntv;
};
ui_treeview_TreeViewItemMenus.validate = function(s,tvDir,asDir,filter,kind) {
	if(asDir || filter == "file") {
		var _g = 0;
		var _g1 = tvDir.treeItems.children;
		while(_g < _g1.length) if(_g1[_g++].getAttribute("data-label") == s) {
			electron_Dialog.showError("Group already exists!");
			return false;
		}
		if(filter == "file") {
			if(new RegExp("[\\/*?\"<>|]").test(s)) {
				electron_Dialog.showError("Not a valid file name!");
				return false;
			}
		}
	} else {
		if(kind != "notes" && !new RegExp("^[a-zA-Z_]\\w*$").test(s)) {
			electron_Dialog.showError("Name contains illegal characters!");
			return false;
		}
		if(ui_treeview_TreeView.find(true,{ ident : s}) != null) {
			electron_Dialog.showError("Item already exists!");
			return false;
		}
	}
	return true;
};
ui_treeview_TreeViewItemMenus.createImplBoth = function(kind,order,dir,name,preproc) {
	if(typeof(kind) == "boolean") {
		kind = kind ? "dir" : "auto";
	}
	var d = ui_treeview_TreeViewItemMenus.getItemData(dir);
	var mkdir = kind == "dir";
	var tvDir = order != 0 ? dir.parentElement.parentElement : dir;
	if(!ui_treeview_TreeViewItemMenus.validate(name,tvDir,mkdir,d.filter,kind)) {
		return null;
	}
	var args = { prefix : d.prefix, plural : d.plural, single : d.single, tvDir : tvDir, tvRef : dir, chain : d.chain, last : d.last, name : name, kind : kind != "auto" && !mkdir ? kind : d.filter, order : order, mkdir : mkdir};
	if(preproc != null) {
		args = preproc(args);
		if(args == null) {
			return null;
		}
	}
	if(d.filter == "file") {
		try {
			var newRel = haxe_io_Path.join([tvDir.getAttribute("data-rel-path"),name]);
			if(mkdir) {
				gml_Project.current.mkdirSync(newRel);
			} else {
				gml_Project.current.writeTextFileSync(newRel,"");
			}
			args.npath = newRel;
			ui_treeview_TreeViewItemMenus.createImplTV(args);
			return args;
		} catch( _g ) {
			electron_Dialog.showError("Couldn't create the file: " + Std.string(haxe_Exception.caught(_g).unwrap()));
			return null;
		}
	}
	var pj = gml_Project.current;
	var _g = pj.version.config.projectModeId;
	if(_g == null) {
		electron_Dialog.showAlert("Can't create an item for this version!");
		return null;
	} else {
		switch(_g) {
		case 1:
			gmx_GmxManip.add(args);
			break;
		case 2:
			if(pj.yyUsesGUID) {
				yy_v22_YyManipV22.add(args);
			} else {
				yy_YyManip.add(args);
			}
			break;
		default:
			electron_Dialog.showAlert("Can't create an item for this version!");
			return null;
		}
	}
	return args;
};
ui_treeview_TreeViewItemMenus.createImpl = function(kind,order) {
	var dir = ui_treeview_TreeViewMenus.target;
	var targetData = ui_treeview_TreeViewItemMenus.getItemData(ui_treeview_TreeViewMenus.target);
	var targetTV = ui_treeview_TreeViewMenus.target;
	var mkdir = kind == "dir";
	var result = ui_treeview_TreeViewItemMenus.createImplTV({ prefix : targetData.prefix, plural : targetData.plural, single : targetData.single, tvDir : order == 0 ? targetTV : ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeParentDir(targetTV), tvRef : dir, chain : targetData.chain, last : targetData.last, name : "", kind : kind != "auto" && !mkdir ? kind : targetData.filter, order : order, mkdir : mkdir});
	result.setAttribute("data-rel-path","");
	result.setAttribute("data-full-path","");
	ui_treeview__$TreeViewElement_TreeViewElementTools.showInlineTextbox(result,function(name) {
		result.remove();
		if(name != "") {
			ui_treeview_TreeViewItemMenus.createImplBoth(kind,order,dir,name);
		}
	});
};
ui_treeview_TreeViewItemMenus.removeImpl = function() {
	var d = ui_treeview_TreeViewItemMenus.getItemData(ui_treeview_TreeViewMenus.target);
	var mode = null;
	var msg = "Are you sure you want to delete " + d.last + "?" + "\nThis cannot be undone!";
	if(gml_Project.current.isGMS23 && (ui_treeview_TreeViewMenus.target.classList.contains("item") || ui_treeview_TreeViewMenus.target.querySelector("." + "item") != null)) {
		if(Electron_API != null) {
			mode = electron_Dialog.showMessageBox({ message : msg, detail : "Cleaning up references is experimental and you should be using backups/source control.", buttons : ["Delete","Delete and clean up references","Cancel"], cancelId : 2});
		} else if(electron_Dialog.showConfirmWarn(msg)) {
			mode = electron_Dialog.showConfirmWarn("Would you also like to clean up references?\n\n" + "Cleaning up references is experimental and you should be using backups/source control.") ? 1 : 0;
		} else {
			mode = 2;
		}
	}
	if(mode == null) {
		mode = electron_Dialog.showConfirmWarn(msg) ? 0 : 2;
	}
	if(mode == 2) {
		return;
	}
	if(ui_treeview_TreeViewMenus.target.getAttribute("data-kind") == "extfile") {
		if(gml_Project.current.version.config.projectModeId == 2) {
			var tvDir = ui_treeview_TreeViewMenus.target.parentElement.parentElement;
			yy_shared_YyManipExtension.deleteFile(tvDir.getAttribute("data-full-path"),d.last);
			ui_treeview_TreeViewMenus.target.parentElement.removeChild(ui_treeview_TreeViewMenus.target);
		}
		return;
	}
	if(d.filter == "file") {
		try {
			var path0 = ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path");
			if(d.isDir) {
				gml_Project.current.rmdirSync(path0);
			} else {
				gml_Project.current.unlinkSync(path0);
			}
			ui_treeview_TreeViewMenus.target.parentElement.removeChild(ui_treeview_TreeViewMenus.target);
		} catch( _g ) {
			electron_Dialog.showError("Couldn't remove item: " + Std.string(haxe_Exception.caught(_g).unwrap()));
		}
		return;
	}
	var args = { prefix : d.prefix, plural : d.plural, single : d.single, chain : d.chain, last : d.last, tvDir : ui_treeview_TreeViewMenus.target.parentElement.parentElement, tvRef : ui_treeview_TreeViewMenus.target, cleanRefs : mode == 1};
	var project = gml_Project.current;
	var vi = project.version.config.projectModeId;
	if(vi == null) {
		electron_Dialog.showAlert("Can't remove an item for this version!");
	} else {
		switch(vi) {
		case 1:
			gmx_GmxManip.remove(args);
			break;
		case 2:
			if(project.yyUsesGUID) {
				yy_v22_YyManipV22.remove(args);
			} else {
				yy_YyManip.remove(args);
			}
			break;
		default:
			electron_Dialog.showAlert("Can't remove an item for this version!");
		}
	}
};
ui_treeview_TreeViewItemMenus.editTagsImpl = function() {
	var e = ui_treeview_TreeViewMenus.target;
	var rel = e.getAttribute("data-rel-path");
	var dir = e.classList.contains("dir");
	if(dir && rel.endsWith("/")) {
		rel = rel.substring(0,rel.length - 1) + ".yy";
	}
	ui_TagEditor.show(rel,dir);
};
ui_treeview_TreeViewItemMenus.renameImpl = function() {
	var d = ui_treeview_TreeViewItemMenus.getItemData(ui_treeview_TreeViewMenus.target);
	ui_treeview__$TreeViewElement_TreeViewElementTools.showInlineTextbox(ui_treeview_TreeViewMenus.target,function(s) {
		if(s == d.last || s == "" || s == null) {
			return;
		}
		var el = ui_treeview_TreeViewMenus.target;
		var tvDir = ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeParentDir(el);
		var kind = el.classList.contains("dir") ? "dir" : el.getAttribute("data-kind");
		if(!ui_treeview_TreeViewItemMenus.validate(s,tvDir,d.isDir,d.filter,kind)) {
			return;
		}
		if(d.filter == "file") {
			try {
				var path0 = el.getAttribute("data-rel-path");
				var path1 = haxe_io_Path.join([haxe_io_Path.directory(path0),s]);
				gml_Project.current.renameSync(path0,path1);
				if(d.isDir) {
					gml_Project.current.reload();
				}
			} catch( _g ) {
				electron_Dialog.showError("Couldn't rename item: " + Std.string(haxe_Exception.caught(_g).unwrap()));
			}
			return;
		}
		var mode = 2;
		var dlgMode = 0;
		if(gml_Project.current.isGMS23) {
			switch(kind) {
			case "extension":case "notes":
				dlgMode = 1;
				break;
			default:
				dlgMode = 2;
			}
		}
		if(dlgMode > 0) {
			if(Electron_API != null) {
				var buttons = ["Rename, update references","Rename, update references and code","Just rename"];
				if(dlgMode == 1) {
					buttons.splice(1,1);
				}
				mode = electron_Dialog.showMessageBox({ message : "Would you like to rename references as well?", detail : "(experimental, make sure to have backups/version control)", buttons : buttons, cancelId : 2});
				if(mode == 1 && dlgMode == 1) {
					mode = 2;
				}
			} else {
				mode = electron_Dialog.showConfirm("Would you like to rename references as well?" + "\n" + "(experimental, make sure to have backups/version control)") ? 0 : 2;
			}
		}
		var args = { prefix : d.prefix, plural : d.plural, single : d.single, chain : d.chain, last : d.last, tvDir : tvDir, tvRef : el, name : s, kind : kind, patchRefs : mode < 2, patchCode : mode == 1};
		var project = gml_Project.current;
		var oldPath = el.getAttribute("data-full-path");
		var vi = project.version.config.projectModeId;
		if(vi == null) {
			electron_Dialog.showAlert("Can't rename an item for this version!");
		} else {
			switch(vi) {
			case 1:
				gmx_GmxManip.rename(args);
				break;
			case 2:
				if(project.yyUsesGUID) {
					yy_v22_YyManipV22.rename(args);
				} else {
					yy_YyManip.rename(args);
				}
				break;
			default:
				electron_Dialog.showAlert("Can't rename an item for this version!");
			}
		}
		var _g = 0;
		var _g1 = document.querySelectorAll(".chrome-tab");
		while(_g < _g1.length) {
			var chromeTab = _g1[_g++];
			if(chromeTab.gmlFile.path == oldPath) {
				chromeTab.gmlFile.rename(s,el.getAttribute("data-full-path"));
				var s1 = chromeTab.gmlFile.name;
				chromeTab.querySelector(".chrome-tab-title-text").innerText = s1;
				var s2 = chromeTab.gmlFile.context;
				chromeTab.setAttribute(ui_ChromeTabs.attrContext,s2);
			}
		}
	});
};
ui_treeview_TreeViewItemMenus.initCreateMenu = function() {
	var createMenu = new Electron_Menu();
	var orders = ["before","inside","after"];
	var _g = 0;
	while(_g < 3) {
		var orderInd = [_g++];
		var order = orders[orderInd[0]];
		var submenu = new Electron_Menu();
		var resourceTypes = ["sprite","sound","script","notes","shader","font","object"];
		if(ui_Preferences.current.assetOrder23 == 1) {
			resourceTypes.sort((function() {
				return function(a,b) {
					if(a < b) {
						return -1;
					} else {
						return 1;
					}
				};
			})());
		} else if(ui_Preferences.current.assetOrder23 == 2) {
			resourceTypes.sort((function() {
				return function(a,b) {
					if(a > b) {
						return -1;
					} else {
						return 1;
					}
				};
			})());
		}
		var _g1 = 0;
		while(_g1 < resourceTypes.length) {
			var pair = resourceTypes[_g1++].split("|");
			var kind = [pair[0]];
			var label = pair[1];
			if(label == null) {
				label = tools_NativeString.capitalize(kind[0]);
			}
			var silkIcon = "resource_" + kind[0] + "_add";
			ui_treeview_TreeViewMenus.add(submenu,{ id : "create-" + kind[0], label : label, icon : silkIcon != null ? Main.modulePath + ("/icons/silk/" + silkIcon + ".png") : null, click : (function(kind,orderInd) {
				return function() {
					ui_treeview_TreeViewItemMenus.createImpl(kind[0],orderInd[0] - 1);
				};
			})(kind,orderInd)});
		}
		var subitem = electron_MenuFallback.appendOpt(createMenu,{ id : "sub-" + order, label : "Item " + order, type : "submenu", submenu : submenu});
		subitem.yyOnlyV23 = true;
		(orderInd[0] == 1 ? ui_treeview_TreeViewMenus.items.manipDirOnly : ui_treeview_TreeViewMenus.items.manipNonRoot).push(subitem);
	}
	var onlyV23 = false;
	var addLinkV = function(menu,id,label,fn) {
		var r = ui_treeview_TreeViewMenus.add(menu,{ id : id, label : label, icon : null, click : fn});
		r.yyOnlyV23 = onlyV23;
		return r;
	};
	var kind1 = "auto";
	onlyV23 = false;
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(addLinkV(createMenu,"item" + "-before","Item" + " before",function() {
		ui_treeview_TreeViewItemMenus.createImpl(kind1,-1);
	}));
	ui_treeview_TreeViewMenus.items.manipDirOnly.push(addLinkV(createMenu,"item" + "-inside","Item" + " inside",function() {
		ui_treeview_TreeViewItemMenus.createImpl(kind1,0);
	}));
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(addLinkV(createMenu,"item" + "-after","Item" + " after",function() {
		ui_treeview_TreeViewItemMenus.createImpl(kind1,1);
	}));
	electron_MenuFallback.appendSep(createMenu,"sep-group");
	var kind2 = "dir";
	onlyV23 = null;
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(addLinkV(createMenu,"group" + "-before","Group" + " before",function() {
		ui_treeview_TreeViewItemMenus.createImpl(kind2,-1);
	}));
	ui_treeview_TreeViewMenus.items.manipDirOnly.push(addLinkV(createMenu,"group" + "-inside","Group" + " inside",function() {
		ui_treeview_TreeViewItemMenus.createImpl(kind2,0);
	}));
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(addLinkV(createMenu,"group" + "-after","Group" + " after",function() {
		ui_treeview_TreeViewItemMenus.createImpl(kind2,1);
	}));
	electron_MenuFallback.appendSep(createMenu,"sep-duplicate");
	var tmp = ui_treeview_TreeViewMenus.add(createMenu,{ id : "item-duplicate", label : "Duplicate", icon : null, click : function() {
		var dir = ui_treeview_TreeViewMenus.target;
		electron_Dialog.showPrompt("Name?",ui_treeview_TreeViewItemMenus.getItemData(dir).last,function(s) {
			if(s == "" || s == null) {
				return;
			}
			ui_treeview_TreeViewItemMenus.createImplBoth("auto",1,dir,s,function(c) {
				var fp = dir.getAttribute("data-full-path");
				if(haxe_io_Path.extension(fp) == "yy") {
					fp = haxe_io_Path.withExtension(fp,"gml");
				}
				try {
					c.gmlCode = electron_FileWrap.readTextFileSync(fp);
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					console.error("Error reading `" + fp + "`:",_g1);
					c.gmlCode = "";
				}
				return c;
			});
		});
	}});
	ui_treeview_TreeViewMenus.items.manipDuplicate = tmp;
	var createItem = new Electron_MenuItem({ id : "sub-create", label : "Create", icon : Main.modulePath + ("/icons/silk/" + "add" + ".png"), type : "submenu", submenu : createMenu});
	var removeItem = new Electron_MenuItem({ id : "remove", label : "Delete", icon : Main.modulePath + ("/icons/silk/" + "stop_close" + ".png"), click : ui_treeview_TreeViewItemMenus.removeImpl});
	var editTagsItem = new Electron_MenuItem({ id : "edit-tags", label : "Edit tags", icon : Main.modulePath + ("/icons/silk/" + "tag_blue" + ".png"), click : ui_treeview_TreeViewItemMenus.editTagsImpl});
	var renameItem = new Electron_MenuItem({ id : "rename", label : "Rename", icon : Main.modulePath + ("/icons/silk/" + "textfield_rename" + ".png"), click : ui_treeview_TreeViewItemMenus.renameImpl});
	ui_treeview_TreeViewMenus.items.manipCreate = createItem;
	ui_treeview_TreeViewMenus.items.manipOuter = [createItem,editTagsItem,renameItem,removeItem];
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(removeItem);
};
ui_treeview_TreeViewItemMenus.update = function(dir) {
	ui_treeview_TreeViewItemMenus.updateCreateMenu(dir);
};
ui_treeview_TreeViewItemMenus.init = function() {
	ui_treeview_TreeViewItemMenus.initCreateMenu();
};
var ui_treeview_TreeViewMenus = function() { };
$hxClasses["ui.treeview.TreeViewMenus"] = ui_treeview_TreeViewMenus;
ui_treeview_TreeViewMenus.__name__ = "ui.treeview.TreeViewMenus";
ui_treeview_TreeViewMenus.expandAll = function() {
	var cl = ui_treeview_TreeViewMenus.target.classList;
	if(!cl.contains("open")) {
		cl.add("open");
	}
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.target.querySelectorAll(".dir");
	while(_g < _g1.length) {
		cl = _g1[_g++].classList;
		if(!cl.contains("open")) {
			cl.add("open");
		}
	}
};
ui_treeview_TreeViewMenus.collapseAll = function() {
	var cl = ui_treeview_TreeViewMenus.target.classList;
	if(cl.contains("open")) {
		cl.remove("open");
	}
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.target.querySelectorAll(".dir");
	while(_g < _g1.length) {
		cl = _g1[_g++].classList;
		if(cl.contains("open")) {
			cl.remove("open");
		}
	}
};
ui_treeview_TreeViewMenus.openAll = function() {
	var found = 0;
	var els = ui_treeview_TreeViewMenus.target.querySelectorAll(".item");
	if(els.length < 50 || electron_Dialog.showMessageBox({ message : "Are you sure that you want to open " + els.length + " tabs?", buttons : ["Yes","No"], cancelId : 1}) == 0) {
		var _g = 0;
		while(_g < els.length) {
			var el = [els[_g++]];
			window.setTimeout((function(el) {
				return function() {
					gml_file_GmlFile.open(el[0].innerText,el[0].getAttribute("data-full-path"));
				};
			})(el),found * 50);
			++found;
		}
	}
};
ui_treeview_TreeViewMenus.openCombined = function() {
	var items = [];
	var mpath = "";
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.target.querySelectorAll(".item[" + "data-kind" + "=\"script\"]");
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		var path = item.getAttribute("data-full-path");
		if(mpath != "") {
			mpath += "|";
		}
		mpath += path;
		items.push({ name : item.getAttribute("data-ident"), path : path});
	}
	var name = ui_treeview_TreeViewMenus.target.querySelector(".header").innerText;
	gml_file_GmlFile.openTab(new gml_file_GmlFile(name,mpath,file_kind_gml_KGmlMultifile.inst,{ items : items, tvDir : ui_treeview_TreeViewMenus.target}));
};
ui_treeview_TreeViewMenus.openYyShader = function(ext) {
	var name = ui_treeview_TreeViewMenus.target.getAttribute("data-ident") + "." + ext;
	var path = ui_treeview_TreeViewMenus.target.getAttribute("data-full-path");
	path = haxe_io_Path.withoutExtension(path) + "." + ext;
	gml_file_GmlFile.open(name,path);
};
ui_treeview_TreeViewMenus.removeFromRecentProjects = function() {
	ui_RecentProjects.remove(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"));
	ui_treeview_TreeViewMenus.target.parentElement.removeChild(ui_treeview_TreeViewMenus.target);
};
ui_treeview_TreeViewMenus.changeIcon = function(opt) {
	var pj = gml_Project.current;
	var itemPath = ui_treeview_TreeViewMenus.target.getAttribute("data-full-path");
	var def = pj.path != "" ? pj.dir : haxe_io_Path.directory(itemPath);
	var path;
	if(!opt.reset) {
		var files = electron_Dialog.showOpenDialog({ title : "Hello", defaultPath : def, filters : [{ name : "Images", extensions : ["png"]},{ name : "All files", extensions : ["*"]}]});
		if(files == null || files[0] == null) {
			return;
		}
		path = files[0];
	} else {
		path = null;
	}
	if(pj.path != "") {
		ui_ProjectStyle.setItemThumb({ thumb : path, ident : ui_treeview_TreeViewMenus.target.getAttribute("data-ident"), kind : ui_treeview_TreeViewMenus.target.getAttribute("data-kind"), rel : ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path"), suffix : opt.open ? ".open" : ""});
	} else {
		var th = itemPath + ".png";
		if(path != null) {
			if(Electron_FS.copyFileSync == null) {
				Electron_FS.writeFileSync(th,Electron_FS.readFileSync(path));
			} else {
				Electron_FS.copyFileSync(path,th);
			}
			ui_treeview_TreeView.setThumb(itemPath,"file:///" + th + "?v=" + new Date().getTime());
		} else {
			if(Electron_FS.existsSync(th)) {
				Electron_FS.unlinkSync(th);
			}
			ui_treeview_TreeView.resetThumb(itemPath);
		}
	}
};
ui_treeview_TreeViewMenus.openHere = function() {
	gml_file_GmlFile.open(ui_treeview_TreeViewMenus.target.title,ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"),{ noExtern : true});
};
ui_treeview_TreeViewMenus.openExternal = function() {
	var path = ui_treeview_TreeViewMenus.target.getAttribute("data-full-path");
	if(path != null) {
		electron_FileWrap.openExternal(path);
	} else {
		gml_Project.current.openExternal(ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path"));
	}
};
ui_treeview_TreeViewMenus.openDirectory = function() {
	var path = ui_treeview_TreeViewMenus.target.getAttribute("data-full-path");
	if(path != null) {
		electron_FileWrap.showItemInFolder(path);
	} else {
		gml_Project.current.showItemInFolder(ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path"));
	}
};
ui_treeview_TreeViewMenus.openObjectInfo = function() {
	gml_GmlObjectInfo.showFor(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"),ui_treeview_TreeViewMenus.target.getAttribute("data-ident"));
};
ui_treeview_TreeViewMenus.findReferences = function() {
	ui_GlobalSearch.findReferences(ui_treeview_TreeViewMenus.target.getAttribute("data-ident"));
};
ui_treeview_TreeViewMenus.showAPI = function() {
	gml_GmlExtensionAPI.showFor(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"),ui_treeview_TreeViewMenus.target.getAttribute("data-ident"));
};
ui_treeview_TreeViewMenus.addExtensionFile = function() {
	var path = ui_treeview_TreeViewMenus.target.getAttribute("data-full-path");
	electron_Dialog.showOpenDialog({ properties : ["multiSelections"]},function(paths) {
		if(paths == null) {
			return;
		}
		var pj = gml_Project.current;
		if(pj.isGMS23 || pj.version.config.projectModeId == 2) {
			yy_shared_YyManipExtension.addFiles(ui_treeview_TreeViewMenus.target,path,paths);
		} else {
			gmx_GmxManip.addExtensionFile(path,paths);
		}
	});
};
ui_treeview_TreeViewMenus.showDirMenu = function(el,ev) {
	ui_treeview_TreeViewMenus.target = el;
	ui_treeview_TreeViewMenus.items.openAll.enabled = el.querySelector(".item") != null;
	ui_treeview_TreeViewMenus.items.openCombined.enabled = el.querySelector(".item[" + "data-kind" + "=\"script\"]") != null;
	ui_treeview_TreeViewMenus.items.changeOpenIcon.visible = true;
	ui_treeview_TreeViewMenus.items.resetOpenIcon.visible = true;
	ui_treeview_TreeViewMenus.items.openCustomCSS.visible = true;
	if(Electron_API != null) {
		var isFileDir = ui_treeview_TreeViewMenus.target.getAttribute("data-filter") == "file";
		var hasFullPath = ui_treeview_TreeViewMenus.target.hasAttribute("data-full-path");
		ui_treeview_TreeViewMenus.items.openExternally.visible = isFileDir || hasFullPath;
		ui_treeview_TreeViewMenus.items.openDirectory.visible = isFileDir || hasFullPath;
	}
	if(gml_Project.current.isGMS23) {
		var isExt = el.getAttribute("data-filter") == "extension";
		ui_treeview_TreeViewMenus.items.showAPI.visible = isExt;
		ui_treeview_TreeViewMenus.items.addExtensionFile.visible = isExt;
	} else {
		var isExt;
		var _g = gml_Project.current.version.config.projectModeId;
		if(_g == null) {
			isExt = false;
		} else {
			switch(_g) {
			case 1:case 2:
				isExt = el.getAttribute("data-rel-path").startsWith("Extensions/");
				break;
			default:
				isExt = false;
			}
		}
		ui_treeview_TreeViewMenus.items.showAPI.visible = isExt;
		ui_treeview_TreeViewMenus.items.addExtensionFile.visible = isExt;
	}
	ui_treeview_TreeViewItemMenus.update(true);
	ui_treeview_TreeView._signal("dirMenu",{ element : el, event : ev});
	el.classList.add("selected");
	electron_MenuFallback.contextEvent = ev;
	ui_treeview_TreeViewMenus.dirMenu.popup({ async : true, callback : function() {
		el.classList.remove("selected");
	}});
};
ui_treeview_TreeViewMenus.showItemMenu = function(el,ev) {
	var z;
	ui_treeview_TreeViewMenus.target = el;
	var kind = el.getAttribute("data-kind");
	z = gml_GmlAPI.version.config.projectModeId == 2 && kind == "shader";
	ui_treeview_TreeViewMenus.items.shaderItems.forEach(function(q) {
		q.visible = z;
	});
	z = kind == "project";
	ui_treeview_TreeViewMenus.items.removeFromRecentProjects.visible = z;
	ui_treeview_TreeViewMenus.items.openCustomCSS.visible = !z;
	if(Electron_API != null) {
		ui_treeview_TreeViewMenus.items.openExternally.visible = true;
		ui_treeview_TreeViewMenus.items.openDirectory.visible = true;
	}
	ui_treeview_TreeViewMenus.items.changeOpenIcon.visible = false;
	ui_treeview_TreeViewMenus.items.resetOpenIcon.visible = false;
	ui_treeview_TreeViewMenus.items.objectInfo.visible = kind == "object";
	var tmp = new EReg("^\\w+$","g");
	ui_treeview_TreeViewMenus.items.findReferences.enabled = tmp.match(el.getAttribute("data-ident"));
	ui_treeview_TreeViewItemMenus.update(false);
	ui_treeview_TreeView._signal("itemMenu",{ element : el, event : ev});
	el.classList.add("selected");
	electron_MenuFallback.contextEvent = ev;
	ui_treeview_TreeViewMenus.itemMenu.popup({ async : true, callback : function() {
		el.classList.remove("selected");
	}});
};
ui_treeview_TreeViewMenus.initIconMenu = function() {
	var iconMenu = new Electron_Menu();
	ui_treeview_TreeViewMenus.add(iconMenu,{ id : "change-icon", label : "Change icon", icon : null, click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : false, open : false});
	}});
	ui_treeview_TreeViewMenus.add(iconMenu,{ id : "reset-icon", label : "Reset icon", icon : null, click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : true, open : false});
	}});
	var tmp = ui_treeview_TreeViewMenus.add(iconMenu,{ id : "change-open-icon", label : "Change \"open\" icon", icon : null, click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : false, open : true});
	}});
	ui_treeview_TreeViewMenus.items.changeOpenIcon = tmp;
	var tmp = ui_treeview_TreeViewMenus.add(iconMenu,{ id : "reset-open-icon", label : "Reset \"open\" icon", icon : null, click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : true, open : true});
	}});
	ui_treeview_TreeViewMenus.items.resetOpenIcon = tmp;
	var tmp = ui_treeview_TreeViewMenus.add(iconMenu,{ id : "open-css", label : "Open custom CSS file", icon : null, click : function() {
		var path = gml_Project.current.path + ".css";
		if(Electron_API != null) {
			if(!Electron_FS.existsSync(path)) {
				Electron_FS.writeFileSync(path,"");
			}
			Electron_IPC.send("shell-open",path);
		} else {
			var project = gml_Project.current;
			if(!project.existsSync(path)) {
				project.writeTextFileSync(path,"/* write your custom CSS here! */");
			}
			gml_file_GmlFile.open(haxe_io_Path.withoutDirectory(path),path);
		}
	}});
	ui_treeview_TreeViewMenus.items.openCustomCSS = tmp;
	return new Electron_MenuItem({ id : "sub-custom-icon", label : "Custom icon", type : "submenu", submenu : iconMenu});
};
ui_treeview_TreeViewMenus.add = function(m,o) {
	var r = new Electron_MenuItem(o);
	m.append(r);
	return r;
};
ui_treeview_TreeViewMenus.init = function() {
	var isNative = Electron_API != null;
	ui_treeview_TreeViewMenus.items = new ui_treeview__$TreeViewMenus_TreeViewMenuData();
	var iconItem = ui_treeview_TreeViewMenus.initIconMenu();
	ui_treeview_TreeViewItemMenus.init();
	ui_treeview_TreeViewMenus.itemMenu = new Electron_Menu();
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "open-vertex", label : "Open vertex shader", icon : null, click : function() {
		ui_treeview_TreeViewMenus.openYyShader("vsh");
	}});
	var tmp1 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "open-fragment", label : "Open fragment shader", icon : null, click : function() {
		ui_treeview_TreeViewMenus.openYyShader("fsh");
	}});
	ui_treeview_TreeViewMenus.items.shaderItems = [tmp,tmp1];
	if(isNative) {
		var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "open-external", label : "Open externally", icon : null, click : ui_treeview_TreeViewMenus.openExternal});
		ui_treeview_TreeViewMenus.items.openExternally = tmp;
		var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "show-in-directory", label : "Show in directory", icon : Main.modulePath + ("/icons/silk/" + "show_in_directory" + ".png"), click : ui_treeview_TreeViewMenus.openDirectory});
		ui_treeview_TreeViewMenus.items.openDirectory = tmp;
	}
	ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "open-here", label : "Open here", icon : null, click : ui_treeview_TreeViewMenus.openHere});
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "object-info", label : "Object information", icon : Main.modulePath + ("/icons/silk/" + "information" + ".png"), click : ui_treeview_TreeViewMenus.openObjectInfo});
	ui_treeview_TreeViewMenus.items.objectInfo = tmp;
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "find-references", label : "Find references", icon : Main.modulePath + ("/icons/silk/" + "find_references" + ".png"), click : ui_treeview_TreeViewMenus.findReferences});
	ui_treeview_TreeViewMenus.items.findReferences = tmp;
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ id : "remove-from-recent-projects", label : "Remove from Recent projects", icon : Main.modulePath + ("/icons/silk/" + "delete" + ".png"), click : ui_treeview_TreeViewMenus.removeFromRecentProjects});
	ui_treeview_TreeViewMenus.items.removeFromRecentProjects = tmp;
	electron_MenuFallback.appendSep(ui_treeview_TreeViewMenus.itemMenu,"sep-manip");
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.items.manipOuter;
	while(_g < _g1.length) ui_treeview_TreeViewMenus.itemMenu.append(_g1[_g++]);
	ui_treeview_TreeViewMenus.itemMenu.append(iconItem);
	ui_treeview_TreeViewMenus.dirMenu = new Electron_Menu();
	ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ id : "expand-all", label : "Expand all", icon : Main.modulePath + ("/icons/silk/" + "bullet_toggle_plus" + ".png"), click : ui_treeview_TreeViewMenus.expandAll});
	ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ id : "collapse-all", label : "Collapse all", icon : Main.modulePath + ("/icons/silk/" + "bullet_toggle_minus" + ".png"), click : ui_treeview_TreeViewMenus.collapseAll});
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ id : "add-extension-file", label : "Add file(s)", icon : Main.modulePath + ("/icons/silk/" + "page_white_add" + ".png"), click : ui_treeview_TreeViewMenus.addExtensionFile});
	ui_treeview_TreeViewMenus.items.addExtensionFile = tmp;
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ id : "show-extension-api", label : "Show API", icon : Main.modulePath + ("/icons/silk/" + "application_view_list" + ".png"), click : ui_treeview_TreeViewMenus.showAPI});
	ui_treeview_TreeViewMenus.items.showAPI = tmp;
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ id : "open-all-items", label : "Open all", icon : null, click : ui_treeview_TreeViewMenus.openAll});
	ui_treeview_TreeViewMenus.items.openAll = tmp;
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ id : "open-combined-view", label : "Open combined view", icon : null, click : ui_treeview_TreeViewMenus.openCombined});
	ui_treeview_TreeViewMenus.items.openCombined = tmp;
	if(isNative) {
		ui_treeview_TreeViewMenus.dirMenu.append(ui_treeview_TreeViewMenus.items.openExternally);
		ui_treeview_TreeViewMenus.dirMenu.append(ui_treeview_TreeViewMenus.items.openDirectory);
	}
	electron_MenuFallback.appendSep(ui_treeview_TreeViewMenus.dirMenu,"sep-manip");
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.items.manipOuter;
	while(_g < _g1.length) ui_treeview_TreeViewMenus.dirMenu.append(_g1[_g++]);
	ui_treeview_TreeViewMenus.dirMenu.append(iconItem);
};
var ui_treeview__$TreeViewMenus_TreeViewMenuData = function() {
	this.manipNonRoot = [];
	this.manipDirOnly = [];
	this.manipOuter = [];
};
$hxClasses["ui.treeview._TreeViewMenus.TreeViewMenuData"] = ui_treeview__$TreeViewMenus_TreeViewMenuData;
ui_treeview__$TreeViewMenus_TreeViewMenuData.__name__ = "ui.treeview._TreeViewMenus.TreeViewMenuData";
ui_treeview__$TreeViewMenus_TreeViewMenuData.prototype = {
	__class__: ui_treeview__$TreeViewMenus_TreeViewMenuData
};
var yy_YyEvent = function() { };
$hxClasses["yy.YyEvent"] = yy_YyEvent;
yy_YyEvent.__name__ = "yy.YyEvent";
yy_YyEvent.toPath = function(type,numb,eid) {
	var ename = parsers_GmlEvent.t2sc[type];
	if(type == 4) {
		return ename + "_" + eid + ".gml";
	}
	return ename + "_" + numb + ".gml";
};
yy_YyEvent.toString = function(type,numb,oid) {
	var name;
	if(type == 4) {
		name = gml_Project.current.yyObjectNames[oid];
	} else {
		name = null;
	}
	return parsers_GmlEvent.toString(type,numb,name);
};
yy_YyEvent.fromString = function(name) {
	var data = parsers_GmlEvent.fromString(name);
	if(data != null && data.name != null) {
		data.obj = gml_Project.current.yyObjectGUIDs[name];
	}
	return data;
};
var yy_YyExtensionFileKind = {};
yy_YyExtensionFileKind.detect = function(path) {
	if(haxe_io_Path.extension(path).toLowerCase() == "gml") {
		return 2;
	} else {
		return 1;
	}
};
var yy_YyFont = {};
yy_YyFont.generateDefault = function(parent,name) {
	return { "hinting" : 0, "glyphOperations" : 0, "interpreter" : 0, "pointRounding" : 0, "fontName" : "Arial", "styleName" : "Regular", "size" : 12.0, "bold" : false, "italic" : false, "charset" : 0, "AntiAlias" : 1, "first" : 0, "last" : 0, "sampleText" : "abcdefg ABCDEFG\n0123456789 .,<>\"'&!?\nthe quick brown fox jumps over the lazy dinosaur\nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DINOSAUR\nDefault character: ▯ (9647)", "includeTTF" : false, "TTFName" : "", "textureGroupId" : { "name" : "Default", "path" : "texturegroups/Default"}, "ascenderOffset" : 0, "glyphs" : { }, "kerningPairs" : [], "ranges" : [{ "lower" : 32, "upper" : 127},{ "lower" : 9647, "upper" : 9647}], "regenerateBitmap" : false, "canGenerateBitmap" : true, "maintainGms1Font" : false, "parent" : parent, "resourceVersion" : "1.0", "name" : name, "tags" : [], "resourceType" : "GMFont"};
};
yy_YyFont.get_characterCount = function(this1) {
	var sum = 0;
	var _g = 0;
	var _g1 = this1.ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		sum += range.upper - range.lower + 1;
	}
	return sum;
};
yy_YyFont.addCharacters = function(this1,letters) {
	var letterCodes = [];
	var letterStringCodes = Array.from(letters);
	var _g = 0;
	while(_g < letterStringCodes.length) letterCodes.push(letterStringCodes[_g++].codePointAt(0));
	letterCodes.sort(function(a,b) {
		return b - a;
	});
	var last = null;
	var next = this1.ranges.length == 0 ? null : this1.ranges[0];
	var index = 0;
	while(letterCodes.length > 0) {
		var letterCode = letterCodes.pop();
		while(next != null && letterCode > next.lower) {
			last = next;
			++index;
			next = this1.ranges[index];
		}
		if(last != null && last.upper >= letterCode) {
			continue;
		}
		if(last != null && last.upper + 1 == letterCode) {
			last.upper = letterCode;
			if(next != null && last.upper + 1 == next.lower) {
				next.lower = last.lower;
				HxOverrides.remove(this1.ranges,last);
				last = next;
				next = this1.ranges[index];
			}
			continue;
		}
		if(next != null && next.lower - 1 == letterCode) {
			next.lower = letterCode;
			continue;
		}
		last = { lower : letterCode, upper : letterCode};
		this1.ranges.splice(index,0,last);
		++index;
	}
};
yy_YyFont.getAllCharacters = function(this1) {
	var str = "";
	var _g = 0;
	var _g1 = this1.ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		var _g2 = range.lower;
		var _g3 = range.upper + 1;
		while(_g2 < _g3) str += String.fromCodePoint(_g2++);
	}
	return str;
};
yy_YyFont.addRange = function(this1,range) {
	if(this1.ranges.length == 0) {
		this1.ranges.push(range);
		return;
	}
	var toRemove = [];
	var _g = 0;
	var _g1 = this1.ranges;
	while(_g < _g1.length) {
		var otherRange = _g1[_g];
		++_g;
		if(range.lower - 1 <= otherRange.upper && range.upper + 1 >= otherRange.lower) {
			range.lower = Math.min(otherRange.lower,range.lower);
			range.upper = Math.max(otherRange.upper,range.upper);
			toRemove.push(otherRange);
		}
	}
	var _g = 0;
	while(_g < toRemove.length) HxOverrides.remove(this1.ranges,toRemove[_g++]);
	var _g = 0;
	var _g1 = this1.ranges.length;
	while(_g < _g1) {
		var i = _g++;
		if(this1.ranges[i].lower > range.lower) {
			this1.ranges.splice(i,0,range);
			return;
		}
	}
	this1.ranges.push(range);
};
var yy_YyLoader = function() { };
$hxClasses["yy.YyLoader"] = yy_YyLoader;
yy_YyLoader.__name__ = "yy.YyLoader";
yy_YyLoader.applyAssetColour = function(el,path) {
	var colors = yy_YyLoader.assetColours[StringTools.replace(path,"\\","/")];
	if(colors != null) {
		el.style.setProperty("--data-color",colors[0]);
		el.setAttribute("data-color",colors[0]);
		if(el.classList.contains("dir")) {
			var items = el.treeItems;
			items.style.setProperty("--data-color",colors[1]);
			items.setAttribute("data-color",colors[1]);
		}
	}
};
yy_YyLoader.run = function(project) {
	var yyProjectTxt;
	if(yy_YyLoader.nextYypContent != null) {
		yyProjectTxt = yy_YyLoader.nextYypContent;
		yy_YyLoader.nextYypContent = null;
	} else {
		yyProjectTxt = project.readTextFileSync(project.name);
	}
	if(yyProjectTxt.includes("\"resourceType\": \"GMProject\"")) {
		project.yyExtJson = true;
		project.yyUsesGUID = false;
		project.isGMS23 = true;
	} else {
		yy_YyLoader.assetColours = Object.create(null);
		yy_v22_YyLoaderV22.run(project,yy_YyJson.parse(yyProjectTxt));
		return;
	}
	project.hasGMLive = yyProjectTxt.includes("\"path\":\"scripts/GMLive/GMLive.yy\"");
	var yyProject = new yy_YyJsonParser(yyProjectTxt).doParse();
	if(project.isGMS23) {
		var metaData = yyProject.MetaData;
		if(metaData != null && metaData.IDEVersion != null) {
			var mt = new RegExp("^(20\\d{2})\\.").exec(metaData.IDEVersion);
			var year = mt != null ? Std.parseInt(mt[1]) : null;
			if(year == null) {
				year = 0;
			}
			project.isGM2022 = year >= 2022;
			project.isGM2023 = year >= 2023;
			project.usesResourceOrderFile = project.isGM2023 && project.existsSync(project.getResourceOrderFilePath());
			var tmp;
			try {
				tmp = parseFloat(yyProject.resourceVersion);
			} catch( _g ) {
				tmp = 1.0;
			}
			project.yyResourceVersion = tmp;
		}
	}
	var resourceOrder = null;
	if(project.usesResourceOrderFile) {
		try {
			resourceOrder = project.readYyFileSync(project.getResourceOrderFilePath());
		} catch( _g ) {
			console.error("Failed to read resource order file:",haxe_Exception.caught(_g).unwrap());
			project.usesResourceOrderFile = false;
		}
	}
	yy_YyLoader.assetColours = Object.create(null);
	var pjName = haxe_io_Path.withoutExtension(project.name);
	var _g = 0;
	var _g1 = ui_Preferences.userPaths;
	while(_g < _g1.length) {
		var dir = _g1[_g++];
		try {
			var abPath = "" + dir + "/Layouts/" + pjName + "/" + pjName + "/asset_browser.json";
			if(!Electron_FS.existsSync(abPath)) {
				continue;
			}
			var ab = yy_YyJson.parse(Electron_FS.readFileSync(abPath,"utf8"));
			var abc = ab.AssetColours;
			if(abc != null) {
				var _g2 = 0;
				while(_g2 < abc.length) {
					var pair = abc[_g2];
					++_g2;
					var c = pair.Value;
					var colors = [yy_YyAssetBrowserColour.toCSS(c),yy_YyAssetBrowserColour.toAlphaCSS(c,0.5)];
					var path;
					if(typeof(pair.Key) == "string") {
						path = pair.Key;
					} else {
						path = pair.Key.path;
					}
					yy_YyLoader.assetColours[StringTools.replace(path,"\\","/")] = colors;
				}
			}
		} catch( _g3 ) {
			console.error(haxe_Exception.caught(_g3).unwrap());
		}
	}
	var folderMap = Object.create(null);
	yy_YyLoader.itemsToInsert = [];
	yy_YyLoader.folderMap = folderMap;
	var folderPairs = [];
	var _g = 0;
	var _g1 = yyProject.Folders;
	while(_g < _g1.length) {
		var folder = _g1[_g];
		++_g;
		var folderPathYY = [folder.folderPath];
		var folderPath = folderPathYY[0];
		if(folderPath.endsWith(".yy")) {
			folderPath = folderPath.substring(0,folderPath.length - 3);
		}
		var folderDir = ui_treeview_TreeView.makeAssetDir(folder.name,folderPath + "/","mixed");
		var folderOrder = folder.order;
		if(resourceOrder != null) {
			var folder2 = tools_NativeArray.findFirst(resourceOrder.FolderOrderSettings,(function(folderPathYY) {
				return function(f) {
					return f.path == folderPathYY[0];
				};
			})(folderPathYY));
			if(folder2 != null) {
				folderOrder = folder2.order;
			}
		}
		folderDir.yyOrder = folderOrder;
		folderMap[folderPath] = folderDir;
		folderPairs.push({ dir : folderDir, path : folderPath});
		yy_YyLoader.applyAssetColour(folderDir,folderPathYY[0]);
	}
	ui_treeview_TreeView.saveOpen();
	ui_treeview_TreeView.clear();
	parsers_GmlSeeker.start();
	gml_GmlAPI.gmlClear();
	gml_GmlAPI.extClear();
	var topLevel = ui_treeview_TreeView.makeAssetDir(project.displayName,"","mixed");
	topLevel.classList.add("open");
	topLevel.treeHeader.classList.add("hidden");
	topLevel.setAttribute("data-rel-path",project.name);
	ui_treeview_TreeView.element.appendChild(topLevel);
	folderMap["folders"] = topLevel;
	var _g = 0;
	while(_g < folderPairs.length) {
		var pair = folderPairs[_g];
		++_g;
		var folderPath = pair.path;
		var parentDir = folderMap[folderPath.substring(0,folderPath.lastIndexOf("/"))];
		if(parentDir == null) {
			console.log("Folder without parent",folderPath);
			continue;
		}
		if(parentDir == pair.dir) {
			continue;
		}
		ui_treeview_TreeView.insertSorted(parentDir,pair.dir);
	}
	var ccs = ui_treeview_TreeView.makeAssetItem("roomCreationCodes",project.name,project.path,"roomccs");
	ccs.removeAttribute("data-thumb");
	ccs.yyOpenAs = file_kind_yy_KYyRoomCCs.inst;
	ccs.yyOrder = -1;
	var ccsPar = ((((folderMap["folders/Rooms"]) || (folderMap["folders/rooms"]))) || (topLevel));
	ccsPar.treeItems.appendChild(ccs);
	if(project.existsSync("#import")) {
		var idir = ui_treeview_TreeView.makeAssetDir("Imports","#import/","file");
		raw_RawLoader.loadDirRec(project,idir.treeItems,"#import");
		topLevel.treeItems.appendChild(idir);
	}
	if(project.existsSync("datafiles")) {
		var idir = ui_treeview_TreeView.makeAssetDir("Included Files","datafiles/","file");
		raw_RawLoader.loadDirRec(project,idir.treeItems,"datafiles");
		var items = idir.querySelectorAll("div." + "item");
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var rel = item.getAttribute("data-rel-path");
			gml_GmlAPI.gmlLookup[rel] = { path : item.getAttribute("data-full-path"), row : 0};
			gml_GmlAPI.gmlLookupItems.push({ value : rel, meta : "includedFile"});
		}
		topLevel.treeItems.appendChild(idir);
	}
	project.yyObjectNames = Object.create(null);
	project.yyObjectGUIDs = Object.create(null);
	project.yyResources = Object.create(null);
	project.yyResourceGUIDs = Object.create(null);
	project.yySpriteURLs = Object.create(null);
	project.yyResourceTypes = Object.create(null);
	project.yyOrder = Object.create(null);
	project.resourceTypes = Object.create(null);
	var _g = 0;
	var _g1 = yyProject.resources;
	while(_g < _g1.length) {
		var resource = _g1[_g];
		++_g;
		var resPath = resource.id.path;
		var resName = resource.id.name;
		project.yyOrder[resName] = resource.order;
		project.yyResources[resName] = resource;
		project.yyResourceGUIDs[resName] = resName;
		project.setResourceTypeFromPath(resPath,resName);
		if(resPath.startsWith("objects/")) {
			project.yyObjectNames[resName] = resName;
			project.yyObjectGUIDs[resName] = resName;
		}
	}
	if(resourceOrder != null) {
		var _g = 0;
		var _g1 = resourceOrder.ResourceOrderSettings;
		while(_g < _g1.length) {
			var ordItem = _g1[_g];
			++_g;
			project.yyOrder[ordItem.name] = ordItem.order;
		}
	}
	var _g = 0;
	var _g1 = yyProject.resources;
	while(_g < _g1.length) {
		var resource = _g1[_g];
		++_g;
		parsers_GmlSeeker.run(resource.id.path,resource.id.name,file_kind_yy_KYyUnknown.inst);
	}
	project.yyTextureGroups = [];
	var _g = 0;
	var _g1 = yyProject.TextureGroups;
	while(_g < _g1.length) project.yyTextureGroups.push(_g1[_g++].name);
};
var yy_YyManip = function() { };
$hxClasses["yy.YyManip"] = yy_YyManip;
yy_YyManip.__name__ = "yy.YyManip";
yy_YyManip.prepare = function(q) {
	var pj = gml_Project.current;
	var py = q.py;
	if(py == null) {
		py = pj.readYyFileSync(pj.name);
	}
	return { pj : pj, py : py};
};
yy_YyManip.changeParent = function(pj,yyPath,newParName,newParPath) {
	var yyText = pj.readTextFileSync(yyPath);
	var isDone = false;
	yyText = yyText.replace(yy_YyManip.__changeParent_rx,function(_,s1,_1,s2,_2,s3) {
		isDone = true;
		return s1 + newParName + s2 + newParPath + s3;
	});
	if(isDone) {
		pj.writeTextFileSync(yyPath,yyText);
		return;
	}
	var yy = yy_YyJson.parse(yyText,true);
	yy.parent.name = newParName;
	yy.parent.path = newParPath;
	pj.writeYyFileSync(yyPath,yy);
};
yy_YyManip.getProjectFolderForTreeDir = function(py,el) {
	var path = ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeFolderPathV23(el);
	return tools_NativeArray.findFirst(py.Folders,function(f) {
		return f.folderPath == path;
	});
};
yy_YyManip.getProjectResourceForTreeItem = function(py,el) {
	var path = ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeResourcePathV23(el);
	return tools_NativeArray.findFirst(py.resources,function(r) {
		return r.id.path == path;
	});
};
yy_YyManip.getProjectItemForTreeEl = function(py,el) {
	if(el.classList.contains("dir")) {
		return yy_YyManip.getProjectFolderForTreeDir(py,el);
	} else {
		return yy_YyManip.getProjectResourceForTreeItem(py,el);
	}
};
yy_YyManip.getProjectOrderItemForTreeEl = function(el,yyProject,orderConf,createIfNeeded) {
	var isDir = el.classList.contains("dir");
	if(orderConf == null) {
		if(yyProject == null) {
			return null;
		}
		if(isDir) {
			return yy_YyManip.getProjectFolderForTreeDir(yyProject,el);
		} else {
			return yy_YyManip.getProjectResourceForTreeItem(yyProject,el);
		}
	}
	var path = ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeYyPathV23(el);
	var arr = isDir ? orderConf.FolderOrderSettings : orderConf.ResourceOrderSettings;
	var item = tools_NativeArray.findFirst(arr,function(q) {
		return q.path == path;
	});
	if(item == null && createIfNeeded) {
		item = { name : el.getAttribute("data-ident"), order : 0, path : path};
		tools_NativeArray.insertAtRandom(arr,item);
	}
	return item;
};
yy_YyManip.offsetTreeItems = function(yyProject,items,start,offset,orderConf) {
	var changed = false;
	var _g = start;
	var _g1 = items.length;
	while(_g < _g1) {
		var el = items[_g++];
		el.yyOrder += offset;
		var item = yy_YyManip.getProjectOrderItemForTreeEl(el,yyProject,orderConf,true);
		if(item != null) {
			changed = true;
			item.order += offset;
			if(item.order <= 0 && orderConf != null) {
				if(el.classList.contains("dir")) {
					HxOverrides.remove(orderConf.FolderOrderSettings,item);
				} else {
					HxOverrides.remove(orderConf.ResourceOrderSettings,item);
				}
			}
		}
	}
	return changed;
};
yy_YyManip.add = function(args) {
	var pdat = yy_YyManip.prepare(args);
	var pj = pdat.pj;
	var py = pdat.py;
	var name = args.name;
	var parDir = args.tvDir;
	var kind = args.kind;
	var yypItem;
	var yyOrderItem;
	var ntv;
	var yyResource = null;
	var yyResourceText = null;
	var yyPath = null;
	var yyFullPath = null;
	var indexText = null;
	var resourceOrder = pj.readResourceOrderFileSync();
	if(args.mkdir) {
		var pre = (parDir.parentElement.classList.contains("treeview") ? "folders/" : parDir.getAttribute("data-rel-path")) + name;
		var folder = { folderPath : pre + ".yy", order : -1, resourceVersion : "1.0", name : name, tags : [], resourceType : "GMFolder"};
		py.Folders.push(folder);
		if(resourceOrder != null) {
			yyOrderItem = { name : name, path : pre + ".yy", order : -1};
			resourceOrder.FolderOrderSettings.push(yyOrderItem);
		} else {
			yyOrderItem = null;
		}
		yypItem = folder;
		ntv = ui_treeview_TreeView.makeAssetDir(name,pre + "/","mixed");
	} else {
		var kindRoot = kind;
		if(!kind.endsWith("s")) {
			kindRoot = kind + "s";
		}
		if(!pj.existsSync(kindRoot)) {
			pj.mkdirSync(kindRoot);
		}
		var dir = "" + kindRoot + "/" + name;
		var pre = "" + dir + "/" + name;
		yyPath = pre + ".yy";
		yyFullPath = pj.fullPath(yyPath);
		args.npath = yyPath;
		if(!pj.existsSync(dir)) {
			pj.mkdirSync(dir);
		}
		var yyParent = { "name" : parDir.getAttribute("data-label"), "path" : ui_treeview__$TreeViewElement_TreeViewElementTools.getTreeFolderPathV23(parDir)};
		var itemRelPath = yyPath;
		var itemFullPath = yyFullPath;
		switch(kind) {
		case "font":
			yyResource = yy_YyFont.generateDefault(yyParent,name);
			break;
		case "notes":
			itemFullPath = haxe_io_Path.withExtension(itemFullPath,"txt");
			yyResource = { parent : yyParent, resourceVersion : "1.1", name : name, tags : [], resourceType : "GMNotes"};
			pj.writeTextFileSync(pre + ".txt","");
			args.npath = pre + ".txt";
			break;
		case "object":
			yyResource = { "spriteId" : null, "solid" : false, "visible" : true, "spriteMaskId" : null, "persistent" : false, "parentObjectId" : null, "physicsObject" : false, "physicsSensor" : false, "physicsShape" : 1, "physicsGroup" : 1, "physicsDensity" : 0.5, "physicsRestitution" : 0.1, "physicsLinearDamping" : 0.1, "physicsAngularDamping" : 0.1, "physicsFriction" : 0.2, "physicsStartAwake" : true, "physicsKinematic" : false, "physicsShapePoints" : [], "eventList" : [], "properties" : [], "overriddenProperties" : [], "parent" : yyParent, "resourceVersion" : "1.0", "name" : name, "tags" : [], "resourceType" : "GMObject"};
			break;
		case "script":
			itemFullPath = haxe_io_Path.withExtension(itemFullPath,"gml");
			yyResource = { "isDnD" : false, "isCompatibility" : false, "parent" : yyParent, "resourceVersion" : "1.0", "name" : name, "tags" : [], "resourceType" : "GMScript"};
			var gml = args.gmlCode;
			if(gml == null) {
				gml = "function " + name + "() {}";
			}
			indexText = gml;
			var gmlPath = pre + ".gml";
			args.npath = gmlPath;
			pj.writeTextFileSync(gmlPath,gml);
			break;
		case "shader":
			yyResource = { "type" : 1, "parent" : yyParent, "resourceVersion" : "1.0", "name" : name, "tags" : [], "resourceType" : "GMShader"};
			pj.writeTextFileSync(pre + ".fsh",yy_YyShaderDefaults.baseFragGLSL);
			pj.writeTextFileSync(pre + ".vsh",yy_YyShaderDefaults.baseVertGLSL);
			break;
		case "sound":
			yyResource = yy_YySound.generateDefault(yyParent,name);
			break;
		case "sprite":
			var sprite = yy_YySprite23.generateDefault(yyParent,name);
			yyResource = sprite;
			var framePath = sprite.frames[0].name;
			var layerPath = sprite.layers[0].name;
			var path = haxe_io_Path.join([Main.modulePath,"misc/default_sprite.png"]);
			var dest = pj.fullPath("" + dir + "/" + framePath + ".png");
			if(Electron_FS.copyFileSync == null) {
				Electron_FS.writeFileSync(dest,Electron_FS.readFileSync(path));
			} else {
				Electron_FS.copyFileSync(path,dest);
			}
			var layerDir = "" + dir + "/layers/" + framePath;
			if(!pj.existsSync(layerDir)) {
				pj.mkdirSync(layerDir,{ recursive : true});
			}
			var path = haxe_io_Path.join([Main.modulePath,"misc/default_sprite.png"]);
			var dest = pj.fullPath("" + layerDir + "/" + layerPath + ".png");
			if(Electron_FS.copyFileSync == null) {
				Electron_FS.writeFileSync(dest,Electron_FS.readFileSync(path));
			} else {
				Electron_FS.copyFileSync(path,dest);
			}
			break;
		default:
			electron_Dialog.showError("No idea how to create type=`" + kind + "`, sorry");
			return false;
		}
		yyResourceText = yy_YyJson.stringify(yyResource,true);
		pj.writeTextFileSync(yyPath,yyResourceText);
		if(indexText == null) {
			indexText = yyResourceText;
		}
		var res = { id : { name : name, path : pre + ".yy"}, order : -1};
		tools_NativeArray.insertAtRandom(py.resources,res);
		if(resourceOrder != null) {
			yyOrderItem = { name : name, path : pre + ".yy", order : -1};
			tools_NativeArray.insertAtRandom(resourceOrder.ResourceOrderSettings,yyOrderItem);
		} else {
			yyOrderItem = null;
		}
		yypItem = res;
		pj.yyResources[name] = res;
		pj.yyResourceGUIDs[name] = name;
		if(kind == "object") {
			pj.yyObjectNames[name] = name;
			pj.yyObjectGUIDs[name] = name;
		}
		ntv = ui_treeview_TreeView.makeAssetItem(name,itemRelPath,itemFullPath,kind);
	}
	ui_treeview_TreeViewItemMenus.insertImplTV(parDir,args.tvRef,ntv,args.order);
	var parItemEls = parDir.treeItems.children;
	var itemOrder = tools_HtmlTools.colIndexOf(parItemEls,ntv,0);
	if(yyOrderItem != null) {
		yyOrderItem.order = itemOrder;
		yypItem.order = 0;
	} else {
		yypItem.order = itemOrder;
	}
	yy_YyManip.offsetTreeItems(py,parItemEls,itemOrder + 1,1,resourceOrder);
	if(args.py == null) {
		pj.writeYyFileSync(pj.name,py);
	}
	if(resourceOrder != null) {
		pj.writeResourceOrderFileSync(resourceOrder);
	}
	if(!args.mkdir) {
		switch(kind) {
		case "object":case "script":case "shader":
			var aceKind = "asset." + kind;
			gml_GmlAPI.gmlComp.push({ name : name, value : name, score : 0, meta : kind, doc : null});
			gml_GmlAPI.gmlKind[name] = aceKind;
			gml_GmlAPI.gmlLookup[name] = { path : yyPath, row : 0};
			gml_GmlAPI.gmlLookupItems.push({ value : name, meta : aceKind});
			var fk;
			switch(kind) {
			case "object":
				fk = file_kind_yy_KYyEvents.inst;
				break;
			case "shader":
				fk = null;
				break;
			default:
				fk = file_kind_gml_KGmlScript.inst;
			}
			var fullPath = pj.fullPath(args.npath);
			if(fk != null) {
				parsers_GmlSeeker.runSync(fullPath,indexText,name,fk);
			}
			if(args.openFile != false) {
				gml_file_GmlFile.open(args.name,fullPath);
			}
			break;
		}
	}
	return true;
};
yy_YyManip.remove = function(args) {
	var pdat = yy_YyManip.prepare(args);
	var pj = pdat.pj;
	var py = pdat.py;
	var cleanRefs = args.cleanRefs;
	var checkRefs = [];
	var removeRec = null;
	var resourceOrder = pj.readResourceOrderFileSync();
	var removeItem = function(el) {
		var pyRes = yy_YyManip.getProjectResourceForTreeItem(py,el);
		if(pyRes != null) {
			HxOverrides.remove(py.resources,pyRes);
			if(cleanRefs) {
				checkRefs.push(pyRes.id);
			}
			var dir = haxe_io_Path.directory(pyRes.id.path);
			pj.rmdirRecSync(dir);
		}
	};
	removeRec = function(el) {
		if(el.classList.contains("dir")) {
			var dir = el;
			var pyFolder = yy_YyManip.getProjectFolderForTreeDir(py,dir);
			if(pyFolder != null) {
				HxOverrides.remove(py.Folders,pyFolder);
			}
			if(resourceOrder != null) {
				var ordFolder = yy_YyManip.getProjectOrderItemForTreeEl(dir,null,resourceOrder,false);
				if(ordFolder != null) {
					HxOverrides.remove(resourceOrder.FolderOrderSettings,ordFolder);
				}
			}
			var _g = 0;
			var _g1 = dir.treeItems.children;
			while(_g < _g1.length) removeRec(_g1[_g++]);
		} else {
			removeItem(el);
		}
	};
	var el = args.tvRef;
	removeRec(el);
	var order = tools_HtmlTools.colIndexOf(args.tvDir.treeItems.children,el,0);
	yy_YyManip.offsetTreeItems(py,args.tvDir.treeItems.children,order + 1,-1,resourceOrder);
	el.parentElement.removeChild(el);
	if(checkRefs.length > 0) {
		var refsToNull = [];
		var _g = 0;
		while(_g < checkRefs.length) {
			var ref = checkRefs[_g];
			++_g;
			refsToNull.push({ rxRef : new RegExp("(:\\s*){\\s*\"name\":\\s*\"" + ref.name + "\",\\s*\"path\":\\s*\"" + ref.path.replace(tools_NativeString.escapeRx_1,"\\$1") + "\",?\\s*}","g"), rxDef : new RegExp("(\"value\":\\s*)\"" + ref.name + "\"","g"), name : ref.name});
		}
		var log = [];
		var _g = 0;
		var _g1 = py.resources;
		while(_g < _g1.length) {
			var res = [_g1[_g]];
			++_g;
			try {
				var yyText = pj.readTextFileSync(res[0].id.path);
				var changed = [false];
				var _g2 = 0;
				while(_g2 < refsToNull.length) {
					var rxp = [refsToNull[_g2]];
					++_g2;
					yyText = yyText.replace(rxp[0].rxRef,(function(rxp,changed,res) {
						return function(_,pre) {
							log.push("// Removed a reference to " + rxp[0].name + " from @[" + res[0].id.name + "]");
							changed[0] = true;
							return pre + "null";
						};
					})(rxp,changed,res));
					yyText = yyText.replace(rxp[0].rxDef,(function(rxp,changed,res) {
						return function(_,pre) {
							log.push("// Removed a definition reference to " + rxp[0].name + " from @[" + res[0].id.name + "]");
							changed[0] = true;
							return pre + "\"noone\"";
						};
					})(rxp,changed,res));
				}
				if(changed[0]) {
					pj.writeTextFileSync(res[0].id.path,yyText);
				}
			} catch( _g3 ) {
				var _g4 = haxe_Exception.caught(_g3).unwrap();
				console.warn(_g4);
			}
		}
		if(log.length > 0) {
			gml_file_GmlFile.openTab(new gml_file_GmlFile("Removal log",null,file_kind_gml_KGmlSearchResults.inst,log.join("\n")));
		}
	}
	pj.writeYyFileSync(pj.name,py);
	if(resourceOrder != null) {
		pj.writeResourceOrderFileSync(resourceOrder);
	}
	return true;
};
yy_YyManip.rename = function(args) {
	var pdat = yy_YyManip.prepare(args);
	var pj = pdat.pj;
	var py = pdat.py;
	var resourceOrder = pj.readResourceOrderFileSync();
	var renameDirRec = null;
	renameDirRec = function(dir,path,folder) {
		var dirName = haxe_io_Path.withoutDirectory(path);
		var dirPath = path + ".yy";
		if(folder == null) {
			folder = yy_YyManip.getProjectFolderForTreeDir(py,dir);
		}
		if(folder != null) {
			folder.folderPath = dirPath;
		}
		if(resourceOrder != null) {
			var ordItem = yy_YyManip.getProjectOrderItemForTreeEl(dir,null,resourceOrder,false);
			if(ordItem != null) {
				ordItem.path = dirPath;
			}
		}
		var dirPrefix = path + "/";
		dir.setAttribute("data-rel-path",dirPrefix);
		var _g = 0;
		var _g1 = dir.treeItems.children;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			if(el.classList.contains("dir")) {
				renameDirRec(el,dirPrefix + el.getAttribute("data-label"));
			} else {
				yy_YyManip.changeParent(pj,el.getAttribute("data-rel-path"),dirName,dirPath);
			}
		}
	};
	var el = args.tvRef;
	if(el.classList.contains("dir")) {
		var dir = el;
		var folder = yy_YyManip.getProjectFolderForTreeDir(py,dir);
		var newName = args.name;
		folder.name = newName;
		dir.setAttribute("data-label",newName);
		ui_treeview__$TreeViewElement_TreeViewElementTools.setTreeText(dir,newName);
		var newPath = haxe_io_Path.directory(folder.folderPath) + "/" + args.name;
		renameDirRec(dir,newPath);
	} else {
		var item = el;
		var pyRes = yy_YyManip.getProjectResourceForTreeItem(py,item);
		var curName = pyRes.id.name;
		var curPath = pyRes.id.path;
		var curDir = haxe_io_Path.directory(curPath);
		var newName = args.name;
		var newDir = haxe_io_Path.directory(curDir) + "/" + newName;
		var newPath = newDir + "/" + newName + ".yy";
		if(resourceOrder != null) {
			var ordItem = yy_YyManip.getProjectOrderItemForTreeEl(el,null,resourceOrder,false);
			if(ordItem != null) {
				ordItem.name = newName;
				ordItem.path = newPath;
			}
		}
		item.setAttribute("data-ident",newName);
		ui_treeview__$TreeViewElement_TreeViewElementTools.setTreeText(item,newName);
		item.setAttribute("data-rel-path",newPath);
		item.setAttribute("data-full-path",pj.fullPath(newPath));
		if(args.kind == "script") {
			item.setAttribute("data-full-path",haxe_io_Path.withExtension(item.getAttribute("data-full-path"),"gml"));
		}
		var log = [];
		var rxRef = new RegExp("(:\\s*{\\s*\"name\":\\s*\")" + curName + "(\",\\s*\"path\":\\s*\")" + curPath.replace(tools_NativeString.escapeRx_1,"\\$1") + "(\",?\\s*})","g");
		var rxDef = new RegExp("(\"value\":\\s*\")" + curName + "(\")","g");
		var updateResource = function(res) {
			var yyPath = res.id.path;
			var yyText = pj.readTextFileSync(yyPath);
			var changed = false;
			if(res == pyRes) {
				var rxName = new RegExp("^(  \"name\":\\s+\")" + curName + "(\")","gm");
				var rxPath = new RegExp("\"" + curPath.replace(tools_NativeString.escapeRx_1,"\\$1") + "\"","g");
				yyText = yyText.replace(rxName,function(_,s1,s2) {
					changed = true;
					return s1 + newName + s2;
				});
				yyText = yyText.replace(rxPath,function(_) {
					changed = true;
					return "\"" + newPath + "\"";
				});
				pyRes.id.name = newName;
				pyRes.id.path = newPath;
			}
			yyText = yyText.replace(rxRef,function(_,s1,s2,s3) {
				log.push("// Updated a reference to " + newName + " in @[" + res.id.name + "]");
				changed = true;
				return s1 + newName + s2 + newPath + s3;
			});
			yyText = yyText.replace(rxDef,function(_,s1,s2) {
				log.push("// Updated a definition reference to " + newName + " in @[" + res.id.name + "]");
				changed = true;
				return s1 + newName + s2;
			});
			if(changed) {
				pj.writeTextFileSync(yyPath,yyText);
			}
		};
		var updateResourceSafe = function(res) {
			try {
				updateResource(res);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				console.warn(_g1);
			}
		};
		if(args.patchRefs) {
			var _g = 0;
			var _g1 = py.resources;
			while(_g < _g1.length) updateResourceSafe(_g1[_g++]);
		} else {
			updateResourceSafe(pyRes);
		}
		pj.renameSync(curPath,curDir + "/" + newName + ".yy");
		pj.renameSync(curDir,newDir);
		if(args.kind == "script") {
			pj.renameSync("" + newDir + "/" + curName + ".gml","" + newDir + "/" + newName + ".gml");
		}
		var comp = tools_NativeArray.findFirst(gml_GmlAPI.gmlComp,function(c) {
			return c.name == curName;
		});
		if(comp != null) {
			comp.name = newName;
		}
		tools_Dictionary.move(gml_GmlAPI.gmlKind,curName,newName);
		var lookup = gml_GmlAPI.gmlLookup[curName];
		if(lookup != null) {
			lookup.path = newPath;
			tools_Dictionary.move(gml_GmlAPI.gmlLookup,curName,newName);
			new RegExp("^" + curName + "$","m");
			var item = tools_NativeArray.findFirst(gml_GmlAPI.gmlLookupItems,function(q) {
				return q.value == curName;
			});
			if(item != null) {
				item.value = newName;
			} else {
				gml_GmlAPI.gmlLookupItems.push({ value : newName});
			}
		}
		if(args.kind == "sprite") {
			tools_Dictionary.move(pj.spriteURLs,curName,newName);
		}
		if(args.patchCode) {
			ui_GlobalSearch.findReferences(curName,{ find : null, replaceBy : newName, results : log.length > 0 ? log.join("\n") : null, noDotPrefix : true, checkRefKind : false});
		} else if(log.length > 0) {
			gml_file_GmlFile.openTab(new gml_file_GmlFile("Update log",null,file_kind_gml_KGmlSearchResults.inst,log.join("\n")));
		}
	}
	pj.writeYyFileSync(pj.name,py);
	pj.writeResourceOrderFileSync(resourceOrder);
	return false;
};
yy_YyManip.move = function(q) {
	var pdat = yy_YyManip.prepare(q);
	var pj = pdat.pj;
	var py = pdat.py;
	var resourceOrder = pj.readResourceOrderFileSync();
	var moveDirRec = null;
	moveDirRec = function(dirEl,path) {
		var dirName = haxe_io_Path.withoutDirectory(path);
		var dirPath = path + ".yy";
		tools_NativeString.trimIfEndsWith(dirEl.getAttribute("data-rel-path"),"/");
		var folder = yy_YyManip.getProjectFolderForTreeDir(py,dirEl);
		if(folder != null) {
			folder.folderPath = dirPath;
		}
		var dirPrefix = path + "/";
		dirEl.setAttribute("data-rel-path",dirPrefix);
		var _g = 0;
		var _g1 = dirEl.treeItems.children;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			if(el.classList.contains("dir")) {
				moveDirRec(el,dirPrefix + el.getAttribute("data-label"));
			} else {
				yy_YyManip.changeParent(pj,el.getAttribute("data-rel-path"),dirName,dirPath);
			}
		}
	};
	var dragEl = q.srcRef;
	var isDir = dragEl.classList.contains("dir");
	var dragElPath = dragEl.getAttribute("data-rel-path");
	var dragItem = yy_YyManip.getProjectItemForTreeEl(py,dragEl);
	var orderItem = yy_YyManip.getProjectOrderItemForTreeEl(dragEl,null,resourceOrder,true);
	var newDir = q.tvDir;
	var newDirPath = newDir.getAttribute("data-rel-path");
	if(q.srcDir != newDir) {
		if(isDir) {
			var newPath;
			if(newDirPath == pj.name) {
				newPath = "folders/" + dragEl.getAttribute("data-label");
			} else {
				newPath = newDirPath + dragEl.getAttribute("data-label");
			}
			moveDirRec(dragEl,newPath);
		} else {
			var newParentName;
			var newParentPath;
			if(newDirPath == pj.name) {
				newParentName = haxe_io_Path.withoutExtension(pj.name);
				newParentPath = newDirPath;
			} else {
				newParentName = newDir.getAttribute("data-label");
				newParentPath = tools_NativeString.trimIfEndsWith(newDirPath,"/") + ".yy";
			}
			yy_YyManip.changeParent(pj,dragElPath,newParentName,newParentPath);
		}
	}
	var oldParItems = q.srcDir.treeItems.children;
	yy_YyManip.offsetTreeItems(py,oldParItems,tools_HtmlTools.colIndexOf(oldParItems,dragEl,0) + 1,-1,resourceOrder);
	q.srcDir.treeItems.removeChild(dragEl);
	var newDirItems = newDir.treeItems.children;
	var newDirIndex;
	if(q.order == 0) {
		newDirIndex = newDirItems.length;
	} else {
		newDirIndex = tools_HtmlTools.colIndexOf(newDirItems,q.tvRef,0);
		if(q.order > 0 && newDirIndex >= 0) {
			++newDirIndex;
		}
	}
	if(orderItem != null) {
		if(newDirIndex == 0) {
			if(isDir) {
				HxOverrides.remove(resourceOrder.FolderOrderSettings,orderItem);
			} else {
				HxOverrides.remove(resourceOrder.ResourceOrderSettings,orderItem);
			}
		} else {
			orderItem.order = newDirIndex;
		}
	} else {
		dragItem.order = newDirIndex;
	}
	yy_YyManip.offsetTreeItems(py,newDirItems,newDirIndex,1,resourceOrder);
	newDir.treeItems.insertBefore(dragEl,newDirItems[newDirIndex]);
	pj.writeYyFileSync(pj.name,py);
	pj.writeResourceOrderFileSync(resourceOrder);
	return true;
};
yy_YyManip.moveTV = function(q) {
	q.srcRef.parentElement.removeChild(q.srcRef);
	switch(q.order) {
	case -1:
		tools_HtmlTools.insertBeforeSelf(q.tvRef,q.srcRef);
		break;
	case 1:
		tools_HtmlTools.insertAfterSelf(q.tvRef,q.srcRef);
		break;
	default:
		q.tvDir.treeItems.appendChild(q.srcRef);
	}
};
var yy_YyObject = {};
yy_YyObject.getCode = function(this1,objPath,extras) {
	var dir = haxe_io_Path.directory(objPath);
	var out = yy_YyObjectProperties.get(this1);
	if(ui_Preferences.current.eventOrder == 1) {
		this1.eventList.sort(yy_YyObjectEvent.compare);
	}
	var _g = 0;
	var _g1 = this1.eventList;
	while(_g < _g1.length) {
		var ed = yy_YyObjectEvent.unpack(_g1[_g++],this1);
		var name = yy_YyEvent.toString(ed.type,ed.num,ed.obj);
		var full = haxe_io_Path.join([dir,yy_YyEvent.toPath(ed.type,ed.num,ed.id)]);
		if(extras != null) {
			extras.push(new gml_file_GmlFileExtra(full));
		}
		var code;
		try {
			code = electron_FileWrap.readTextFileSync(full);
		} catch( _g2 ) {
			console.warn("Missing event file: " + full);
			code = "";
		}
		if(out != "") {
			out += "\n\n";
		}
		var pair = parsers_GmlHeader.parse(code,gml_GmlVersion.v2);
		out += "#event " + name;
		if(pair.name != null) {
			out += pair.name;
		}
		out += "\n" + pair.code;
	}
	return out;
};
yy_YyObject.setCode = function(this1,objPath,gmlCode) {
	var dir = haxe_io_Path.directory(objPath);
	var sorted = ui_Preferences.current.eventOrder == 1;
	var v22 = this1.modelName != null;
	var eventData = parsers_GmlEvent.parse(gmlCode,gml_GmlVersion.v2);
	if(eventData == null) {
		yy_YyObject.errorText = parsers_GmlEvent.parseError;
		return false;
	}
	var errors = "";
	var i = 0;
	while(i < eventData.length) {
		var item = eventData[i];
		var idat = item.data;
		var tmp;
		if(idat.type != -1) {
			tmp = true;
		} else if(idat.numb != 1) {
			tmp = true;
		} else {
			var err = yy_YyObjectProperties.set(this1,item.code.join("\n"));
			if(err != null) {
				errors += err;
			}
			tmp = false;
		}
		if(tmp) {
			++i;
		} else {
			eventData.splice(i,1);
		}
	}
	var _g = 0;
	while(_g < eventData.length) {
		var idat = eventData[_g++].data;
		if(idat.type == 4) {
			var obj = gml_Project.current.yyObjectGUIDs[idat.name];
			if(obj == null) {
				errors += "Couldn't find object " + idat.name + " for collision event.\n";
			} else {
				idat.obj = obj;
			}
		} else {
			idat.obj = v22 ? "00000000-0000-0000-0000-000000000000" : "";
		}
	}
	if(errors != "") {
		yy_YyObject.errorText = errors;
		return false;
	}
	var oldList = this1.eventList;
	var oldMap = Object.create(null);
	var oldNames = [];
	var _g = 0;
	while(_g < oldList.length) {
		var ev = oldList[_g];
		++_g;
		var ed = yy_YyObjectEvent.unpack(ev,this1);
		var oldName = yy_YyEvent.toString(ed.type,ed.num,ed.obj);
		oldNames.push(oldName);
		oldMap[oldName] = ev;
	}
	var newList = [];
	var newMap = Object.create(null);
	var newNames = [];
	var _g = 0;
	while(_g < eventData.length) {
		var item = eventData[_g];
		++_g;
		var idat = item.data;
		var name = yy_YyEvent.toString(idat.type,idat.numb,idat.obj);
		newNames.push(name);
		newMap[name] = item.code;
	}
	var _g = 0;
	var _g1 = oldList.length;
	while(_g < _g1) {
		var i = _g++;
		if(Object.prototype.hasOwnProperty.call(newMap,oldNames[i])) {
			if(sorted) {
				newList.push({ event : oldList[i], code : newMap[oldNames[i]].join("\r\n")});
			}
		} else {
			var this2 = yy_YyObjectEvent.unpack(oldList[i],this1);
			var full = haxe_io_Path.join([dir,yy_YyEvent.toPath(this2.type,this2.num,this2.id)]);
			if(electron_FileWrap.existsSync(full)) {
				electron_FileWrap.unlinkSync(full);
			}
		}
	}
	var v2022_8 = gml_Project.current.yyResourceVersion >= 1.6;
	var _g = 0;
	var _g1 = eventData.length;
	while(_g < _g1) {
		var i = _g++;
		var ename = newNames[i];
		if(sorted && Object.prototype.hasOwnProperty.call(oldMap,ename)) {
			continue;
		}
		var item = eventData[i];
		var idat = item.data;
		var ev = sorted ? null : oldMap[ename];
		if(ev == null) {
			if(v22) {
				ev = { id : yy_YyGUID.create(), modelName : "GMEvent", mvc : "1.0", IsDnD : false, collisionObjectId : idat.obj, eventtype : idat.type, enumb : idat.numb != null ? idat.numb : 0, m_owner : this1.id};
			} else {
				var obj = idat.obj;
				var col;
				if(v2022_8 && idat.type == 4 && obj == this1.name) {
					col = null;
				} else if(obj == null || obj == "") {
					col = null;
				} else {
					col = { name : obj, path : "objects/" + (obj == null ? "null" : obj) + "/" + (obj == null ? "null" : obj) + ".yy"};
				}
				ev = { resourceType : "GMEvent", resourceVersion : "1.0", isDnD : false, eventType : idat.type, eventNum : idat.numb != null ? idat.numb : 0, name : ""};
				if(!v2022_8 || col != null) {
					ev.collisionObjectId = col;
				}
				if(!v2022_8) {
					ev.parent = { name : this1.name, path : "objects/" + this1.name + "/" + this1.name + ".yy"};
					ev.tags = [];
				}
			}
		}
		newList.push({ event : ev, code : item.code.join("\r\n")});
	}
	this1.eventList = [];
	var _g = 0;
	while(_g < newList.length) {
		var item = newList[_g];
		++_g;
		var ev = item.event;
		var this2 = yy_YyObjectEvent.unpack(ev,this1);
		electron_FileWrap.writeTextFileSync(haxe_io_Path.join([dir,yy_YyEvent.toPath(this2.type,this2.num,this2.id)]),item.code);
		this1.eventList.push(ev);
	}
	return true;
};
yy_YyObject.getParentJson = function(this1) {
	var parentName = gml_Project.current.yyObjectNames[this1.parentObjectId];
	if(parentName == null) {
		return null;
	}
	var el = ui_treeview_TreeView.element.querySelector(".item[" + "data-ident" + "=\"" + parentName.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]");
	if(el == null) {
		return null;
	}
	var path = el.getAttribute("data-full-path");
	if(!electron_FileWrap.existsSync(path)) {
		return null;
	}
	var json = electron_FileWrap.readYyFileSync(path);
	json.path = path;
	return json;
};
yy_YyObject.openEventInherited = function(full,edef) {
	var edata = yy_YyEvent.fromString(edef);
	if(edata == null) {
		return null;
	}
	var etype = edata.type;
	var enumb = edata.numb;
	var eobj = edata.obj;
	if(eobj == null) {
		eobj = "00000000-0000-0000-0000-000000000000";
	}
	var obj = electron_FileWrap.readYyFileSync(full);
	var parentId = obj.parentObjectId;
	var tries = 1024;
	while(parentId != "00000000-0000-0000-0000-000000000000" && --tries >= 0) {
		obj = yy_YyObject.getParentJson(obj);
		if(obj == null) {
			return null;
		}
		var _g = 0;
		var _g1 = obj.eventList;
		while(_g < _g1.length) {
			var event = _g1[_g];
			++_g;
			if(event.eventtype == etype && event.enumb == enumb && event.collisionObjectId == eobj) {
				return gml_file_GmlFile.open(obj.name,obj.path,{ def : edef});
			}
		}
		parentId = obj.parentObjectId;
	}
	return null;
};
yy_YyObject.getInfo = function(this1,info) {
	var objName = this1.name;
	var v23 = gml_Project.current.isGMS23;
	if(info == null) {
		info = new gml_GmlObjectInfo();
		info.objectName = objName;
		if(Reflect.isObject(this1.spriteId)) {
			info.spriteName = this1.spriteId.name;
		} else if(yy_YyGUID.isValid(this1.spriteId)) {
			var res = gml_Project.current.yyResources[this1.spriteId];
			if(res != null) {
				info.spriteName = res.Value.resourceName;
			} else {
				info.spriteName = this1.spriteId;
			}
		} else {
			info.spriteName = "<undefined>";
		}
		info.visible = this1.visible;
		info.solid = this1.solid;
		info.persistent = this1.persistent;
	}
	var _g = 0;
	var _g1 = this1.eventList;
	while(_g < _g1.length) {
		var event = _g1[_g];
		++_g;
		var eid;
		if(v23) {
			var cor = event.collisionObjectId;
			eid = parsers_GmlEvent.toString(event.eventType,event.eventNum,cor != null ? cor.name : null);
		} else {
			eid = yy_YyEvent.toString(event.eventtype,event.enumb,event.collisionObjectId);
		}
		var elist = info.eventMap[eid];
		if(elist == null) {
			elist = [];
			info.eventList.push(eid);
			info.eventMap[eid] = elist;
		}
		elist.unshift(objName + "(" + eid + ")");
	}
	var parent = yy_YyObject.getParentJson(this1);
	if(parent != null) {
		info.parents.unshift(parent.name);
		yy_YyObject.getInfo(parent,info);
	}
	return info;
};
var yy_YyObjectEvent = {};
yy_YyObjectEvent.compare = function(a,b) {
	if(a.modelName != null) {
		var at = a.eventtype;
		var bt = b.eventtype;
		if(at != bt) {
			return at - bt;
		}
		if(at == 4) {
			if(a.id < b.id) {
				return -1;
			} else {
				return 1;
			}
		} else {
			return a.enumb - b.enumb;
		}
	} else {
		var at = a.eventType;
		var bt = b.eventType;
		if(at != bt) {
			return at - bt;
		}
		if(at == 4) {
			var aq = a.collisionObjectId;
			var bq = b.collisionObjectId;
			if((aq != null ? aq.name : "") < (bq != null ? bq.name : "")) {
				return -1;
			} else {
				return 1;
			}
		} else {
			return a.eventNum - b.eventNum;
		}
	}
};
yy_YyObjectEvent.unpack = function(this1,yyObj) {
	var id;
	var obj;
	var num;
	var type;
	if(this1.modelName != null) {
		num = this1.enumb;
		type = this1.eventtype;
		obj = this1.collisionObjectId;
		id = this1.id;
	} else {
		num = this1.eventNum;
		type = this1.eventType;
		var col = this1.collisionObjectId;
		obj = col != null ? col.name : null;
		if(obj == null && type == 4) {
			obj = yyObj.name;
		}
		id = obj;
	}
	return { id : id, obj : obj, num : num, type : type};
};
var yy_YyObjectPropertiesAssetFlag = function(f,s) {
	this.flag = f;
	this.name = s;
};
$hxClasses["yy.YyObjectPropertiesAssetFlag"] = yy_YyObjectPropertiesAssetFlag;
yy_YyObjectPropertiesAssetFlag.__name__ = "yy.YyObjectPropertiesAssetFlag";
yy_YyObjectPropertiesAssetFlag.prototype = {
	__class__: yy_YyObjectPropertiesAssetFlag
};
var yy_YyObjectProperties = function() { };
$hxClasses["yy.YyObjectProperties"] = yy_YyObjectProperties;
yy_YyObjectProperties.__name__ = "yy.YyObjectProperties";
yy_YyObjectProperties.isAllAssetTypes23 = function(filters) {
	var allTypes = yy_YyObjectProperties.allAssetTypes23;
	if(filters.length == allTypes.length) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < filters.length) {
			var v = filters[_g1];
			++_g1;
			if(allTypes.indexOf(v) < 0) {
				_g.push(v);
			}
		}
		return _g.length == 0;
	} else {
		return false;
	}
};
yy_YyObjectProperties.get = function(o) {
	var out = "#event " + "properties" + " (no comments/etc. here are saved)";
	var v22 = o.modelName != null;
	var addID = function(key,val) {
		out += "\n" + key + " = ";
		var valid;
		var vr;
		if(!v22) {
			vr = val;
			if(val != null) {
				valid = vr.name != null && vr.name != "";
			} else {
				valid = false;
			}
		} else {
			valid = yy_YyGUID.isValid(val);
			vr = null;
		}
		if(valid) {
			var res = gml_Project.current.yyResources[v22 ? val : vr.name];
			if(res != null) {
				if(v22) {
					out += res.Value.resourceName + ";";
				} else {
					out += res.id.name + ";";
				}
			} else {
				out += "\"" + val + "\"; // amiss";
			}
		} else {
			out += "-1;";
		}
	};
	addID("parent_index",o.parentObjectId);
	if(yy_YyGUID.isValid(o.spriteId)) {
		addID("sprite_index",o.spriteId);
	}
	var mask = v22 ? o.maskSpriteId : o.spriteMaskId;
	if(yy_YyGUID.isValid(mask)) {
		addID("mask_index",mask);
	}
	if(!o.visible) {
		var val = o.visible;
		out += "\n" + "visible" + " = " + (val == null ? "null" : Std.string(val)) + ";";
	}
	if(o.solid) {
		var val = o.solid;
		out += "\n" + "solid" + " = " + (val == null ? "null" : Std.string(val)) + ";";
	}
	if(o.persistent) {
		var val = o.persistent;
		out += "\n" + "persistent" + " = " + (val == null ? "null" : Std.string(val)) + ";";
	}
	var val = o.physicsObject;
	out += "\n" + "uses_physics" + " = " + (val == null ? "null" : Std.string(val)) + ";";
	if(o.physicsObject) {
		var val = o.physicsDensity;
		out += "\n" + "physics_density" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsRestitution;
		out += "\n" + "physics_restitution" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsGroup;
		out += "\n" + "physics_collision_group" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsLinearDamping;
		out += "\n" + "physics_linear_damping" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsAngularDamping;
		out += "\n" + "physics_angular_damping" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsFriction;
		out += "\n" + "physics_friction" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsSensor;
		out += "\n" + "physics_sensor" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsStartAwake;
		out += "\n" + "physics_start_awake" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsKinematic;
		out += "\n" + "physics_kinematic" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var val = o.physicsShape;
		out += "\n" + "physics_shape" + " = " + (val == null ? "null" : Std.string(val)) + ";";
		var pts = [];
		if(o.physicsShapePoints != null) {
			var _g = 0;
			var _g1 = o.physicsShapePoints;
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				pts.push(pt.x + "," + pt.y);
			}
		}
		var val = "\"" + pts.join(";") + "\"";
		out += "\n" + "physics_shape_data" + " = " + (val == null ? "null" : Std.string(val)) + ";";
	}
	var printExpr = function(x) {
		if(yy_YyObjectProperties.rxLString.test(x)) {
			return x;
		} else if(yy_YyObjectProperties.rxJSONish.test(x)) {
			try {
				JSON.parse(x);
				return x;
			} catch( _g ) {
			}
		}
		var q = new parsers_GmlReader(x,gml_GmlVersion.v2);
		q.skipVarExpr(gml_GmlVersion.v2,44);
		if(q.get_eof()) {
			return "(" + x + ")";
		} else {
			return "#" + JSON.stringify(x);
		}
	};
	if(o.properties != null) {
		var _g = 0;
		var _g1 = o.properties;
		while(_g < _g1.length) {
			var prop = _g1[_g];
			++_g;
			out += "\n" + (v22 ? prop.varName : prop.name) + ":";
			switch(prop.varType) {
			case 0:case 1:
				var isInt = prop.varType == 1;
				out += isInt ? "int" : "real";
				if(prop.rangeEnabled) {
					out += "<" + prop.rangeMin + ", " + prop.rangeMax + ">";
				}
				out += " = " + (isInt ? prop.value : printExpr(prop.value));
				break;
			case 2:
				out += "string = " + JSON.stringify(prop.value);
				break;
			case 3:
				out += "bool = " + (prop.value == "True" ? "true" : "false");
				break;
			case 4:
				out += "expr = " + printExpr(prop.value);
				break;
			case 5:
				out += "asset";
				if(v22) {
					var flags = prop.resourceFilter;
					if(flags != 1023) {
						out += "<";
						var count = 0;
						var _g2 = 0;
						var _g3 = yy_YyObjectProperties.assetTypes;
						while(_g2 < _g3.length) {
							var pair = _g3[_g2];
							++_g2;
							if((flags & pair.flag) != 0) {
								flags &= ~pair.flag;
								if(count++ > 0) {
									out += ", ";
								}
								out += pair.name;
							}
						}
						if(flags != 0 || count == 0) {
							if(count++ > 0) {
								out += ", ";
							}
							out += flags;
						}
						out += ">";
					}
				} else {
					var filters = prop.filters;
					var _g_current = 0;
					while(_g_current < filters.length) {
						var _g_value = filters[_g_current++];
						filters[_g_current - 1] = _g_value.trim();
					}
					var isAll = yy_YyObjectProperties.isAllAssetTypes23(filters);
					var atm = yy_YyObjectProperties.assetTypeMap23;
					if(!isAll) {
						out += "<";
						var found = 0;
						var _g4 = 0;
						while(_g4 < filters.length) {
							var t = filters[_g4];
							++_g4;
							if(found++ > 0) {
								out += ", ";
							}
							out += tools_Dictionary.defget(atm,t,t);
						}
						if(found == 0) {
							out += "0";
						}
						out += ">";
					}
				}
				out += " = " + prop.value;
				break;
			case 6:
				out += prop.multiselect ? "mlist<" : "list<";
				var sep = false;
				var _g5 = 0;
				var _g6 = prop.listItems;
				while(_g5 < _g6.length) {
					var item = _g6[_g5++];
					if(sep) {
						out += ", ";
					} else {
						sep = true;
					}
					out += printExpr(item);
				}
				out = (out += "> = ") + printExpr(prop.value);
				break;
			case 7:
				out += "color = \"" + prop.value + "\"";
				break;
			default:
				var json = JSON.stringify(prop);
				if(json.includes("'")) {
					out += "unknown = " + JSON.stringify(json);
				} else {
					out += "unknown = @'" + json + "'";
				}
			}
			out += v22 ? "; // " + (prop.id == null ? "null" : prop.id) : ";";
		}
	}
	if(!v22 && o.overriddenProperties != null) {
		var _g = 0;
		var _g1 = o.overriddenProperties;
		while(_g < _g1.length) {
			var ov = _g1[_g];
			++_g;
			out += "\n" + ov.objectId.name + "." + ov.propertyId.name + " = " + printExpr(ov.value) + ";";
		}
	}
	return out;
};
yy_YyObjectProperties.set = function(o,code) {
	var v22 = o.modelName != null;
	var id = function(v,t) {
		var id;
		var res;
		switch(v._hx_index) {
		case 0:
			if(v.f < 0) {
				if(v22) {
					return "00000000-0000-0000-0000-000000000000";
				} else {
					return null;
				}
			} else {
				throw haxe_Exception.thrown("Can't assign numeric IDs aside of -1");
			}
			break;
		case 1:
			var _g = v.s;
			if(v22 ? yy_YyGUID.test.test(_g) : _g != "") {
				id = _g;
				res = gml_Project.current.yyResources[id];
				if(res != null) {
					if(v22) {
						if(res.Value.resourceType != t) {
							throw haxe_Exception.thrown("Wrong resource type - expected " + t + ", got " + res.Value.resourceType);
						}
					} else {
						var pathPrefix = t.substring(2).toLowerCase() + "s/";
						if(!res.id.path.startsWith(pathPrefix)) {
							throw haxe_Exception.thrown("Wrong resource type - expected " + pathPrefix + ", got " + res.id.path);
						}
					}
				}
				if(v22) {
					return id;
				} else {
					return res.id;
				}
			} else {
				throw haxe_Exception.thrown("Expected a GUID");
			}
			break;
		case 3:
			var _g = v.s;
			if(_g == "noone") {
				return "00000000-0000-0000-0000-000000000000";
			} else {
				id = gml_Project.current.yyResourceGUIDs[_g];
				if(id == null) {
					throw haxe_Exception.thrown("Could not find " + _g + " in the project");
				}
				res = gml_Project.current.yyResources[id];
				if(res != null) {
					if(v22) {
						if(res.Value.resourceType != t) {
							throw haxe_Exception.thrown("Wrong resource type - expected " + t + ", got " + res.Value.resourceType);
						}
					} else {
						var pathPrefix = t.substring(2).toLowerCase() + "s/";
						if(!res.id.path.startsWith(pathPrefix)) {
							throw haxe_Exception.thrown("Wrong resource type - expected " + pathPrefix + ", got " + res.id.path);
						}
					}
				}
				if(v22) {
					return id;
				} else {
					return res.id;
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("Expected an identifier, got " + $hxEnums[v.__enum__].__constructs__[v._hx_index]._hx_name);
		}
	};
	var bool = function(v) {
		switch(v._hx_index) {
		case 0:
			switch(v.f) {
			case 0:
				return false;
			case 1:
				return true;
			default:
				throw haxe_Exception.thrown("Expected a bool, got " + Std.string(v));
			}
			break;
		case 3:
			switch(v.s) {
			case "false":
				return false;
			case "true":
				return true;
			default:
				throw haxe_Exception.thrown("Expected a bool, got " + Std.string(v));
			}
			break;
		default:
			throw haxe_Exception.thrown("Expected a bool, got " + Std.string(v));
		}
	};
	var int = function(v) {
		if(v._hx_index == 0) {
			var _g = v.f;
			if(_g % 1 != 0) {
				throw haxe_Exception.thrown("Expected an int, got " + Std.string(v));
			}
			return _g | 0;
		} else {
			throw haxe_Exception.thrown("Expected an int, got " + Std.string(v));
		}
	};
	var real = function(v) {
		if(v._hx_index == 0) {
			return v.f;
		} else {
			throw haxe_Exception.thrown("Expected a number, got " + Std.string(v));
		}
	};
	var string = function(v) {
		if(v._hx_index == 1) {
			return v.s;
		} else {
			throw haxe_Exception.thrown("Expected a string, got " + Std.string(v));
		}
	};
	var expr = function(v) {
		switch(v._hx_index) {
		case 0:
			return JSON.stringify(v.f);
		case 1:
			return JSON.stringify(v.s);
		case 2:
			return v.s;
		case 3:
			return v.s;
		default:
			throw haxe_Exception.thrown("Expected an expression, got " + Std.string(v));
		}
	};
	var props = [];
	var overProps = [];
	var propProc = function(name,type,guid,params,value) {
		try {
			var orig = null;
			if(o.properties != null) {
				var _g = 0;
				var _g1 = o.properties;
				while(_g < _g1.length) {
					var prop = _g1[_g];
					++_g;
					if((v22 ? prop.varName : prop.name) != name) {
						continue;
					}
					orig = prop;
					if(v22 && guid == null) {
						guid = prop.id;
					}
					break;
				}
			}
			if(v22 && guid == null) {
				guid = yy_YyGUID.create();
			}
			var addProp = function(prop) {
				if(v22) {
					prop.id = guid;
					prop.modelName = "GMObjectProperty";
					prop.mvc = "1.0";
					prop.varName = name;
					if(prop.resourceFilter == null) {
						prop.resourceFilter = 1023;
					}
				} else {
					prop.resourceType = "GMObjectProperty";
					prop.resourceVersion = "1.0";
					prop.name = name;
					prop.hxOrder = yy_YyObjectProperties.propFieldOrder23;
					prop.hxDigits = yy_YyObjectProperties.digitCount23;
					if(prop.listItems == null) {
						prop.listItems = [];
					}
					if(orig == null) {
						prop.tags = [];
						prop.filters = [];
					} else {
						var defaults = orig;
						var q = defaults;
						var fd = null;
						var has = Object.prototype.hasOwnProperty;
						for (fd in q) {
						if(has.call(q,fd)) {
							var v = Reflect.field(defaults,fd);
							if(v != null && Reflect.field(prop,fd) == null) {
								prop[fd] = v;
							}
						}
						}
					}
				}
				props.push(prop);
			};
			switch(type) {
			case "asset":
				var asset;
				switch(value._hx_index) {
				case 0:
					asset = JSON.stringify(value.f);
					break;
				case 3:
					asset = value.s;
					break;
				default:
					throw haxe_Exception.thrown("Expected an asset, got " + Std.string(value));
				}
				if(v22) {
					var flags = 0;
					if(params != null) {
						var _g = 0;
						while(_g < params.length) {
							var param = params[_g];
							++_g;
							switch(param._hx_index) {
							case 0:
								flags |= param.f | 0;
								break;
							case 3:
								var _g1 = param.s;
								var flag = yy_YyObjectProperties.assetTypeMap[_g1];
								if(flag == null) {
									throw haxe_Exception.thrown("" + _g1 + " is not a known asset type");
								}
								flags |= flag;
								break;
							default:
								throw haxe_Exception.thrown("Expected an asset type, got " + Std.string(param));
							}
						}
					} else {
						flags = 1023;
					}
					addProp({ listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, resourceFilter : flags, value : asset, varType : 5});
				} else {
					var filters;
					if(params != null) {
						filters = [];
						var _g = 0;
						while(_g < params.length) {
							var param = params[_g];
							++_g;
							switch(param._hx_index) {
							case 0:
								if(param.f != 0) {
									throw haxe_Exception.thrown("Expected an asset type, got " + Std.string(param));
								}
								break;
							case 3:
								var _g1 = param.s;
								filters.push(tools_Dictionary.defget(yy_YyObjectProperties.assetTypeMap23,_g1,_g1));
								break;
							default:
								throw haxe_Exception.thrown("Expected an asset type, got " + Std.string(param));
							}
						}
					} else {
						filters = yy_YyObjectProperties.allAssetTypes23.slice();
					}
					var _g_current = 0;
					var _g_array = filters;
					while(_g_current < _g_array.length) {
						var _g_value = _g_array[_g_current++];
						var _g_key = _g_current - 1;
						if(_g_key > 0) {
							filters[_g_key] = " " + _g_value;
						}
					}
					addProp({ listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, filters : filters, value : asset, varType : 5});
				}
				break;
			case "bool":
				if(params != null) {
					throw haxe_Exception.thrown("String has no params");
				}
				addProp({ listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, value : bool(value) ? "True" : "False", varType : 3});
				break;
			case "color":
				if(params != null) {
					throw haxe_Exception.thrown("String has no params");
				}
				addProp({ listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, value : string(value), varType : 7});
				break;
			case "expr":case "string":
				if(params != null) {
					throw haxe_Exception.thrown(type + " has no params");
				}
				var asExpr = type == "expr";
				addProp({ listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, value : asExpr ? expr(value) : string(value), varType : asExpr ? 4 : 2});
				break;
			case "int":case "real":
				var asInt = type == "int";
				var rangeEnabled = false;
				var rangeMin = 0.;
				var rangeMax = 10.;
				if(params != null) {
					if(params.length != 2) {
						throw haxe_Exception.thrown("Expected <min, max>");
					}
					rangeMin = asInt ? int(params[0]) : real(params[0]);
					rangeMax = asInt ? int(params[1]) : real(params[1]);
					rangeEnabled = true;
				}
				addProp({ listItems : null, multiselect : false, rangeEnabled : rangeEnabled, rangeMax : rangeMax, rangeMin : rangeMin, value : asInt ? JSON.stringify(int(value)) : expr(value), varType : asInt ? 1 : 0});
				break;
			case "list":case "mlist":
				var multi = type == "mlist";
				if(params == null) {
					throw haxe_Exception.thrown("List requires option parameters");
				}
				var items = [];
				var _g = 0;
				while(_g < params.length) items.push(expr(params[_g++]));
				var out = expr(value);
				addProp({ listItems : items, multiselect : multi, rangeEnabled : false, rangeMax : 10, rangeMin : 0, value : out, varType : 6});
				break;
			case "unknown":
				if(value._hx_index == 1) {
					props.push(JSON.parse(value.s));
				} else {
					throw haxe_Exception.thrown("Expected a JSON string, got " + Std.string(value));
				}
				break;
			default:
				throw haxe_Exception.thrown("" + type + " is not a known type");
			}
			return null;
		} catch( _g ) {
			return Std.string(haxe_Exception.caught(_g).unwrap());
		}
	};
	var varProc = function(key,val) {
		try {
			switch(key) {
			case "mask_index":
				if(v22) {
					o.maskSpriteId = id(val,"GMSprite");
				} else {
					o.spriteMaskId = id(val,"GMSprite");
				}
				break;
			case "parent_index":
				o.parentObjectId = id(val,"GMObject");
				break;
			case "persistent":
				o.persistent = bool(val);
				break;
			case "physics_angular_damping":
				o.physicsAngularDamping = real(val);
				break;
			case "physics_collision_group":
				o.physicsGroup = int(val);
				break;
			case "physics_density":
				o.physicsDensity = real(val);
				break;
			case "physics_friction":
				o.physicsFriction = real(val);
				break;
			case "physics_kinematic":
				o.physicsKinematic = bool(val);
				break;
			case "physics_linear_damping":
				o.physicsLinearDamping = real(val);
				break;
			case "physics_restitution":
				o.physicsRestitution = real(val);
				break;
			case "physics_sensor":
				o.physicsSensor = bool(val);
				break;
			case "physics_shape":
				o.physicsShape = int(val);
				break;
			case "physics_shape_data":
				var sv;
				if(val._hx_index == 1) {
					sv = val.s;
				} else {
					throw haxe_Exception.thrown("Expected a data string");
				}
				var pts = sv != "" ? sv.split(";") : [];
				var orig = o.physicsShapePoints;
				var next = [];
				var proto = orig[0];
				var _g = 0;
				var _g1 = pts.length;
				while(_g < _g1) {
					var i = _g++;
					var ptPair = pts[i].split(",");
					if(ptPair.length != 2) {
						throw haxe_Exception.thrown("Expected two coordinates for point " + i);
					}
					var ptX = parseFloat(ptPair[0]);
					if(isNaN(ptX)) {
						throw haxe_Exception.thrown("X coordinate for point " + i + " is not a valid number (" + ptPair[0] + ").");
					}
					var ptY = parseFloat(ptPair[1]);
					if(isNaN(ptY)) {
						throw haxe_Exception.thrown("Y coordinate for point " + i + " is not a valid number (" + ptPair[1] + ").");
					}
					var pt = orig[i];
					if(pt == null) {
						if(proto != null) {
							pt = Reflect.copy(proto);
							pt.id = yy_YyGUID.create();
							pt.x = ptX;
							pt.y = ptY;
						} else {
							pt = { id : yy_YyGUID.create(), modelName : "GMPoint", mvc : "1.0", x : ptX, y : ptY};
						}
					} else {
						pt.x = ptX;
						pt.y = ptY;
					}
					next.push(pt);
				}
				o.physicsShapePoints = next;
				break;
			case "physics_start_awake":
				o.physicsStartAwake = bool(val);
				break;
			case "solid":
				o.solid = bool(val);
				break;
			case "sprite_index":
				o.spriteId = id(val,"GMSprite");
				break;
			case "uses_physics":
				o.physicsObject = bool(val);
				break;
			case "visible":
				o.visible = bool(val);
				break;
			default:
				throw haxe_Exception.thrown("" + key + " is not a known property");
			}
			return null;
		} catch( _g ) {
			return Std.string(haxe_Exception.caught(_g).unwrap());
		}
	};
	var overProc = function(object,field,val) {
		try {
			if(v22) {
				return "Property overrides are not supported for GMS2.2";
			}
			var ovpOrig = null;
			if(o.overriddenProperties != null) {
				var _g = 0;
				var _g1 = o.overriddenProperties;
				while(_g < _g1.length) {
					var ovp = _g1[_g];
					++_g;
					if(ovp.objectId.name != object) {
						continue;
					}
					if(ovp.propertyId.name != field) {
						continue;
					}
					ovpOrig = ovp;
					break;
				}
			}
			var path = "objects/" + object + "/" + object + ".yy";
			var ovp = expr(val);
			var ovp1 = { propertyId : { name : field, path : path}, objectId : { name : object, path : path}, value : ovp, resourceVersion : "1.0", resourceType : "GMOverriddenProperty"};
			if(ovpOrig == null) {
				ovp1.name = "";
				ovp1.tags = [];
			} else {
				var defaults = ovpOrig;
				var q = defaults;
				var fd = null;
				var has = Object.prototype.hasOwnProperty;
				for (fd in q) {
				if(has.call(q,fd)) {
					var v = Reflect.field(defaults,fd);
					if(v != null && Reflect.field(ovp1,fd) == null) {
						ovp1[fd] = v;
					}
				}
				}
			}
			overProps.push(ovp1);
			return null;
		} catch( _g ) {
			return Std.string(haxe_Exception.caught(_g).unwrap());
		}
	};
	var error = parsers_GmlObjectProperties.parse(code,gml_GmlVersion.v2,varProc,propProc,overProc);
	o.properties = props.length > 0 ? props : v22 ? null : [];
	o.overriddenProperties = overProps;
	return error;
};
var yy_YyAssetBrowserColour = {};
yy_YyAssetBrowserColour.toCSS = function(this1) {
	if(this1.charCodeAt(0) == 35 && this1.length == 9) {
		return "#" + this1.substring(7,9) + this1.substring(5,7) + this1.substring(3,5) + this1.substring(1,3);
	} else {
		return this1;
	}
};
yy_YyAssetBrowserColour.toAlphaCSS = function(this1,alpha) {
	if(this1.charCodeAt(0) == 35 && this1.length == 9) {
		return "#" + this1.substring(7,9) + this1.substring(5,7) + this1.substring(3,5) + StringTools.hex(alpha * Std.parseInt("0x" + this1.substring(1,3)) | 0,2);
	} else {
		return this1;
	}
};
var yy_YyRooms = function() { };
$hxClasses["yy.YyRooms"] = yy_YyRooms;
yy_YyRooms.__name__ = "yy.YyRooms";
yy_YyRooms.getCCs = function(pjPath,pjd,extraFiles) {
	var pjDir = haxe_io_Path.directory(pjPath);
	var out = "";
	var pj = gml_Project.current;
	if(pj.isGMS23) {
		var _g = 0;
		var _g1 = pjd.resources;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			if(!pair.id.path.startsWith("rooms/")) {
				continue;
			}
			try {
				var rccPath = haxe_io_Path.directory(pair.id.path) + "/RoomCreationCode.gml";
				if(!pj.existsSync(rccPath)) {
					continue;
				}
				var rcc = pj.readTextFileSync(rccPath);
				if(rcc.trim() == "") {
					continue;
				}
				if(out != "") {
					out += "\n\n";
				}
				out += "#target " + pair.id.name + "\n" + rcc;
				extraFiles.push(new gml_file_GmlFileExtra(pj.fullPath(rccPath)));
			} catch( _g2 ) {
				var _g3 = haxe_Exception.caught(_g2).unwrap();
				console.error("Error reading RCC from room " + pair.id.name + ": ",_g3);
			}
		}
	} else {
		var _g = 0;
		var _g1 = pjd.resources;
		while(_g < _g1.length) {
			var res = _g1[_g++].Value;
			if(res.resourceType != "GMRoom") {
				continue;
			}
			try {
				var roomFull = tools_PathTools.ptJoin(pjDir,res.resourcePath);
				var roomCCrel = electron_FileWrap.readYyFileSync(roomFull).creationCodeFile;
				if(roomCCrel == "") {
					continue;
				}
				var roomCCfull = haxe_io_Path.directory(roomFull);
				var roomCCfull1 = tools_PathTools.ptJoin(roomCCfull,roomCCrel);
				var roomName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(roomFull));
				if(out != "") {
					out += "\n\n";
				}
				out += "#target " + roomName + "\n" + electron_FileWrap.readTextFileSync(roomCCfull1);
				extraFiles.push(new gml_file_GmlFileExtra(roomCCfull1));
			} catch( _g2 ) {
			}
		}
	}
	return out;
};
yy_YyRooms.parse = function(code) {
	var map = Object.create(null);
	var pairs = [];
	var q = new parsers_GmlReader(code,gml_GmlVersion.v2);
	var start = 0;
	var name = null;
	var code = null;
	var flush = function(p) {
		code = q.source.substring(start,p).trimRight();
		if(name == null) {
			if(code != "") {
				yy_YyRooms.errorText = "There's code prior to first room creation code!\n" + code;
				return true;
			}
		} else {
			if(Object.prototype.hasOwnProperty.call(map,name)) {
				yy_YyRooms.errorText = "Room creation code for " + name + " is defined twice!";
				return true;
			}
			map[name] = code;
			pairs.push({ name : name, code : code});
		}
		return false;
	};
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			var tmp;
			if((p == 0 || q.source.charCodeAt(p - 1) == 10) && q.source.substr((p + 1),6) == "target") {
				var this1 = q.source.charCodeAt(p + 7);
				tmp = this1 == 32 || this1 == 9;
			} else {
				tmp = false;
			}
			if(tmp) {
				q.pos += 6;
				q.skipSpaces0();
				var nameStart = q.pos;
				q.skipIdent1();
				if(q.pos == nameStart) {
					continue;
				}
				if(flush(p)) {
					return null;
				}
				name = q.source.substring(nameStart,q.pos);
				q.skipSpaces0();
				q.skipLineEnd();
				start = q.pos;
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,gml_GmlVersion.v2);
			break;
		}
	}
	if(flush(q.pos)) {
		return null;
	}
	return { map : map, pairs : pairs};
};
yy_YyRooms.setCCs = function(pjPath,code,extraFiles) {
	var data = yy_YyRooms.parse(code);
	if(data == null) {
		return false;
	}
	var v23 = gml_Project.current.isGMS23;
	var pjDir = haxe_io_Path.directory(pjPath);
	electron_FileWrap.readYyFileSync(pjPath);
	var xi = extraFiles.length;
	var xmap = Object.create(null);
	while(--xi >= 0) {
		var xf = extraFiles[xi];
		var xrel = haxe_io_Path.withoutDirectory(xf.path);
		var dir = haxe_io_Path.directory(xf.path);
		var name = haxe_io_Path.withoutDirectory(dir);
		xmap[name] = true;
		if(Object.prototype.hasOwnProperty.call(data.map,name)) {
			continue;
		}
		try {
			if(!v23) {
				var rmFull = tools_PathTools.ptJoin(dir,name + ".yy");
				var rmTxt = electron_FileWrap.readTextFileSync(rmFull);
				var what = new RegExp("(\"creationCodeFile\":\\s*\")" + xrel.replace(tools_NativeString.escapeRx_1,"\\$1") + "\"","g");
				rmTxt = rmTxt.replace(what,"$1\"");
				electron_FileWrap.writeTextFileSync(rmFull,rmTxt);
			}
			electron_FileWrap.unlinkSync(xf.path);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			console.error("Error removing creation code for " + name + ":",_g1);
		}
		extraFiles.splice(xi,1);
	}
	var _g = 0;
	var _g1 = data.pairs;
	while(_g < _g1.length) {
		var pair = _g1[_g];
		++_g;
		var name = pair.name;
		var code = pair.code;
		var full = tools_PathTools.ptJoin(pjDir,"rooms",name,"RoomCreationCode.gml");
		if(!Object.prototype.hasOwnProperty.call(xmap,name)) {
			var rmFull = tools_PathTools.ptJoin(pjDir,"rooms",name,name + ".yy");
			if(!electron_FileWrap.existsSync(rmFull)) {
				yy_YyRooms.errorText = "Room " + name + " doesn't exist!";
				return false;
			}
			if(!v23) {
				try {
					var rmTxt = electron_FileWrap.readTextFileSync(rmFull);
					var what = /("creationCodeFile":\\s*")[^"]*"/g;
					rmTxt = rmTxt.replace(what,"$1RoomCreationCode.gml");
					electron_FileWrap.writeTextFileSync(rmFull,rmTxt);
				} catch( _g2 ) {
					yy_YyRooms.errorText = "Error adding creation code for " + name + ":\n" + Std.string(haxe_Exception.caught(_g2).unwrap());
					return false;
				}
			}
			extraFiles.push(new gml_file_GmlFileExtra(full));
		}
		try {
			electron_FileWrap.writeTextFileSync(full,code);
		} catch( _g3 ) {
			yy_YyRooms.errorText = "Error saving code for " + name + ":\n" + Std.string(haxe_Exception.caught(_g3).unwrap());
			return false;
		}
	}
	return true;
};
var yy_YySearcher = function(done) {
	this.count = 0;
	this.queue = [];
	this.done = done;
};
$hxClasses["yy.YySearcher"] = yy_YySearcher;
yy_YySearcher.__name__ = "yy.YySearcher";
yy_YySearcher.run = function(_project,fn,done,opt) {
	var ctx = new yy_YySearcher(done);
	var yyProject = _project.readYyFileSync(_project.name);
	var scriptLambdas = _project.properties.lambdaMode == 2;
	var rxName = gml_Project.rxName;
	var addError = function(s) {
		if(opt.errors != null) {
			opt.errors += "\n" + s;
		} else {
			opt.errors = s;
		}
	};
	var v22 = yyProject.resourceType != "GMProject";
	var _g = 0;
	var _g1 = yyProject.resources;
	while(_g < _g1.length) {
		var resPair = _g1[_g];
		++_g;
		var _resName;
		var _resPath;
		var _resType;
		if(v22) {
			var resVal = resPair.Value;
			_resPath = resVal.resourcePath;
			_resType = resVal.resourceType;
			_resName = null;
		} else {
			_resPath = resPair.id.path;
			_resType = _project.yyResourceTypes[resPair.id.name];
		}
		var _resFull = _project.fullPath(_resPath);
		switch(_resType) {
		case "GMExtension":
			if(opt.checkExtensions) {
				if(v22) {
					_resName = _resPath.replace(rxName.r,"$1");
				} else {
					_resName = resPair.id.name;
				}
				if(opt.expandLambdas && _resName == "gmedit_lambda") {
					continue;
				}
				ctx.proc({ project : _project, resName : _resName, resPath : _resPath, resFull : _resFull},function(resCtx) {
					resCtx.project.readYyFile(resCtx.resPath,function(err,ext) {
						if(err != null) {
							console.warn(err);
							ctx.procNext();
							return;
						}
						var extDir = haxe_io_Path.directory(resCtx.resPath);
						var extDirFull = haxe_io_Path.directory(resCtx.resFull);
						var _g = 0;
						var _g1 = ext.files;
						while(_g < _g1.length) {
							var file = _g1[_g];
							++_g;
							if(haxe_io_Path.extension(file.filename).toLowerCase() == "gml") {
								ctx.proc({ project : resCtx.project, fileName : file.filename, filePath : haxe_io_Path.join([extDir,file.filename]), fileFull : haxe_io_Path.join([extDirFull,file.filename])},function(extCtx) {
									var fileName = extCtx.fileName;
									var filePath = extCtx.filePath;
									extCtx.project.readTextFile(filePath,function(err,code) {
										if(err != null) {
											console.warn(err);
											ctx.procNext();
											return;
										}
										var gml1 = fn(fileName,extCtx.fileFull,code);
										if(gml1 != null && gml1 != code) {
											extCtx.project.writeTextFileSync(filePath,gml1);
										}
										ctx.procNext();
									});
								});
							}
						}
						ctx.procNext();
					});
				});
			}
			break;
		case "GMObject":
			if(opt.checkObjects) {
				if(v22) {
					_resName = _resPath.replace(rxName.r,"$1");
				} else {
					_resName = resPair.id.name;
				}
				ctx.proc({ project : _project, resName : _resName, resPath : _resPath, resFull : _resFull},function(resCtx) {
					var resPath = resCtx.resPath;
					resCtx.project.readYyFile(resPath,function(error,obj) {
						if(error == null) {
							try {
								var code = yy_YyObject.getCode(obj,resPath);
								var gml1 = fn(resCtx.resName,resCtx.resFull,code);
								if(gml1 != null && gml1 != code) {
									if(yy_YyObject.setCode(obj,resPath,gml1)) {
										resCtx.project.writeYyFileSync(resPath,obj);
									} else {
										addError("Failed to modify " + resCtx.resName + ":\n" + yy_YyObject.errorText);
									}
								}
							} catch( _g ) {
								var _g1 = haxe_Exception.caught(_g).unwrap();
								addError("Failed to modify " + resCtx.resName + ":\n" + Std.string(_g1));
							}
						} else {
							console.warn(error);
						}
						ctx.procNext();
					});
				});
			}
			break;
		case "GMRoom":
			if(opt.checkRooms) {
				if(v22) {
					_resName = _resPath.replace(rxName.r,"$1");
				} else {
					_resName = resPair.id.name;
				}
				ctx.proc({ project : _project, resName : _resName, resPath : _resPath, resFull : _resFull},function(resCtx) {
					var rccName = "roomCreationCodes(" + resCtx.resName + ")";
					var rccPath = haxe_io_Path.directory(resCtx.resPath) + "\\RoomCreationCode.gml";
					if(resCtx.project.existsSync(rccPath)) {
						resCtx.project.readTextFile(rccPath,function(error,code) {
							if(error == null) {
								var gml1 = fn(rccName,rccPath,code);
								if(gml1 != null && gml1 != code) {
									electron_FileWrap.writeTextFileSync(rccPath,gml1);
								}
							} else {
								console.warn(error);
							}
							ctx.procNext();
						});
					} else {
						ctx.procNext();
					}
				});
			}
			break;
		case "GMScript":
			if(opt.checkScripts) {
				if(v22) {
					_resName = _resPath.replace(rxName.r,"$1");
				} else {
					_resName = resPair.id.name;
				}
				if(!scriptLambdas || !opt.expandLambdas || !_resName.startsWith("__lf_")) {
					ctx.proc({ project : _project, resName : _resName, resPath : _resPath, resFull : _resFull},function(resCtx) {
						var gmlPath = haxe_io_Path.withExtension(resCtx.resPath,"gml");
						var gmlFull = haxe_io_Path.withExtension(resCtx.resFull,"gml");
						resCtx.project.readTextFile(gmlPath,function(error,code) {
							if(error == null) {
								var gml1 = fn(resCtx.resName,gmlFull,code);
								if(gml1 != null && gml1 != code) {
									resCtx.project.writeTextFileSync(gmlPath,gml1);
								}
							} else {
								console.warn(error);
							}
							ctx.procNext();
						});
					});
				}
			}
			break;
		case "GMShader":
			if(opt.checkShaders) {
				if(v22) {
					_resName = _resPath.replace(rxName.r,"$1");
				} else {
					_resName = resPair.id.name;
				}
				ctx.proc({ project : _project, resName : _resName + ("(" + "fragment" + ")"), shPath : haxe_io_Path.withExtension(_resPath,"fsh"), shFull : haxe_io_Path.withExtension(_resFull,"fsh")},function(shCtx) {
					shCtx.project.readTextFile(shCtx.shPath,function(err,code) {
						if(err == null) {
							var gml1 = fn(shCtx.resName,shCtx.shFull,code);
							if(gml1 != null && gml1 != code) {
								shCtx.project.writeTextFileSync(shCtx.shPath,gml1);
							}
						} else {
							console.warn(err);
						}
						ctx.procNext();
					});
				});
				ctx.proc({ project : _project, resName : _resName + ("(" + "vertex" + ")"), shPath : haxe_io_Path.withExtension(_resPath,"vsh"), shFull : haxe_io_Path.withExtension(_resFull,"vsh")},function(shCtx) {
					shCtx.project.readTextFile(shCtx.shPath,function(err,code) {
						if(err == null) {
							var gml1 = fn(shCtx.resName,shCtx.shFull,code);
							if(gml1 != null && gml1 != code) {
								shCtx.project.writeTextFileSync(shCtx.shPath,gml1);
							}
						} else {
							console.warn(err);
						}
						ctx.procNext();
					});
				});
			}
			break;
		case "GMTimeline":
			if(opt.checkTimelines) {
				if(v22) {
					_resName = _resPath.replace(rxName.r,"$1");
				} else {
					_resName = resPair.id.name;
				}
				ctx.proc({ project : _project, resName : _resName, resPath : _resPath, resFull : _resFull},function(resCtx) {
					resCtx.project.readYyFile(resCtx.resPath,function(error,_tl) {
						var tl = _tl;
						if(error == null) {
							try {
								var code = yy_YyTimeline.getCode(tl,resCtx.resFull);
								var gml1 = fn(resCtx.resName,resCtx.resFull,code);
								if(gml1 != null && gml1 != code) {
									if(yy_YyTimeline.setCode(tl,resCtx.resPath,gml1)) {
										resCtx.project.writeYyFileSync(resCtx.resPath,tl);
									} else {
										addError("Failed to modify " + resCtx.resName + ":\n" + yy_YyObject.errorText);
									}
								}
							} catch( _g ) {
								var _g1 = haxe_Exception.caught(_g).unwrap();
								addError("Failed to modify " + resCtx.resName + ":\n" + Std.string(_g1));
							}
						} else {
							console.warn(error);
						}
						ctx.procNext();
					});
				});
			}
			break;
		}
	}
	if(ctx.count == 0 && ctx.queue.length == 0) {
		done();
	}
};
yy_YySearcher.prototype = {
	procSync: function(arg,fn) {
		this.count++;
		fn(arg);
	}
	,procNext: function() {
		this.count--;
		var pair = this.queue.shift();
		if(pair != null) {
			this.procSync(pair.arg,pair.fn);
		} else if(this.count <= 0) {
			this.done();
		}
	}
	,proc: function(arg,fn) {
		if(this.count < 16) {
			this.procSync(arg,fn);
		} else {
			this.queue.push({ fn : fn, arg : arg});
		}
	}
	,__class__: yy_YySearcher
};
var yy_YySequence = {};
yy_YySequence.generateDefaultSpriteSequence = function(spriteReference,imageId) {
	var tmp = yy_YySequenceKeyframeSprite.generateDefault(spriteReference,0,imageId);
	return { "spriteId" : spriteReference, "timeUnits" : 1, "playback" : 1, "playbackSpeed" : 30.0, "playbackSpeedType" : 0, "autoRecord" : true, "volume" : 1.0, "length" : 1, "events" : { "Keyframes" : [], "resourceVersion" : "1.0", "resourceType" : "KeyframeStore<MessageEventKeyframe>"}, "moments" : { "Keyframes" : [], "resourceVersion" : "1.0", "resourceType" : "KeyframeStore<MomentsEventKeyframe>"}, "tracks" : [{ "name" : "frames", "spriteId" : null, "keyframes" : { "Keyframes" : [tmp], "resourceVersion" : "1.0", "resourceType" : "KeyframeStore<SpriteFrameKeyframe>"}, "trackColour" : 0, "inheritsTrackColour" : true, "builtinName" : 0, "traits" : 0, "interpolation" : 1, "tracks" : [], "events" : [], "modifiers" : [], "isCreationTrack" : false, "resourceVersion" : "1.0", "tags" : [], "resourceType" : "GMSpriteFramesTrack"}], "visibleRange" : null, "lockOrigin" : false, "showBackdrop" : true, "showBackdropImage" : false, "backdropImagePath" : "", "backdropImageOpacity" : 0.5, "backdropWidth" : 1366, "backdropHeight" : 768, "backdropXOffset" : 0.0, "backdropYOffset" : 0.0, "xorigin" : 0, "yorigin" : 0, "eventToFunction" : { }, "eventStubScript" : null, "parent" : spriteReference, "resourceVersion" : "1.3", "name" : "sBlood", "tags" : [], "resourceType" : "GMSequence"};
};
var yy_YySequenceKeyframeSprite = {};
yy_YySequenceKeyframeSprite.generateDefault = function(spriteReference,index,frameGuid) {
	return { "id" : yy_YyGUID.create(), "Key" : index, "Length" : 1.0, "Stretch" : false, "Disabled" : false, "IsCreationKey" : false, "Channels" : { "0" : { "Id" : { "name" : frameGuid, "path" : spriteReference.path}, "resourceVersion" : "1.0", "resourceType" : "SpriteFrameKeyframe"}}, "resourceVersion" : "1.0", "resourceType" : "Keyframe<SpriteFrameKeyframe>"};
};
var yy_YyShaderDefaults = function() { };
$hxClasses["yy.YyShaderDefaults"] = yy_YyShaderDefaults;
yy_YyShaderDefaults.__name__ = "yy.YyShaderDefaults";
var yy_YySound = {};
yy_YySound.generateDefault = function(parent,name) {
	return { "compression" : 0, "volume" : 1.0, "preload" : false, "bitRate" : 128, "sampleRate" : 44100, "type" : 0, "bitDepth" : 1, "audioGroupId" : { "name" : "audiogroup_default", "path" : "audiogroups/audiogroup_default"}, "soundFile" : "", "duration" : 0.0, "parent" : parent, "resourceVersion" : "1.0", "name" : name, "tags" : [], "resourceType" : "GMSound"};
};
var yy_YySprite23 = {};
yy_YySprite23.generateDefault = function(parent,name) {
	var imageGuid = yy_YyGUID.create();
	var layerGuid = yy_YyGUID.create();
	var spriteReference = { name : name, path : "sprites/" + name + "/" + name + ".yy"};
	var tmp = [yy_YySprite23Frame.generateDefault(spriteReference,imageGuid,layerGuid)];
	var tmp1 = yy_YySequence.generateDefaultSpriteSequence(spriteReference,imageGuid);
	return { "bboxMode" : 0, "collisionKind" : 1, "type" : 0, "origin" : 0, "preMultiplyAlpha" : false, "edgeFiltering" : false, "collisionTolerance" : 0, "swfPrecision" : 2.525, "bbox_left" : 0, "bbox_right" : 0, "bbox_top" : 0, "bbox_bottom" : 0, "HTile" : false, "VTile" : false, "For3D" : false, "width" : 64, "height" : 64, "textureGroupId" : { "name" : "Default", "path" : "texturegroups/Default"}, "swatchColours" : null, "gridX" : 0, "gridY" : 0, "frames" : tmp, "sequence" : tmp1, "layers" : [yy_YySprite23Layer.generateDefault(layerGuid)], "parent" : parent, "resourceVersion" : "1.0", "name" : name, "tags" : [], "resourceType" : "GMSprite"};
};
yy_YySprite23.replaceFrames = function(this1,frameGuids) {
	this1.frames = [];
	this1.sequence.tracks[0].keyframes.Keyframes = [];
	var _g = 0;
	while(_g < frameGuids.length) yy_YySprite23.addFrame(this1,frameGuids[_g++]);
};
yy_YySprite23.addFrame = function(this1,frameGuid,layerGuid) {
	var thisReference = { name : this1.name, path : "sprites/" + this1.name + "/" + this1.name + ".yy"};
	if(layerGuid == null) {
		layerGuid = this1.layers[0].name;
	}
	var index = this1.frames.length;
	this1.frames.push(yy_YySprite23Frame.generateDefault(thisReference,frameGuid,layerGuid));
	this1.sequence.tracks[0].keyframes.Keyframes.push(yy_YySequenceKeyframeSprite.generateDefault(thisReference,index,frameGuid));
	this1.sequence.length = this1.frames.length;
};
var yy_YySprite23Frame = {};
yy_YySprite23Frame.generateDefault = function(parentReference,imageGuid,layerGuid) {
	var thisReference = { name : imageGuid, path : parentReference.path};
	return { "compositeImage" : { "FrameId" : thisReference, "LayerId" : null, "resourceVersion" : "1.0", "name" : "", "tags" : [], "resourceType" : "GMSpriteBitmap"}, "images" : [{ "FrameId" : thisReference, "LayerId" : { "name" : layerGuid, "path" : parentReference.path}, "resourceVersion" : "1.0", "name" : "", "tags" : [], "resourceType" : "GMSpriteBitmap"}], "parent" : parentReference, "resourceVersion" : "1.0", "name" : imageGuid, "tags" : [], "resourceType" : "GMSpriteFrame"};
};
var yy_YySprite23Layer = {};
yy_YySprite23Layer.generateDefault = function(layerGuid) {
	return { "visible" : true, "isLocked" : false, "blendMode" : 0, "opacity" : 100.0, "displayName" : "default", "resourceVersion" : "1.0", "name" : layerGuid, "tags" : [], "resourceType" : "GMImageLayer"};
};
var yy_YyTimeline = {};
yy_YyTimeline.getMomentPath = function(time) {
	return "moment_" + time + ".gml";
};
yy_YyTimeline.getCode = function(this1,objPath,extras) {
	var dir = haxe_io_Path.directory(objPath);
	var out = "";
	var _g = 0;
	var _g1 = this1.momentList;
	while(_g < _g1.length) {
		var time = _g1[_g++].moment;
		var full = haxe_io_Path.join([dir,yy_YyTimeline.getMomentPath(time)]);
		if(extras != null) {
			extras.push(new gml_file_GmlFileExtra(full));
		}
		var code = electron_FileWrap.readTextFileSync(full);
		if(out != "") {
			out += "\n\n";
		}
		out += "#moment " + time;
		code = new EReg("^///\\s*@desc[ \t]+(.*)\r?\n","g").map(code,function(rx) {
			out += " " + rx.matched(1);
			return "";
		});
		out += "\n" + code.trimRight();
	}
	return out;
};
yy_YyTimeline.setCode = function(this1,objPath,gmlCode) {
	var dir = haxe_io_Path.directory(objPath);
	var newData = parsers_GmlTimeline.parse(gmlCode,gml_GmlVersion.v2);
	if(newData == null) {
		yy_YyTimeline.errorText = parsers_GmlTimeline.parseError;
		return false;
	}
	var v23 = gml_Project.current.isGMS23;
	var oldList = this1.momentList;
	var oldMap = [];
	var _g = 0;
	while(_g < oldList.length) {
		var mm = oldList[_g];
		++_g;
		oldMap[mm.moment] = mm;
	}
	var newList = [];
	var newMap = [];
	var _g = 0;
	while(_g < newData.length) {
		var item = newData[_g];
		++_g;
		var time = item.moment;
		var mm = oldMap[time];
		if(mm == null) {
			if(v23) {
				mm = { moment : time, evnt : { isDnD : false, eventNum : time, eventType : 0, collisionObjectId : null, resourceVersion : "1.0", name : "", tags : [], resourceType : "GMEvent"}, resourceVersion : "1.0", name : "", tags : [], resourceType : "GMMoment"};
			} else {
				mm = { id : yy_YyGUID.create(), modelName : "GMMoment", mvc : "1.0", name : "", moment : time, evnt : { id : yy_YyGUID.create(), modelName : "GMEvent", mvc : "1.0", IsDnD : false, eventtype : 0, enumb : time, collisionObjectId : "00000000-0000-0000-0000-000000000000", m_owner : this1.id}};
			}
		}
		newMap[time] = mm;
		newList.push({ moment : mm, code : item.code[0]});
	}
	var _g = 0;
	while(_g < oldList.length) {
		var mm = oldList[_g];
		++_g;
		if(newMap[mm.moment] == null) {
			var full = haxe_io_Path.join([dir,yy_YyTimeline.getMomentPath(mm.moment)]);
			if(electron_FileWrap.existsSync(full)) {
				electron_FileWrap.unlinkSync(full);
			}
		}
	}
	this1.momentList = [];
	var _g = 0;
	while(_g < newList.length) {
		var item = newList[_g];
		++_g;
		var mm = item.moment;
		electron_FileWrap.writeTextFileSync(haxe_io_Path.join([dir,yy_YyTimeline.getMomentPath(mm.moment)]),item.code);
		this1.momentList.push(mm);
	}
	return true;
};
var yy_shared_YyManipExtension = function() { };
$hxClasses["yy.shared.YyManipExtension"] = yy_shared_YyManipExtension;
yy_shared_YyManipExtension.__name__ = "yy.shared.YyManipExtension";
yy_shared_YyManipExtension.addFiles = function(tvDir,extensionPath,filePaths) {
	var ext = yy_YyJson.parse(electron_FileWrap.readTextFileSync(extensionPath),true);
	var extDir = haxe_io_Path.directory(extensionPath);
	var extDirRel = gml_Project.current.relPath(extDir);
	var changed = false;
	var v23 = gml_Project.current.isGMS23;
	var _g = 0;
	while(_g < filePaths.length) {
		var srcFull = filePaths[_g];
		++_g;
		var rel = [haxe_io_Path.withoutDirectory(srcFull)];
		var dstFull = extDir + "/" + rel[0];
		try {
			if(Electron_FS.copyFileSync == null) {
				Electron_FS.writeFileSync(dstFull,Electron_FS.readFileSync(srcFull));
			} else {
				Electron_FS.copyFileSync(srcFull,dstFull);
			}
		} catch( _g1 ) {
			console.error(haxe_Exception.caught(_g1).unwrap());
		}
		if(tools_NativeArray.findFirst(ext.files,(function(rel) {
			return function(file) {
				return file.filename == rel[0];
			};
		})(rel)) != null) {
			if(haxe_io_Path.normalize(srcFull) == haxe_io_Path.normalize(dstFull)) {
				continue;
			}
			continue;
		}
		var file = { filename : rel[0], origname : "extensions\\" + rel[0], init : "", kind : yy_YyExtensionFileKind.detect(dstFull), uncompress : false, functions : [], constants : [], ProxyFiles : [], copyToTargets : -1, order : []};
		file["final"] = "";
		if(v23) {
			file.resourceVersion = "1.0";
			file.name = "";
			file.tags = [];
			file.resourceType = "GMExtensionFile";
		} else {
			file.id = yy_YyGUID.create();
			file.modelName = "GMExtensionFile";
			file.mvc = "1.0";
		}
		ext.files.push(file);
		var filePath = haxe_io_Path.join([extDir,rel[0]]);
		var filePathRel = haxe_io_Path.join([extDirRel,rel[0]]);
		var fileItem = ui_treeview_TreeView.makeAssetItem(rel[0],filePathRel,filePath,"file");
		tvDir.treeItems.appendChild(fileItem);
		changed = true;
	}
	if(changed) {
		electron_FileWrap.writeTextFileSync(extensionPath,yy_YyJson.stringify(ext,v23));
	}
};
yy_shared_YyManipExtension.deleteFile = function(extensionPath,filename) {
	var ext = electron_FileWrap.readYyFileSync(extensionPath);
	var fileToDelete = tools_NativeArray.findFirst(ext.files,function(file) {
		return file.filename == filename;
	});
	if(fileToDelete == null) {
		return false;
	}
	var filePath = haxe_io_Path.directory(extensionPath) + "/" + filename;
	try {
		electron_FileWrap.unlinkSync(filePath);
	} catch( _g ) {
	}
	HxOverrides.remove(ext.files,fileToDelete);
	electron_FileWrap.writeYyFileSync(extensionPath,ext,gml_Project.current.isGMS23);
	return true;
};
var yy_v22_YyGUIDCollisionChecker = function() {
	var $l=arguments.length;
	var ctx = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){ctx[$i-0]=arguments[$i];}
	this.items = Object.create(null);
	this.context = ctx.slice();
};
$hxClasses["yy.v22.YyGUIDCollisionChecker"] = yy_v22_YyGUIDCollisionChecker;
yy_v22_YyGUIDCollisionChecker.__name__ = "yy.v22.YyGUIDCollisionChecker";
yy_v22_YyGUIDCollisionChecker.prototype = {
	add: function(guid) {
		var $l=arguments.length;
		var rest = new Array($l>1?$l-1:0);
		for(var $i=1;$i<$l;++$i){rest[$i-1]=arguments[$i];}
		var arr = rest.slice();
		if(Object.prototype.hasOwnProperty.call(this.items,guid)) {
			console.error("GUID collision in " + this.context.join(" ") + ": GUID " + (guid == null ? "null" : guid) + " (" + arr.join(" ") + ") is already used (for " + this.items[guid].join(" ") + "). IDE may decline to load your project, corrupt it upon importing to 2.3, or otherwise act unusual.");
		} else {
			this.items[guid] = arr;
		}
	}
	,__class__: yy_v22_YyGUIDCollisionChecker
};
var yy_v22_YyLoaderV22 = function() { };
$hxClasses["yy.v22.YyLoaderV22"] = yy_v22_YyLoaderV22;
yy_v22_YyLoaderV22.__name__ = "yy.v22.YyLoaderV22";
yy_v22_YyLoaderV22.run = function(project,yyProject) {
	var resources = Object.create(null);
	project.yyResources = resources;
	var resourceGUIDs = Object.create(null);
	project.yyResourceGUIDs = resourceGUIDs;
	project.yySpriteURLs = Object.create(null);
	var views = Object.create(null);
	var roomViews = Object.create(null);
	var rootView = null;
	var rxName = gml_Project.rxName;
	var treeLocation = Object.create(null);
	var cfdKey1 = Object.create(null);
	var cfdKey2 = Object.create(null);
	var checkForDuplicates = function(map,key,item) {
		if(Object.prototype.hasOwnProperty.call(map,key)) {
			console.error("Collision for " + key + "!" + " GMS2 will not load the project unless you fix this." + " Contenders:",map[key],item);
		} else {
			map[key] = item;
		}
	};
	project.resourceTypes = Object.create(null);
	var _g = 0;
	var _g1 = yyProject.resources;
	while(_g < _g1.length) {
		var res = _g1[_g];
		++_g;
		var key = res.Key;
		var val = res.Value;
		var path = val.resourcePath;
		var type = val.resourceType;
		val.resourceName = path.replace(rxName.r,"$1");
		checkForDuplicates(cfdKey1,key.toLowerCase(),res);
		checkForDuplicates(cfdKey2,val.id.toLowerCase(),res);
		checkForDuplicates(cfdKey2,StringTools.replace(val.resourcePath.toLowerCase(),"\\","/"),res);
		var expectedPathPrefix;
		switch(type) {
		case "GMObject":
			expectedPathPrefix = "objects";
			break;
		case "GMRoom":
			expectedPathPrefix = "rooms";
			break;
		case "GMScript":
			expectedPathPrefix = "scripts";
			break;
		case "GMSprite":
			expectedPathPrefix = "sprites";
			break;
		default:
			expectedPathPrefix = null;
		}
		if(expectedPathPrefix != null && !path.startsWith(expectedPathPrefix)) {
			console.warn("`" + path + "` is marked as " + type + " but is not in " + expectedPathPrefix + " directory." + " This suggests that your resource type might be mismatched.");
		}
		resources[key] = res;
		if(val.resourceType == "GMFolder") {
			var view;
			try {
				view = project.readYyFileSync(val.resourcePath);
			} catch( _g2 ) {
				console.error("Failed to load " + val.resourcePath);
				continue;
			}
			val.resourceName = view.folderName;
			if(view.isDefaultView) {
				rootView = view;
			}
			views[key] = view;
			if(val.resourcePath.endsWith("-room.yy")) {
				var path1 = val.resourcePath;
				var slash = path1.lastIndexOf("\\");
				if(slash < 0) {
					slash = path1.indexOf("/");
				}
				roomViews[path1.substring(slash + 1,path1.length - 8)] = view;
			}
		} else {
			project.setResourceTypeFromPath(path);
		}
	}
	if(rootView == null) {
		return "Couldn't find a top-level view in project.";
	}
	parsers_GmlSeeker.start();
	gml_GmlAPI.gmlClear();
	gml_GmlAPI.extClear();
	var comp = gml_GmlAPI.gmlComp;
	var objectNames = Object.create(null);
	var objectGUIDs = Object.create(null);
	project.yyObjectNames = objectNames;
	project.yyObjectGUIDs = objectGUIDs;
	project.lambdaMap = Object.create(null);
	project.yyTextureGroups = [];
	var scriptLambdas = project.properties.lambdaMode == 2;
	if(scriptLambdas) {
		synext_GmlExtLambda.seekData = new parsers_GmlSeekData(file_kind_gml_KGmlLambdas.inst);
		synext_GmlExtLambda.seekPath = project.fullPath("#lambdas");
	}
	var lz = ui_Preferences.current.lambdaMagic;
	var loadrec = null;
	loadrec = function(out,view,path) {
		var _g = 0;
		var _g1 = view.children;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			var res = [resources[el]];
			if(res[0] == null) {
				continue;
			}
			var val = res[0].Value;
			var name;
			var rel = [];
			var type = val.resourceType;
			var treeLocPath = "`" + path + "` (in " + (view.id == null ? "null" : view.id) + ".yy)";
			if(Object.prototype.hasOwnProperty.call(treeLocation,el)) {
				console.warn("Resource `" + (el == null ? "null" : el) + "` (" + (type == "GMFolder" ? views[res[0].Key].folderName : val.resourcePath) + (") exists in two places at once, " + treeLocPath + " and `") + treeLocation[el] + "`. This may cause GMS2 to remove your resource on load.");
			} else {
				treeLocation[el] = treeLocPath;
			}
			var loadrec_dir = (function(rel,res) {
				return function(vdir,name) {
					if(out == null) {
						loadrec(out,vdir,null);
						return;
					}
					rel[0] = path + name + "/";
					if(name == "#gmedit-lambda") {
						project.lambdaView = res[0].Value.resourcePath;
						var _g = 0;
						var _g1 = vdir.children;
						while(_g < _g1.length) {
							var res1 = resources[_g1[_g++]];
							if(res1 == null) {
								continue;
							}
							project.lambdaMap[res1.Value.resourceName] = true;
						}
					}
					var dir = ui_treeview_TreeView.makeAssetDir(name,rel[0],vdir.filterType.substring(2).toLowerCase());
					dir.setAttribute("data-yyid",res[0].Key);
					var nextOut = dir.treeItems;
					if(path == "" && vdir.folderName == "rooms") {
						var ccs = ui_treeview_TreeView.makeAssetItem("roomCreationCodes",project.name,project.path,"roomccs");
						ccs.removeAttribute("data-thumb");
						ccs.yyOpenAs = file_kind_yy_KYyRoomCCs.inst;
						dir.treeItems.appendChild(ccs);
					}
					loadrec(nextOut,vdir,rel[0]);
					out.appendChild(dir);
				};
			})(rel,res);
			if(type == "GMFolder") {
				var vdir = views[res[0].Key];
				if(vdir == null) {
					continue;
				}
				name = vdir.folderName;
				if(path == "") {
					if(name == "datafiles") {
						name = "Included Files";
					} else {
						name = name.charAt(0).toUpperCase() + name.substring(1);
					}
				}
				loadrec_dir(vdir,name);
			} else {
				name = val.resourceName;
				rel[0] = path + name;
				var full = [project.fullPath(val.resourcePath)];
				resourceGUIDs[name] = res[0].Key;
				switch(type) {
				case "GMNotes":
					var atype = tools_NativeString.decapitalize(type.substr(2));
					gml_GmlAPI.gmlLookupItems.push({ value : name, meta : "asset." + atype});
					break;
				case "GMFont":case "GMObject":case "GMPath":case "GMRoom":case "GMScript":case "GMShader":case "GMSound":case "GMSprite":case "GMTileSet":case "GMTimeline":
					var atype1 = tools_NativeString.decapitalize(type.substr(2));
					var aceType = "asset." + atype1;
					gml_GmlAPI.gmlKind[name] = aceType;
					if(type != "GMScript") {
						gml_GmlAPI.gmlLookupItems.push({ value : name, meta : aceType});
					}
					var next = { name : name, value : name, score : 0, meta : atype1, doc : null};
					comp.push(next);
					gml_GmlAPI.gmlAssetComp[name] = next;
					break;
				}
				if(out == null) {
					continue;
				}
				switch(type) {
				case "GMExtension":
					var ext = electron_FileWrap.readYyFileSync(full[0]);
					var extDir = haxe_io_Path.directory(full[0]);
					var extRel = path + ext.name + "/";
					var extEl = ui_treeview_TreeView.makeAssetDir(ext.name,extRel,"extension");
					extEl.setAttribute("data-full-path",full[0]);
					extEl.setAttribute("data-ident",ext.name);
					extEl.setAttribute("data-yyid",res[0].Key);
					var lm = lz && ext.name.toLowerCase() == "gmedit_lambda" ? project.lambdaMap : null;
					if(lm != null) {
						project.lambdaExt = full[0];
					}
					var extColCheck = new yy_v22_YyGUIDCollisionChecker("extension",ext.name);
					var _g2 = 0;
					var _g3 = ext.files;
					while(_g2 < _g3.length) {
						var file = _g3[_g2];
						++_g2;
						var fileName = file.filename;
						var isGmlFile = haxe_io_Path.extension(fileName).toLowerCase() == "gml";
						var filePath = haxe_io_Path.join([extDir,fileName]);
						var fileItem = ui_treeview_TreeView.makeAssetItem(fileName,extRel + fileName,filePath,"extfile");
						extEl.treeItems.appendChild(fileItem);
						extColCheck.add(file.id,"file",file.filename);
						var fileColCheck = new yy_v22_YyGUIDCollisionChecker("extension",ext.name,"file",file.filename);
						if(isGmlFile) {
							if(lm != null) {
								project.lambdaGml = filePath;
								synext_GmlExtLambda.readDefs(filePath);
							} else {
								parsers_GmlSeeker.run(filePath,"",file_kind_gml_KGmlExtension.inst);
							}
							fileItem.yyOpenAs = file_kind_gml_KGmlExtension.inst;
						}
						if(lm != null) {
							var _g4 = 0;
							var _g5 = file.functions;
							while(_g4 < _g5.length) lm[_g5[_g4++].name.replace(synext_GmlExtLambda.rxlcPrefix,"__lf_")] = true;
						} else {
							var _g6 = 0;
							var _g7 = file.functions;
							while(_g6 < _g7.length) {
								var func = _g7[_g6];
								++_g6;
								var name1 = func.name;
								var help = func.help;
								fileColCheck.add(func.id,"function",name1);
								gml_GmlAPI.extKind[name1] = "extfunction";
								gml_GmlAPI.extArgc[name1] = func.argCount < 0 ? func.argCount : func.args.length;
								if(help != null && help != "" && !func.hidden) {
									gml_GmlAPI.extCompAdd({ name : name1, value : name1, score : 0, meta : "function", doc : help});
									gml_GmlAPI.extDoc[name1] = gml_funcdoc_GmlFuncDocParser.parse(help,null);
									if(isGmlFile) {
										gml_GmlAPI.gmlLookupItems.push({ value : name1, meta : "extfunction"});
									}
								}
								if(isGmlFile) {
									gml_GmlAPI.gmlLookup[name1] = { path : filePath, sub : name1, row : 0};
								}
							}
						}
						var _g8 = 0;
						var _g9 = file.constants;
						while(_g8 < _g9.length) {
							var mcr = _g9[_g8];
							++_g8;
							var name2 = mcr.constantName;
							fileColCheck.add(mcr.id,"macro",name2);
							if(name2.indexOf("/*") >= 0) {
								continue;
							}
							gml_GmlAPI.extKind[name2] = "extmacro";
							if(!mcr.hidden) {
								gml_GmlAPI.extCompAdd({ name : name2, value : name2, score : 0, meta : "macro", doc : mcr.value});
							}
						}
					}
					var extMiscRel = rel[0] + "/" + "AndroidSource";
					if(project.existsSync(extMiscRel)) {
						var extMiscEl = ui_treeview_TreeView.makeAssetDir("AndroidSource",extMiscRel,"file");
						raw_RawLoader.loadDirRec(project,extMiscEl.treeItems,extMiscRel);
						extEl.treeItems.appendChild(extMiscEl);
					}
					var extMiscRel1 = rel[0] + "/" + "iOSSource";
					if(project.existsSync(extMiscRel1)) {
						var extMiscEl1 = ui_treeview_TreeView.makeAssetDir("iOSSource",extMiscRel1,"file");
						raw_RawLoader.loadDirRec(project,extMiscEl1.treeItems,extMiscRel1);
						extEl.treeItems.appendChild(extMiscEl1);
					}
					if(ext.name == "GMLive" && Object.prototype.hasOwnProperty.call(gml_GmlAPI.extKind,"live_init")) {
						project.hasGMLive = true;
					}
					out.appendChild(extEl);
					continue;
				case "GMIncludedFile":
					rel[0] = haxe_io_Path.withoutExtension(rel[0]);
					full[0] = full[0].replace(yy_v22_YyLoaderV22.rxDatafiles,"datafiles$1");
					full[0] = haxe_io_Path.withoutExtension(full[0]);
					name = haxe_io_Path.withoutDirectory(full[0]);
					gml_GmlAPI.gmlLookup[rel[0]] = { path : full[0], row : 0};
					gml_GmlAPI.gmlLookupItems.push({ value : name, meta : "includedFile"});
					break;
				case "GMNotes":
					rel[0] = haxe_io_Path.withoutExtension(rel[0]);
					var nx = haxe_io_Path.withoutExtension(full[0]);
					full[0] = nx + ".txt";
					name = haxe_io_Path.withoutDirectory(nx);
					break;
				case "GMObject":
					objectNames[res[0].Key] = name;
					objectGUIDs[name] = res[0].Key;
					parsers_GmlSeeker.run(full[0],null,file_kind_yy_KYyEvents.inst);
					break;
				case "GMScript":
					full[0] = haxe_io_Path.withoutExtension(full[0]) + ".gml";
					if(!scriptLambdas || !name.startsWith("__lf_")) {
						gml_GmlAPI.gmlLookupItems.push({ value : name, meta : "asset.script"});
						parsers_GmlSeeker.run(full[0],name,file_kind_gml_KGmlScript.inst);
					}
					break;
				default:
				}
				var item = [ui_treeview_TreeView.makeAssetItem(name,rel[0],full[0],type.substring(2).toLowerCase())];
				item[0].setAttribute("data-yyid",res[0].Key);
				if(ui_Preferences.current.assetThumbs) {
					if(type == "GMSprite") {
						var spritePath = [res[0].Value.resourcePath];
						project.readYyFile(spritePath[0],(function(spritePath,item,full,res) {
							return function(e,sprite) {
								var url;
								if(e == null && sprite.frames != null) {
									var frame = sprite.frames[0];
									if(frame != null) {
										var fid = frame.id;
										var framePath = haxe_io_Path.directory(spritePath[0]) + "/";
										url = project.getImageURL(framePath + (fid == null ? "null" : fid) + ".png");
									} else {
										url = null;
									}
									var found = Object.create(null);
									var _this = sprite.frames;
									var _g_current = 0;
									while(_g_current < _this.length) {
										var _g_value = _this[_g_current++];
										var _g_key = _g_current - 1;
										var fid = _g_value.id;
										if(Object.prototype.hasOwnProperty.call(found,fid)) {
											console.error("GUID " + (fid == null ? "null" : fid) + " (frame " + _g_key + ")" + " is already being used by frame " + found[fid] + " in sprite " + sprite.name + "! GMS2 IDE may decline to load your project.");
										} else {
											found[fid] = _g_key;
										}
									}
								} else {
									url = null;
								}
								project.yySpriteURLs[res[0].Key] = url;
								ui_treeview_TreeView.setThumb(full[0],url,item[0]);
							};
						})(spritePath,item,full,res));
					}
				}
				out.appendChild(item[0]);
				if(type == "GMRoom") {
					var vdir1 = roomViews[res[0].Key];
					if(vdir1 != null) {
						loadrec_dir(vdir1,name);
					}
				}
			}
		}
	};
	ui_treeview_TreeView.saveOpen();
	ui_treeview_TreeView.clear();
	loadrec(ui_treeview_TreeView.element,rootView,"");
	if(project.existsSync("#import")) {
		var idir = ui_treeview_TreeView.makeAssetDir("Imports","#import/","file");
		raw_RawLoader.loadDirRec(project,idir.treeItems,"#import");
		ui_treeview_TreeView.element.appendChild(idir);
	}
	return null;
};
var yy_v22_YyManipV22 = function() { };
$hxClasses["yy.v22.YyManipV22"] = yy_v22_YyManipV22;
yy_v22_YyManipV22.__name__ = "yy.v22.YyManipV22";
yy_v22_YyManipV22.resolve = function(q) {
	var pj = gml_Project.current;
	var py = q.py;
	if(py == null) {
		py = pj.readYyFileSync(pj.name);
	}
	var vp = "views/" + q.tvDir.getAttribute("data-yyid") + ".yy";
	var vy = pj.readYyFileSync(vp);
	var ri = q.tvRef.getAttribute("data-yyid");
	q.pj = pj;
	return { pj : pj, py : py, vp : vp, vy : vy, ri : ri};
};
yy_v22_YyManipV22.add = function(args) {
	var d = yy_v22_YyManipV22.resolve(args);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var py = d.py;
	var kind = args.single;
	var nix = yy_YyGUID.createNum(2,d.py);
	var ni = nix[0];
	var nType = "GM" + tools_NativeString.capitalize(args.single);
	var nBase;
	var nPath;
	var nDir;
	if(args.mkdir) {
		nBase = "views\\" + (ni == null ? "null" : ni);
		nPath = nBase + ".yy";
	} else {
		var nTop = args.plural;
		pj.mkdirSync(nTop);
		nDir = nTop + "\\" + args.name;
		pj.mkdirSync(nDir);
		nBase = nDir + "\\" + args.name;
		nPath = nBase + ".yy";
		args.npath = kind == "script" ? nBase + ".gml" : nPath;
	}
	var nJson;
	args.outGUID = ni;
	if(args.mkdir) {
		var nView = { id : ni, modelName : "GMFolder", mvc : "1.1", name : ni, children : [], filterType : nType, folderName : args.name, isDefaultView : false, localisedFolderName : ""};
		nType = "GMFolder";
		nJson = nView;
	} else {
		switch(kind) {
		case "object":
			nJson = { id : ni, modelName : "GMObject", mvc : "1.0", name : args.name, eventList : [], maskSpriteId : "00000000-0000-0000-0000-000000000000", overriddenProperties : null, parentObjectId : "00000000-0000-0000-0000-000000000000", persistent : false, physicsAngularDamping : 0.1, physicsDensity : 0.5, physicsFriction : 0.2, physicsGroup : 0, physicsKinematic : false, physicsLinearDamping : 0.1, physicsObject : false, physicsRestitution : 0.1, physicsSensor : false, physicsShape : 1, physicsShapePoints : null, physicsStartAwake : true, properties : [], solid : false, spriteId : "00000000-0000-0000-0000-000000000000", visible : true};
			break;
		case "script":
			var nyScr = { id : ni, modelName : "GMScript", mvc : "1.0", name : args.name, IsCompatibility : false, IsDnD : false};
			var gml = args.gmlCode;
			if(gml == null) {
				gml = "";
			}
			pj.writeTextFileSync(nBase + ".gml",gml);
			nJson = nyScr;
			break;
		case "shader":
			var nyShd = { id : ni, modelName : "GMShader", mvc : "1.0", name : args.name, type : 1};
			pj.writeTextFileSync(nBase + ".vsh",["attribute vec3 in_Position;                  // (x,y,z)","//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.","attribute vec4 in_Colour;                    // (r,g,b,a)","attribute vec2 in_TextureCoord;              // (u,v)","","varying vec2 v_vTexcoord;","varying vec4 v_vColour;","","void main()","{","    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);","    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;","    ","    v_vColour = in_Colour;","    v_vTexcoord = in_TextureCoord;","}"].join("\r\n"));
			pj.writeTextFileSync(nBase + ".fsh",["varying vec2 v_vTexcoord;","varying vec4 v_vColour;","","void main()","{","    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );","}"].join("\r\n"));
			nJson = nyShd;
			break;
		default:
			electron_Dialog.showError("No idea how to create type=`" + kind + "`, sorry");
			return false;
		}
	}
	var res = { Key : ni, Value : { id : nix[1], resourcePath : StringTools.replace(nPath,"/","\\"), resourceType : nType}};
	var resources = py.resources;
	var i = 0;
	while(i < resources.length) {
		if(ni < resources[i].Key) {
			break;
		}
		++i;
	}
	py.resources.splice(i,0,res);
	var ord = args.order;
	switch(ord) {
	case -2:
		var i = d.vy.children.length;
		if(i > 0) {
			d.vy.children.splice(i - 1,0,ni);
		} else {
			d.vy.children.push(ni);
		}
		break;
	case -1:case 1:
		var i = d.vy.children.indexOf(d.ri);
		if(i >= 0) {
			d.vy.children.splice(ord > 0 ? i + 1 : i,0,ni);
		} else if(ord < 0) {
			d.vy.children.unshift(ni);
		} else {
			d.vy.children.push(ni);
		}
		break;
	default:
		d.vy.children.push(ni);
	}
	pj.writeTextFileSync(d.vp,yy_YyJson.stringify(d.vy));
	var nJsonStr = yy_YyJson.stringify(nJson);
	pj.writeTextFileSync(nPath,nJsonStr);
	if(args.py == null) {
		pj.writeTextFileSync(pj.name,yy_YyJson.stringify(py));
	}
	ui_treeview_TreeViewItemMenus.createImplTV(args).setAttribute("data-yyid",ni);
	if(!args.mkdir) {
		switch(kind) {
		case "object":case "script":case "shader":
			var aceKind = "asset." + kind;
			var name = args.name;
			gml_GmlAPI.gmlComp.push({ name : name, value : name, score : 0, meta : kind, doc : null});
			gml_GmlAPI.gmlKind[args.name] = aceKind;
			gml_GmlAPI.gmlLookup[args.name] = { path : args.npath, row : 0};
			gml_GmlAPI.gmlLookupItems.push({ value : args.name, meta : aceKind});
			var fk;
			switch(kind) {
			case "object":
				fk = file_kind_yy_KYyEvents.inst;
				break;
			case "shader":
				fk = null;
				break;
			default:
				fk = file_kind_gml_KGmlScript.inst;
			}
			var fullPath = pj.fullPath(args.npath);
			if(fk != null) {
				parsers_GmlSeeker.runSync(fullPath,kind == "script" ? "" : nJsonStr,args.name,fk);
			}
			if(args.openFile != false) {
				gml_file_GmlFile.open(args.name,fullPath);
			}
			break;
		default:
			d.pj.reload();
		}
	}
	return true;
};
yy_v22_YyManipV22.remove = function(q) {
	var d = yy_v22_YyManipV22.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var res = d.py.resources;
	var removeDirRec = null;
	removeDirRec = function(path) {
		if(!pj.existsSync(path)) {
			return;
		}
		var _g = 0;
		var _g1 = pj.readdirSync(path);
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			if(pair.isDirectory) {
				removeDirRec(pair.relPath);
			} else {
				pj.unlinkSync(pair.relPath);
			}
		}
		pj.rmdirSync(path);
	};
	var removeItemRec = null;
	removeItemRec = function(id) {
		var path = null;
		var type = null;
		var _g = 0;
		var _g1 = res.length;
		while(_g < _g1) {
			var i = _g++;
			var pair = res[i];
			if(pair.Key == id) {
				res.splice(i,1);
				path = pair.Value.resourcePath;
				type = pair.Value.resourceType;
				break;
			}
		}
		if(path == null) {
			return true;
		}
		if(type == null) {
			electron_Dialog.showAlert("No idea how to remove type `" + type + "`, sorry");
			return false;
		} else {
			switch(type) {
			case "GMFolder":
				try {
					var _g = 0;
					var _g1 = pj.readYyFileSync(path).children;
					while(_g < _g1.length) removeItemRec(_g1[_g++]);
					try {
						pj.unlinkSync(path);
					} catch( _g ) {
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					console.warn(_g1);
				}
				break;
			case "GMObject":case "GMScript":case "GMShader":case "GMSprite":
				var d = haxe_io_Path.directory(path);
				removeDirRec(d);
				var fd = pj.fullPath(d);
				if(ui_Preferences.current.closeTabsOnFileDeletion) {
					var _g = 0;
					var _g1 = ui_ChromeTabs.impl.tabEls;
					while(_g < _g1.length) {
						var tab = _g1[_g];
						++_g;
						if(tab.gmlFile.path == null) {
							continue;
						}
						if(tab.gmlFile.path.startsWith(fd)) {
							tab.querySelector(".chrome-tab-close").click();
						}
					}
				}
				break;
			default:
				electron_Dialog.showAlert("No idea how to remove type `" + type + "`, sorry");
				return false;
			}
		}
		return true;
	};
	if(!removeItemRec(d.ri)) {
		return false;
	}
	pj.writeTextFileSync(pj.name,yy_YyJson.stringify(d.py));
	if(HxOverrides.remove(d.vy.children,d.ri)) {
		pj.writeTextFileSync(d.vp,yy_YyJson.stringify(d.vy));
	}
	pj.reload();
	return true;
};
yy_v22_YyManipV22.rename = function(q) {
	var d = yy_v22_YyManipV22.resolve(q);
	if(d == null) {
		return false;
	}
	var pair = null;
	var _g = 0;
	var _g1 = d.py.resources;
	while(_g < _g1.length) {
		var pair1 = _g1[_g];
		++_g;
		if(pair1.Key == d.ri) {
			pair = pair1.Value;
			break;
		}
	}
	if(pair == null) {
		return false;
	}
	var pj = d.pj;
	switch(pair.resourceType) {
	case "GMFolder":
		var vj = pj.readYyFileSync(pair.resourcePath);
		vj.folderName = q.name;
		pj.writeYyFileSync(pair.resourcePath,vj);
		break;
	case "GMObject":case "GMScript":case "GMShader":case "GMSprite":
		var path = pair.resourcePath;
		var dir = haxe_io_Path.directory(path);
		var ndir = haxe_io_Path.join([haxe_io_Path.directory(dir),q.name]);
		var rel = haxe_io_Path.withoutDirectory(path);
		pj.renameSync(dir,ndir);
		var fd0 = pj.fullPath(dir) + "/";
		var fd1 = pj.fullPath(ndir) + "/";
		var fn0 = haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(pair.resourcePath));
		var fn1 = q.name;
		var fp0 = fd0 + fn0 + ".";
		var fp1 = fd1 + fn1 + ".";
		var _g = 0;
		var _g1 = ui_ChromeTabs.impl.tabEls;
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			var tp = tab.gmlFile.path;
			if(tp == null || !tp.startsWith(fd0)) {
				continue;
			}
			if(tp.startsWith(fp0)) {
				tp = fp1 + tp.substring(fp0.length);
			} else {
				tp = fd1 + tp.substring(fd0.length);
			}
			tab.gmlFile.path = tp;
			if(tab.querySelector(".chrome-tab-title-text").innerText == fn0) {
				tab.querySelector(".chrome-tab-title-text").innerText = fn1;
			}
			tab.setAttribute(ui_ChromeTabs.attrContext,tab.gmlFile.path);
		}
		var curr_yy = StringTools.replace(haxe_io_Path.join([ndir,rel]),"/","\\");
		var next_yy = ndir + "\\" + q.name + ".yy";
		pair.resourcePath = next_yy;
		pj.renameSync(curr_yy,next_yy);
		var next_res = pj.readYyFileSync(next_yy);
		next_res.name = q.name;
		pj.writeYyFileSync(next_yy,next_res);
		var samename;
		switch(pair.resourceType) {
		case "GMScript":
			samename = ["gml"];
			break;
		case "GMShader":
			samename = ["fsh","vsh"];
			break;
		default:
			samename = null;
		}
		if(samename != null) {
			var _g = 0;
			while(_g < samename.length) {
				var sfx = "." + samename[_g++];
				pj.renameSync(haxe_io_Path.withoutExtension(curr_yy) + sfx,haxe_io_Path.join([ndir,q.name + sfx]));
			}
		}
		break;
	default:
		electron_Dialog.showAlert("No idea how to rename type=" + pair.resourceType + ", sorry");
		return false;
	}
	pj.writeYyFileSync(pj.name,d.py);
	pj.reload();
	return true;
};
yy_v22_YyManipV22.move = function(q) {
	var d = yy_v22_YyManipV22.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var vy = d.vy;
	var sp = "views/" + q.srcDir.getAttribute("data-yyid") + ".yy";
	var sy = d.vp != sp ? pj.readYyFileSync(sp) : vy;
	var si = q.srcRef.getAttribute("data-yyid");
	HxOverrides.remove(sy.children,si);
	switch(q.order) {
	case -1:
		var i = vy.children.indexOf(d.ri);
		if(i >= 0) {
			vy.children.splice(i,0,si);
		} else {
			vy.children.unshift(si);
		}
		break;
	case 1:
		var i = vy.children.indexOf(d.ri);
		if(i >= 0) {
			vy.children.splice(i + 1,0,si);
		} else {
			vy.children.push(si);
		}
		break;
	default:
		vy.children.push(si);
	}
	pj.writeTextFileSync(d.vp,yy_YyJson.stringify(vy));
	if(vy != sy) {
		pj.writeTextFileSync(sp,yy_YyJson.stringify(sy));
	}
	yy_YyManip.moveTV(q);
	return true;
};
var yy_zip_YyZip = function(path,main,entries) {
	this.yyzDirMap = Object.create(null);
	this.yyzFileMap = Object.create(null);
	this.yyzFileList = [];
	this.yyzPath = path;
	gml_Project.call(this,main);
	this.isVirtual = true;
	this.yyzDirMap[""] = new yy_zip_YyZipDir("");
	var _g = 0;
	while(_g < entries.length) this.yyzAddFile(entries[_g++]);
};
$hxClasses["yy.zip.YyZip"] = yy_zip_YyZip;
yy_zip_YyZip.__name__ = "yy.zip.YyZip";
yy_zip_YyZip.open = function(path,bytes) {
	var fileName = null;
	try {
		var entries = [];
		var _g_head = haxe_zip_Reader.readZip(new haxe_io_BytesInput(bytes)).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var file = new yy_zip_YyZipFile(val.fileName,val.fileTime.getTime());
			file.setBytes(val.data,val.compressed);
			entries.push(file);
		}
		var main = yy_zip_YyZipTools.locateMain(entries);
		if(main == null) {
			window.alert("The archive contains no project files.");
			return false;
		}
		fileName = null;
		gml_Project.current = new yy_zip_YyZip(path,main,entries);
		return true;
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		console.log("Error processing YYZ (" + fileName + ")",_g1);
		return false;
	}
};
yy_zip_YyZip.__super__ = gml_Project;
yy_zip_YyZip.prototype = $extend(gml_Project.prototype,{
	yyzGetParentDir: function(path) {
		var parts = path.split("/");
		parts.pop();
		var _g = [];
		var _g_current = 0;
		while(_g_current < parts.length) _g.push(parts.slice(0,_g_current++ + 1).join("/"));
		var dir = this.yyzDirMap[""];
		var _g_current = 0;
		while(_g_current < _g.length) {
			var _g_value = _g[_g_current];
			++_g_current;
			var parent = dir;
			dir = this.yyzDirMap[_g_value];
			if(dir != null) {
				continue;
			}
			dir = new yy_zip_YyZipDir(_g_value);
			this.yyzDirMap[_g_value] = dir;
			parent.entries.push(dir);
		}
		return dir;
	}
	,yyzAddFile: function(file) {
		this.yyzFileList.push(file);
		this.yyzFileMap[file.path.replace(yy_zip_YyZip.rxBackslash,"/")] = file;
		this.yyzGetParentDir(file.path).entries.push(file);
	}
	,toZip: function() {
		var output = new haxe_io_BytesOutput();
		var writer = new haxe_zip_Writer(output);
		var entries = new haxe_ds_List();
		var now = new Date();
		var _g = 0;
		var _g1 = this.yyzFileList;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var bytes = file.getBytes();
			entries.push({ fileName : file.path, fileSize : bytes.length, fileTime : now, compressed : false, dataSize : bytes.length, data : bytes, crc32 : haxe_crypto_Crc32.make(bytes)});
		}
		writer.write(entries);
		return output.getBytes().sub(0,output.b.pos);
	}
	,existsSync: function(path) {
		path = path.replace(yy_zip_YyZip.rxBackslash,"/");
		if(!Object.prototype.hasOwnProperty.call(this.yyzFileMap,path)) {
			return Object.prototype.hasOwnProperty.call(this.yyzDirMap,path);
		} else {
			return true;
		}
	}
	,mtimeSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		if(file != null) {
			return file.time;
		} else {
			return null;
		}
	}
	,unlinkSync: function(path) {
		path = path.replace(yy_zip_YyZip.rxBackslash,"/");
		var file = this.yyzFileMap[path];
		if(file != null) {
			delete this.yyzFileMap[path];
			HxOverrides.remove(this.yyzFileList,file);
			var dir = this.yyzDirMap[file.dir];
			if(dir != null) {
				HxOverrides.remove(dir.entries,file);
			}
			return;
		}
		var dir = this.yyzDirMap[path];
		if(dir != null) {
			var _g = 0;
			var _g1 = dir.entries;
			while(_g < _g1.length) this.unlinkSync(_g1[_g++].path);
			delete this.yyzDirMap[path];
			var par = this.yyzDirMap[dir.dir];
			if(par != null) {
				HxOverrides.remove(par.entries,dir);
			}
		}
	}
	,readTextFile: function(path,fn) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		tools_JsTools.setImmediate(function() {
			if(file != null) {
				fn(null,file.getText());
			} else {
				fn(new Error("File not found: " + path),null);
			}
		});
	}
	,readTextFileSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		if(file != null) {
			return file.getText();
		} else {
			throw new Error("File not found: " + path);
		}
	}
	,writeTextFileSync: function(path,text) {
		var fwpath = path.replace(yy_zip_YyZip.rxBackslash,"/");
		var file = this.yyzFileMap[fwpath];
		var t = new Date().getTime();
		if(file == null) {
			file = new yy_zip_YyZipFile(fwpath,t);
			file.setText(text);
			this.yyzFileMap[fwpath] = file;
			this.yyzFileList.push(file);
			this.yyzGetParentDir(fwpath).entries.push(file);
		} else {
			file.setText(text);
			file.time = t;
		}
	}
	,readJsonFile: function(path,fn) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		tools_JsTools.setImmediate(function() {
			if(file != null) {
				fn(null,JSON.parse(file.getText()));
			} else {
				fn(new Error("File not found: " + path),null);
			}
		});
	}
	,readJsonFileSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		if(file != null) {
			return JSON.parse(file.getText());
		} else {
			throw new Error("File not found: " + path);
		}
	}
	,readYyFileSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		if(file != null) {
			return yy_YyJson.parse(file.getText());
		} else {
			throw new Error("File not found: " + path);
		}
	}
	,readGmxFile: function(path,fn) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		tools_JsTools.setImmediate(function() {
			if(file != null) {
				fn(null,gmx_SfGmx.parse(file.getText()));
			} else {
				fn(new Error("File not found: " + path),null);
			}
		});
	}
	,readGmxFileSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		if(file != null) {
			return gmx_SfGmx.parse(file.getText());
		} else {
			throw new Error("File not found: " + path);
		}
	}
	,getImageURL: function(path) {
		var file = this.yyzFileMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		if(file != null) {
			return file.getDataURL();
		} else {
			return null;
		}
	}
	,renameSync: function(prev,next) {
		prev = prev.replace(yy_zip_YyZip.rxBackslash,"/");
		next = next.replace(yy_zip_YyZip.rxBackslash,"/");
		var file = this.yyzFileMap[prev];
		if(file != null) {
			var _file_dir = file.dir;
			file.setPath(next);
			delete this.yyzFileMap[prev];
			this.yyzFileMap[next] = file;
			if(file.dir != _file_dir) {
				var dir = this.yyzDirMap[_file_dir];
				if(dir != null) {
					HxOverrides.remove(dir.entries,file);
				}
				dir = this.yyzGetParentDir(next);
				if(dir.entries.indexOf(file) < 0) {
					dir.entries.push(file);
				}
			}
		} else {
			var dir = this.yyzDirMap[prev];
			if(dir != null) {
				delete this.yyzDirMap[prev];
				this.yyzDirMap[next] = dir;
				dir.setPath(next);
				var _g = 0;
				var _g1 = dir.entries;
				while(_g < _g1.length) {
					var entry = _g1[_g];
					++_g;
					this.renameSync(entry.path,next + "/" + entry.fname);
				}
			}
		}
	}
	,readdirSync: function(path) {
		var dir = this.yyzDirMap[path.replace(yy_zip_YyZip.rxBackslash,"/")];
		if(dir == null) {
			return [];
		}
		var out = [];
		var _g = 0;
		var _g1 = dir.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			out.push({ fileName : entry.fname, relPath : entry.path, fullPath : entry.path, isDirectory : ((entry) instanceof yy_zip_YyZipDir)});
		}
		return out;
	}
	,mkdirSync: function(path,options) {
	}
	,rmdirSync: function(path) {
	}
	,openExternal: function(path) {
	}
	,__class__: yy_zip_YyZip
});
var yy_zip_YyZipBase = function(_path) {
	this.path = _path;
	this.fname = haxe_io_Path.withoutDirectory(_path);
	this.dir = haxe_io_Path.directory(_path);
};
$hxClasses["yy.zip.YyZipBase"] = yy_zip_YyZipBase;
yy_zip_YyZipBase.__name__ = "yy.zip.YyZipBase";
yy_zip_YyZipBase.prototype = {
	setPath: function(_path) {
		this.path = _path;
		this.fname = haxe_io_Path.withoutDirectory(_path);
		this.dir = haxe_io_Path.directory(_path);
	}
	,trimStart: function(len) {
		this.path = this.path.substring(len);
		this.dir = this.dir.substring(len);
	}
	,__class__: yy_zip_YyZipBase
};
var yy_zip_YyZipDir = function(_path) {
	this.entries = [];
	yy_zip_YyZipBase.call(this,_path);
};
$hxClasses["yy.zip.YyZipDir"] = yy_zip_YyZipDir;
yy_zip_YyZipDir.__name__ = "yy.zip.YyZipDir";
yy_zip_YyZipDir.__super__ = yy_zip_YyZipBase;
yy_zip_YyZipDir.prototype = $extend(yy_zip_YyZipBase.prototype,{
	__class__: yy_zip_YyZipDir
});
var yy_zip_YyZipDirectoryDialog = function() { };
$hxClasses["yy.zip.YyZipDirectoryDialog"] = yy_zip_YyZipDirectoryDialog;
yy_zip_YyZipDirectoryDialog.__name__ = "yy.zip.YyZipDirectoryDialog";
yy_zip_YyZipDirectoryDialog.isAvailable = function() {
	var q = document.createElement("input");
	return ((q.webkitdirectory) !== undefined);
};
yy_zip_YyZipDirectoryDialog.init = function() {
	var form = document.createElement("form");
	tools_HtmlTools.moveOffScreen(form);
	var input = document.createElement("input");
	input.setAttribute("webkitdirectory","");
	input.type = "file";
	input.addEventListener("change",yy_zip_YyZipDirectoryDialog.check);
	form.appendChild(input);
	document.body.appendChild(form);
	yy_zip_YyZipDirectoryDialog.form = form;
	yy_zip_YyZipDirectoryDialog.input = input;
};
yy_zip_YyZipDirectoryDialog.check = function(_) {
	var main = null;
	var entries = [];
	var left = 1;
	var next = function() {
		if((left -= 1) > 0) {
			return;
		}
		var main = yy_zip_YyZipTools.locateMain(entries);
		if(main == null) {
			window.alert("Couldn't find any project files in directory");
			return;
		}
		do {
			var mt = new RegExp("^.+?[\\/]").exec(main);
			if(mt == null) {
				break;
			}
			var dir = mt[0];
			var i = entries.length;
			while(--i >= 0) if(!entries[i].path.startsWith(dir)) {
				break;
			}
			if(i >= 0) {
				break;
			}
			var start = dir.length;
			i = entries.length;
			while(--i >= 0) entries[i].trimStart(start);
			main = main.substring(start);
		} while(false);
		gml_Project.setCurrent(new yy_zip_YyZip(main,main,entries));
	};
	var files = yy_zip_YyZipDirectoryDialog.input.files;
	if(files.length == 0) {
		return;
	}
	var status = "Loading " + files.length + " file";
	if(files.length != 1) {
		status += "s";
	}
	tools_HtmlTools.setInnerText(gml_Project.nameNode,status + "...");
	var _g = 0;
	while(_g < files.length) {
		var file = [files[_g]];
		++_g;
		var rel = [file[0].webkitRelativePath];
		if(main == null) {
			var ext = haxe_io_Path.extension(rel[0]);
			if(ext.toLowerCase() != "yyp") {
				ext = haxe_io_Path.extension(haxe_io_Path.withoutExtension(rel[0])).toLowerCase();
				if(ext.toLowerCase() != "project") {
					var lqr = haxe_io_Path.withoutDirectory(rel[0]).toLowerCase();
					if(lqr == "main.txt" || lqr == "main.cfg") {
						main = rel[0];
					}
				} else {
					main = rel[0];
				}
			} else {
				main = rel[0];
			}
		}
		var reader = [new FileReader()];
		reader[0].onloadend = (function(reader,rel,file) {
			return function(_) {
				var abuf = reader[0].result;
				var bytes = haxe_io_Bytes.ofData(abuf);
				var zipFile = new yy_zip_YyZipFile(rel[0],file[0].lastModified);
				zipFile.setBytes(bytes);
				entries.push(zipFile);
				next();
			};
		})(reader,rel,file);
		left += 1;
		reader[0].readAsArrayBuffer(file[0]);
	}
	next();
};
yy_zip_YyZipDirectoryDialog.open = function() {
	if(yy_zip_YyZipDirectoryDialog.form == null) {
		yy_zip_YyZipDirectoryDialog.init();
	}
	yy_zip_YyZipDirectoryDialog.form.reset();
	yy_zip_YyZipDirectoryDialog.input.click();
};
var yy_zip_YyZipFile = function(path,time) {
	this.dataURL = null;
	this.compressed = false;
	yy_zip_YyZipBase.call(this,path);
	this.time = time;
};
$hxClasses["yy.zip.YyZipFile"] = yy_zip_YyZipFile;
yy_zip_YyZipFile.__name__ = "yy.zip.YyZipFile";
yy_zip_YyZipFile.__super__ = yy_zip_YyZipBase;
yy_zip_YyZipFile.prototype = $extend(yy_zip_YyZipBase.prototype,{
	uncompress: function() {
		this.bytes = tools_BufferTools.inflate(this.bytes);
		this.compressed = false;
	}
	,getBytes: function() {
		if(this.bytes == null) {
			this.bytes = haxe_io_Bytes.ofString(this.text);
		}
		return this.bytes;
	}
	,getText: function() {
		if(this.text == null) {
			if(this.compressed) {
				this.uncompress();
			}
			this.text = this.bytes.toString();
		}
		return this.text;
	}
	,getDataURL: function() {
		if(this.bytes != null) {
			if(this.compressed) {
				this.uncompress();
			}
			return "data:" + (haxe_io_Path.extension(this.path).toLowerCase() == "png" ? "image/png" : "application/octet-stream") + ";base64," + tools_BufferTools.toBase64(this.bytes,0,this.bytes.length);
		} else {
			return "";
		}
	}
	,setBytes: function(b,isCompressed) {
		this.bytes = b;
		this.compressed = isCompressed;
		this.text = null;
		this.dataURL = null;
	}
	,setText: function(s) {
		this.text = s;
		this.bytes = null;
		this.compressed = false;
		this.dataURL = null;
	}
	,__class__: yy_zip_YyZipFile
});
var yy_zip_YyZipTools = function() { };
$hxClasses["yy.zip.YyZipTools"] = yy_zip_YyZipTools;
yy_zip_YyZipTools.__name__ = "yy.zip.YyZipTools";
yy_zip_YyZipTools.locateMain = function(entries) {
	var main = null;
	var mainDepth = 0;
	var _g = 0;
	while(_g < entries.length) {
		var path = entries[_g++].path;
		if(tools_PathTools.ptDetectProject(path).version != gml_GmlVersion.none) {
			var depth = tools_PathTools.ptDepth(path);
			if(main == null || depth < mainDepth) {
				main = path;
				mainDepth = depth;
			}
		}
	}
	return main;
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
ace_AceGmlHighlight.useBracketDepth = document.documentElement.getAttribute("data-theme-uses-bracket-depth") != null;
ace_AceGmlTools.keywordContextKind = (function($this) {
	var $r;
	var r = Object.create(null);
	{
		r["and"] = 2;
		r["or"] = 2;
		r["xor"] = 2;
		r["not"] = 2;
		r["div"] = 2;
		r["mod"] = 2;
	}
	{
		r["if"] = 2;
		r["while"] = 2;
		r["until"] = 2;
		r["repeat"] = 2;
		r["switch"] = 2;
		r["return"] = 2;
	}
	{
		r["case"] = 2;
		r["throw"] = 2;
	}
	{
		r["else"] = 1;
		r["try"] = 1;
		r["do"] = 1;
	}
	{
		r["exit"] = 1;
		r["break"] = 1;
		r["continue"] = 1;
	}
	$r = r;
	return $r;
}(this));
ace_AceSnippets.map = Object.create(null);
ace_AceWrapCompleter.noItems = [];
gml_GmlVersion.none = (function($this) {
	var $r;
	var v = new gml_GmlVersion("none","api/none",false);
	v.load();
	$r = v;
	return $r;
}(this));
gml_GmlVersion.map = Object.create(null);
gml_GmlVersion.list = [];
gml_GmlAPI.version = gml_GmlVersion.none;
gml_GmlAPI.kwList = ["globalvar","var","if","then","else","begin","end","for","while","do","until","repeat","switch","case","default","break","continue","with","exit","return","self","other","noone","all","global","local","mod","div","not","and","or","xor","enum"];
gml_GmlAPI.kwFlow = tools_Dictionary.fromKeys(("if|then|else|begin|end" + "|for|while|do|until|repeat|with|break|continue" + "|switch|case|default" + "|try|throw|catch|finally" + "|exit|return|wait" + "|enum|var|globalvar|static").split("|"),true);
gml_GmlAPI.kwCompExprStat = (function($this) {
	var $r;
	var items = [];
	{
		items.push({ name : "self", value : "self", score : 0, meta : "keyword", doc : null});
		items.push({ name : "other", value : "other", score : 0, meta : "keyword", doc : null});
		items.push({ name : "global", value : "global", score : 0, meta : "keyword", doc : null});
		items.push({ name : "noone", value : "noone", score : 0, meta : "keyword", doc : null});
	}
	$r = items;
	return $r;
}(this));
gml_GmlAPI.kwCompStat = (function($this) {
	var $r;
	var items = [];
	{
		items.push({ name : "if", value : "if", score : 0, meta : "keyword", doc : null});
		items.push({ name : "else", value : "else", score : 0, meta : "keyword", doc : null});
		items.push({ name : "for", value : "for", score : 0, meta : "keyword", doc : null});
		items.push({ name : "while", value : "while", score : 0, meta : "keyword", doc : null});
		items.push({ name : "do", value : "do", score : 0, meta : "keyword", doc : null});
		items.push({ name : "until", value : "until", score : 0, meta : "keyword", doc : null});
		items.push({ name : "repeat", value : "repeat", score : 0, meta : "keyword", doc : null});
		items.push({ name : "with", value : "with", score : 0, meta : "keyword", doc : null});
		items.push({ name : "break", value : "break", score : 0, meta : "keyword", doc : null});
		items.push({ name : "continue", value : "continue", score : 0, meta : "keyword", doc : null});
		items.push({ name : "switch", value : "switch", score : 0, meta : "keyword", doc : null});
		items.push({ name : "case", value : "case", score : 0, meta : "keyword", doc : null});
		items.push({ name : "default", value : "default", score : 0, meta : "keyword", doc : null});
		items.push({ name : "exit", value : "exit", score : 0, meta : "keyword", doc : null});
		items.push({ name : "return", value : "return", score : 0, meta : "keyword", doc : null});
		items.push({ name : "var", value : "var", score : 0, meta : "keyword", doc : null});
		items.push({ name : "globalvar", value : "globalvar", score : 0, meta : "keyword", doc : null});
	}
	$r = items;
	return $r;
}(this));
gml_GmlAPI.scopeResetRx = new RegExp("^(?:#define|#event|#moment|#target|function)[ \t]+([\\w:]+)","");
gml_GmlAPI.scopeResetRxNF = new RegExp("^(?:#define|#event|#moment|#target)[ \t]+([\\w:]+)","");
gml_GmlAPI.ukSpelling = false;
gml_GmlAPI.forceTemplateStrings = false;
gml_GmlAPI.stdDoc = Object.create(null);
gml_GmlAPI.stdComp = [];
gml_GmlAPI.stdKind = Object.create(null);
gml_GmlAPI.stdTypeExists = Object.create(null);
gml_GmlAPI.featherAliases = Object.create(null);
gml_GmlAPI.stdTypes = Object.create(null);
gml_GmlAPI.stdInstComp = [];
gml_GmlAPI.stdInstCompMap = Object.create(null);
gml_GmlAPI.stdInstKind = Object.create(null);
gml_GmlAPI.stdInstType = Object.create(null);
gml_GmlAPI.stdNamespaceDefs = [];
gml_GmlAPI.stdFieldHints = [];
gml_GmlAPI.stdTypedefs = Object.create(null);
gml_GmlAPI.extDoc = Object.create(null);
gml_GmlAPI.extKind = Object.create(null);
gml_GmlAPI.extComp = [];
gml_GmlAPI.extArgc = Object.create(null);
gml_GmlAPI.extCompMap = Object.create(null);
gml_GmlAPI.gmlDoc = Object.create(null);
gml_GmlAPI.gmlKind = Object.create(null);
gml_GmlAPI.gmlTypes = Object.create(null);
gml_GmlAPI.gmlTypedefs = Object.create(null);
gml_GmlAPI.gmlComp = [];
gml_GmlAPI.gmlEnums = Object.create(null);
gml_GmlAPI.gmlEnumTypeComp = [];
gml_GmlAPI.gmlMacros = Object.create(null);
gml_GmlAPI.gmlMFuncs = Object.create(null);
gml_GmlAPI.gmlAssetIDs = Object.create(null);
gml_GmlAPI.gmlAssetComp = Object.create(null);
gml_GmlAPI.gmlGlobalFieldMap = Object.create(null);
gml_GmlAPI.gmlGlobalTypes = Object.create(null);
gml_GmlAPI.gmlGlobalFieldComp = [];
gml_GmlAPI.gmlGlobalFullMap = Object.create(null);
gml_GmlAPI.gmlGlobalFullComp = [];
gml_GmlAPI.gmlInstFieldMap = Object.create(null);
gml_GmlAPI.gmlInstFieldComp = [];
gml_GmlAPI.gmlLookup = Object.create(null);
gml_GmlAPI.gmlLookupItems = [];
gml_GmlAPI.gmlNamespaces = Object.create(null);
gml_GmlAPI.gmlNamespaceComp = new tools_ArrayMap();
gml_type_GmlTypeTools.builtinTypes = ["any","Any","void","Void","bool","int","number","string","array","Array","type","Type","struct","instance"];
gml_type_GmlTypeTools.simplenameMap = tools_Dictionary.fromKeys(["string","bool","type","struct","array"],true);
gml_type_GmlTypeTools.kindMap = tools_Dictionary.fromKeys(gml_type_GmlTypeTools.builtinTypes,"namespace");
gml_type_GmlTypeTools.templateItemName = "TemplateItem";
gml_type_GmlTypeTools.templateSelfName = "TemplateSelf";
gml_GmlFuncDoc.rxIsOpt = new RegExp("^\\s*(?:" + "\\[" + "|\\?" + "|\\.\\.\\." + ")");
gml_GmlFuncDoc.__returnType_rx = new RegExp("^\\)(?:" + "➜" + "(\\S+)?)?");
gml_GmlFuncDoc.nameTrimRegex = new tools_RegExpCache();
file_FileKind.inst = new file_FileKind();
file_FileKind.map = Object.create(null);
file_FileKind.tabStateLoaders = Object.create(null);
file_kind_KGml.inst = new file_kind_KGml();
gml_type_GmlTypeDef.any = gml_type_GmlType.TInst("any",[],1);
gml_type_GmlTypeDef.void = gml_type_GmlType.TInst("void",[],5);
gml_type_GmlTypeDef.undefined = gml_type_GmlType.TInst("undefined",[],16);
gml_type_GmlTypeDef.int = gml_type_GmlType.TInst("int",[],17);
gml_type_GmlTypeDef.number = gml_type_GmlType.TInst("number",[],17);
gml_type_GmlTypeDef.bool = gml_type_GmlType.TInst("bool",[],18);
gml_type_GmlTypeDef.string = gml_type_GmlType.TInst("string",[],19);
gml_type_GmlTypeDef.ds_map = gml_type_GmlType.TInst("ds_map",[],34);
gml_type_GmlTypeDef.ds_list = gml_type_GmlType.TInst("ds_list",[],33);
gml_type_GmlTypeDef.ds_grid = gml_type_GmlType.TInst("ds_grid",[],35);
gml_type_GmlTypeDef.anyArray = gml_type_GmlType.TInst("array",[],32);
gml_type_GmlTypeDef.anyCustomKeyArray = gml_type_GmlType.TInst("ckarray",[],40);
gml_type_GmlTypeDef.forbidden = gml_type_GmlType.TInst("forbidden",[],5);
gml_type_GmlTypeDef.asset = gml_type_GmlType.TInst("asset",[],50);
gml_type_GmlTypeDef.global = gml_type_GmlType.TInst("global",[],8);
gml_type_GmlTypeDef.anyFunction = gml_type_GmlType.TInst("function",[],9);
gml_type_GmlTypeDef.methodSelf = gml_type_GmlType.TInst("methodSelf",[],64);
gml_type_GmlTypeParser.kindMeta = (function($this) {
	var $r;
	var r = Object.create(null);
	r["any"] = 1;
	r["Any"] = 1;
	r["Null"] = 3;
	r["type"] = 4;
	r["Type"] = 4;
	r["void"] = 5;
	r["Void"] = 5;
	r["TemplateItem"] = 6;
	r["TemplateSelf"] = 7;
	r["global"] = 8;
	r["function"] = 9;
	r["rest"] = 10;
	r["undefined"] = 16;
	r["int"] = 17;
	r["Int"] = 17;
	r["number"] = 17;
	r["Number"] = 17;
	r["real"] = 17;
	r["Real"] = 17;
	r["string"] = 19;
	r["String"] = 19;
	r["bool"] = 18;
	r["Bool"] = 18;
	r["boolean"] = 18;
	r["array"] = 32;
	r["Array"] = 32;
	r["ds_list"] = 33;
	r["ds_grid"] = 35;
	r["ds_map"] = 34;
	r["ckarray"] = 40;
	r["CustomKeyArray"] = 40;
	r["tuple"] = 41;
	r["object"] = 48;
	r["instance"] = 48;
	r["struct"] = 49;
	r["asset"] = 50;
	r["any_fields_of"] = 65;
	$r = r;
	return $r;
}(this));
gml_type_GmlTypeParser.cache = Object.create(null);
ace_AceStatusBar.canDocData = ace_statusbar_AceStatusBarResolver.initCanDocData();
ace_AceStatusBar.emptyToken = { type : "", value : ""};
ace_AceTooltips.spriteThumbs = Object.create(null);
ace_AceWrap.vimReady = false;
ace_extern_AceToken.__isIdent = /^\w+$/;
editors_EditKeybindings.defaultBindings = { };
electron_FileWrap.isMac = false;
electron_FileWrap.isUnix = false;
electron_WindowsAccentColors.ready = false;
file_kind_KGmx.inst = new file_kind_KGmx();
file_kind_KGmx.map = Object.create(null);
file_kind_KYy.inst = new file_kind_KYy();
file_kind_KYy.map = Object.create(null);
file_kind_KYy.rxModelName = new RegExp("(?:" + "\n  \"resourceType\":\\s*\"(\\w+)\"" + "|" + "\n    \"modelName\":\\s*\"(\\w+)\"" + ")");
file_kind_gmk_KGmkEvents.inst = new file_kind_gmk_KGmkEvents();
file_kind_gml_KGmlScript.inst = new file_kind_gml_KGmlScript();
file_kind_gml_KGmlExtension.inst = new file_kind_gml_KGmlExtension();
file_kind_gml_KGmlImports.inst = new file_kind_gml_KGmlImports();
file_kind_gml_KGmlLambdas.inst = new file_kind_gml_KGmlLambdas();
file_kind_gml_KGmlMultifile.inst = new file_kind_gml_KGmlMultifile();
file_kind_gml_KGmlSearchResults.inst = new file_kind_gml_KGmlSearchResults();
file_kind_gml_KGmlSearchResults.nextId = 0;
file_kind_gmx_KGmxEvents.inst = new file_kind_gmx_KGmxEvents();
file_kind_gmx_KGmxExtensionAPI.inst = new file_kind_gmx_KGmxExtensionAPI();
file_kind_gmx_KGmxMoments.inst = new file_kind_gmx_KGmxMoments();
file_kind_gmx_KGmxSprite.inst = new file_kind_gmx_KGmxSprite();
file_kind_misc_KExtern.inst = new file_kind_misc_KExtern();
file_kind_misc_KGLSL.inst = new file_kind_misc_KGLSL();
file_kind_misc_KHLSL.inst = new file_kind_misc_KHLSL();
file_kind_misc_KJavaScript.inst = new file_kind_misc_KJavaScript();
file_kind_misc_KKeybindings.inst = new file_kind_misc_KKeybindings();
file_kind_misc_KPlain.inst = new file_kind_misc_KPlain();
file_kind_misc_KPreferences.inst = new file_kind_misc_KPreferences();
file_kind_misc_KProjectProperties.inst = new file_kind_misc_KProjectProperties();
file_kind_misc_KSnippets.inst = new file_kind_misc_KSnippets();
file_kind_yy_KYyEvents.inst = new file_kind_yy_KYyEvents();
file_kind_yy_KYyExtension.inst = new file_kind_yy_KYyExtension();
file_kind_yy_KYyExtension.rxValidName = new RegExp("^\\w+$");
file_kind_yy_KYyExtensionAPI.inst = new file_kind_yy_KYyExtensionAPI();
file_kind_yy_KYyFont.inst = new file_kind_yy_KYyFont();
file_kind_yy_KYyMoments.inst = new file_kind_yy_KYyMoments();
file_kind_yy_KYyRoomCCs.inst = new file_kind_yy_KYyRoomCCs();
file_kind_yy_KYyShader.inst = new file_kind_yy_KYyShader();
file_kind_yy_KYySound.inst = new file_kind_yy_KYySound();
file_kind_yy_KYySprite.inst = new file_kind_yy_KYySprite();
file_kind_yy_KYyUnknown.inst = new file_kind_yy_KYyUnknown();
file_kind_yy_KYyUnknown.rxParentPath = new RegExp("\n  \"parent\":\\s*\\{" + "[^}]*\"path\":\\s*\"([^\"]+?)(\\.yy)?\"");
file_kind_yy_KYyUnknown.rxName = new RegExp("\n  \"name\": \"([^\"]+)");
file_kind_yy_KYyUnknown.rxResourceType = new RegExp("\n  \"resourceType\": \"([^\"]+)");
gmx_GmxActionImpl.rxActionPre = new RegExp("^#action\\b");
gmx_GmxActionImpl.rxActionSplit = new RegExp("^(\\w+\\b|\\{|\\}|//)\\s*(.*)$");
gmk_GmkAction.impl = new gmk_GmkActionImpl();
gmk_GmkEvent.categories = ["CREATE","DESTROY","ALARM","STEP","COLLISION","KEYBOARD","MOUSE","OTHER","DRAW","KEYPRESS","KEYRELEASE","TRIGGER"];
gmk_GmkEvent.rxHeader = new EReg("^////?(.*)","");
gml_GmlAPILoader.getContent_rx = new RegExp("\r\n","g");
gml_GmlAPILoader.rxInsertBefore = /^\[\+(\w+)\]\s*(.+)$/gm;
gml_GmlAPILoader.rxReplace = /^(\w+).+$/gm;
gml_GmlExtensionAPI.kindMap = { "gms1" : file_kind_gmx_KGmxExtensionAPI.inst, "gms2" : file_kind_yy_KYyExtensionAPI.inst};
gml_GmlImports.defaultMap = Object.create(null);
gml_GmlLocals.defaultMap = Object.create(null);
gml_Project.nameNode = document.querySelector("#project-name");
gml_Project.rxName = new EReg("^.+[/\\\\](\\w+)\\.\\w+$","g");
gml_funcdoc_GmlFuncDocArgsRet.rxHasArgArray = new RegExp("\\bargument\\b\\s*\\[");
gml_funcdoc_GmlFuncDocCheapArgs.autogen_argi = (function($this) {
	var $r;
	var _g = [];
	{
		_g.push(new RegExp("\\bargument" + 0 + "\\b"));
		_g.push(new RegExp("\\bargument" + 1 + "\\b"));
		_g.push(new RegExp("\\bargument" + 2 + "\\b"));
		_g.push(new RegExp("\\bargument" + 3 + "\\b"));
		_g.push(new RegExp("\\bargument" + 4 + "\\b"));
		_g.push(new RegExp("\\bargument" + 5 + "\\b"));
		_g.push(new RegExp("\\bargument" + 6 + "\\b"));
		_g.push(new RegExp("\\bargument" + 7 + "\\b"));
		_g.push(new RegExp("\\bargument" + 8 + "\\b"));
		_g.push(new RegExp("\\bargument" + 9 + "\\b"));
		_g.push(new RegExp("\\bargument" + 10 + "\\b"));
		_g.push(new RegExp("\\bargument" + 11 + "\\b"));
		_g.push(new RegExp("\\bargument" + 12 + "\\b"));
		_g.push(new RegExp("\\bargument" + 13 + "\\b"));
		_g.push(new RegExp("\\bargument" + 14 + "\\b"));
		_g.push(new RegExp("\\bargument" + 15 + "\\b"));
	}
	$r = _g;
	return $r;
}(this));
gml_funcdoc_GmlFuncDocCheapArgs.autogen_argoi = (function($this) {
	var $r;
	var _g = [];
	{
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 0 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 1 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 2 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 3 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 4 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 5 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 6 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 7 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 8 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 9 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 10 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 11 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 12 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 13 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 14 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 15 + "\\s*\\]"));
	}
	$r = _g;
	return $r;
}(this));
gml_funcdoc_GmlFuncDocCheapArgs.autogen_argo = new RegExp("\\bargument\\b");
gml_funcdoc_GmlFuncDocFromCode.rxArg = new RegExp("\\bargument(?:" + "(\\d+)" + "|\\s*\\[\\s*(?:(\\d+)\\s*\\])?" + ")","g");
gml_funcdoc_GmlFuncDocFromCode.rxHasVarArg = new RegExp("\\bargument_count\\b");
gml_funcdoc_GmlFuncDocFromCode.rxHasReturn = new RegExp("\\breturn\\b\\s*[^;]");
gml_funcdoc_GmlFuncDocParser.rxTemplate = new RegExp("^(.*)" + "<(.+?)>\\(");
gml_funcdoc_GmlFuncDocParser.rxArgType = new RegExp("(?:" + ["/\\*:" + "(.+?)" + "\\*/",":([^=]+)"].join("|") + ")");
gml_type_GmlTypeKind.__ready = (function($this) {
	var $r;
	var _hxClasses = $hxClasses;
	if(Object.prototype.hasOwnProperty.call(_hxClasses,"gml.type.GmlTypeKind")) {
		throw haxe_Exception.thrown("Redefinition of " + "gml.type.GmlTypeKind");
	}
	_hxClasses["gml.type.GmlTypeKind"] = { KAny : 1, KCustom : 2, KNullable : 3, KType : 4, KVoid : 5, KTemplateItem : 6, KTemplateSelf : 7, KGlobal : 8, KFunction : 9, KRest : 10, KUndefined : 16, KNumber : 17, KBool : 18, KString : 19, KArray : 32, KList : 33, KMap : 34, KGrid : 35, KCustomKeyArray : 40, KTuple : 41, KObject : 48, KStruct : 49, KAsset : 50, KMethodSelf : 64, KAnyFieldsOf : 65};
	$r = true;
	return $r;
}(this));
gml_type_GmlTypeCanCastTo.isExplicit = false;
gml_type_GmlTypeCanCastTo.allowVoidCast = false;
gml_type_GmlTypeCanCastTo.isBoolOp = false;
gml_type_GmlTypeCanCastTo.allowImplicitNullCast = false;
gml_type_GmlTypeCanCastTo.allowImplicitBoolIntCasts = false;
gml_type_GmlTypeCanCastTo.allowNullToAny = false;
gmx_GmxAction.impl = new gmx_GmxActionImpl();
gmx_GmxEvent.rxHeader = new EReg("^////?(.*)","");
gmx_GmxLoader.assetTypes = ["sprite","background","sound","path","font","shader","timeline","script","object","room"];
gmx_GmxLoader.rxAssetName = new EReg("^.+[/\\\\](\\w+)(?:\\.[\\w.]+)?$","g");
gmx_GmxLoader.allConfigs = "All configurations";
gmx_GmxObjectProperties.propertyList = ["parent_index","sprite_index","mask_index","visible","solid","persistent","uses_physics","physics_density","physics_restitution","physics_collision_group","physics_linear_damping","physics_angular_damping","physics_friction","physics_sensor","physics_start_awake","physics_kinematic","physics_shape","physics_shape_data"];
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
parsers_GmlEvent.t2s = [];
parsers_GmlEvent.t2sc = [];
parsers_GmlEvent.s2t = Object.create(null);
parsers_GmlEvent.i2s = [];
parsers_GmlEvent.s2i = Object.create(null);
parsers_GmlEvent.comp = [];
parsers_GmlHeader.rx1 = new RegExp("^///(.*)(?:\r?\n|$)");
parsers_GmlHeader.rx2 = new RegExp("^/// @(description|desc)?( .*)(?:\r?\n|$)");
parsers_GmlKeycode.comp = [];
parsers_GmlKeycode.names = parsers_GmlKeycode.initNames();
parsers_GmlKeycode.codes = parsers_GmlKeycode.initCodes(parsers_GmlKeycode.names);
parsers_GmlSeekData.map = Object.create(null);
parsers_GmlSeekData.blank = new parsers_GmlSeekData(null);
parsers_GmlSeeker.itemsLeft = 0;
parsers_GmlSeeker.itemQueue = [];
parsers_GmlSeeker.lastLabelUpdateTime = 0;
parsers_linter_GmlLinterFuncLiteral.defaultOptions = { };
parsers_linter_GmlLinterIdent.isLocal = false;
parsers_linter_GmlLinterKind.__isUnOp = parsers_linter_GmlLinterKindSet._new([24,25]);
parsers_linter_GmlLinterKind.__isBinOp = parsers_linter_GmlLinterKindSet._new([24,25,26,27,28,29,14,15,16,18,17,19,30,31,32,33,34,20,21,22]);
parsers_linter_GmlLinterKind.__binOpPriority = (function($this) {
	var $r;
	var pr = new Array(98);
	{
		var _g = 0;
		while(_g < 98) pr[_g++] = -4;
	}
	pr[26] = 0;
	pr[27] = 1;
	pr[29] = 2;
	pr[28] = 4;
	pr[24] = 16;
	pr[25] = 17;
	pr[33] = 32;
	pr[34] = 33;
	pr[31] = 48;
	pr[30] = 49;
	pr[32] = 50;
	pr[12] = 64;
	pr[14] = 64;
	pr[15] = 65;
	pr[16] = 66;
	pr[17] = 67;
	pr[18] = 68;
	pr[19] = 69;
	pr[20] = 80;
	pr[22] = 81;
	pr[21] = 96;
	$r = pr;
	return $r;
}(this));
parsers_linter_GmlLinterKind.__isSetOp = parsers_linter_GmlLinterKindSet._new([13]);
parsers_linter_GmlLinterKind.__canSet = parsers_linter_GmlLinterKindSet._new([4,45]);
parsers_linter_GmlLinterKind.__isStat = parsers_linter_GmlLinterKindSet._new([12,44,36,37,76,78]);
parsers_linter_GmlLinterKind.__canCall = parsers_linter_GmlLinterKindSet._new([4,45,90,76]);
parsers_linter_GmlLinterKind.__noSemico = parsers_linter_GmlLinterKindSet._new([40,64,80,82,81,84,69,87,89,88,10,11,76]);
parsers_linter_GmlLinterKind.__canPostfix = parsers_linter_GmlLinterKindSet._new([4,45,46]);
parsers_linter_GmlLinterKind.__ready = (function($this) {
	var $r;
	var _hxClasses = $hxClasses;
	if(Object.prototype.hasOwnProperty.call(_hxClasses,"parsers.linter.GmlLinterKind")) {
		throw haxe_Exception.thrown("Redefinition of " + "parsers.linter.GmlLinterKind");
	}
	_hxClasses["parsers.linter.GmlLinterKind"] = { KEOF : 0, KString : 1, KNumber : 2, KUndefined : 3, KIdent : 4, KVar : 5, KGlobalVar : 6, KConst : 7, KLet : 8, KGhostVar : 9, KMacro : 10, KEnum : 11, KSet : 12, KSetOp : 13, KEQ : 14, KNE : 15, KLT : 16, KLE : 17, KGT : 18, KGE : 19, KBoolAnd : 20, KBoolOr : 21, KBoolXor : 22, KNot : 23, KAdd : 24, KSub : 25, KMul : 26, KDiv : 27, KIntDiv : 28, KMod : 29, KAnd : 30, KOr : 31, KXor : 32, KShl : 33, KShr : 34, KBitNot : 35, KInc : 36, KDec : 37, KParOpen : 38, KParClose : 39, KCubOpen : 40, KCubClose : 41, KSqbOpen : 42, KSqbClose : 43, KCall : 44, KField : 45, KArray : 46, KNullField : 47, KNullArray : 48, KSemico : 49, KDot : 50, KComma : 51, KHash : 52, KQMark : 53, KColon : 54, KAtSign : 55, KDollar : 56, KNullCoalesce : 57, KNullDot : 58, KNullSqb : 59, KArrow : 60, KArrowFunc : 61, KCast : 62, KAs : 63, KIf : 64, KThen : 65, KElse : 66, KReturn : 67, KExit : 68, KSwitch : 69, KDefault : 70, KCase : 71, KTry : 72, KCatch : 73, KFinally : 74, KThrow : 75, KFunction : 76, KStatic : 77, KNew : 78, KDelete : 79, KFor : 80, KDo : 81, KWhile : 82, KUntil : 83, KRepeat : 84, KBreak : 85, KContinue : 86, KWith : 87, KMFuncDecl : 88, KArgs : 89, KLambda : 90, KLamDef : 91, KImport : 92, KYield : 93, KLabel : 94, KGoto : 95, KLiveIn : 96, KLiveWait : 97, KMaxKind : 98, getIndex : function(_this) {
		return _this;
	}, getName : function(_this) {
		return parsers_linter_GmlLinterKind.getName(_this);
	}, isUnOp : function(_this) {
		return parsers_linter_GmlLinterKind.__isUnOp[_this];
	}, isBinOp : function(_this) {
		return parsers_linter_GmlLinterKind.__isBinOp[_this];
	}, getBinOpPriority : function(_this) {
		return parsers_linter_GmlLinterKind.__binOpPriority[_this];
	}, getMaxBinPriority : parsers_linter_GmlLinterKind.getMaxBinPriority, isSetOp : function(_this) {
		return parsers_linter_GmlLinterKind.__isSetOp[_this];
	}, canSet : function(_this) {
		return parsers_linter_GmlLinterKind.__canSet[_this];
	}, isStat : function(_this) {
		return parsers_linter_GmlLinterKind.__isStat[_this];
	}, canCall : function(_this) {
		return parsers_linter_GmlLinterKind.__canCall[_this];
	}, needSemico : function(_this) {
		return !parsers_linter_GmlLinterKind.__noSemico[_this];
	}, canPostfix : function(_this) {
		return parsers_linter_GmlLinterKind.__canPostfix[_this];
	}};
	$r = true;
	return $r;
}(this));
parsers_linter_GmlLinterPrefs.defValue = { onLoad : true, onSave : true, requireSemicolons : false, requireParentheses : false, noSingleEquals : false, blockScopedVar : false, blockScopedCase : false, requireFunctions : true, checkHasReturn : true, checkScriptArgumentCounts : true, addMissingArgsToJSDoc : true, specTypeVar : false, specTypeStatic : false, specTypeLet : false, specTypeConst : false, specTypeMisc : false, specTypeInst : false, specTypeColon : false, specTypeInstSubTopLevel : false, requireFields : false, implicitNullableCasts : false, implicitBoolIntCasts : true, warnAboutRedundantCasts : false, strictScriptSelf : false, liveCheckOnEnter : false, liveCheckOnSemico : false, liveMaxLines : 100, liveMinDelay : 250, liveIdleDelay : 0, liveIdleMaxLines : 300};
parsers_linter_misc_GmlLinterBufferAutoType.map = { "buffer_bool" : gml_type_GmlTypeDef.bool, "buffer_u8" : gml_type_GmlTypeDef.int, "buffer_s8" : gml_type_GmlTypeDef.int, "buffer_u16" : gml_type_GmlTypeDef.int, "buffer_s16" : gml_type_GmlTypeDef.int, "buffer_u32" : gml_type_GmlTypeDef.int, "buffer_s32" : gml_type_GmlTypeDef.int, "buffer_u64" : gml_type_GmlTypeDef.int, "buffer_f16" : gml_type_GmlTypeDef.number, "buffer_f32" : gml_type_GmlTypeDef.number, "buffer_f64" : gml_type_GmlTypeDef.number, "buffer_text" : gml_type_GmlTypeDef.string, "buffer_string" : gml_type_GmlTypeDef.string};
parsers_linter_misc_GmlLinterJSDocFlag.comp = [];
parsers_linter_misc_GmlLinterJSDocFlag.map = parsers_linter_misc_GmlLinterJSDocFlag.init();
parsers_seeker_GmlSeekerImpl.privateFieldRC = new tools_RegExpCache();
parsers_seeker_GmlSeekerImpl.privateGlobalRC = new tools_RegExpCache();
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_full = new RegExp("^///\\s*" + "\\w*[ \t]*(\\(.+)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_func = new RegExp("^///\\s*" + "@func\\s+" + "(\\w+)\\s*" + "\\(" + "(.*)" + "(\\).*)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_param = new RegExp("^///\\s*" + "@(?:arg|param|argument)\\s+" + "(?:\\{" + "(.*?)" + "\\}\\s*)?" + "(" + "(\\S+)" + "(\\s+=" + "(.+)" + ")?)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_hint = new RegExp("^///\\s*" + "@hint\\b\\s*" + "(?:\\{(.+)?\\}\\s*)?" + "(new\\b\\s*)?" + "(.+)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_hint_extimpl = new RegExp("^///\\s*" + "@hint\\b\\s*" + "(\\w+)" + "(?:<.*?>)?" + "\\b\\s*" + "(extends|implements)" + "\\b\\s*" + "(\\w+)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_self = new RegExp("^///\\s*" + "@(?:self|this)\\b\\s*" + "\\{(\\w+)\\}");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_return = new RegExp("^///\\s*" + "@return(?:s)?\\b\\s*" + "\\{(.*?)\\}");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_implements = new RegExp("^///\\s*" + "@implement(?:s)?" + "(?:\\b\\s*\\{(\\w+)\\})?");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_implements_line = new RegExp("^\\s*(\\w+)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_interface = new RegExp("^///\\s*" + "@interface\\b\\s*" + "(?:\\{(\\w+)\\})?");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_is = new RegExp("^///\\s*" + "@is(?:s)?" + "\\b\\s*\\{(.+?)\\}" + "\\s*(.*)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_is_line = new RegExp("^\\s*(?:" + ["globalvar\\s+(" + "[_a-zA-Z]\\w*" + "(?:\\s*,\\s*" + "[_a-zA-Z]\\w*" + ")*)","global\\s*\\.\\s*(" + "[_a-zA-Z]\\w*" + ")\\s*=","(?:static\\s+)?(" + "[_a-zA-Z]\\w*" + ")\\s*="].join("|") + ")");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_template = new RegExp("^///\\s*" + "@template\\b\\s*" + "(?:\\{(.*?)\\}\\s*)?" + "(\\S+)");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_typedef = new RegExp("^///\\s*" + "@typedef\\b\\s*" + "\\{(.*?)\\}\\s*" + "(\\w+)\\s*" + "(?:<(.*?)>)?");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_static = new RegExp("^///\\s*" + "@static\\b\\s*");
parsers_seeker_GmlSeekerJSDocRegex.jsDoc_index_redirect = new RegExp("^///\\s*" + "@index_redirect\\b\\s*" + "(.*)");
parsers_seeker_GmlSeekerJSDocRegex.gmlDoc_full = new RegExp("^\\s*\\w*\\s*\\(.*\\)");
parsers_seeker_GmlSeekerProcDefine.patchMissingArgs_rx = new RegExp("^\\s*(\\w+)(\\s*=.*)$");
parsers_seeker_GmlSeekerProcEnum.parseConst_rx10 = new RegExp("^-?\\d+$");
parsers_seeker_GmlSeekerProcEnum.parseConst_rx16 = new RegExp("^(?:0x|\\$)([0-9a-fA-F]+)$");
parsers_seeker_GmlSeekerProcEnum.maxTupleTypes = 256;
parsers_seeker_GmlSeekerProcEnum.jsDoc_enumField_is_line = new RegExp("^\\s*" + ("(" + "[_a-zA-Z]\\w*" + "(?:\\s*,\\s*" + "[_a-zA-Z]\\w*" + ")*)"));
parsers_seeker_GmlSeekerProcExpr.isConstructor = false;
parsers_seeker_GmlSeekerProcExpr.isFunction = false;
parsers_seeker_GmlSeekerProcVar.localType = new RegExp("^/\\*[ \t]*:[ \t]*(\\w+)\\*/$");
ui_Sidebar.list = [];
ui_Sidebar.map = Object.create(null);
plugins_PluginAPI.sidebar = ui_Sidebar;
plugins_PluginAPI.aceTools = ace_AceTools;
plugins_PluginManager.pluginList = [];
plugins_PluginManager.pluginMap = Object.create(null);
plugins_PluginManager.pluginDir = Object.create(null);
plugins_PluginManager.registerMap = Object.create(null);
plugins_PluginManager.ready = false;
shaders_ShaderHighlight.nextKind = 1;
synext_GmlExtArgs.rxOpt = synext_GmlExtArgs.rxOpt_init();
synext_GmlExtArgs.rxHasOpt = new RegExp("(?:\\?|=|,\\s*$)");
synext_GmlExtArgs.rxHasTail = new RegExp(",\\s*$");
synext_GmlExtArgs.rxNotMagic = new RegExp("var\\s+\\w+\\s*=\\s*" + "argument(?:\\s*\\[\\s*\\d+\\s*\\]|\\d+)","g");
synext_GmlExtArgs.argKeywords = (function($this) {
	var $r;
	var out = Object.create(null);
	out["argument"] = true;
	{
		out["argument" + 0] = true;
		out["argument" + 1] = true;
		out["argument" + 2] = true;
		out["argument" + 3] = true;
		out["argument" + 4] = true;
		out["argument" + 5] = true;
		out["argument" + 6] = true;
		out["argument" + 7] = true;
		out["argument" + 8] = true;
		out["argument" + 9] = true;
		out["argument" + 10] = true;
		out["argument" + 11] = true;
		out["argument" + 12] = true;
		out["argument" + 13] = true;
		out["argument" + 14] = true;
		out["argument" + 15] = true;
	}
	$r = out;
	return $r;
}(this));
synext_GmlExtArgsDoc.rxGmDocStart = new RegExp("^(///\\s*)$");
synext_GmlExtArgsDoc.rxGmDoc = new RegExp("^(///\\s*\\w*\\()(.*?)(\\).*)$");
synext_GmlExtArgsDoc.rxAfter = new RegExp("^///\\s*@(?:func|function|description|desc)");
synext_GmlExtArgsDoc.rxArg = new RegExp("^(///" + "(\\s*)" + "(@(?:arg|param|argument))" + "(\\s+)" + "(?:{(.+?)}(\\s+))?" + "(\\S+)" + "(\\s*)" + ")(.*)");
synext_GmlExtArgsDoc.rxSimpleVal = new RegExp("^\\s*=\\s*(\\S+)\\s*$");
synext_GmlExtArrowFunctions.inst = new synext_GmlExtArrowFunctions();
synext_GmlExtCast.inst = new synext_GmlExtCast();
synext_GmlExtCoroutines.keywordMap0 = Object.create(null);
synext_GmlExtCoroutines.keywordMap1 = tools_Dictionary.fromKeys(["yield","label","goto"],"keyword");
synext_GmlExtCoroutines.keywordMap = synext_GmlExtCoroutines.keywordMap0;
synext_GmlExtCoroutines.enabled = false;
synext_GmlExtCoroutines.markRx = new RegExp("^#gmcr","m");
synext_GmlExtHashColorLiterals.inst = new synext_GmlExtHashColorLiterals();
synext_GmlExtHyper.inst = new synext_GmlExtHyper();
synext_GmlExtImport.inst = new synext_GmlExtImportWrap();
synext_GmlExtImport.rxImport = new RegExp("^#import[ \t]+(?:" + "([\\w.]+\\*?)" + "(?:" + "[ \t]+(?:in|as)" + "[ \t]+(\\w+)" + "(?:([:\\.])(\\w+)?)?" + ")?" + "[ \t]*(?:[\r\n]|$)" + ")","");
synext_GmlExtImport.rxImportFile = new RegExp("^#import[ \t]+(\"[^\"]*\"|'[^']*')","");
synext_GmlExtImport.rxLocalType = new RegExp("^" + ("(?:" + ("(?=\\/\\*" + "[ \t]*:[ \t]*" + "\\w+(?:[ \t]*<.*?>)?" + "\\*\\/)\\/\\*|") + ("(?!" + "[ \t]*:[ \t]*" + "\\w+(?:[ \t]*<.*?>)?" + "\\*\\/)") + (")" + "[ \t]*:[ \t]*" + "(" + "\\w+(?:[ \t]*<.*?>)?" + ")(?:\\*\\/)?")) + "$");
synext_GmlExtImport.rxPeriod = new RegExp("\\.","g");
synext_GmlExtImport.rxHasHint = new RegExp("///\\s+@hint");
synext_GmlExtImport.rxHasTypePost = new RegExp("(?:" + ["(?:" + ["(?:var|let|const)\\s+","#args\\s+",",\\s*","\\(\\s*"].join("|") + ")\\w+:","\\)->"].join("|") + ")");
synext_GmlExtImport.rxHasTypePre = new RegExp("(?:" + ["(?:" + ["(?:var|let|const)\\s+","#args\\s+",",\\s*","\\(\\s*"].join("|") + ")\\w+" + "(?:/\\*)?" + ":","\\)/\\*->"].join("|") + ")");
synext_GmlExtImport.pre_needsCache = new RegExp("\n#(?:define|event|moment|target)\\b");
synext_GmlExtImport.post_numImports = 0;
synext_GmlExtImport.post_procIdent_p1 = 0;
synext_GmlExtImport.post_procIdent_peeker = new parsers_GmlReaderExt("",gml_GmlVersion.none);
yy_YyGUID.test = new RegExp("^" + "[0-9a-fA-F]" + "{8}-" + "[0-9a-fA-F]" + "{4}-" + "[0-9a-fA-F]" + "{4}-" + "[0-9a-fA-F]" + "{4}-" + "[0-9a-fA-F]" + "{12}" + "$");
yy_YyJsonPrinter.isExt = false;
yy_YyJsonPrinter.wantCompact = false;
yy_YyJsonPrinter.trailingCommas = false;
yy_YyJsonPrinter.wantPrefixFields = false;
yy_YyJsonPrinter.isGM2023 = false;
yy_YyJsonPrinter.mvcOrder22 = ["configDeltas","id","modelName","mvc","name"];
yy_YyJsonPrinter.mvcOrder23 = ["parent","resourceVersion","name","path","tags","resourceType"];
yy_YyJsonPrinter.rv1_6_prefixFieldList = ["resourceType","resourceVersion","name"];
yy_YyJsonPrinter.rv1_6_prefixFieldMap = tools_Dictionary.fromKeys(yy_YyJsonPrinter.rv1_6_prefixFieldList,true);
yy_YyJsonPrinter.orderByModelName = (function($this) {
	var $r;
	var q = Object.create(null);
	var plain = ["id","modelName","mvc"];
	q["GMExtensionFunction"] = plain.concat([]);
	q["GMEvent"] = plain.concat(["IsDnD"]);
	$r = q;
	return $r;
}(this));
yy_YyJsonPrinter.metaByModelName = yy_YyJsonMeta.initByModelName();
yy_YyJsonPrinter.metaByResourceType = yy_YyJsonMeta.initByResourceType();
yy_YyJsonPrinter.metaByResourceType2023 = yy_YyJsonMeta.initByResourceType2023();
yy_YyJsonPrinter.isOrderedCache = new haxe_ds_ObjectMap();
yy_YyJsonPrinter.fieldComparator = (function($this) {
	var $r;
	var tmp;
	try {
		tmp = ($_=new Intl.Collator(),$bind($_,$_.compare));
	} catch( _g ) {
		tmp = function(a,b) {
			if(a.toLowerCase() > b.toLowerCase()) {
				return 1;
			} else {
				return -1;
			}
		};
	}
	$r = tmp;
	return $r;
}(this));
yy_YyJsonPrinter.indentString = "    ";
synext_GmlExtLambda.inst = new synext_GmlExtLambdaWrap();
synext_GmlExtLambda.seekData = new parsers_GmlSeekData(file_kind_gml_KGmlLambdas.inst);
synext_GmlExtLambda.seekPath = "";
synext_GmlExtLambda.rxlfPrefix = new RegExp("^__lf_");
synext_GmlExtLambda.rxlcPrefix = new RegExp("^__lc_");
synext_GmlExtLambda.rxLambdaArgsSp = new RegExp("^([ \t]*)([\\s\\S]*)([ \t]*)$");
synext_GmlExtLambda.rxLambdaPre = new RegExp("^" + "(?:///.*\r?\n)?" + "(//!#lambda" + "([ \t]*)(\\$|\\w+)" + "([ \t]*)(?:\\(([ \t]*)\\$([ \t]*)\\))?" + ".*\r?\n)" + "(?:#args\\b[ \t]*(.+)\r?\n)?" + "([\\s\\S]*)$");
synext_GmlExtLambda.rxLambdaDef = new RegExp("^/\\*!#lamdef (\\w+)\\*/");
synext_GmlExtLambda.postMap = { "gms1" : synext_GmlExtLambda.postGMS1, "gms2" : synext_GmlExtLambda.postGMS2};
synext_GmlExtLambda.readDefs_rx = new RegExp("^///\\s*((" + "__lf_" + "\\w+).+)","gm");
synext_GmlExtMFunc.inst = new synext_GmlExtMFuncWrap();
synext_GmlExtMFunc.magicRegex = "";
synext_GmlExtMFunc.magicMap = synext_GmlExtMFunc.__magicMap_init();
synext_GmlExtTemplateStrings.inst = new synext_GmlExtTemplateStrings();
synext_GmlExtTemplateStrings.rxWord = new RegExp("^\\w+$");
synext_GmlNullCoalescingAssignment.inst = new synext_GmlNullCoalescingAssignment();
synext_GmlNullCoalescingAssignment.rxPre = new RegExp("if" + "(\\s*)" + "\\(" + "([^()]+?)" + "(\\s*)" + "==" + "(\\s*)" + "undefined" + "\\)" + "(\\s*)" + "([^()]+?)" + "(\\s*)" + "=","g");
synext_GmlNullCoalescingOperator.inst = new synext_GmlNullCoalescingOperator();
tools_ArrayMapSync.__changeID = 0;
tools_GmlCodeTools.operatorKeywords = tools_GmlCodeTools.mapKws(["not","and","or","xor","div","mod"]);
tools_NativeString.trimTrailBreak_1 = new RegExp("^([\\s\\S]*?)(\r?\n)?$","g");
tools_NativeString.escapeRx_1 = new RegExp("([.*+?^${}()|[\\]\\/\\\\])","g");
tools_NativeString.escapeProp_1 = new RegExp("([\"\\\\])","g");
tools_NativeString.yyJson_1 = new RegExp("([ \t]+)(\".*\": )\\[\\]","g");
tools_NativeString.yyJson_2 = new RegExp("\\n","g");
tools_PathTools.ptJoin = Reflect.makeVarArgs(function(args) {
	return haxe_io_Path.join(args);
});
tools_StringBuilder.formatCache = new haxe_ds_StringMap();
tools_StringBuilder.formatMap = tools_StringBuilder.formatInit();
ui_ChromeTabs.pathHistory = [];
ui_ChromeTabs.attrContext = "data-context";
ui_ColorPicker.isBGR = true;
ui_CommandPalette.lookupMap = new haxe_ds_StringMap();
ui_CommandPalette.lookupItems = [];
ui_GlobalLookup.pool = [];
ui_GlobalLookup.current = "";
ui_GlobalLookup.kindFiltersStr = "";
ui_GlobalLookup.kindFilterCheckboxState = Object.create(null);
ui_GlobalLookup.assetHintMapper = Object.create(null);
ui_KeyboardShortcuts.pressedKeys = Object.create(null);
ui_KeyboardShortcuts.ctrlAltTimestamp = 0.;
ui_KeyboardShortcuts.rxMod = new RegExp("\\bmod\\-");
ui_KeyboardShortcuts.rxWebMod = new RegExp("\\bmodw\\-");
ui_Preferences.path = "user-preferences";
ui_Preferences.userPaths = [];
ui_Theme.refElement = document.getElementById("project-style");
ui_Theme.elements = (function($this) {
	var $r;
	var qry = document.querySelectorAll("link[data-is-theme]");
	var arr = [];
	{
		var _g = 0;
		while(_g < qry.length) arr.push(qry[_g++]);
	}
	$r = arr;
	return $r;
}(this));
ui_Theme.current = (function($this) {
	var $r;
	var s = document.documentElement.getAttribute("data-theme");
	$r = s != null && s != "" ? s : "default";
	return $r;
}(this));
ui_ext_Bookmarks.current = [];
ui_ext_GMLive.rxLive = new RegExp("if\\b\\s*\\(?\\s*" + "\\b(?:live_call|live_call_ext|live_defcall|live_defcall_ext)","");
ui_ext_GMLive.attr = "data-gmlive";
ui_liveweb_KLiveWeb.inst = new ui_liveweb_KLiveWeb();
ui_preferences_PrefMatchMode.names = ["Start of string (GMS1 style)","Containing (GMS2 style)","Smart (`icl` -> `io_clear`)","Per-section (`icl` -> `instance_create_layer`)"];
ui_preferences_PrefLinter.selectOpts = ["inherit","on","off"];
ui_preferences_PrefLinter.selectVals = [null,true,false];
ui_search_GlobalSeachData.sync_rx = new RegExp("// in @\\[(.+):(\\d+)\\]" + "(?:\\s*\\(.*?\\))?" + ":\r?\n(.*)","g");
ui_treeview_TreeView.attrIdent = "data-ident";
ui_treeview_TreeView.attrLabel = "data-label";
ui_treeview_TreeView.attrFilter = "data-filter";
ui_treeview_TreeView.attrPath = "data-full-path";
ui_treeview_TreeView.attrRel = "data-rel-path";
ui_treeview_TreeView.attrKind = "data-kind";
ui_treeview_TreeView.attrThumb = "data-thumb";
ui_treeview_TreeView.attrThumbDelay = "data-thumb-delay";
ui_treeview_TreeView.attrThumbSprite = "data-thumb-sprite";
ui_treeview_TreeView.attrYYID = "data-yyid";
ui_treeview_TreeView.clDir = "dir";
ui_treeview_TreeView.clItem = "item";
ui_treeview_TreeView.clOpen = "open";
ui_treeview_TreeView.thumbMap = Object.create(null);
ui_treeview_TreeView.openPaths = [];
ui_treeview_TreeViewDnD.currOrder = 0;
ui_treeview_TreeViewDnD.rxCanDropTo = new RegExp("^scripts[\\\\/]","i");
ui_treeview_TreeViewDnD.rxCanDrag = new RegExp("^scripts[\\\\/]" + ".+","i");
ui_treeview_TreeViewDnD.rxCanDrag2 = new RegExp("^[^\\\\/]+[\\\\/].","");
ui_treeview_TreeViewDnD.prefixOf_rx = new RegExp("^([^\\\\/]+)[\\\\/]","");
yy_YyLoader.assetColours = Object.create(null);
yy_YyManip.__changeParent_rx = new RegExp("(\n  \"parent\":\\s*\\{" + "\r?\n    \"name\":\\s*\")(.*?)(\"," + "\r?\n    \"path\":\\s*\")(.*?)(\")");
yy_YyObjectProperties.propertyList = ["parent_index","sprite_index","mask_index","visible","solid","persistent","uses_physics","physics_density","physics_restitution","physics_collision_group","physics_linear_damping","physics_angular_damping","physics_friction","physics_sensor","physics_start_awake","physics_kinematic","physics_shape","physics_shape_data"];
yy_YyObjectProperties.typeList = ["unknown","real","int","string","bool","expr","asset","list","mlist","color"];
yy_YyObjectProperties.assetTypes = [new yy_YyObjectPropertiesAssetFlag(1,"tileset"),new yy_YyObjectPropertiesAssetFlag(2,"sprite"),new yy_YyObjectPropertiesAssetFlag(4,"sound"),new yy_YyObjectPropertiesAssetFlag(8,"path"),new yy_YyObjectPropertiesAssetFlag(16,"script"),new yy_YyObjectPropertiesAssetFlag(32,"shader"),new yy_YyObjectPropertiesAssetFlag(64,"font"),new yy_YyObjectPropertiesAssetFlag(128,"timeline"),new yy_YyObjectPropertiesAssetFlag(256,"object"),new yy_YyObjectPropertiesAssetFlag(512,"room")];
yy_YyObjectProperties.assetTypeMap = (function($this) {
	var $r;
	var dict = Object.create(null);
	{
		var _g = 0;
		var _g1 = yy_YyObjectProperties.assetTypes;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			dict[pair.name] = pair.flag;
		}
	}
	$r = dict;
	return $r;
}(this));
yy_YyObjectProperties.assetTypeMap23 = (function($this) {
	var $r;
	var dict = Object.create(null);
	var all = [];
	var add = function(a,b) {
		all.push(a);
		dict[a] = b;
		dict[b] = a;
	};
	add("GMAnimCurve","anim_curve");
	add("GMFont","font");
	add("GMObject","object");
	add("GMPath","path");
	add("GMRoom","room");
	add("GMScript","script");
	add("GMSequence","sequence");
	add("GMShader","shader");
	add("GMSound","sound");
	add("GMSprite","sprite");
	add("GMTileSet","tileset");
	add("GMTimeline","timeline");
	yy_YyObjectProperties.allAssetTypes23 = all;
	$r = dict;
	return $r;
}(this));
yy_YyObjectProperties.rxLString = new RegExp("^(?:@'[^']*?'|@\"[^\"]*?\")$");
yy_YyObjectProperties.rxJSONish = new RegExp("^[-\\d.\"]");
yy_YyObjectProperties.propFieldOrder23 = ["varType","value","rangeEnabled","rangeMin","rangeMax","listItems","multiselect","filters"].concat(yy_YyJsonPrinter.mvcOrder23);
yy_YyObjectProperties.digitCount23 = { "rangeMin" : 1, "rangeMax" : 1};
yy_YyShaderDefaults.baseFragGLSL = "varying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main() {\r\n\tgl_FragColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n}";
yy_YyShaderDefaults.baseVertGLSL = "attribute vec3 in_Position; // (x, y, z)\r\nattribute vec4 in_Colour; // (r, g, b, a)\r\nattribute vec2 in_TextureCoord; // (u, v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main() {\r\n\tvec4 object_space_pos = vec4(in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n\tgl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n\r\n\tv_vColour = in_Colour;\r\n\tv_vTexcoord = in_TextureCoord;\r\n}";
yy_v22_YyLoaderV22.rxDatafiles = new RegExp("\\bdatafiles_yy([\\\\/])");
yy_zip_YyZip.rxBackslash = /\\/g;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
